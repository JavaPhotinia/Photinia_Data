<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void configurePathMatch(org.springframework.web.servlet.config.annotation.PathMatchConfigurer)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configurePathMatch(org.springframework.web.servlet.config.annotation.PathMatchConfigurer)>
<sun.net.www.MeteredStream: int available()>-><java.io.ByteArrayInputStream: int available()>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void setDatabase(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder: org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder of(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.util.function.Supplier)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder: void <init>(io.r2dbc.spi.ConnectionFactoryOptions$Builder)>
<org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: boolean authQop()>
<java.net.SocksSocketImpl: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: int getPort()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setOutOfOrder(boolean)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: boolean access$700(org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address,boolean)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: boolean determineSslEnabled(boolean)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext,boolean)>-><org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveListOperations opsForList(org.springframework.data.redis.serializer.RedisSerializationContext)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: byte[] getKeySpec(java.lang.String)>-><java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1: javax.management.MBeanServer getMBeanServer()>-><org.springframework.jmx.MBeanServerNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter: void setResolveHiddenInputs(java.util.function.Function)>
<java.util.stream.Node$OfDouble: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<org.springframework.util.Assert: void noNullElements(java.lang.Object[],java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Pool: int getQueueCapacity()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(char[])>
<java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.io.BufferedOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<java.io.FilterInputStream: void reset()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void reset()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration: org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryCustomizer reactiveWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.ServerProperties)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.lang.System: void load(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>-><sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>
<org.springframework.jmx.export.annotation.AnnotationMBeanExporter: void <init>()>-><org.springframework.jmx.export.naming.MetadataNamingStrategy: void <init>(org.springframework.jmx.export.metadata.JmxAttributeSource)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.stream.Node build()>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder roles(java.lang.String[])>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.info.BuildProperties: java.util.Properties processEntries(java.util.Properties)>-><org.springframework.boot.info.BuildProperties: void coerceDate(java.util.Properties,java.lang.String)>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void <init>(org.springframework.context.ApplicationEventPublisher)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$LongArraySpliterator: void forEachRemaining(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: void <init>()>-><org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactory: void <init>()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><java.io.InputStream: void close()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.Map getCorsConfigurations()>-><org.springframework.web.servlet.config.annotation.CorsRegistry: void <init>()>
<java.util.Hashtable: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.security.web.server.authentication.logout.LogoutWebFilter: void <init>()>-><org.springframework.security.core.authority.AuthorityUtils: java.util.List createAuthorityList(java.lang.String[])>
<org.springframework.security.access.method.AbstractMethodSecurityMetadataSource: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<javax.net.ssl.SSLSocketFactory: java.lang.String getSecurityProperty(java.lang.String)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>-><java.lang.String: int compareToIgnoreCase(java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactoryCustomizer: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>-><java.lang.Object: void <init>()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.net.Socket: java.io.OutputStream getOutputStream()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter: void <init>()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateCustomizer[])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: void configure(org.springframework.security.config.annotation.authentication.ProviderManagerBuilder)>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.annotation.authentication.ProviderManagerBuilder authenticationProvider(org.springframework.security.authentication.AuthenticationProvider)>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><io.lettuce.core.ClientOptions: io.lettuce.core.ClientOptions$Builder builder()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getTransactionAwareConnectionProxy(javax.sql.DataSource)>-><org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy$TransactionAwareInvocationHandler: void <init>(org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy,javax.sql.DataSource)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$IteratorSpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$DoubleArraySpliterator: long estimateSize()>
<java.security.Permission: java.lang.String toString()>-><java.net.URLPermission: java.lang.String getActions()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.boot.task.TaskSchedulerBuilder: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>
<org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.autoconfigure.flyway.FlywayProperties: void <init>()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<org.springframework.data.redis.cache.DefaultCacheStatisticsCollector: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.http.HttpClient: void openServer()>-><java.net.URL: java.lang.String getProtocol()>
<sun.net.www.MeteredStream: int available()>-><java.util.zip.InflaterInputStream: int available()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ReferrerPolicyConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ReferrerPolicyConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DeltaRecord: java.lang.String toString()>
<org.springframework.beans.factory.config.PlaceholderConfigurerSupport: void <init>()>-><org.springframework.beans.factory.config.PropertyResourceConfigurer: void <init>()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.RegexPathElement: void <init>(int,char[],boolean,char[],char)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.web.authentication.logout.LogoutSuccessEventPublishingLogoutHandler: void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)>
<java.util.Collections$SetFromMap: java.util.Spliterator spliterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Spliterator spliterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.MeteredStream: long skip(long)>-><org.apache.poi.poifs.filesystem.DocumentInputStream: long skip(long)>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryCustomizer servletWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.ServerProperties,org.springframework.beans.factory.ObjectProvider)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveHashOperations opsForHash(org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.data.redis.core.DefaultReactiveHashOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>
<java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer$PrivilegedCreateConverter: void <init>(java.nio.charset.Charset)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isBaselineOnMigrate()>
<org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter: org.springframework.security.web.server.header.ServerHttpHeadersWriter createDelegate(org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode)>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder header(java.lang.String,java.lang.String[])>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder: io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder dynamicRefreshSources(boolean)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.InputStream: void mark(int)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>-><java.net.URL: java.lang.String toExternalForm()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: boolean isIgnoreDefaultModelOnRedirect()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.TabIdRecord: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.HashMap: void <init>()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.web.client.RestTemplate: void <init>()>-><java.util.ArrayList: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.catalina.connector.Response$PrivilegedDoIsEncodable: java.lang.Boolean run()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean supportsPreemptiveAuthorization()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.List getUrlMappings()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<java.util.stream.Node$OfInt: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration: void <init>()>
<org.springframework.security.config.annotation.web.configurers.SecurityContextConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.context.SecurityContextPersistenceFilter: void setForceEagerSessionCreation(boolean)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.web.filter.RequestContextFilter: void <init>()>-><org.springframework.web.filter.OncePerRequestFilter: void <init>()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: void <init>(java.lang.String)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.bind.support.ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer(org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>
<org.javaboy.vhr.config.SecurityConfig: void lambda$loginFilter$1(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.apache.catalina.connector.CoyoteWriter: void close()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.bind.BindConverter$TypeConverterConversionService: org.springframework.beans.SimpleTypeConverter createTypeConverter(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.io.FilterInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.LinkedList$ListItr: void add(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: void openServer()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.DatabaseTypeRegister: java.lang.String redactJdbcUrl(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.MeteredStream: void close()>
<org.springframework.context.annotation.MBeanExportConfiguration: void setupServer(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>-><org.springframework.util.Assert: void state(boolean,java.lang.String)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.lang.String: int length()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.http.converter.feed.AtomFeedHttpMessageConverter: void <init>()>-><org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setUser(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object getObject()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getCredentials()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getAuth(java.lang.String,java.net.URL)>-><java.net.URL: java.lang.String getPath()>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.http.ChunkedInputStream: void close()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><org.apache.poi.poifs.filesystem.DocumentInputStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientRegistrationRepositoryConfiguration: org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository clientRegistrationRepository(org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>-><org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer: org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer mediaTypes(java.util.Map)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$LongArraySpliterator: long estimateSize()>
<org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration: org.springframework.security.config.annotation.web.configuration.AutowiredWebSecurityConfigurersIgnoreParents autowiredWebSecurityConfigurersIgnoreParents(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.security.config.annotation.web.configuration.AutowiredWebSecurityConfigurersIgnoreParents: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>
<org.apache.catalina.connector.OutputBuffer: org.apache.tomcat.util.buf.C2BConverter createConverter(java.nio.charset.Charset)>-><org.apache.catalina.connector.OutputBuffer$PrivilegedCreateConverter: void <init>(java.nio.charset.Charset)>
<sun.net.www.http.HttpClient: void openServer()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void setMaxAge(java.time.Duration)>-><java.time.Duration: long getSeconds()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.AbstractPlainSocketImpl: void close()>
<org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>-><org.springframework.boot.web.servlet.server.Jsp: void <init>()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.sybasease.SybaseASEJTDSDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>
<org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: char getSeparator()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2: javax.management.MBeanServer getMBeanServer()>-><org.springframework.jmx.support.WebSphereMBeanServerFactoryBean: void <init>()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL,java.lang.String,int)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: int characteristics()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$2(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.apache.catalina.connector.CoyoteWriter: void close()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration: org.springframework.context.support.DefaultLifecycleProcessor defaultLifecycleProcessor(org.springframework.boot.autoconfigure.context.LifecycleProperties)>-><org.springframework.boot.autoconfigure.context.LifecycleProperties: java.time.Duration getTimeoutPerShutdownPhase()>
<java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>-><java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>-><java.net.AbstractPlainSocketImpl: void setOption(int,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<com.rabbitmq.client.impl.TruncatedInputStream: void reset()>-><java.io.FilterInputStream: void reset()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$ConcatSpliterator: java.util.Spliterator trySplit()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$12: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String,int,java.net.URL)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int lastIndexOf(int)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.Thread: void setName(java.lang.String)>
<org.springframework.web.cors.UrlBasedCorsConfigurationSource: void setCorsConfigurations(java.util.Map)>-><java.util.LinkedHashMap: void forEach(java.util.function.BiConsumer)>
<org.springframework.web.context.request.AbstractRequestAttributes: void registerRequestDestructionCallback(java.lang.String,java.lang.Runnable)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isValidateMigrationNaming()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration build()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.FilterOutputStream: void flush()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.IdentityHashMap$IdentityHashMapSpliterator: long estimateSize()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: void close()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$loginFilter$0(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.apache.catalina.connector.ResponseFacade: void setContentType(java.lang.String)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: java.util.List getInterceptors()>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.apache.catalina.core.AprLifecycleListener: void terminateAPR()>-><org.apache.catalina.core.AprStatus: void setAprAvailable(boolean)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.stream.Node build()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><java.io.FileInputStream: void close()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.DatabaseTypeRegister: java.lang.String redactJdbcUrl(java.lang.String)>
<org.springframework.web.util.pattern.SeparatorPathElement: void <init>(int,char)>-><org.springframework.web.util.pattern.PathElement: void <init>(int,char)>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket()>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>
<org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController basicErrorController(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.beans.factory.ObjectProvider)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: void configure(com.fasterxml.jackson.databind.ObjectMapper)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.security.web.context.HttpSessionSecurityContextRepository: void <init>()>-><org.springframework.security.authentication.AuthenticationTrustResolverImpl: void <init>()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.DataInputStream: int read(byte[],int,int)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntArrayNode: java.util.Spliterator$OfPrimitive spliterator()>
<com.alibaba.druid.support.http.StatViewServlet: void <init>()>-><com.alibaba.druid.support.http.ResourceServlet: void <init>(java.lang.String)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Node$OfDouble: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setDataUsername(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><sun.net.ApplicationProxy: sun.net.ApplicationProxy create(java.net.Proxy)>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: void <init>(org.springframework.http.MediaType[])>-><java.util.Collections: java.util.Set emptySet()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void <init>()>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>
<java.io.BufferedInputStream: void fill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<sun.misc.URLClassPath: void check(java.net.URL)>-><java.security.Permission: java.lang.String getName()>
<org.springframework.beans.factory.config.PropertyResourceConfigurer: void <init>()>-><org.springframework.core.io.support.PropertiesLoaderSupport: void <init>()>
<org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer: org.springframework.boot.web.client.RestTemplateBuilder configure(org.springframework.boot.web.client.RestTemplateBuilder)>-><org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder messageConverters(java.util.Collection)>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: int characteristics()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.ArrayList$ArrayListSpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.StringBuilder: void <init>(int)>
<org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Pool: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isValidateOnMigrate()>
<java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.InternalResourceViewResolver defaultViewResolver()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnectionFromDriver(java.lang.String,java.lang.String)>-><java.util.Properties: void <init>(java.util.Properties)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.security.core.userdetails.User: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfDouble: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.BeanNameViewResolver beanNameViewResolver()>-><org.springframework.web.servlet.view.BeanNameViewResolver: void <init>()>
<java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$DoubleArraySpliterator: int characteristics()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.Ref2DPtgBase: java.lang.String toString()>
<java.net.Socket: int getSoTimeout()>-><java.net.Socket: java.net.SocketImpl getImpl()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<org.springframework.core.io.support.PropertiesLoaderUtils: java.util.Properties loadProperties(org.springframework.core.io.support.EncodedResource)>-><org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><java.nio.Buffer: int limit()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration: org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource jsr250MethodSecurityMetadataSource()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean: void <init>(org.springframework.web.servlet.DispatcherServlet,java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setMethodSecurityMetadataSource(org.springframework.security.access.method.MethodSecurityMetadataSource)>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.IntPipeline$4$1: void accept(int)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.ArrayDeque: java.lang.Object pollFirst()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.aggregates.SharedValueManager$SharedFormulaGroup: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: org.apache.commons.pool2.impl.GenericObjectPoolConfig getPoolConfig(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: void setMaxTotal(int)>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.config.SecurityConfig: org.springframework.security.core.session.SessionRegistryImpl sessionRegistry()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.flywaydb.core.internal.database.db2.DB2DatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><org.javaboy.vhr.model.Department: java.lang.Integer getId()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.Streams$AbstractStreamBuilderImpl: long estimateSize()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ExternSheetRecord$RefSubRecord: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: int getNormalizedLength()>-><java.lang.String: int length()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setTaskSchedulerBuilder(org.springframework.boot.task.TaskSchedulerBuilder)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<org.mybatis.spring.SqlSessionTemplate: void <init>(org.apache.ibatis.session.SqlSessionFactory,org.apache.ibatis.session.ExecutorType,org.springframework.dao.support.PersistenceExceptionTranslator)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: java.util.List createSentinels(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel)>-><java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>-><java.net.Proxy: java.net.Proxy$Type type()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.YearMonth: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.BackupRecord: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.lang.Object doLeaf()>-><java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>
<org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler: void <init>()>-><org.springframework.security.web.server.context.WebSessionServerSecurityContextRepository: void <init>()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.snowflake.SnowflakeDatabaseType: java.lang.String getName()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryConfiguration: org.springframework.data.mongodb.core.MongoDatabaseFactorySupport mongoDatabaseFactory(com.mongodb.client.MongoClient,org.springframework.boot.autoconfigure.mongo.MongoProperties)>-><org.springframework.data.mongodb.core.SimpleMongoClientDatabaseFactory: void <init>(com.mongodb.client.MongoClient,java.lang.String)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source as(java.util.function.Function)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.Integer: java.lang.String toHexString(int)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: void setCacheRequest(java.net.CacheRequest)>
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: void <init>()>-><java.time.Clock: java.time.Clock systemDefaultZone()>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>-><java.util.NoSuchElementException: void <init>(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: boolean determineEnabled()>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<java.net.URL: java.net.URLConnection openConnection()>-><sun.net.www.protocol.https.Handler: java.net.URLConnection openConnection(java.net.URL)>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<java.net.URLPermission: void init(java.lang.String)>-><java.util.Collections: void sort(java.util.List)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.Permissions: void <init>()>
<org.springframework.boot.context.properties.bind.Binder: java.lang.Object bindOrCreate(java.lang.String,java.lang.Class)>-><org.springframework.boot.context.properties.bind.Binder: java.lang.Object bindOrCreate(java.lang.String,org.springframework.boot.context.properties.bind.Bindable)>
<sun.net.www.MeteredStream: int read()>-><java.util.zip.InflaterInputStream: int read()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.InternalResourceViewResolver defaultViewResolver()>-><org.springframework.web.servlet.view.UrlBasedViewResolver: void setSuffix(java.lang.String)>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.MeteredStream: int read()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint createDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint: void <init>(java.util.LinkedHashMap)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void openServer()>
<sun.net.www.protocol.http.NegotiateAuthentication: void <init>(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>
<org.springframework.data.redis.cache.DefaultRedisCacheWriter: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory,java.time.Duration)>-><org.springframework.data.redis.cache.DefaultRedisCacheWriter: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory,java.time.Duration,org.springframework.data.redis.cache.CacheStatisticsCollector)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureAsyncSupport(org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.io.BufferedOutputStream: void flushBuffer()>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<org.springframework.security.web.header.writers.HstsHeaderWriter: void updateHstsHeaderValue()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.Boolean getStream()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.PermissionCollection: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.lang.String getUrl()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.LinkedList$LLSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.config.RabbitConfig: void <init>()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.net.Socket: void setTcpNoDelay(boolean)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<java.util.zip.ZipFile: void close()>-><java.io.BufferedInputStream: void close()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientName(java.lang.String)>
<com.fasterxml.jackson.module.paramnames.ParameterNamesModule: void <init>(com.fasterxml.jackson.annotation.JsonCreator$Mode)>-><com.fasterxml.jackson.databind.module.SimpleModule: void <init>(com.fasterxml.jackson.core.Version)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List replaceVendorLocations(java.util.List,org.springframework.boot.jdbc.DatabaseDriver)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<java.util.ArrayList$SubList$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.LinkedList: java.lang.Object get(int)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor securityMethodInterceptor(org.springframework.security.access.method.AbstractMethodSecurityMetadataSource,org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: int limit()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.javaboy.vhr.model.Position: int hashCode()>
<javax.security.auth.SubjectDomainCombiner: java.lang.String printDomain(java.security.ProtectionDomain)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: java.lang.String getOrDeducePassword(org.springframework.boot.autoconfigure.security.SecurityProperties$User,org.springframework.security.crypto.password.PasswordEncoder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo parseUrl(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>-><org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>
<java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: void <init>()>-><io.lettuce.core.ClientOptions$Builder: io.lettuce.core.ClientOptions build()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.Vector: java.lang.Object elementAt(int)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: void remove(java.lang.String)>
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getDescription(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRemoteUser()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.KeepAliveStream: long remainingToRead()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: boolean isIsoOffset(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Vector$Itr: boolean hasNext()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node$OfDouble: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: boolean isEmpty()>
<javax.security.auth.SubjectDomainCombiner$1: java.lang.Void run()>-><javax.security.auth.Subject: java.lang.String toString()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.util.List parseAddresses(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$DefaultPasswordEncoderAuthenticationManagerBuilder: void <init>(org.springframework.security.config.annotation.ObjectPostProcessor,org.springframework.security.crypto.password.PasswordEncoder)>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: void <init>(org.springframework.security.config.annotation.ObjectPostProcessor)>
<org.springframework.security.web.reactive.result.method.annotation.CurrentSecurityContextArgumentResolver: void setBeanResolver(org.springframework.expression.BeanResolver)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.usermodel.HSSFCell: java.lang.String toString()>
<org.springframework.web.context.request.AbstractRequestAttributes: void registerRequestDestructionCallback(java.lang.String,java.lang.Runnable)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.MessageHeader: java.lang.String getHeaderNamesInList()>-><java.util.StringJoiner: java.lang.String toString()>
<java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.web.util.pattern.RegexPathElement: int getNormalizedLength()>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void <init>(java.lang.String,boolean,org.springframework.boot.autoconfigure.amqp.RabbitProperties$1)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void <init>(java.lang.String,boolean)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$2: long estimateSize()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.PermissionsEnumerator: boolean hasMoreElements()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.zip.DeflaterOutputStream: void deflate()>-><java.io.PrintStream: void write(byte[],int,int)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.javaboy.vhr.config.CustomUrlDecisionManager: boolean supports(java.lang.Class)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy: void <init>(java.lang.String)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.net.Socket: int getSoTimeout()>-><java.lang.Integer: int intValue()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void checkLocationExists(javax.sql.DataSource,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.core.io.ResourceLoader)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.util.List getLocations()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><org.springframework.util.MimeTypeUtils: org.springframework.util.MimeType parseMimeType(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: void setSecurityMetadataSource(org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.text.MessageFormat: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.config.web.server.ServerHttpSecurity httpSecurity()>-><org.springframework.security.config.web.server.ServerHttpSecurity: org.springframework.security.config.web.server.ServerHttpSecurity authenticationManager(org.springframework.security.authentication.ReactiveAuthenticationManager)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.flywaydb.core.internal.database.sqlite.SQLiteDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>-><org.flywaydb.core.internal.util.FeatureDetector: boolean isAndroidAvailable()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder: org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager access$100(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setSortHandlerMethodArgumentResolverCustomizer(org.springframework.data.web.config.SortHandlerMethodArgumentResolverCustomizer)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setWebBindingInitializer(org.springframework.web.bind.support.WebBindingInitializer)>
<sun.net.www.protocol.http.HttpURLConnection$5: java.lang.String run()>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)>-><java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutSuccessHandler createDefaultSuccessHandler()>-><org.springframework.security.web.authentication.logout.DelegatingLogoutSuccessHandler: void setDefaultLogoutSuccessHandler(org.springframework.security.web.authentication.logout.LogoutSuccessHandler)>
<javax.security.auth.SubjectDomainCombiner$2: java.lang.Void run()>-><javax.security.auth.Policy: javax.security.auth.Policy getPolicy()>
<sun.net.www.protocol.http.HttpURLConnection$11: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$11: java.net.InetAddress run()>
<sun.net.www.http.KeepAliveCache: int getMaxConnections()>-><sun.security.action.GetIntegerAction: void <init>(java.lang.String,int)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.session.ConcurrentSessionFilter createConcurrencyFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.flywaydb.core.internal.database.sqlite.SQLiteDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>-><org.flywaydb.core.internal.util.FeatureDetector: void <init>(java.lang.ClassLoader)>
<java.util.TreeMap$Entry: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.TreeMap$ValueSpliterator: int characteristics()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setHikariDataSource(com.zaxxer.hikari.HikariDataSource)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.io.File getDryRunOutput()>
<java.util.IdentityHashMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.SliceOps$SliceTask: java.util.stream.Node getEmptyResult()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: boolean isReplacement(org.springframework.http.converter.HttpMessageConverter,org.springframework.http.converter.HttpMessageConverter)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.web.session.InvalidSessionAccessDeniedHandler: void <init>(org.springframework.security.web.session.InvalidSessionStrategy)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setTomcatReactiveWebServerFactory(org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxException: java.lang.String buildMessage(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.net.HttpConnectSocketImpl$2: java.net.Socket run()>-><java.net.HttpConnectSocketImpl: java.net.Socket access$200(java.net.HttpConnectSocketImpl,java.lang.String,int)>
<java.io.FilterInputStream: void mark(int)>-><sun.net.www.MeteredStream: void mark(int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.String: int length()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.Integer getId()>
<org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer: void <init>(javax.servlet.ServletContext)>-><java.util.HashMap: void <init>()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce: java.time.Duration getShutdownTimeout()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$EmptySpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: java.lang.String determineEmbeddedDatabaseName(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: java.lang.String determineDatabaseName(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: void forceClose()>-><org.springframework.amqp.rabbit.connection.SimpleConnection: void close()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setErrorMvcAutoConfiguration$ErrorPageCustomizer(org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$ErrorPageCustomizer)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<org.springframework.cache.concurrent.ConcurrentMapCacheManager: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>(int)>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void setRolePrefix(java.lang.String)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void updateFactory()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: java.util.Iterator iterator()>
<org.flywaydb.core.internal.database.sybasease.SybaseASEJTDSDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.session.InvalidSessionStrategy getInvalidSessionStrategy()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.String getBeanName(java.lang.Class,java.lang.String[])>-><java.util.Collections$EmptyList: int size()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$ArrayNode: java.util.Spliterator spliterator()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>-><org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer: void <init>(javax.servlet.ServletContext)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$IteratorSpliterator: long estimateSize()>
<org.apache.tomcat.util.buf.UEncoder: void urlEncode(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.CharChunk: void append(char)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator spliterator()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL,java.lang.String,int)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.context.HttpSessionSecurityContextRepository: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setBasicErrorController(org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: boolean determineEnabled()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: boolean access$700(org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address,boolean)>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.lang.Object: void wait()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.MessageHeader: void reset()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.httpserver.SSLStreams$OutputStream: void close()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager build()>-><org.springframework.data.redis.cache.RedisCacheManager: void <init>(org.springframework.data.redis.cache.RedisCacheWriter,org.springframework.data.redis.cache.RedisCacheConfiguration,java.util.Map,boolean)>
<java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: void afterPropertiesSet()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator spliterator()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.sqlserver.SQLServerDatabaseType: java.lang.String getName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: boolean usesVendorLocation(java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setReactiveWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryCustomizer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.io.FilterOutputStream: void close()>-><java.io.PrintStream: void close()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.io.DataOutputStream: void write(int)>-><java.io.PrintStream: void write(int)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl$1: java.lang.Void run()>-><java.net.HttpConnectSocketImpl: java.lang.reflect.Field access$100()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveCache$1: void <init>(sun.net.www.http.KeepAliveCache,sun.net.www.http.KeepAliveCache)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void parseHostAndPort(java.lang.String,boolean)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.web.util.pattern.InternalPathPatternParser: void pushPathElement(org.springframework.web.util.pattern.PathElement)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<javax.servlet.http.HttpServlet: void <init>()>-><javax.servlet.GenericServlet: void <init>()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice getPreInvocationAuthorizationAdvice()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><java.lang.Character: boolean isJavaIdentifierPart(char)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.util.List put(java.lang.String,java.util.List)>-><org.springframework.util.MultiValueMapAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.net.Proxy: java.lang.String toString()>-><java.net.Proxy: java.net.Proxy$Type type()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder cbor()>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$CborFactoryInitializer: com.fasterxml.jackson.core.JsonFactory create()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setUrl(java.lang.String)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.HashSet: void <init>(java.util.Collection)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.ProgressSource: void finishTracking()>
<java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder awaitTerminationPeriod(java.time.Duration)>
<sun.net.www.http.KeepAliveCache: int getMaxConnections()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: java.lang.String determineEmbeddedUsername(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: java.lang.String getUsername()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.WeakHashMap: void clear()>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><org.springframework.web.util.pattern.RegexPathElement: java.lang.String quote(java.lang.String,int,int)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$RangeIntSpliterator: java.util.Spliterator trySplit()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.util.DerValue: java.lang.String toString()>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$2: void <init>(javax.security.auth.SubjectDomainCombiner)>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.bind.support.ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer(org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.bind.support.ConfigurableWebBindingInitializer: void setValidator(org.springframework.validation.Validator)>
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: void configure(com.fasterxml.jackson.databind.ObjectMapper)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setMappingJackson2HttpMessageConverter(org.springframework.http.converter.json.MappingJackson2HttpMessageConverter)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.stream.Node$OfDouble build()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><javax.xml.parsers.FactoryConfigurationError: java.lang.String getMessage()>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$5ReducingSink: void begin(long)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.util.List parseAddresses(java.lang.String)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl getSsl()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingSslClientConfigurationBuilder: void <init>(org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceSslClientConfigurationBuilder: void <init>(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>
<synthetic.method.SecurityFilterChainImpl: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void begin(long)>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>
<org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: void <init>(boolean,boolean,boolean,io.lettuce.core.resource.ClientResources,io.lettuce.core.ClientOptions,java.lang.String,io.lettuce.core.ReadFrom,java.time.Duration,java.time.Duration,java.time.Duration)>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<java.util.stream.Nodes$LongArrayNode: void forEach(java.util.function.LongConsumer)>-><java.util.stream.Nodes$LongFixedNodeBuilder: void accept(long)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.util.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.asm.Handle: java.lang.String toString()>
<org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>-><javax.xml.parsers.FactoryConfigurationError: java.lang.Throwable getCause()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfInt: void <init>(java.util.stream.Node$OfInt)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive)>
<org.springframework.data.redis.serializer.DefaultRedisSerializationContext: void <init>(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.DefaultRedisSerializationContext$1)>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext: void <init>(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>
<org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration: org.springframework.boot.web.reactive.result.view.MustacheViewResolver mustacheViewResolver(com.samskivert.mustache.Mustache$Compiler,org.springframework.boot.autoconfigure.mustache.MustacheProperties)>-><org.springframework.boot.web.reactive.result.view.MustacheViewResolver: void setCharset(java.lang.String)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.TimSort: void mergeLo(int,int,int,int)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureFlywayCallbacks(org.flywaydb.core.api.configuration.FluentConfiguration,java.util.List)>-><org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration callbacks(org.flywaydb.core.api.callback.Callback[])>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.Collections$SynchronizedCollection: void clear()>
<sun.net.www.http.HttpClient: void logFinest(java.lang.String)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.CodeSigner: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: org.springframework.security.web.server.WebFilterChainProxy springSecurityWebFilterChainFilter()>-><org.springframework.security.web.server.WebFilterChainProxy: void <init>(java.util.List)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$KeySpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.access.vote.AffirmativeBased: void <init>(java.util.List)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: void <init>(java.util.List)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$ListItr: void add(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$SizedCollectorTask: void begin(long)>
<sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.ResourceRegionHttpMessageConverter: void <init>()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.PatternParseException: void <init>(int,char[],org.springframework.web.util.pattern.PatternParseException$PatternMessage,java.lang.Object[])>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ReferrerPolicyConfig: org.springframework.security.web.header.writers.ReferrerPolicyHeaderWriter access$2200(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ReferrerPolicyConfig)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.task.TaskSchedulingProperties getTaskSchedulingPropertiesInstance()>-><org.springframework.boot.autoconfigure.task.TaskSchedulingProperties: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.text.MessageFormat: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryCustomizer servletWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.ServerProperties,org.springframework.beans.factory.ObjectProvider)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.www.http.HttpClient: void setIgnoreContinue(boolean)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: org.apache.commons.pool2.impl.GenericObjectPoolConfig getPoolConfig(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IteratorSpliterator: long estimateSize()>
<sun.net.www.HeaderParser: int findInt(java.lang.String,int)>-><java.lang.String: java.lang.String valueOf(int)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.security.ssl.Krb5Helper: java.lang.String getPrincipalHostName(java.security.Principal)>-><sun.security.ssl.Krb5Helper: void ensureAvailable()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource: void <init>()>-><org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource: void <init>()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.security.web.session.InvalidSessionAccessDeniedHandler: void <init>(org.springframework.security.web.session.InvalidSessionStrategy)>-><java.lang.Object: void <init>()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive,java.util.stream.Node$OfPrimitive)>-><java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.FilterInputStream: int available()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.SubList: int access$208(java.util.SubList)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: int getDefaultPort()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.util.stream.Node$OfInt build()>
<org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer restTemplateBuilderConfigurer(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer: void setRestTemplateCustomizers(java.util.List)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.util.function.Tuple2: java.lang.String toString()>
<java.io.BufferedOutputStream: void flushBuffer()>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.javaboy.vhr.config.SecurityConfig: void lambda$loginFilter$0(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.apache.catalina.connector.ResponseFacade: java.io.PrintWriter getWriter()>
<org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Shutdown: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeRegularOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: void configureIf(io.r2dbc.spi.ConnectionFactoryOptions$Builder,io.r2dbc.spi.ConnectionFactoryOptions,io.r2dbc.spi.Option,java.util.function.Supplier,java.util.function.Predicate)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getNonce()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor()>-><org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<java.io.DataOutputStream: void writeLong(long)>-><java.io.PrintStream: void write(byte[],int,int)>
<org.springframework.security.config.web.server.ServerHttpSecurity: org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec headers()>-><org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void setConnectTimeout(int)>-><sun.net.www.protocol.http.HttpURLConnection: void setConnectTimeout(int)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: void setMappingResources(java.lang.String[])>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.util.DerValue: java.lang.String getAsString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger access$000()>
<sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder createBuilder(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder builder()>
<org.springframework.boot.autoconfigure.context.MessageSourceProperties: void <init>()>-><java.lang.Object: void <init>()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.net.URL)>-><sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.lang.System: long currentTimeMillis()>
<sun.net.www.http.HttpCaptureInputStream: int read(byte[])>-><java.io.FilterInputStream: int read(byte[])>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.lang.String: char charAt(int)>
<org.apache.poi.util.LittleEndianOutputStream: void writeInt(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<sun.net.www.MeteredStream: int available()>-><java.io.SequenceInputStream: int available()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$IntIteratorSpliterator: long estimateSize()>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration$LocaleCharsetMappingsCustomizer localeCharsetMappingsCustomizer()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: void <init>(org.springframework.http.MediaType[])>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.JdbcProperties getJdbcPropertiesInstance()>
<org.springframework.data.redis.cache.DefaultRedisCacheWriter: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory,java.time.Duration,org.springframework.data.redis.cache.CacheStatisticsCollector)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig enable()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.TrustManager[] configureTrustManagers()>-><java.io.FileInputStream: void close()>
<java.time.Clock: java.time.Clock systemDefaultZone()>-><java.time.ZoneId: java.time.ZoneId systemDefault()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.CharBuffer: char[] array()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>-><org.springframework.web.util.ContentCachingRequestWrapper: void handleContentOverflow(int)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: java.net.CookieHandler getCookieHandler()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<com.alibaba.druid.support.http.ResourceServlet: void <init>(java.lang.String)>-><javax.servlet.http.HttpServlet: void <init>()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: java.util.List createSentinels(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientRegistrationRepositoryConfiguration: void <init>()>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.SingleCharWildcardedPathElement: int getNormalizedLength()>
<sun.net.www.protocol.http.HttpURLConnection$5: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$5: java.lang.String run()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.PathPatternParser: org.springframework.http.server.PathContainer$Options getPathOptions()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.String: java.lang.String valueOf(int)>
<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URL: int getPort()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: int characteristics()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createDefaultSavedRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: boolean equals(java.lang.Object)>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String getSessionId()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<sun.net.www.http.HttpClient: void closeServer()>-><java.net.Socket: void close()>
<java.util.zip.InflaterInputStream: void fill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity logout(org.springframework.security.config.Customizer)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: void customizeConfigurationFromUrl(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.lang.String getUrl()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setNimbusOpaqueTokenIntrospector(org.springframework.security.oauth2.server.resource.introspection.NimbusOpaqueTokenIntrospector)>
<sun.nio.cs.StreamDecoder: boolean inReady()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory tomcatServletWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.IdentityHashMap$KeySpliterator: int characteristics()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setRedisCacheManager(org.springframework.data.redis.cache.RedisCacheManager)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: java.lang.String getHost()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getPath()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createDefaultSavedRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher notMatchingMediaType(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.http.MediaType)>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><sun.net.www.http.HttpCaptureOutputStream: void <init>(java.io.OutputStream,sun.net.www.http.HttpCapture)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.String[] getBeanNamesForType(java.lang.Class)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getSessionMutex()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession obtainSession()>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.lang.String: int indexOf(int)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder commandTimeout(java.time.Duration)>
<java.util.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<sun.net.ApplicationProxy: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.Proxy$Type type()>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity servletApi(org.springframework.security.config.Customizer)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.util.jar.JarInputStream: int read(byte[],int,int)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: int size()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.httpserver.Request$ReadStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor: void <init>(java.lang.String,org.springframework.security.access.method.MethodSecurityMetadataSource,java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source as(java.util.function.Function)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.apache.catalina.util.SessionConfig: java.lang.String getSessionUriParamName(org.apache.catalina.Context)>-><org.apache.catalina.util.SessionConfig: java.lang.String getConfiguredSessionCookieName(org.apache.catalina.Context)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PrintGridlinesRecord: java.lang.String toString()>
<java.io.PrintStream: void close()>-><java.io.PrintStream: void close()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: boolean isEmpty()>
<org.apache.catalina.connector.Response: java.lang.String getCharacterEncoding()>-><java.nio.charset.Charset: java.lang.String name()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.ResourceHttpMessageConverter: void <init>(boolean)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.HeaderParser: void <init>(java.lang.String)>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>-><java.lang.Integer: int intValue()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<sun.net.www.protocol.http.HttpURLConnection$9: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$9: java.io.InputStream run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: int getPort()>-><java.net.InetSocketAddress: int getPort()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void setPassword(org.springframework.data.redis.connection.RedisPassword)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.data.redis.connection.RedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheConfiguration determineConfiguration(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.beans.factory.ObjectProvider,java.lang.ClassLoader)>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.apache.catalina.connector.Response: java.io.PrintWriter getWriter()>-><org.apache.catalina.connector.CoyoteWriter: void <init>(org.apache.catalina.connector.OutputBuffer)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: java.lang.String[] getPackagesToScan()>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.flywaydb.core.internal.database.sqlite.SQLiteDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>-><java.lang.String: boolean startsWith(java.lang.String)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.Map getDefaultMediaTypes()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setPlaceholderSuffix(java.lang.String)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<javax.security.auth.SubjectDomainCombiner$5: java.lang.Object run()>-><javax.security.auth.SubjectDomainCombiner$5: java.lang.String run()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.List sortErrorViewResolvers(java.util.List)>-><org.springframework.core.annotation.AnnotationAwareOrderComparator: void sortIfNecessary(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.javaboy.vhr.VhrApplication: com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties getDruidStatPropertiesInstance()>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties: void setWebStatFilter(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$WebStatFilter)>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void addInitParameter(java.lang.String,java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: boolean startsWith(java.lang.String)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getExpected()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties getOAuth2ResourceServerPropertiesInstance()>
<org.springframework.boot.availability.ApplicationAvailabilityBean: void <init>()>-><java.util.HashMap: void <init>()>
<sun.net.www.http.HttpClient$1: java.lang.Void run()>-><java.net.InetSocketAddress: java.lang.String getHostString()>
<org.springframework.data.redis.core.DefaultReactiveGeoOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: void <init>()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.io.FilePermissionCollection: java.util.Enumeration elements()>
<org.springframework.security.web.context.HttpSessionSecurityContextRepository: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: com.fasterxml.jackson.databind.ObjectMapper build()>
<org.springframework.boot.info.BuildProperties: void coerceDate(java.util.Properties,java.lang.String)>-><java.time.format.DateTimeFormatter: java.lang.Object parse(java.lang.CharSequence,java.time.temporal.TemporalQuery)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.authentication.ProviderManager: void <init>(java.util.List,org.springframework.security.authentication.AuthenticationManager)>
<java.util.stream.Node$OfLong: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.info.ProjectInfoProperties)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$2: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.net.URI: java.lang.String getPath()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>-><java.net.Proxy: java.net.Proxy$Type type()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><java.lang.String: int length()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.xml.SourceHttpMessageConverter: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$IntArraySpliterator: int characteristics()>
<sun.net.ProgressMonitor: boolean shouldMeterInput(java.net.URL,java.lang.String)>-><sun.net.DefaultProgressMeteringPolicy: boolean shouldMeterInput(java.net.URL,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.MessageDigest: java.lang.String toString()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><java.util.HashMap: void <init>()>
<sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>-><java.lang.Integer: java.lang.String toHexString(int)>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: void <init>()>-><io.lettuce.core.ClientOptions: io.lettuce.core.ClientOptions$Builder builder()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getArgumentResolvers()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$IntArraySpliterator: int characteristics()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HpkpConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder value(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair: org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair fromSerializer(org.springframework.data.redis.serializer.RedisSerializer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: org.springframework.boot.web.client.RestTemplateBuilder restTemplateBuilder(org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer: void <init>()>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>-><org.springframework.context.support.AbstractRefreshableApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfInt spliterator()>-><java.util.stream.Nodes$InternalNodeSpliterator$OfInt: void <init>(java.util.stream.Node$OfInt)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.io.StringReader: void mark(int)>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.ExceptionTranslationFilter: void <init>(org.springframework.security.web.AuthenticationEntryPoint,org.springframework.security.web.savedrequest.RequestCache)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder keepAlive(java.time.Duration)>-><org.springframework.boot.task.TaskExecutorBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.Boolean,java.time.Duration,java.lang.String,org.springframework.core.task.TaskDecorator,java.util.Set)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: int length()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><java.util.regex.PatternSyntaxException: int getIndex()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.session.InvalidSessionStrategy getInvalidSessionStrategy()>-><org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List replaceVendorLocations(java.util.List,org.springframework.boot.jdbc.DatabaseDriver)>-><org.springframework.boot.jdbc.DatabaseDriver: java.lang.String getId()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager build()>-><org.springframework.cache.transaction.AbstractTransactionSupportingCacheManager: void setTransactionAware(boolean)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: java.lang.String findKey(int)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator spliterator()>
<org.springframework.web.filter.FormContentFilter: void <init>()>-><org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.ArrayList$ArrayListSpliterator: java.util.Spliterator trySplit()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.PrintStream: void write(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: long estimateSize()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.transaction.PlatformTransactionManager getPlatformTransactionManager()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int,int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator spliterator()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><java.lang.System: long currentTimeMillis()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurations(java.util.Map)>-><org.springframework.web.cors.UrlBasedCorsConfigurationSource: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>
<java.io.FilterOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void close()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setTomcatServletWebServerFactory(org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory)>
<javax.security.auth.Policy: void setPolicy(javax.security.auth.Policy)>-><javax.security.auth.AuthPermission: void <init>(java.lang.String)>
<org.springframework.jmx.export.MBeanExporter: void setAutodetectMode(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.stream.Node$OfDouble: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: int characteristics()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: java.util.List createSentinels(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel)>-><org.springframework.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: void setJtaDataSource(javax.sql.DataSource)>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.ByteArrayHttpMessageConverter: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<sun.security.util.HostnameChecker: boolean match(java.lang.String,java.security.Principal)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.HeaderParser: void <init>(java.lang.String)>-><sun.net.www.HeaderParser: void parse()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getAuth(java.lang.String,java.net.URL)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.apache.catalina.connector.ResponseFacade: boolean isCommitted()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.StringHttpMessageConverter: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.net.Socket: int getSoTimeout()>-><java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry$UrlMapping: void <init>(org.springframework.security.web.util.matcher.RequestMatcher,java.util.Collection)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hpsf.Property: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: void <init>()>-><org.springframework.util.ConcurrentReferenceHashMap: void <init>(int,org.springframework.util.ConcurrentReferenceHashMap$ReferenceType)>
<org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration: void <init>(org.mybatis.spring.boot.autoconfigure.MybatisProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.mybatis.spring.boot.autoconfigure.MybatisProperties: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$3: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.SecurityContextConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.context.HttpSessionSecurityContextRepository: void <init>()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><javax.security.auth.Policy$3: java.lang.Object run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: void setOrder(int)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor configure(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source as(java.util.function.Function)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<javax.net.ssl.SSLSocketFactory: void log(java.lang.String)>-><java.io.PrintStream: void println(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.lang.String,java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>-><javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>
<org.springframework.security.config.web.server.ServerHttpSecurity$LoginPageSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>-><org.springframework.security.config.web.server.ServerHttpSecurity$LoginPageSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder smile()>
<org.springframework.web.util.DefaultUriBuilderFactory: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.http.ChunkedOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void ensureOpen()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getMessageConverters()>-><java.util.ArrayList: void <init>()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.net.URL: int getDefaultPort()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: void customizeConfigurationFromUrl(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisProperties getProperties()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy: void <init>(java.lang.String,org.springframework.security.web.RedirectStrategy)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.flywaydb.core.internal.exception.FlywaySqlException: java.lang.String getMessage()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.SocketImpl: int getLocalPort()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setPreInvocationAuthorizationAdvice(org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String getCurrentName()>-><com.fasterxml.jackson.core.filter.TokenFilterContext: java.lang.String getCurrentName()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$ArrayNode: java.util.Spliterator spliterator()>
<org.springframework.data.redis.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheConfiguration defaultCacheConfig(java.lang.ClassLoader)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.util.context.Context0: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.net.Socket: void close()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.InternalPathPatternParser: char[] getPathElementText()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration: void <init>()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void begin(long)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.security.core.userdetails.User: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Collection)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.lang.String: void <init>()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: void <init>(java.lang.String,org.springframework.http.HttpMethod)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: org.springframework.security.web.server.SecurityWebFilterChain springSecurityFilterChain(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration$OAuth2ClasspathGuard: boolean shouldConfigure(org.springframework.context.ApplicationContext)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void begin(long)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: void <init>(byte[],int,int,java.lang.String)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void <init>(java.lang.String,boolean)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String trimPrefix(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: javax.servlet.ServletRequest getObject()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setMixed(boolean)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setErrorOverrides(java.lang.String[])>
<java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: boolean isEmpty()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: void <init>(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.cache.CacheProperties getCachePropertiesInstance()>-><org.springframework.boot.autoconfigure.cache.CacheProperties: void setType(org.springframework.boot.autoconfigure.cache.CacheType)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationProvider: void setMessageSource(org.springframework.context.MessageSource)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setTable(java.lang.String)>
<java.util.GregorianCalendar: int computeFields(int,int)>-><java.util.SimpleTimeZone: int getOffset(long)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IntIteratorSpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder threadNamePrefix(java.lang.String)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.IntPipeline$4$1: void accept(int)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$CborFactoryInitializer: void <init>(org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$1)>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$CborFactoryInitializer: void <init>()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void addFormatters(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory: void <init>()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void parseHostAndPort(java.lang.String,boolean)>-><java.lang.String: int indexOf(int)>
<java.io.PrintStream: void newLine()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.cockroachdb.CockroachDBDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>-><sun.net.www.protocol.http.HttpURLConnection$8: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties: org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Shutdown getShutdown()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Collections$SetFromMap: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.Set keySet()>
<org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source as(java.util.function.Function)>-><org.springframework.boot.context.properties.PropertyMapper$Source: void <init>(java.util.function.Supplier,java.util.function.Predicate)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.io.PrintStream: boolean checkError()>
<sun.security.ssl.Krb5Helper$1: sun.security.ssl.Krb5Proxy run()>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: int getCaptureCount()>-><java.util.ArrayList: int size()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo: java.lang.String getHostName()>
<sun.net.www.MessageHeader: void reset()>-><sun.net.www.MessageHeader: void grow()>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: void ensureOpen()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.apache.commons.logging.LogAdapter$Log4jLog: void debug(java.lang.Object)>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><java.io.InputStream: void close()>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.SliceOps: long access$000(long,long)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.lang.String,java.lang.String)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$8: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<sun.net.www.MeteredStream: int read()>-><sun.net.httpserver.SSLStreams$InputStream: int read()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.flywaydb.core.internal.database.mysql.MySQLDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>-><java.lang.String: boolean startsWith(java.lang.String)>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URLConnection: boolean getUseCaches()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.web.servlet.view.UrlBasedViewResolver: void setViewClass(java.lang.Class)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.HeaderParser headerParser()>
<org.springframework.boot.web.reactive.result.view.MustacheViewResolver: void <init>(com.samskivert.mustache.Mustache$Compiler)>-><org.springframework.boot.web.reactive.result.view.MustacheViewResolver: java.lang.Class requiredViewClass()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerOpaqueTokenConfiguration$OpaqueTokenIntrospectionClientConfiguration: org.springframework.security.oauth2.server.resource.introspection.NimbusReactiveOpaqueTokenIntrospector opaqueTokenIntrospector(org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties)>-><org.springframework.security.oauth2.server.resource.introspection.NimbusReactiveOpaqueTokenIntrospector: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><java.io.BufferedInputStream: void close()>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.config.web.server.ServerHttpSecurity httpSecurity()>-><org.springframework.security.config.web.server.ServerHttpSecurity: org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec logout()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Socket: void checkAddress(java.net.InetAddress,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$LongWrappingSpliterator: java.util.Spliterator trySplit()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.net.URL getURL()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap: void <init>(java.util.Map)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.io.BufferedInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator spliterator()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor()>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void warn(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <init>(org.springframework.web.accept.ContentNegotiationStrategy)>-><java.lang.Object: void <init>()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.WindowTwoRecord: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.io.PrintStream: void flush()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.AnonymousAuthenticationFilter: void <init>(java.lang.String,java.lang.Object,java.util.List)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.BoundSheetRecord: java.lang.String toString()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager build()>-><org.springframework.data.redis.cache.CacheStatisticsCollector: org.springframework.data.redis.cache.CacheStatisticsCollector none()>
<org.apache.tomcat.util.buf.C2BConverter: boolean isUndeflow()>-><java.nio.Buffer: int position()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$IntArrayNode: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.io.FilterInputStream: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>-><sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>-><java.lang.Object: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader mapToMessageHeader(java.util.Map)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>-><sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$4ReducingSink: void begin(long)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: void <init>()>-><org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.http.ChunkedInputStream: void close()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$3(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.apache.catalina.connector.CoyoteWriter: void close()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.HeaderParser headerParser()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfDouble spliterator()>-><java.util.Spliterators: java.util.Spliterator$OfDouble emptyDoubleSpliterator()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void main(java.lang.String[])>-><org.javaboy.vhr.VhrApplication: void initBean_synthetic()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.data.redis.serializer.DefaultRedisElementReader: void <init>(org.springframework.data.redis.serializer.RedisSerializer)>-><java.lang.Object: void <init>()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.lang.String detectFallbackUrl(java.lang.String)>-><java.lang.System: java.lang.String getenv(java.lang.String)>
<org.springframework.security.web.server.savedrequest.WebSessionServerRequestCache: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher createDefaultRequestMacher()>-><org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher pathMatchers(java.lang.String[])>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig enable()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><sun.security.action.GetPropertyAction: void <init>(java.lang.String)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<org.apache.catalina.connector.Response: void setStatus(int,java.lang.String)>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createDefaultSavedRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: void <init>(java.lang.String,java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: boolean supports(java.lang.Class)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void prepend(java.lang.String,java.lang.String)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.apache.catalina.connector.Response: void setCharacterEncoding(java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object,java.lang.Throwable)>
<java.io.BufferedInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.Object: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder createBuilder(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>
<org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder key(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair: org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair fromSerializer(org.springframework.data.redis.serializer.RedisSerializer)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.security.web.header.writers.HstsHeaderWriter: void <init>(long)>-><org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher: void <init>(org.springframework.security.web.header.writers.HstsHeaderWriter$1)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <init>()>-><java.lang.Object: void <init>()>
<java.util.TreeMap$Entry: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.JavaType getContentType()>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder corePoolSize(int)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection: int access$600()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int,int)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><sun.net.www.MessageHeader: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String reducePath(java.lang.String)>
<org.apache.catalina.connector.CoyoteWriter: void <init>(org.apache.catalina.connector.OutputBuffer)>-><java.io.PrintWriter: void <init>(java.io.Writer)>
<java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<java.io.DataInputStream: char readChar()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean dispatcherServletRegistration(org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ObjectProvider)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean isArrayType()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.AbstractList: java.util.ListIterator listIterator()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<java.util.concurrent.Executors$DelegatedExecutorService: void execute(java.lang.Runnable)>-><java.util.concurrent.Executors$DelegatedExecutorService: void execute(java.lang.Runnable)>
<java.io.FilterInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<java.util.ArraysParallelSortHelpers$FJObject$Merger: void compute()>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: org.springframework.validation.MessageCodesResolver getMessageCodesResolver()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>-><java.io.StringReader: void mark(int)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder newSerializationContext()>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.javaboy.vhr.config.SecurityConfig: void lambda$loginFilter$0(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.apache.catalina.connector.CoyoteWriter: void flush()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntIteratorSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.info.GitProperties: java.util.Properties processEntries(java.util.Properties)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.web.servlet.DispatcherServlet: void <init>()>-><org.springframework.web.servlet.FrameworkServlet: void setDispatchOptionsRequest(boolean)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.ArrayList$ArrayListSpliterator: java.util.Spliterator trySplit()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurationSource(org.springframework.web.cors.CorsConfigurationSource)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder roles(java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.AbstractShortCircuitTask: java.lang.Object getLocalResult()>-><java.util.stream.SliceOps$SliceTask: java.lang.Object getEmptyResult()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.net.URL: int getDefaultPort()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.www.MessageHeader: void reset()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void setDaemon(boolean)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder customizers(java.lang.Iterable)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.FileInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.net.URLPermission: void init(java.lang.String)>-><java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.data.redis.connection.RedisStandaloneConfiguration: void setPort(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.nio.charset.Charset getEncoding()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureAsyncSupport(org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.SimpleTimeZone: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession obtainSession()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: java.lang.String ifHasText(java.lang.String)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder commandTimeout(java.time.Duration)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder commandTimeout(java.time.Duration)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.flywaydb.core.internal.database.sqlserver.SQLServerDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: long estimateSize()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactory(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder createBuilder(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder builder()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList: java.util.ListIterator listIterator()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutFilter createLogoutFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: void <init>(org.springframework.data.redis.cache.RedisCacheWriter)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.ArrayList$Itr: boolean hasNext()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void <init>(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.http.HttpClient: void finished()>-><java.io.PrintStream: boolean checkError()>
<org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: org.springframework.security.authentication.ReactiveAuthenticationManager authenticationManager()>-><org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager: void <init>(org.springframework.security.core.userdetails.ReactiveUserDetailsService)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: java.util.List createSentinels(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.web.servlet.View getView()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.PathMatchConfigurer: java.lang.Boolean isUseRegisteredSuffixPatternMatch()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>
<java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>
<org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>-><org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter: void <init>()>-><org.springframework.web.filter.GenericFilterBean: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.TimSort: void mergeHi(int,int,int,int)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void setConnectTimeout(int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: java.lang.String determineDatabaseName(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: java.lang.String determineUniqueName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder parentAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder eraseCredentials(boolean)>
<org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: javax.servlet.ServletResponse getObject()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletResponse getResponse()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: void <init>()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateCustomizer[])>-><java.util.Collections: java.util.Map emptyMap()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.Permissions: void add(java.security.Permission)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><javax.net.ssl.DefaultSSLSocketFactory: void <init>(java.lang.Exception)>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><org.springframework.util.StringUtils: boolean isEmpty(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutFilter createLogoutFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.logout.LogoutSuccessEventPublishingLogoutHandler: void <init>()>
<sun.nio.cs.StreamDecoder: boolean inReady()>-><sun.net.www.http.ChunkedInputStream: int available()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: void begin(long)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: void setTunnelState(sun.net.www.protocol.http.HttpURLConnection$TunnelState)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder: io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder enableAllAdaptiveRefreshTriggers()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setWebInvocationPrivilegeEvaluator(org.springframework.security.web.access.WebInvocationPrivilegeEvaluator)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.security.web.header.writers.HstsHeaderWriter: void <init>(org.springframework.security.web.util.matcher.RequestMatcher,long,boolean,boolean)>-><org.springframework.security.web.header.writers.HstsHeaderWriter: void updateHstsHeaderValue()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><java.util.AbstractList: int indexOf(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.String: int length()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor configure(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenHasText()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setSkipDefaultCallbacks(boolean)>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler configure(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler)>-><java.util.Collections$UnmodifiableCollection: void forEach(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer initializeUserDetailsBeanManagerConfigurer(org.springframework.context.ApplicationContext)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.URL: int getPort()>
<org.flywaydb.core.internal.database.oracle.OracleDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: java.security.Permission getPermission()>-><java.net.HttpURLConnection: java.security.Permission getPermission()>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.db2.DB2DatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><java.lang.Object: void <init>()>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.Streams$RangeIntSpliterator: long estimateSize()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: void <init>()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$SpinedNodeBuilder: void begin(long)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setWebFluxConfigurer(org.springframework.web.reactive.config.WebFluxConfigurer)>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder poolSize(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.lang.Throwable: java.lang.String getMessage()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.net.SocketOutputStream: void write(int)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.net.SocksSocketImpl: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: org.springframework.boot.jackson.JsonComponentModule jsonComponentModule()>-><org.springframework.boot.jackson.JsonComponentModule: void <init>()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setSchemas(java.util.List)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getDefaultConverters()>-><org.springframework.web.client.RestTemplate: void <init>()>
<org.springframework.web.util.pattern.InternalPathPatternParser: void skipCaptureRegex()>-><org.springframework.http.server.PathContainer$Options: char separator()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties getR2dbcPropertiesInstance()>
<org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder key(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder key(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isIgnoreIgnoredMigrations()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String)>
<java.net.URL: java.lang.String toExternalForm()>-><java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void <init>(org.springframework.context.ApplicationEventPublisher)>-><java.lang.Object: void <init>()>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.FileInputStream: long skip(long)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.TreeMap$TreeMapSpliterator: long estimateSize()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setAlgorithm(java.lang.String)>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.PathElement: int getScore()>
<org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>
<org.springframework.boot.web.server.AbstractConfigurableWebServerFactory: void <init>()>-><java.util.LinkedHashSet: void <init>()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: boolean supports(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>-><java.lang.String: void <init>(char[],int,int)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getDefaultConverters()>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: int size()>
<java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter: io.undertow.util.HeaderMap access$100(org.springframework.http.server.reactive.UndertowHeadersAdapter)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.csrf.CsrfFilter: void setRequireCsrfProtectionMatcher(org.springframework.security.web.util.matcher.RequestMatcher)>
<org.springframework.data.redis.cache.RedisCacheConfiguration: void registerDefaultConverters(org.springframework.core.convert.converter.ConverterRegistry)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.KeyManager[] configureKeyManagers()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.text.AttributeEntry: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: void finer(java.lang.String)>
<org.springframework.security.config.web.server.ServerHttpSecurity: void <init>()>-><org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher anyExchange()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: long estimateSize()>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>-><org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: void <init>()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: void remove()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setMultipartResolver(org.springframework.web.multipart.MultipartResolver)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.HashMap$ValueSpliterator: int characteristics()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactory(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder jta(boolean)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.HttpURLConnection: boolean getInstanceFollowRedirects()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: long estimateSize()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder(org.springframework.context.ApplicationContext,java.util.List)>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: void <init>()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.SimpleTimeZone: boolean equals(java.lang.Object)>-><java.util.SimpleTimeZone: boolean hasSameRules(java.util.TimeZone)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><java.util.Collections$EmptyList: java.lang.Object[] toArray()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.saphana.SAPHANADatabaseType: java.lang.String getName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DefaultColWidthRecord: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform get()>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform[] values()>
<org.springframework.security.web.header.Header: void <init>(java.lang.String,java.lang.String[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<org.springframework.security.access.method.AbstractMethodSecurityMetadataSource: void <init>()>-><java.lang.Object: void <init>()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.Handler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.https.Handler)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: java.lang.Void run()>-><org.apache.catalina.connector.Response: void setContentType(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder threadNamePrefix(java.lang.String)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: void <init>()>-><org.javaboy.vhr.config.SecurityConfig$1: void <init>(org.javaboy.vhr.config.SecurityConfig)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.RDN: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: boolean isEmpty()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setSqlScriptEncoding(java.nio.charset.Charset)>
<org.springframework.data.redis.cache.DefaultRedisCacheWriter: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory,java.time.Duration,org.springframework.data.redis.cache.CacheStatisticsCollector)>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.HashMap$ValueSpliterator: int characteristics()>
<org.apache.tomcat.util.buf.CharChunk: void append(char)>-><org.apache.tomcat.util.buf.CharChunk: void makeSpace(int)>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: org.springframework.security.web.reactive.result.view.CsrfRequestDataValueProcessor requestDataValueProcessor()>-><org.springframework.security.web.reactive.result.view.CsrfRequestDataValueProcessor: void <init>()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<java.util.ArrayList$SubList$1: void add(java.lang.Object)>-><java.util.ArrayList$SubList$1: void checkForComodification()>
<org.springframework.boot.info.GitProperties: void coercePropertyToEpoch(java.util.Properties,java.lang.String)>-><java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.charset.CoderResult: void throwException()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.lang.Throwable: java.lang.String getMessage()>
<sun.net.www.http.HttpClient: void <init>()>-><sun.net.NetworkClient: void <init>()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.PatternParseException: void <init>(java.lang.Throwable,int,char[],org.springframework.web.util.pattern.PatternParseException$PatternMessage,java.lang.Object[])>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisProperties getProperties()>
<java.io.DataInputStream: short readShort()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder builder()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: void <init>()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void setMaxRedirects(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.format.support.FormattingConversionService mvcConversionService()>-><org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void addFormatters(org.springframework.format.FormatterRegistry)>
<org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration: org.springframework.jdbc.core.JdbcTemplate jdbcTemplate(javax.sql.DataSource,org.springframework.boot.autoconfigure.jdbc.JdbcProperties)>-><org.springframework.jdbc.core.JdbcTemplate: void setQueryTimeout(int)>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void start()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><javax.security.auth.Policy$2: void <init>(java.lang.String)>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$EmptyNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.net.URI: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitTemplateConfiguration: org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer rabbitTemplateConfigurer(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer: void setMessageConverter(org.springframework.amqp.support.converter.MessageConverter)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: void <init>(int,char[],boolean,char)>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(org.springframework.boot.autoconfigure.security.SecurityProperties)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void setDispatcherTypes(java.util.EnumSet)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Hashtable: java.lang.String toString()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>
<java.util.AbstractMap: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getSchool()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.InetSocketAddress: void <init>(java.lang.String,int)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void setRootViewName(java.lang.String)>-><org.springframework.web.servlet.mvc.ParameterizableViewController: void setViewName(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.NetworkClient: void setReadTimeout(int)>
<java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfInt spliterator()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><java.io.FileInputStream: void close()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveStream: java.lang.Thread access$000()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.util.function.Supplier)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryBeanCreationException connectionFactoryBeanCreationException(java.lang.String,org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>
<org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: org.springframework.data.redis.core.ReactiveStringRedisTemplate reactiveStringRedisTemplate(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory)>-><org.springframework.data.redis.core.ReactiveStringRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.OffsetDateTime: java.lang.String toString()>
<org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.firebird.FirebirdDatabaseType: java.lang.String getName()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setLockRetryCount(java.lang.Integer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.apache.ibatis.parsing.XNode: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer: void <init>()>-><java.util.ArrayList: void <init>()>
<sun.net.www.http.ChunkedOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.data.web.config.PageableHandlerMethodArgumentResolverCustomizer getPageableHandlerMethodArgumentResolverCustomizer()>
<org.springframework.security.web.csrf.CsrfLogoutHandler: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setUseCaches(boolean)>
<org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.data.redis.connection.RedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder initialCacheNames(java.util.Set)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void registerJavaDate(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: java.lang.String getDatePattern()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><org.apache.catalina.connector.Response$PrivilegedEncodeUrl: java.lang.Object run()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDirectExchange(org.springframework.amqp.core.DirectExchange)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties getR2dbcPropertiesInstance()>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: void setUsername(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.data.web.config.SortHandlerMethodArgumentResolverCustomizer getSortHandlerMethodArgumentResolverCustomizer()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties$Jwt: java.lang.String readPublicKey()>-><org.springframework.util.StreamUtils: java.lang.String copyToString(java.io.InputStream,java.nio.charset.Charset)>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.Object: java.lang.Class getClass()>
<javax.net.ssl.HttpsURLConnection: void <init>(java.net.URL)>-><java.net.HttpURLConnection: void <init>(java.net.URL)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.MultiValueMapAdapter: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.InputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PasswordRecord: java.lang.String toString()>
<sun.util.logging.PlatformLogger: void finest(java.lang.String)>-><sun.util.logging.PlatformLogger$JavaLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.javaboy.vhr.model.Employee: java.lang.String toString()>
<java.io.DataOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.lang.Math: long min(long,long)>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.MeteredStream: int available()>
<java.io.PrintStream: void write(java.lang.String)>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<org.springframework.web.context.request.DestructionCallbackBindingListener: void <init>(java.lang.Runnable)>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void configurePartConverters(org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter,java.util.Collection)>-><org.springframework.http.converter.FormHttpMessageConverter: java.util.List getPartConverters()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.net.SocketImpl: java.lang.String toString()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>-><java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.FileInputStream: int read(byte[],int,int)>
<org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: org.springframework.web.filter.CharacterEncodingFilter characterEncodingFilter()>-><org.springframework.web.filter.CharacterEncodingFilter: void setForceResponseEncoding(boolean)>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.ObjectInputStream$BlockDataInputStream: long skip(long)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: long estimateSize()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint createDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator spliterator()>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.WebProperties,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: void <init>()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureValidateMigrationNaming(org.flywaydb.core.api.configuration.FluentConfiguration,boolean)>-><org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration validateMigrationNaming(boolean)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.String getBeanName(java.lang.Class,java.lang.String[])>-><org.springframework.util.Assert: void isTrue(boolean,java.util.function.Supplier)>
<org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(com.fasterxml.jackson.databind.ObjectMapper)>-><org.springframework.http.converter.json.MappingJackson2HttpMessageConverter: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>
<sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getContentType()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.RefModeRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.UnknownRecord: java.lang.String toString()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><javax.security.auth.Policy$1: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: java.util.Optional getWelcomePage()>-><org.springframework.boot.autoconfigure.web.WebProperties$Resources: java.lang.String[] getStaticLocations()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider findProvider(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setLocaleResolver(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$LocaleResolver)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.SubList$1: boolean hasNext()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.String: char charAt(int)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.catalina.connector.Response: boolean isAppCommitted()>-><org.apache.catalina.connector.Response: int getContentLength()>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: int indexOf(int)>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>-><javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity csrf(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.context.ApplicationContext getContext()>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<java.net.SocksSocketImpl: void <init>(java.net.Proxy)>-><java.net.PlainSocketImpl: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>-><java.util.Stack: java.lang.Object pop()>
<sun.net.www.MessageHeader: void parseHeader(java.io.InputStream)>-><sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<sun.net.www.protocol.http.HttpURLConnection: boolean usingProxy()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <init>(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.boot.autoconfigure.web.format.WebConversionService: void addFormatters(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>
<java.util.Hashtable: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.https.Handler)>-><javax.net.ssl.HttpsURLConnection: void <init>(java.net.URL)>
<org.springframework.data.redis.cache.DefaultRedisCacheWriter: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.cache.DefaultRedisCacheWriter: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory,java.time.Duration)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer: void <init>()>
<org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration: org.springframework.data.redis.core.StringRedisTemplate stringRedisTemplate(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.StringRedisTemplate: void <init>()>
<org.springframework.boot.web.servlet.server.Encoding: boolean shouldForce(org.springframework.boot.web.servlet.server.Encoding$Type)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.util.regex.Matcher: boolean find()>
<org.springframework.security.config.annotation.web.configuration.AutowiredWebSecurityConfigurersIgnoreParents: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.NetworkClient$1: java.lang.Object run()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.TreeMap$KeySpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addFormatters(org.springframework.format.FormatterRegistry)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDispatcherServletRegistrationBean(org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.Parsed: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.StreamOpFlag: boolean isPreserved(int)>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.http.PosterOutputStream: void close()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.data.redis.connection.RedisPassword: org.springframework.data.redis.connection.RedisPassword of(java.lang.String)>
<sun.net.www.MeteredStream: int read()>-><java.util.zip.ZipFile$ZipFileInputStream: int read()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.access.AccessDeniedHandler createDefaultDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<sun.net.www.http.ChunkedInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: void ensureOpen()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Map)>-><org.springframework.util.MultiValueMapAdapter: boolean isEmpty()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: void setPersistenceUnitRootLocation(java.lang.String)>
<java.util.stream.Node$OfInt: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: boolean welcomeTemplateExists(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider getProvider(java.lang.String,org.springframework.context.ApplicationContext)>
<org.apache.catalina.core.AprLifecycleListener: void <init>()>-><org.apache.catalina.core.AprStatus: void setInstanceCreated(boolean)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.KeyManager[] configureKeyManagers()>-><sun.net.www.MeteredStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceSslClientConfigurationBuilder: void <init>(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><java.lang.Object: void <init>()>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String)>-><sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder roles(java.lang.String[])>-><java.util.ArrayList: void <init>(int)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><sun.net.NetworkClient$2: void <init>(sun.net.NetworkClient)>
<org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter: void <init>()>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: com.fasterxml.jackson.databind.ObjectMapper build()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: void remove()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitTemplateConfiguration: org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer rabbitTemplateConfigurer(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer: void setRabbitProperties(org.springframework.boot.autoconfigure.amqp.RabbitProperties)>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.net.URL: java.lang.String getHost()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><javax.security.auth.Policy$3: void <init>(javax.security.auth.Policy,java.lang.String)>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.MeteredStream: int read()>-><java.io.FileInputStream: int read()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Integer extractKeyHash(java.lang.String)>-><org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<reactor.util.function.Tuple3: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisClusterConfiguration getClusterConfiguration()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster getCluster()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: void forEachRemaining(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void begin(long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.AbstractFunctionPtg: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.Instant: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.tomcat.util.buf.CharChunk: void <init>(int)>-><org.apache.tomcat.util.buf.CharChunk: void allocate(int,int)>
<java.util.stream.SliceOps$1: java.util.Spliterator unorderedSkipLimitSpliterator(java.util.Spliterator,long,long,long)>-><java.lang.Math: long min(long,long)>
<org.springframework.boot.task.TaskExecutorBuilder: java.util.Set append(java.util.Set,java.lang.Iterable)>-><java.lang.Iterable: void forEach(java.util.function.Consumer)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.HttpConnectSocketImpl$1: java.lang.Object run()>-><java.net.HttpConnectSocketImpl$1: java.lang.Void run()>
<org.springframework.web.context.request.AbstractRequestAttributesScope: java.lang.Object get(java.lang.String,org.springframework.beans.factory.ObjectFactory)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath: java.lang.String getServletUrlMapping()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean: java.lang.String getPath()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.MulBlankRecord: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>
<org.springframework.context.annotation.MBeanExportConfiguration: org.springframework.jmx.export.annotation.AnnotationMBeanExporter mbeanExporter()>-><org.springframework.context.annotation.MBeanExportConfiguration: void setupServer(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>
<reactor.core.Exceptions: java.lang.Throwable addSuppressed(java.lang.Throwable,java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer: void <init>()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.net.SocketPermissionCollection: java.util.Enumeration elements()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean dispatcherServletRegistration(org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Servlet: int getLoadOnStartup()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: int characteristics()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractPipeline: int getStreamAndOpFlags()>
<sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setHttpSecurity(org.springframework.security.config.annotation.web.builders.HttpSecurity)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String trimPrefix(java.lang.String)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeDynamic(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.flywaydb.core.internal.database.mysql.mariadb.MariaDBDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.Socket: java.io.InputStream getInputStream()>
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$CborFactoryInitializer: com.fasterxml.jackson.core.JsonFactory create()>-><com.fasterxml.jackson.dataformat.cbor.CBORFactory: void <init>()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.HttpClient: void closeServer()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: void customizeConfigurationFromUrl(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceSslClientConfigurationBuilder useSsl()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder value(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder value(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean forwardedHeaderFilter()>
<org.springframework.security.web.header.writers.CacheControlHeadersWriter: java.util.List createHeaders()>-><org.springframework.security.web.header.Header: void <init>(java.lang.String,java.lang.String[])>
<org.springframework.boot.jdbc.EmbeddedDatabaseConnection: org.springframework.boot.jdbc.EmbeddedDatabaseConnection getEmbeddedDatabaseConnection(java.lang.String)>-><java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext string()>-><org.springframework.data.redis.serializer.RedisSerializer: org.springframework.data.redis.serializer.RedisSerializer string()>
<sun.net.www.MessageHeader: void prepend(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void grow()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration: java.lang.Object createDataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,java.lang.Class)>-><org.springframework.boot.jdbc.DataSourceBuilder: org.springframework.boot.jdbc.DataSourceBuilder type(java.lang.Class)>
<org.springframework.boot.info.BuildProperties: void coerceDate(java.util.Properties,java.lang.String)>-><java.time.Instant: long toEpochMilli()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Pool: boolean isAllowCoreThreadTimeout()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void beforeInit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<java.io.DataOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.lang.String toString()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><java.util.LinkedList: java.lang.Object poll()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.Buffer: java.nio.Buffer position(int)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void end()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void flush(boolean)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator spliterator()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactoryCustomizer tomcatServletWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.ServerProperties)>
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder cbor()>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: void <init>()>
<org.springframework.context.annotation.MBeanExportConfiguration: void setupServer(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform get()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.net.ResponseCache: java.net.ResponseCache getDefault()>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor methodSecurityInterceptor(org.springframework.security.access.method.AbstractMethodSecurityMetadataSource)>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.context.annotation.MBeanExportConfiguration: void <init>()>
<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object getObject()>-><org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: java.lang.Object createInstance()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.util.Map$Entry next()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter,io.undertow.util.HttpString)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <init>(boolean,java.util.Collection)>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>
<ch.qos.logback.classic.util.ContextInitializer: void configureByResource(java.net.URL)>-><java.lang.String: boolean endsWith(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient$1: java.lang.Void run()>-><java.net.InetSocketAddress: int getPort()>
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setRequestBodyAdvice(java.util.List)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>-><java.lang.Object: void <init>()>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: void <init>(sun.net.www.protocol.http.HttpCallerInfo)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean dispatcherServletRegistration(org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ObjectProvider)>
<reactor.core.publisher.Operators: void onDiscardQueueWithClear(java.util.Queue,reactor.util.context.Context,java.util.function.Function)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$3: java.security.PermissionCollection run()>-><javax.security.auth.Policy: javax.security.auth.Policy getPolicy()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.Map getCorsConfigurations()>-><org.springframework.web.servlet.config.annotation.CorsRegistry: java.util.Map getCorsConfigurations()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.http.HttpURLConnection$7: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: java.util.Optional getWelcomePage()>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><java.io.BufferedInputStream: void close()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.InternalResourceViewResolver defaultViewResolver()>-><org.springframework.web.servlet.view.InternalResourceViewResolver: void <init>()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$IteratorSpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration$HazelcastServerConfigConfiguration: com.hazelcast.core.HazelcastInstance hazelcastInstance(com.hazelcast.config.Config)>-><org.springframework.boot.autoconfigure.hazelcast.HazelcastInstanceFactory: com.hazelcast.core.HazelcastInstance getHazelcastInstance()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.httpserver.Request$ReadStream: void reset()>-><java.nio.Buffer: java.nio.Buffer flip()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.OutputStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.RegexPathElement: int getCaptureCount()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.base.DatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.ObjectOutputStream$BlockDataOutputStream: void close()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.Vector: void addElement(java.lang.Object)>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>-><java.lang.String: java.lang.String toString()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><org.springframework.web.context.support.ServletContextResource: java.lang.String getFilename()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.io.BufferedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.logout.DelegatingLogoutSuccessHandler: void <init>(java.util.LinkedHashMap)>-><org.springframework.util.Assert: void notEmpty(java.util.Map,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><sun.net.www.protocol.https.Handler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>
<org.springframework.format.datetime.DateFormatterRegistrar: void setFormatter(org.springframework.format.datetime.DateFormatter)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.savedrequest.RequestCache getRequestCache(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createDefaultSavedRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.lang.StringBuilder: void <init>()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setInitSqls(java.util.List)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jackson.JacksonProperties getJacksonPropertiesInstance()>-><org.springframework.boot.autoconfigure.jackson.JacksonProperties: void setLocale(java.util.Locale)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void begin(long)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.io.FilterInputStream: void mark(int)>-><java.io.BufferedInputStream: void mark(int)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.WSBoolRecord: java.lang.String toString()>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.catalina.connector.Response: boolean isCommitted()>
<sun.util.calendar.Era: long getSince(java.util.TimeZone)>-><java.util.SimpleTimeZone: int getOffset(long)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.amqp.core.AmqpAdmin getAmqpAdmin()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.authentication.ReactiveAuthenticationManager authenticationManager()>-><org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager: void <init>(org.springframework.security.core.userdetails.ReactiveUserDetailsService)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurations(java.util.Map)>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurationSource(org.springframework.web.cors.CorsConfigurationSource)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: void cancel()>-><java.util.stream.AbstractShortCircuitTask: void cancel()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>-><sun.net.www.HeaderParser: void <init>(java.lang.String)>
<sun.net.www.MeteredStream: void close()>-><java.io.InputStream: void close()>
<java.io.InputStream: int read(byte[])>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>-><java.util.ArrayList: boolean isEmpty()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.jmx.export.annotation.AnnotationMBeanExporter: void <init>()>-><org.springframework.jmx.export.MBeanExporter: void <init>()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<org.springframework.boot.web.client.RestTemplateBuilder: java.util.Set copiedSetOf(java.util.Collection)>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.util.regex.Matcher: java.lang.String group()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher[])>-><org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<org.springframework.security.web.server.savedrequest.WebSessionServerRequestCache: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher createDefaultRequestMacher()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: void <init>(org.springframework.http.MediaType[])>
<java.time.format.DateTimeFormatterBuilder$ZoneTextPrinterParser: java.time.format.DateTimeFormatterBuilder$PrefixTree getTree(java.time.format.DateTimeParseContext)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.web.servlet.mvc.method.annotation.AbstractMappingJacksonResponseBodyAdvice: void <init>()>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer flywayInitializer(org.flywaydb.core.Flyway,org.springframework.beans.factory.ObjectProvider)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.MemAreaPtg: java.lang.String toString()>
<java.util.Collections$SetFromMap: void forEach(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: void forEach(java.util.function.Consumer)>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.format.support.FormattingConversionService mvcConversionService()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Format getFormat()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: void <init>(java.util.Spliterator,long,long,long,long)>-><java.util.Spliterator: boolean hasCharacteristics(int)>
<sun.net.www.ParseUtil: void appendFragment(java.lang.StringBuffer,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(char[])>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<io.lettuce.core.TimeoutOptions$DefaultTimeoutSource: void <init>()>-><io.lettuce.core.TimeoutOptions$TimeoutSource: void <init>()>
<org.springframework.core.annotation.AnnotationAwareOrderComparator: void sortIfNecessary(java.lang.Object)>-><org.springframework.core.annotation.AnnotationAwareOrderComparator: void sort(java.lang.Object[])>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter: void <init>()>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: void <init>(org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>-><java.net.URL: java.lang.String getFile()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Vector$VectorSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: int characteristics()>
<java.util.zip.InflaterInputStream: void close()>-><java.io.InputStream: void close()>
<org.springframework.security.authentication.dao.DaoAuthenticationProvider: void doAfterPropertiesSet()>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean: void <init>(java.lang.String,org.springframework.boot.web.servlet.ServletRegistrationBean[])>-><org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.Vector$ListItr: void add(java.lang.Object)>-><java.util.Vector$Itr: void checkForComodification()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: java.util.List createSentinels(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: boolean isEmpty()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator spliterator()>
<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>-><javax.net.ssl.SSLException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: void privilegedOpenServer(java.net.InetSocketAddress)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties$Jwt: java.lang.String readPublicKey()>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.KeyManager[] configureKeyManagers()>-><java.io.InputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer apply(org.springframework.security.config.annotation.SecurityConfigurer)>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void add(org.springframework.security.config.annotation.SecurityConfigurer)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerOpaqueTokenConfiguration$OpaqueTokenIntrospectionClientConfiguration: org.springframework.security.oauth2.server.resource.introspection.NimbusOpaqueTokenIntrospector opaqueTokenIntrospector(org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties)>-><org.springframework.security.oauth2.server.resource.introspection.NimbusOpaqueTokenIntrospector: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.alibaba.druid.support.http.StatViewServlet: void <init>()>-><com.alibaba.druid.stat.DruidStatService: com.alibaba.druid.stat.DruidStatService getInstance()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setAddressShuffleMode(org.springframework.amqp.rabbit.connection.AbstractConnectionFactory$AddressShuffleMode)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.web.servlet.server.Encoding: boolean shouldForce(org.springframework.boot.web.servlet.server.Encoding$Type)>-><java.lang.Boolean: boolean booleanValue()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: java.lang.String trim()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int indexOf(java.lang.String)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressSource: void beginTracking()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: org.flywaydb.core.Flyway flyway(org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: javax.sql.DataSource configureDataSource(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,javax.sql.DataSource,javax.sql.DataSource)>
<sun.net.NetworkClient$1: java.lang.Object run()>-><sun.net.NetworkClient$1: java.lang.Void run()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><java.io.InputStreamReader: void close()>
<org.apache.catalina.connector.OutputBuffer: int transfer(java.lang.String,int,int,java.nio.CharBuffer)>-><org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.data.mapping.model.SimpleTypeHolder: void <init>(java.util.Set,org.springframework.data.mapping.model.SimpleTypeHolder)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: int size()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void forEach(java.lang.Object)>
<org.springframework.security.web.header.Header: void <init>(java.lang.String,java.lang.String[])>-><org.springframework.util.Assert: void noNullElements(java.lang.Object[],java.lang.String)>
<org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int getKeyHash()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$ValueSpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.web.server.header.XXssProtectionServerHttpHeadersWriter: void updateDelegate()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder builder()>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<reactor.util.function.Tuple2: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.lang.Integer: void <init>(int)>
<org.springframework.web.servlet.FrameworkServlet: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController basicErrorController(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.web.ServerProperties: org.springframework.boot.autoconfigure.web.ErrorProperties getError()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addReturnValueHandlers(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.ByteArrayInputStream: long skip(long)>
<org.apache.poi.util.LittleEndianOutputStream: void writeUInt(long)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String access$100(sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><java.io.InputStream: int read(byte[])>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.web.server.savedrequest.WebSessionServerRequestCache: void <init>()>-><org.springframework.security.web.server.savedrequest.WebSessionServerRequestCache: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher createDefaultRequestMacher()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.security.SecurityProperties getSecurityPropertiesInstance()>
<sun.net.www.MeteredStream: void mark(int)>-><java.io.FilterInputStream: void mark(int)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber: boolean isEmpty()>
<org.springframework.web.servlet.FrameworkServlet: void <init>()>-><org.springframework.web.servlet.HttpServletBean: void <init>()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: boolean isEmpty()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration: org.springframework.boot.autoconfigure.web.embedded.TomcatWebServerFactoryCustomizer tomcatWebServerFactoryCustomizer(org.springframework.core.env.Environment,org.springframework.boot.autoconfigure.web.ServerProperties)>-><org.springframework.boot.autoconfigure.web.embedded.TomcatWebServerFactoryCustomizer: void <init>(org.springframework.core.env.Environment,org.springframework.boot.autoconfigure.web.ServerProperties)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setTransactionManagerCustomizers(org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: long estimateSize()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.net.Proxy: boolean equals(java.lang.Object)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode: java.lang.String toString()>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode: long count()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.WebProperties getWebPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.WebProperties: void <init>()>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder awaitTermination(boolean)>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean forwardedHeaderFilter()>-><org.springframework.boot.web.servlet.FilterRegistrationBean: void <init>(javax.servlet.Filter,org.springframework.boot.web.servlet.ServletRegistrationBean[])>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap: void forEach(java.util.function.BiConsumer)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.Boolean getOutputQueryResults()>
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: void configure(org.springframework.security.config.annotation.authentication.ProviderManagerBuilder)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.BookBoolRecord: java.lang.String toString()>
<java.util.WeakHashMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.zip.ZipFile: void close()>-><java.io.InputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void <init>()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher anyExchange()>-><org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers$1: void <init>()>
<java.util.stream.SliceOps: long access$300(long,long,long)>-><java.util.stream.SliceOps: long calcSize(long,long,long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.security.web.context.HttpSessionSecurityContextRepository: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurerAdapter apply(org.springframework.security.config.annotation.SecurityConfigurerAdapter)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.ReactiveJwtDecoder jwtDecoder()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties$Jwt: java.lang.String getIssuerUri()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint getAuthenticationEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator spliterator()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.ContentNegotiatingViewResolver viewResolver(org.springframework.beans.factory.BeanFactory)>-><org.springframework.web.servlet.view.ContentNegotiatingViewResolver: void <init>()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.http.KeepAliveCleanerEntry: void <init>(sun.net.www.http.KeepAliveStream,sun.net.www.http.HttpClient)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.DigestAuthentication: boolean supportsPreemptiveAuthorization()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.WebProperties getWebPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.WebProperties: void setLocale(java.util.Locale)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$2(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.apache.catalina.connector.ResponseFacade: java.io.PrintWriter getWriter()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.util.Date getConversionTime()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<org.springframework.cache.concurrent.ConcurrentMapCacheManager: org.springframework.cache.Cache createConcurrentMapCache(java.lang.String)>-><org.springframework.cache.concurrent.ConcurrentMapCache: void <init>(java.lang.String,java.util.concurrent.ConcurrentMap,boolean,org.springframework.core.serializer.support.SerializationDelegate)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isConcrete()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.util.List getLocations()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$3(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.apache.catalina.connector.CoyoteWriter: void write(java.lang.String)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.CharBuffer: int arrayOffset()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes: java.util.stream.Node$Builder$OfInt intBuilder(long)>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory tomcatServletWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutSuccessHandler createDefaultSuccessHandler()>-><org.springframework.security.web.authentication.logout.DelegatingLogoutSuccessHandler: void <init>(java.util.LinkedHashMap)>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.io.DataInputStream: int read(byte[])>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.Nodes$ConcNode: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void <init>(java.util.stream.Node)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: java.lang.String[] getMappingResources()>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<org.springframework.security.web.context.HttpSessionSecurityContextRepository: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties getDruidStatPropertiesInstance()>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties: void setStatViewServlet(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$StatViewServlet)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$IntArrayNode: long count()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<org.springframework.util.ResourceUtils: void useCachesIfNecessary(java.net.URLConnection)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setUseCaches(boolean)>
<sun.util.locale.LocaleUtils: boolean isEmpty(java.util.Set)>-><java.util.AbstractCollection: boolean isEmpty()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitTemplateConfiguration: org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer rabbitTemplateConfigurer(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer: void <init>()>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.ReduceOps$5ReducingSink: void accept(int)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.boot.info.InfoProperties: java.util.Properties copy(java.util.Properties)>-><java.util.Properties: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Collections$2: long estimateSize()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.net.www.http.HttpClient$1: java.lang.Object run()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper alwaysApplyingWhenNonNull()>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper alwaysApplying(org.springframework.boot.context.properties.PropertyMapper$SourceOperator)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.config.web.server.ServerHttpSecurity httpSecurity()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void setDefaultRolePrefix(java.lang.String)>
<org.springframework.boot.info.InfoProperties: void <init>(java.util.Properties)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.TrustManager[] configureTrustManagers()>-><java.io.BufferedInputStream: void close()>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>
<org.springframework.boot.info.BuildProperties: void coerceDate(java.util.Properties,java.lang.String)>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration$HazelcastServerConfigConfiguration: com.hazelcast.core.HazelcastInstance hazelcastInstance(com.hazelcast.config.Config)>
<sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.springframework.util.MultiValueMapAdapter: java.util.List remove(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.Object remove(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean isAuthorizationStale(java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setOutputQueryResults(java.lang.Boolean)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$3ReducingSink: void begin(long)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: org.springframework.boot.web.servlet.error.DefaultErrorAttributes errorAttributes()>-><org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><java.lang.Thread: boolean isAlive()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>-><sun.net.www.MessageHeader: void print(java.io.PrintStream)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties: java.lang.String getThreadNamePrefix()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher notMatchingMediaType(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.http.MediaType)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void setIgnoredMediaTypes(java.util.Set)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.web.servlet.config.annotation.PathMatchConfigurer: org.springframework.util.PathMatcher getPathMatcherOrDefault()>-><org.springframework.util.AntPathMatcher: void <init>()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.io.DataInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfRef: void forEach(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.AbstractPipeline: java.util.Spliterator sourceSpliterator(int)>-><java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>
<org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter: void <init>(org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter$XFrameOptionsMode)>-><java.lang.Object: void <init>()>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.lang.Object: void <init>()>
<org.springframework.web.bind.support.ConfigurableWebBindingInitializer: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.web.savedrequest.RequestCacheAwareFilter: void <init>(org.springframework.security.web.savedrequest.RequestCache)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$EmptyNode: void forEach(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void <init>(java.util.stream.SliceOps$1,java.util.stream.Sink)>-><java.util.stream.Sink$ChainedReference: void <init>(java.util.stream.Sink)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactory(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder mappingResources(java.lang.String[])>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<com.fasterxml.jackson.databind.module.SimpleModule: void <init>(com.fasterxml.jackson.core.Version)>-><com.fasterxml.jackson.databind.Module: void <init>()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: long estimateSize()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.jdbc.datasource.embedded.EmbeddedDatabase getEmbeddedDatabase()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Sink: void begin(long)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean: void <init>(org.springframework.web.servlet.DispatcherServlet,java.lang.String)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void <init>(javax.servlet.Servlet,java.lang.String[])>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.boot.autoconfigure.web.WebProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ListableBeanFactory)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer restTemplateBuilderConfigurer(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer: void setRestTemplateRequestCustomizers(java.util.List)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.URL: void <init>(java.lang.String)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>-><java.io.StringReader: void reset()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.Class getType()>
<org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(org.springframework.boot.autoconfigure.security.SecurityProperties)>-><org.springframework.boot.web.servlet.RegistrationBean: void setOrder(int)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.MessageHeader: void set(int,java.lang.String,java.lang.String)>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeRegularOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><java.util.LinkedHashMap: void forEach(java.util.function.BiConsumer)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: long estimateSize()>
<sun.net.www.http.HttpClient: void finished()>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.BeanNameViewResolver beanNameViewResolver()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.io.DataInputStream: int read(byte[])>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<sun.net.www.MessageHeader: void remove(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL,java.lang.String,int)>
<sun.net.www.protocol.http.AuthenticationHeader$SchemeMapValue: void <init>(sun.net.www.HeaderParser,java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: void <init>(org.springframework.web.servlet.HandlerInterceptor)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: void <init>()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.net.URL)>-><java.net.URL: java.lang.String getFile()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.session.InvalidSessionAccessDeniedHandler: void <init>(org.springframework.security.web.session.InvalidSessionStrategy)>
<org.springframework.boot.info.GitProperties: java.lang.String coerceToEpoch(java.lang.String)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$EmptySpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator spliterator()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.util.MultiValueMapAdapter: java.util.Collection values()>-><java.util.Collections$UnmodifiableMap: java.util.Collection values()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.PrintStream: void flush()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator$OfPrimitive spliterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration: com.fasterxml.jackson.databind.ObjectMapper jacksonObjectMapper(org.springframework.http.converter.json.Jackson2ObjectMapperBuilder)>
<java.io.FilterInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator spliterator()>
<org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.IdentityHashMap$EntrySpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setOracleKerberosConfigFile(java.lang.String)>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><io.netty.util.concurrent.SingleThreadEventExecutor: boolean offerTask(java.lang.Runnable)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurations(java.util.Map)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy: void <init>(java.lang.String)>-><org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy: void <init>(java.lang.String,org.springframework.security.web.RedirectStrategy)>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.ExceptionTranslationFilter: void setAccessDeniedHandler(org.springframework.security.web.access.AccessDeniedHandler)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.util.Map getJdbcProperties()>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory: void destroy()>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: void destroy()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setMapReactiveUserDetailsService(org.springframework.security.core.userdetails.MapReactiveUserDetailsService)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.SocketImpl: java.net.Socket getSocket()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.SocketImpl: java.net.InetAddress getInetAddress()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.MeteredStream: long skip(long)>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder(org.springframework.context.ApplicationContext,java.util.List)>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder applicationContext(org.springframework.context.ApplicationContext)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<org.springframework.web.util.pattern.PatternParseException: void <init>(int,char[],org.springframework.web.util.pattern.PatternParseException$PatternMessage,java.lang.Object[])>-><org.springframework.web.util.pattern.PatternParseException$PatternMessage: java.lang.String formatMessage(java.lang.Object[])>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: java.util.Map getClientRegistrations(org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties)>-><java.util.HashMap: void <init>()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfLong: void forEach(java.util.function.Consumer)>
<org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext createEmptyContext()>-><org.springframework.security.core.context.GlobalSecurityContextHolderStrategy: org.springframework.security.core.context.SecurityContext createEmptyContext()>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.MeteredStream: int available()>-><java.util.zip.ZipFile$ZipFileInputStream: int available()>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><java.lang.Integer: java.lang.String toHexString(int)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration: org.springframework.boot.availability.ApplicationAvailabilityBean applicationAvailability()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntArraySpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: org.springframework.web.servlet.DispatcherServlet dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: boolean isDispatchOptionsRequest()>
<org.springframework.web.util.pattern.InternalPathPatternParser: void pushPathElement(org.springframework.web.util.pattern.PathElement)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getDescription(boolean)>-><javax.servlet.ServletRequestWrapper: java.lang.String getRemoteAddr()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<java.io.DataInputStream: int read(byte[])>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: long estimateSize()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void setPassword(char[])>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper alwaysApplying(org.springframework.boot.context.properties.PropertyMapper$SourceOperator)>-><org.springframework.boot.context.properties.PropertyMapper: void <init>(org.springframework.boot.context.properties.PropertyMapper,org.springframework.boot.context.properties.PropertyMapper$SourceOperator)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentSecurityPolicyConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentSecurityPolicyConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>
<org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration: org.mybatis.spring.SqlSessionTemplate sqlSessionTemplate(org.apache.ibatis.session.SqlSessionFactory)>-><org.mybatis.spring.boot.autoconfigure.MybatisProperties: org.apache.ibatis.session.ExecutorType getExecutorType()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: void setBootstrapExecutor(org.springframework.core.task.AsyncTaskExecutor)>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<org.springframework.boot.autoconfigure.context.LifecycleProperties: void <init>()>-><java.time.Duration: java.time.Duration ofSeconds(long)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.HttpURLConnection$2: java.lang.Object run()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean hasCharacteristics(int)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source getSource(java.util.function.Supplier)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source from(java.util.function.Supplier)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void endAuthRequest(java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>
<org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler: void <init>(org.springframework.http.HttpStatus)>-><java.lang.Object: void <init>()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNot(java.util.function.Predicate)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.lang.Throwable: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.UseSelFSRecord: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><java.lang.String: boolean endsWith(java.lang.String)>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Collection)>-><java.util.AbstractList$Itr: boolean hasNext()>
<sun.net.www.http.ChunkedOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush(boolean)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Spliterator trySplit()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder clientOptions(io.lettuce.core.ClientOptions)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientOptions(io.lettuce.core.ClientOptions)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setConnectionFactory(io.r2dbc.spi.ConnectionFactory)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: org.springframework.security.web.header.HeaderWriterFilter createHeaderWriterFilter()>-><java.util.ArrayList: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String unquote(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.AbstractList: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.net.InetSocketAddress: void <init>(int,java.lang.String)>-><java.net.SocketAddress: void <init>()>
<org.springframework.security.web.header.Header: void <init>(java.lang.String,java.lang.String[])>-><java.lang.Object: void <init>()>
<sun.net.www.http.HttpClient: void finished()>-><sun.net.www.http.HttpClient: void closeServer()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.javaboy.vhr.config.CustomFilterInvocationSecurityMetadataSource: java.util.Collection getAttributes(java.lang.Object)>-><org.javaboy.vhr.model.Menu: java.util.List getRoles()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration: org.springframework.boot.web.reactive.result.view.MustacheViewResolver mustacheViewResolver(com.samskivert.mustache.Mustache$Compiler,org.springframework.boot.autoconfigure.mustache.MustacheProperties)>-><org.springframework.boot.autoconfigure.mustache.MustacheProperties: java.lang.String getSuffix()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext just(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext build()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.HttpServletBean: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory tomcatServletWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: java.util.Collection getTomcatContextCustomizers()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void setMaxRedirects(int)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: java.util.List createSentinels(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel)>-><java.lang.Integer: int parseInt(java.lang.String)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor configure(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration: org.springframework.context.support.DefaultLifecycleProcessor defaultLifecycleProcessor(org.springframework.boot.autoconfigure.context.LifecycleProperties)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration: void <init>()>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.HttpClient: int getKeepAliveTimeout()>
<java.util.LinkedList$ListItr: void add(java.lang.Object)>-><java.util.LinkedList$ListItr: void checkForComodification()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.lang.String getUsername()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentSkipListMap$CSLMSpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.hazelcast.HazelcastInstanceFactory: com.hazelcast.core.HazelcastInstance getHazelcastInstance()>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.security.config.web.server.ServerHttpSecurity$RequestCacheSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.savedrequest.WebSessionServerRequestCache: void <init>()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: org.springframework.web.filter.CharacterEncodingFilter characterEncodingFilter()>-><org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter: void <init>()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createDefaultSavedRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher: void <init>(java.lang.String,java.lang.String)>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.net.URL: java.lang.String getProtocol()>
<org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>-><java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.ByteArrayOutputStream: void close()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void <init>()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.security.web.header.writers.HstsHeaderWriter: void updateHstsHeaderValue()>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration)>-><org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>
<org.springframework.aop.framework.ProxyFactoryBean: void <init>()>-><org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry: org.springframework.aop.framework.adapter.AdvisorAdapterRegistry getInstance()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isMixed()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: java.util.Spliterator trySplit()>
<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.http.PosterOutputStream: void close()>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: org.springframework.security.web.header.HeaderWriterFilter createHeaderWriterFilter()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$WeakHashMapSpliterator: long estimateSize()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer: java.util.List getDeferredResultInterceptors()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getSqlMigrationPrefix()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher pathMatchers(org.springframework.http.HttpMethod,java.lang.String[])>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: void <init>(java.lang.String,org.springframework.http.HttpMethod)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.MonthDay: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer: org.springframework.web.accept.ContentNegotiationManager buildContentNegotiationManager()>-><org.springframework.web.accept.ContentNegotiationManagerFactoryBean: void addMediaTypes(java.util.Map)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.net.www.ParseUtil: void checkPath(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.session.ConcurrentSessionFilter createConcurrencyFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.core.session.SessionRegistry getSessionRegistry(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory tomcatReactiveWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: java.util.Collection getTomcatConnectorCustomizers()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<io.lettuce.core.SocketOptions$Builder: io.lettuce.core.SocketOptions$Builder connectTimeout(java.time.Duration)>-><io.lettuce.core.internal.LettuceAssert: void isTrue(boolean,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder poolConfig(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.io.DataInputStream: char readChar()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory$ChannelCachingConnectionProxy: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.util.Base64: java.util.Base64$Encoder getEncoder()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$TreeMapSpliterator: long estimateSize()>
<org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher pathMatchers(org.springframework.http.HttpMethod,java.lang.String[])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><java.io.BufferedInputStream: void close()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: java.lang.String getKey(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler build()>-><org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler configure(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext,boolean)>-><org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveValueOperations opsForValue(org.springframework.data.redis.serializer.RedisSerializationContext)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration: void <init>()>
<java.util.Collections$SetFromMap: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: java.util.List createSentinels(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel)>-><java.util.ArrayList: void <init>()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>-><java.lang.ClassNotFoundException: java.lang.Throwable getCause()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: void <init>(org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$1)>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: void <init>()>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><java.util.BitSet: boolean get(int)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.Vector: int size()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: java.lang.String toString()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.redshift.RedshiftDatabaseType: java.lang.String getName()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.convert.CustomConversions$StoreConversions: java.lang.String toString()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.http.server.PathContainer$Options: char separator()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator spliterator()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce$Cluster$Refresh: boolean isDynamicRefreshSources()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.OutputStream,long)>-><java.io.FilterOutputStream: void <init>(java.io.OutputStream)>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory tomcatReactiveWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determineUsername()>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.BufferedInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Node$OfInt: void forEach(java.util.function.Consumer)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setStringHttpMessageConverter(org.springframework.http.converter.StringHttpMessageConverter)>
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void addFormatters(org.springframework.format.FormatterRegistry)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addFormatters(org.springframework.format.FormatterRegistry)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setNamedParameterJdbcTemplate(org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.apache.tomcat.util.buf.CharChunk: void makeSpace(int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.http.converter.FormHttpMessageConverter: java.util.List getPartConverters()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void addInitParameter(java.lang.String,java.lang.String)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.web.session.SessionManagementFilter: void <init>(org.springframework.security.web.context.SecurityContextRepository,org.springframework.security.web.authentication.session.SessionAuthenticationStrategy)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler: java.lang.String toString()>
<sun.net.www.MessageHeader: int getKey(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: java.util.List createSentinels(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel)>-><org.springframework.util.Assert: void state(boolean,java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.savedrequest.RequestCache getRequestCache(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.savedrequest.HttpSessionRequestCache: void <init>()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer: org.springframework.core.task.AsyncTaskExecutor getTaskExecutor()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Vector$VectorSpliterator: java.util.Spliterator trySplit()>
<reactor.core.publisher.Operators: void onDiscard(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>-><org.springframework.boot.jdbc.DataSourceBuilder: org.springframework.boot.jdbc.DataSourceBuilder password(java.lang.String)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$IntArrayNode: long count()>
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List replaceVendorLocations(java.util.List,org.springframework.boot.jdbc.DatabaseDriver)>-><org.springframework.boot.jdbc.DatabaseDriver$1: java.lang.String getId()>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><java.util.Collections$EmptyList: java.lang.Object[] toArray(java.lang.Object[])>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: boolean startsWith(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration$LazyPasswordEncoder: void <init>(org.springframework.context.ApplicationContext)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object,java.lang.Throwable)>
<org.flywaydb.core.internal.database.oracle.OracleDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>
<java.util.TimSort: int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: boolean authQop()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>-><sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.net.URL)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.InetSocketAddress: java.lang.String getHostName()>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Collection)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.ArrayDeque: void addFirst(java.lang.Object)>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: void setPersistenceUnitName(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentTypeOptionsConfig: org.springframework.security.web.header.writers.XContentTypeOptionsHeaderWriter access$1600(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentTypeOptionsConfig)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void setPassword(org.springframework.data.redis.connection.RedisPassword)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<org.springframework.web.servlet.view.InternalResourceViewResolver: void <init>()>-><org.springframework.web.servlet.view.InternalResourceViewResolver: java.lang.Class requiredViewClass()>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void close()>-><java.nio.Buffer: int remaining()>
<java.io.DataInputStream: short readShort()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNot(java.util.function.Predicate)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source when(java.util.function.Predicate)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: void <init>(sun.net.www.protocol.http.HttpCallerInfo)>
<org.springframework.context.annotation.MBeanExportConfiguration: org.springframework.jmx.export.annotation.AnnotationMBeanExporter mbeanExporter()>-><org.springframework.jmx.export.annotation.AnnotationMBeanExporter: void <init>()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext,boolean)>-><org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveHashOperations opsForHash(org.springframework.data.redis.serializer.RedisSerializationContext)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.KeepAliveStream: void setClosed()>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: org.springframework.boot.autoconfigure.web.format.DateTimeFormatters dateTimeFormat(java.lang.String)>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: java.time.format.DateTimeFormatter formatter(java.lang.String)>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair: org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair fromSerializer(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.info.InfoProperties: void <init>(java.util.Properties)>-><java.lang.Object: void <init>()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.lang.Math: long min(long,long)>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder queueCapacity(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.WrappedByteBuf: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.TrustManager[] configureTrustManagers()>-><java.io.InputStream: void close()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: java.io.PrintWriter getWriter()>-><org.apache.catalina.connector.Response: void setCharacterEncoding(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<java.lang.Object: java.lang.String toString()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryBeanCreationException connectionFactoryBeanCreationException(java.lang.String,org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryBeanCreationException: void <init>(java.lang.String,org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>
<org.springframework.security.authentication.AnonymousAuthenticationProvider: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.InputStream: int read(byte[],int,int)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.ObjectOutputStream$BlockDataOutputStream: void write(int)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: java.util.Map getJpaPropertyMap()>
<org.springframework.security.config.annotation.web.configurers.PermitAllSupport: void permitAll(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher[])>-><org.springframework.util.Assert: void state(boolean,java.lang.String)>
<java.util.stream.Nodes$LongArrayNode: void forEach(java.util.function.LongConsumer)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void accept(long)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$4(org.springframework.security.web.session.SessionInformationExpiredEvent)>-><org.apache.catalina.connector.ResponseFacade: void setContentType(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache: org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection getConnection()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: long estimateSize()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Thread: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader mapToMessageHeader(java.util.Map)>-><sun.net.www.MessageHeader: void <init>()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: boolean isReplacement(org.springframework.http.converter.HttpMessageConverter,org.springframework.http.converter.HttpMessageConverter)>-><org.springframework.util.ClassUtils: boolean isAssignableValue(java.lang.Class,java.lang.Object)>
<org.springframework.jmx.export.MBeanExporter: void setAutodetectMode(int)>-><org.springframework.core.Constants: java.util.Set getValues(java.lang.String)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$StatViewServlet: java.lang.String getResetEnable()>
<com.fasterxml.jackson.core.util.JsonParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.MeteredStream: void close()>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><java.nio.Buffer: int remaining()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder initialCacheNames(java.util.Set)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.beans.FeatureDescriptor: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<org.springframework.security.web.savedrequest.NullRequestCache: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.text.ChoiceFormat: boolean equals(java.lang.Object)>-><java.util.Arrays: boolean equals(double[],double[])>
<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>-><sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<org.springframework.util.MimeTypeUtils: org.springframework.util.MimeType parseMimeTypeInternal(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setCurrentSecurityContextArgumentResolver(org.springframework.security.web.reactive.result.method.annotation.CurrentSecurityContextArgumentResolver)>
<java.net.CookieHandler: java.net.CookieHandler getDefault()>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.boot.autoconfigure.web.WebProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void <init>()>
<org.springframework.security.core.userdetails.User: java.util.SortedSet sortAuthorities(java.util.Collection)>-><java.util.TreeSet: boolean add(java.lang.Object)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.FileInputStream: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<org.flywaydb.core.internal.database.redshift.RedshiftDatabaseType: java.lang.String getBackupDriverClass(java.lang.String,java.lang.ClassLoader)>-><org.flywaydb.core.internal.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.Long: long parseLong(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>-><org.springframework.cglib.core.CodeGenerationException: java.lang.Throwable getCause()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.ArrayList$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: void appendFragment(java.lang.StringBuffer,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>-><java.net.InetSocketAddress: java.lang.String checkHost(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>
<com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.core.util.JsonParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.text.DateFormat: java.lang.String format(java.util.Date)>
<java.util.Vector$ListItr: void add(java.lang.Object)>-><java.util.Vector: void add(int,java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>-><java.lang.String: int length()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.Integer: java.lang.String toString(int)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.AbstractMap: int hashCode()>-><java.lang.Object: int hashCode()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.ByteArrayOutputStream: void write(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.HttpConnectSocketImpl: void doTunneling(java.net.HttpURLConnection)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.javaboy.vhr.model.Nation: void setName(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider findProvider(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.GutsRecord: java.lang.String toString()>
<java.io.DataOutputStream: void writeByte(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<java.io.DataOutputStream: void writeShort(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNonce(java.lang.String)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><org.springframework.core.io.support.EncodedResource: java.io.Reader getReader()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.security.authentication.AnonymousAuthenticationToken: void <init>(java.lang.Integer,java.lang.Object,java.util.Collection)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<sun.net.www.protocol.https.Handler: java.net.URLConnection openConnection(java.net.URL)>-><sun.net.www.protocol.https.Handler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jackson.JacksonProperties getJacksonPropertiesInstance()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.session.InvalidSessionStrategy getInvalidSessionStrategy()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>-><sun.net.www.protocol.http.AuthCacheValue: void <init>()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$5: java.lang.String run()>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.boot.autoconfigure.hazelcast.HazelcastInstanceFactory: com.hazelcast.core.HazelcastInstance getHazelcastInstance()>-><com.hazelcast.core.Hazelcast: com.hazelcast.core.HazelcastInstance getOrCreateHazelcastInstance(com.hazelcast.config.Config)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HstsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HstsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDefaultErrorAttributes(org.springframework.boot.web.servlet.error.DefaultErrorAttributes)>
<org.springframework.context.annotation.MBeanExportConfiguration: org.springframework.jmx.export.annotation.AnnotationMBeanExporter mbeanExporter()>-><org.springframework.context.annotation.MBeanExportConfiguration: void setupRegistrationPolicy(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isJavaLangObject()>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URL: int getDefaultPort()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.Spliterators$EmptySpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.InputStream)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.text.AttributeEntry: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>
<java.util.stream.AbstractPipeline: java.util.stream.Sink wrapSink(java.util.stream.Sink)>-><java.util.stream.SliceOps$1: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void registerJavaDate(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.datetime.DateFormatterRegistrar: void <init>()>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder newSerializationContext(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator spliterator()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$StatViewServlet: java.lang.String getDeny()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MeteredStream: void reset()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><java.util.ArrayList: java.lang.Object get(int)>
<org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: javax.servlet.http.HttpSession getObject()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><org.apache.tomcat.util.http.parser.HttpParser: boolean isToken(int)>
<org.apache.catalina.connector.Response: void setSuspended(boolean)>-><org.apache.catalina.connector.OutputBuffer: void setSuspended(boolean)>
<java.lang.Object: java.lang.String toString()>-><java.util.SimpleTimeZone: int hashCode()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getPlaceholderPrefix()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getMethod()>
<org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(org.springframework.security.core.GrantedAuthority,org.springframework.security.core.GrantedAuthority)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String getAuthority()>
<java.net.URLPermission: void <init>(java.lang.String,java.lang.String)>-><java.security.Permission: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.String: java.lang.String toLowerCase()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<sun.net.www.MeteredStream: int available()>-><com.rabbitmq.client.impl.TruncatedInputStream: int available()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$IntArraySpliterator: void forEachRemaining(java.lang.Object)>
<sun.net.www.http.KeepAliveCache$1: void <init>(sun.net.www.http.KeepAliveCache,sun.net.www.http.KeepAliveCache)>-><java.lang.Object: void <init>()>
<java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder cacheDefaults(org.springframework.data.redis.cache.RedisCacheConfiguration)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String trimPrefix(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitTemplateConfiguration: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: int characteristics()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setSecurityReactorContextConfiguration$SecurityReactorContextSubscriberRegistrar(org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriberRegistrar)>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setBeanClassLoader(java.lang.ClassLoader)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: boolean authQop()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setFlywayAutoConfiguration$StringOrNumberToMigrationVersionConverter(org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$StringOrNumberToMigrationVersionConverter)>
<org.apache.catalina.connector.Response: void setStatus(int,java.lang.String)>-><org.apache.catalina.connector.Response: boolean isCommitted()>
<org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer: org.springframework.boot.web.client.RestTemplateBuilder configure(org.springframework.boot.web.client.RestTemplateBuilder)>-><org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer: org.springframework.boot.web.client.RestTemplateBuilder addCustomizers(org.springframework.boot.web.client.RestTemplateBuilder,java.util.List,java.util.function.BiFunction)>
<org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext createEmptyContext()>-><org.springframework.security.core.context.InheritableThreadLocalSecurityContextHolderStrategy: org.springframework.security.core.context.SecurityContext createEmptyContext()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration)>-><java.util.HashMap: void <init>()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void forEach(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source from(java.util.function.Supplier)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.FeaturePolicyServerHttpHeadersWriter: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setThreadPoolTaskExecutor(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)>
<sun.net.www.MessageHeader: java.lang.String getHeaderNamesInList()>-><java.util.StringJoiner: void <init>(java.lang.CharSequence)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>
<java.util.stream.Sink$ChainedReference: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<org.springframework.web.util.pattern.CaptureVariablePathElement: void <init>(int,char[],boolean,char)>-><java.lang.String: void <init>(char[],int,int)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SecurityFilterChainImpl: void <init>()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setStaticPathPattern(java.lang.String)>
<sun.net.www.MeteredStream: void justRead(long)>-><sun.net.www.MeteredStream: void close()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$5$1: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.BufferedInputStream: void reset()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.AbstractShortCircuitTask: java.lang.Object getLocalResult()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy$NullEventPublisher: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.KeepAliveStream: void reset()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.BufferedInputStream: long skip(long)>
<org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder hashValue(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder hashValue(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getUserInfo()>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.MeteredStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.SpinedBuffer$1Splitr: int characteristics()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.NetworkClient: void setReadTimeout(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.HashMap$HashMapSpliterator: long estimateSize()>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.ArrayList$ArrayListSpliterator: long estimateSize()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Policy$2: javax.security.auth.Policy run()>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveCleanerEntry: sun.net.www.http.HttpClient getHttpClient()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.ObjectInputStream$BlockDataInputStream: int read(byte[],int,int)>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.task.TaskExecutionProperties getTaskExecutionPropertiesInstance()>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setTransactionalOperator(org.springframework.transaction.reactive.TransactionalOperator)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <init>()>-><org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler: void <init>(org.springframework.http.HttpStatus)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration: org.mybatis.spring.SqlSessionTemplate sqlSessionTemplate(org.apache.ibatis.session.SqlSessionFactory)>
<org.springframework.web.util.pattern.PatternParseException: void <init>(java.lang.Throwable,int,char[],org.springframework.web.util.pattern.PatternParseException$PatternMessage,java.lang.Object[])>-><org.springframework.web.util.pattern.PatternParseException$PatternMessage: java.lang.String formatMessage(java.lang.Object[])>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map$Entry)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Shutdown: java.time.Duration getAwaitTerminationPeriod()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$CSLMSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: javax.servlet.MultipartConfigElement getMultipartConfigElement()>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: java.util.Map createSharedObjects()>-><java.util.HashMap: void <init>()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$ArrayNode: java.util.Spliterator spliterator()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>-><org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.OutputStream,long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.net.SocketInputStream: void close()>
<java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig enable()>-><org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter: void <init>(org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter$XFrameOptionsMode)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setSchemaUsername(java.lang.String)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.Vector: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void setDatabase(int)>-><org.springframework.util.Assert: void isTrue(boolean,java.util.function.Supplier)>
<org.springframework.security.config.web.server.ServerHttpSecurity$RequestCacheSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.web.reactive.result.method.annotation.CurrentSecurityContextArgumentResolver reactiveCurrentSecurityContextArgumentResolver()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setName(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory tomcatServletWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: java.util.Collection getTomcatConnectorCustomizers()>
<java.net.URI: int join(char[],int[])>-><java.lang.InternalError: void <init>()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(sun.net.www.protocol.http.HttpCallerInfo,java.lang.String)>
<java.util.stream.Nodes$EmptyNode$OfRef: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode: void forEach(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.web.util.pattern.InternalPathPatternParser: boolean peekDoubleWildcard()>-><org.springframework.web.util.pattern.PathPatternParser: org.springframework.http.server.PathContainer$Options getPathOptions()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<org.springframework.aop.support.AbstractPointcutAdvisor: void setOrder(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder createBuilder(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: void <init>(org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$1)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: int position()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><java.util.Optional: boolean isPresent()>
<org.springframework.security.web.header.Header: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getPath()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveStreamOperations opsForStream(org.springframework.data.redis.serializer.RedisSerializationContext,org.springframework.data.redis.hash.HashMapper)>-><org.springframework.data.redis.core.DefaultReactiveStreamOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext,org.springframework.data.redis.hash.HashMapper)>
<org.springframework.web.servlet.config.annotation.CorsRegistry: java.util.Map getCorsConfigurations()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.util.Map$Entry)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$IntArrayNode: void forEach(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: long estimateSize()>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void setAuthenticationDatabase(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setRedisTemplate(org.springframework.data.redis.core.RedisTemplate)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.nio.Buffer: java.nio.Buffer reset()>-><java.nio.InvalidMarkException: void <init>()>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurations(java.util.Map)>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Map)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setCheckLocation(boolean)>
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void configureAsyncSupport(org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureAsyncSupport(org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration build()>-><org.springframework.data.redis.connection.lettuce.DefaultLettucePoolingClientConfiguration: void <init>(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration,org.apache.commons.pool2.impl.GenericObjectPoolConfig)>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$IntArrayNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.impl.AMQChannel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><org.springframework.core.io.UrlResource: java.lang.String getFilename()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void connect()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.AbstractTask: boolean isLeaf()>
<org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxException: void <init>(java.lang.String)>-><org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxException: java.lang.String buildMessage(java.lang.String)>
<org.springframework.aop.support.StaticMethodMatcherPointcut: void <init>()>-><org.springframework.aop.support.StaticMethodMatcher: void <init>()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String parseVirtualHost(java.lang.String)>-><java.lang.String: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.CharChunk: void <init>(int)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>
<org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: org.springframework.security.config.annotation.rsocket.RSocketSecurity rsocketSecurity(org.springframework.context.ApplicationContext)>-><org.springframework.security.config.annotation.rsocket.RSocketSecurity: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory tomcatReactiveWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: void <init>()>
<org.apache.catalina.connector.ResponseFacade: boolean isFinished()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.web.util.pattern.InternalPathPatternParser: void pushPathElement(org.springframework.web.util.pattern.PathElement)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: boolean available()>-><java.net.Socket: java.io.InputStream getInputStream()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$1Splitr: java.util.Spliterator trySplit()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.http.MediaType: void <init>(org.springframework.util.MimeType)>-><org.springframework.util.MimeType: void <init>(org.springframework.util.MimeType)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><sun.security.action.GetPropertyAction: void <init>(java.lang.String)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>
<org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><io.lettuce.core.cluster.ClusterClientOptions$Builder: io.lettuce.core.ClientOptions$Builder timeoutOptions(io.lettuce.core.TimeoutOptions)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.ScalarConstantPtg: java.lang.String toString()>
<java.net.Proxy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void mark(int)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.ArrayList$ArrayListSpliterator: int characteristics()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node$OfLong: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.socket.handler.WebSocketHandlerDecorator: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.flywaydb.core.internal.sqlscript.FlywaySqlScriptException: java.lang.String getMessage()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration: org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource jsr250MethodSecurityMetadataSource()>-><org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>
<org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor: void <init>(org.springframework.security.access.method.MethodSecurityMetadataSource,org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice,org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice)>-><org.springframework.security.core.authority.AuthorityUtils: java.util.List createAuthorityList(java.lang.String[])>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: int characteristics()>
<org.springframework.jmx.export.annotation.AnnotationMBeanExporter: void <init>()>-><org.springframework.jmx.export.MBeanExporter: void setAutodetectMode(int)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isIgnoreMissingMigrations()>
<java.io.DataOutputStream: void writeInt(int)>-><java.io.PrintStream: void write(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$DoubleArraySpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<synthetic.method.ServletResponseImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration dataSource(java.lang.String,java.lang.String,java.lang.String)>-><org.flywaydb.core.api.configuration.ClassicConfiguration: void setDataSource(java.lang.String,java.lang.String,java.lang.String)>
<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>-><java.lang.Integer: void <init>(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><java.util.ArrayList: java.lang.Object[] toArray()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.derby.DerbyDatabaseType: java.lang.String getName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.io.StringReader: void reset()>
<java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<io.lettuce.core.cluster.ClusterClientOptions$Builder: io.lettuce.core.ClientOptions$Builder timeoutOptions(io.lettuce.core.TimeoutOptions)>-><io.lettuce.core.cluster.ClusterClientOptions$Builder: io.lettuce.core.cluster.ClusterClientOptions$Builder timeoutOptions(io.lettuce.core.TimeoutOptions)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.httpserver.Request$ReadStream: int read(byte[],int,int)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy createDefaultSessionFixationProtectionStrategy()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.io.PrintWriter: void close()>-><org.apache.catalina.connector.OutputBuffer: void close()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.StringBuffer: void <init>()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: java.lang.String normalizePrefix(java.lang.String)>-><java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: void <init>(org.springframework.web.servlet.HandlerInterceptor)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.MessageHeader: void grow()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: org.springframework.validation.MessageCodesResolver getMessageCodesResolver()>-><java.lang.StringBuilder: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration: org.springframework.security.config.annotation.web.configuration.AutowiredWebSecurityConfigurersIgnoreParents autowiredWebSecurityConfigurersIgnoreParents(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>
<java.io.FilterInputStream: void close()>-><java.io.InputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.RefErrorPtg: java.lang.String toString()>
<com.alibaba.druid.support.http.ResourceServlet: void <init>(java.lang.String)>-><java.util.ArrayList: void <init>()>
<org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers$1: void <init>()>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: org.apache.tomcat.util.buf.C2BConverter createConverter(java.nio.charset.Charset)>-><java.io.IOException: void <init>(java.lang.Throwable)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder allowCoreThreadTimeOut(boolean)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentTypeOptionsConfig: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentTypeOptionsConfig enable()>-><org.springframework.security.web.header.writers.XContentTypeOptionsHeaderWriter: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Boolean run()>-><sun.net.www.protocol.http.HttpURLConnection: boolean access$300(sun.net.www.protocol.http.HttpURLConnection,java.lang.String,int,java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.net.URL: java.lang.String getHost()>
<java.lang.Object: java.lang.String toString()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.InetAddress getInetAddress()>-><java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Integer extractKeyHash(java.lang.String)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$2: long estimateSize()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<org.springframework.data.convert.DefaultTypeMapper: void <init>(org.springframework.data.convert.TypeAliasAccessor,org.springframework.data.mapping.context.MappingContext,java.util.List)>-><java.util.ArrayList: int size()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$LongArraySpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isSkipDefaultResolvers()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.cockroachdb.CockroachDBDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientOptions(io.lettuce.core.ClientOptions)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder clientOptions(io.lettuce.core.ClientOptions)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.oracle.OracleDatabaseType: void setConfigConnectionProps(org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.lang.ClassLoader)>
<org.springframework.security.web.header.writers.CacheControlHeadersWriter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>
<org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties$Pool: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.hazelcast.HazelcastInstanceFactory: void <init>(com.hazelcast.config.Config)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder taskDecorator(org.springframework.core.task.TaskDecorator)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.context.MessageSource getMessageSource()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <init>(boolean,java.util.Collection)>-><java.util.Collections: java.util.List emptyList()>
<org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer: org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer mediaTypes(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext,boolean)>-><org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveGeoOperations opsForGeo(org.springframework.data.redis.serializer.RedisSerializationContext)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter: void <init>()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setDeferredResultInterceptors(java.util.List)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void <init>(org.springframework.context.ApplicationEventPublisher)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setMustacheViewResolver(org.springframework.boot.web.reactive.result.view.MustacheViewResolver)>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: boolean isReplacement(org.springframework.http.converter.HttpMessageConverter,org.springframework.http.converter.HttpMessageConverter)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.Calendar: boolean equals(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setHttpMessageConverters(org.springframework.boot.autoconfigure.http.HttpMessageConverters)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void setReplicaSetName(java.lang.String)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Node$OfDouble: void forEach(java.util.function.Consumer)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.net.SocketOutputStream: void write(byte[],int,int)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.base.TestContainersDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.net.www.protocol.http.HttpURLConnection$11: java.lang.Object run()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.NetworkClient: int getReadTimeout()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.lang.System: void loadLibrary(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.TreeMap$ValueSpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.lang.StringBuffer: void <init>(int)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.authentication.AuthenticationManager authenticationManager()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.io.PrintStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<com.rabbitmq.client.impl.ValueWriter: void writeTable(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.InterfaceHdrRecord: java.lang.String toString()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity headers(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.SecurityConfigurerAdapter getOrApply(org.springframework.security.config.annotation.SecurityConfigurerAdapter)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator spliterator()>
<com.fasterxml.jackson.databind.JsonMappingException: void <init>(java.io.Closeable,java.lang.String,java.lang.Throwable)>-><com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.InputStream,java.net.CacheRequest)>-><java.io.FilterInputStream: void <init>(java.io.InputStream)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <init>(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.support.DefaultFormattingConversionService: void <init>(boolean)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.io.PrintStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void close()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: int getContentLength()>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.core.userdetails.User: org.springframework.security.core.userdetails.User$UserBuilder builder()>-><org.springframework.security.core.userdetails.User$UserBuilder: void <init>(org.springframework.security.core.userdetails.User$1)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.https.Handler)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler,javax.net.ssl.HttpsURLConnection)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.URL: java.lang.String getHost()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<sun.net.www.MeteredStream: void close()>-><java.net.SocketInputStream: void close()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider getProvider(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.database.sybasease.SybaseASEJConnectDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>
<org.springframework.security.web.server.authentication.logout.LogoutWebFilter: void <init>()>-><org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler: void <init>()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.String: java.lang.String toString()>
<reactor.core.publisher.Operators: void onErrorDropped(java.lang.Throwable,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void addArgumentResolvers(java.util.List)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addArgumentResolvers(java.util.List)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void reset()>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer position(int)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.boot.task.TaskSchedulerBuilder: java.util.Set append(java.util.Set,java.lang.Iterable)>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: int characteristics()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: java.util.Optional getWelcomePage()>-><org.springframework.boot.autoconfigure.web.ResourceProperties: java.lang.String[] getStaticLocations()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><sun.net.www.protocol.http.AuthCacheValue: void <init>()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jackson.JacksonProperties getJacksonPropertiesInstance()>-><org.springframework.boot.autoconfigure.jackson.JacksonProperties: void setDateFormat(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><io.lettuce.core.ClientOptions$Builder: io.lettuce.core.ClientOptions build()>
<org.apache.catalina.connector.Response: void setStatus(int)>-><org.apache.catalina.connector.Response: void setStatus(int,java.lang.String)>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: int characteristics()>
<java.io.PrintStream: void write(java.lang.String)>-><java.io.PrintStream: void flush()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration: org.springframework.boot.availability.ApplicationAvailabilityBean applicationAvailability()>-><org.springframework.boot.availability.ApplicationAvailabilityBean: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.web.filter.ForwardedHeaderFilter: void <init>()>-><org.springframework.web.filter.OncePerRequestFilter: void <init>()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: int size()>
<org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: org.springframework.web.filter.CharacterEncodingFilter characterEncodingFilter()>-><org.springframework.web.filter.CharacterEncodingFilter: void setEncoding(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void <init>()>-><reactor.core.scheduler.Schedulers: reactor.core.scheduler.Scheduler boundedElastic()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo parseUrl(java.lang.String)>-><java.net.URI: java.lang.String getScheme()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FeaturePolicyConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.util.StringUtils: boolean hasLength(java.lang.String)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><java.io.FileInputStream: int read(byte[],int,int)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: boolean isUnresolved()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDelegatingMethodSecurityMetadataSource(org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$1: boolean hasNext()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory tomcatServletWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.javaboy.vhr.model.Position: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.ByteArrayInputStream: int read(byte[],int,int)>
<java.lang.Object: java.lang.String toString()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication$1: java.lang.Boolean run()>-><sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.http.MediaType: void <init>(org.springframework.util.MimeType)>-><java.util.Collections$UnmodifiableMap: void forEach(java.util.function.BiConsumer)>
<org.springframework.web.context.request.ServletRequestAttributes: void registerDestructionCallback(java.lang.String,java.lang.Runnable,int)>-><org.springframework.web.context.request.AbstractRequestAttributes: void registerRequestDestructionCallback(java.lang.String,java.lang.Runnable)>
<org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration: org.springframework.cache.support.NoOpCacheManager cacheManager()>-><org.springframework.cache.support.NoOpCacheManager: void <init>()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.font.EAttribute: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: char charAt(int)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.nio.Buffer: boolean hasRemaining()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setJpaVendorAdapter(org.springframework.orm.jpa.JpaVendorAdapter)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder awaitTerminationPeriod(java.time.Duration)>-><org.springframework.boot.task.TaskSchedulerBuilder: void <init>(java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.String,java.util.Set)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.context.annotation.MBeanExportConfiguration: org.springframework.jmx.export.annotation.AnnotationMBeanExporter mbeanExporter()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: long estimateSize()>
<sun.net.www.MeteredStream: void justRead(long)>-><sun.net.ProgressSource: void updateProgress(long,long)>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler configure(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler)>-><org.springframework.boot.context.properties.PropertyMapper$Source: void to(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AllPermissionCollection: java.util.Enumeration elements()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.IdentityHashMap$EntrySpliterator: int characteristics()>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><java.io.FileInputStream: void close()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder jwtDecoderByPublicKeyValue()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$IntArrayNode: long count()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getReturnValueHandlers()>-><java.util.ArrayList: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.String[] getBeanNamesForType(java.lang.Class)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<java.util.stream.Nodes$DoubleArrayNode: void forEach(java.util.function.DoubleConsumer)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void accept(double)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientResources(io.lettuce.core.resource.ClientResources)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.io.StringReader: int read()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$LongWrappingSpliterator: java.util.Spliterator trySplit()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: void <init>()>-><org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair: org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair fromSerializer(org.springframework.data.redis.serializer.RedisSerializer)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: void <init>(org.springframework.jdbc.core.JdbcOperations)>-><org.springframework.util.ConcurrentLruCache: void <init>(int,java.util.function.Function)>
<org.springframework.security.access.expression.method.ExpressionBasedPostInvocationAdvice: void <init>(org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.RefreshAllRecord: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: long estimateSize()>
<sun.net.ProgressEvent: void <init>(sun.net.ProgressSource,java.net.URL,java.lang.String,java.lang.String,sun.net.ProgressSource$State,long,long)>-><java.util.EventObject: void <init>(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.httpserver.SSLStreams$InputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String)>
<org.springframework.security.web.authentication.logout.LogoutFilter: void <init>(org.springframework.security.web.authentication.logout.LogoutSuccessHandler,org.springframework.security.web.authentication.logout.LogoutHandler[])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.AbstractPipeline: int getStreamAndOpFlags()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.feed.AtomFeedHttpMessageConverter: void <init>()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><org.springframework.core.io.AbstractResource: java.lang.String getFilename()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.mysql.mariadb.MariaDBDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: void <init>()>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.io.StringReader: void mark(int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.ReactiveJwtDecoder jwtDecoder()>-><org.springframework.security.oauth2.jose.jws.SignatureAlgorithm: org.springframework.security.oauth2.jose.jws.SignatureAlgorithm from(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.security.web.authentication.logout.CompositeLogoutHandler: void <init>(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity securityContext(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.configurers.SecurityContextConfigurer: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.HttpURLConnection$TunnelState tunnelState()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setJndiName(java.lang.String)>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object,java.lang.Throwable)>-><org.apache.juli.logging.DirectJDKLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentSecurityPolicyConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><java.lang.Object: void <init>()>
<org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor: void <init>(org.springframework.security.access.method.MethodSecurityMetadataSource,org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice,org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath: java.lang.String getServletUrlMapping()>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.HttpConnectSocketImpl: int getLocalPort()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.JapaneseImperialCalendar: int computeFields(int,int)>-><java.util.SimpleTimeZone: int getOffset(long)>
<javax.security.auth.SubjectDomainCombiner$5: void <init>(java.security.ProtectionDomain)>-><java.lang.Object: void <init>()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>-><org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void configureContentNegotiation(org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer)>
<java.security.ProtectionDomain: boolean implies(java.security.Permission)>-><java.security.BasicPermissionCollection: boolean implies(java.security.Permission)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: java.lang.Object getBeanOrNull(java.lang.Class)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: org.springframework.security.config.annotation.SecurityBuilder getBuilder()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.InputStream: int read(byte[],int,int)>
<java.net.ResponseCache: java.net.ResponseCache getDefault()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<sun.net.www.MeteredStream: int read()>-><sun.net.httpserver.Request$ReadStream: int read()>
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: void <init>(org.springframework.jdbc.core.JdbcOperations)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HpkpConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HpkpConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><java.net.URL: java.lang.String getProtocol()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder: org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder of(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.util.function.Supplier)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: void <init>()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.security.web.session.SessionManagementFilter: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><java.util.Arrays$ArrayList: boolean contains(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Vector$VectorSpliterator: long estimateSize()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.PathMatchConfigurer: java.lang.Boolean isUseTrailingSlashMatch()>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>-><java.lang.Enum: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.security.action.GetIntegerAction: void <init>(java.lang.String,int)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration: org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate namedParameterJdbcTemplate(org.springframework.jdbc.core.JdbcTemplate)>-><org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: void <init>(org.springframework.jdbc.core.JdbcOperations)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setIgnoreMissingMigrations(boolean)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor configure(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)>-><java.util.Collections$UnmodifiableCollection: void forEach(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String getVariableName()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.MBeanExportConfiguration: void setupDomain(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>-><org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.ArrayDeque: void addFirst(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.web.csrf.CsrfFilter: void setRequireCsrfProtectionMatcher(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getDefaultConverters()>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: void reorderXmlConvertersToEnd(java.util.List)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.String[] getBeanNamesForType(java.lang.Class)>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>-><sun.net.www.http.ChunkedOutputStream: void reset()>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.lang.Enum: int ordinal()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<java.util.PropertyPermissionCollection: boolean implies(java.security.Permission)>-><java.lang.String: int length()>
<sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>-><sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.context.properties.PropertyMapper$Source: void to(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureMessageConverters(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.catalina.core.AprStatus: boolean getUseOpenSSL()>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.util.HostnameChecker: boolean isMatched(java.lang.String,java.lang.String)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactory(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: void customizeVendorProperties(java.util.Map)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getRef()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDefaultClientResources(io.lettuce.core.resource.DefaultClientResources)>
<org.springframework.security.web.header.writers.CacheControlHeadersWriter: void <init>()>-><org.springframework.security.web.header.writers.CacheControlHeadersWriter: java.util.List createHeaders()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>-><sun.net.www.http.HttpClient: void closeServer()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache getCache()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getProgress()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.data.redis.connection.RedisStandaloneConfiguration: void setDatabase(int)>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void <init>(com.fasterxml.jackson.core.JsonStreamContext,com.fasterxml.jackson.core.JsonLocation)>-><com.fasterxml.jackson.core.filter.TokenFilterContext: java.lang.String getCurrentName()>
<org.flywaydb.core.internal.database.sybasease.SybaseASEJConnectDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryCustomizer: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties,java.util.List)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.web.filter.FormContentFilter: void <init>()>-><org.springframework.web.filter.OncePerRequestFilter: void <init>()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder maxPoolSize(int)>-><org.springframework.boot.task.TaskExecutorBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.Boolean,java.time.Duration,java.lang.String,org.springframework.core.task.TaskDecorator,java.util.Set)>
<org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration$HazelcastServerConfigConfiguration: com.hazelcast.core.HazelcastInstance hazelcastInstance(com.hazelcast.config.Config)>-><org.springframework.boot.autoconfigure.hazelcast.HazelcastInstanceFactory: void <init>(com.hazelcast.config.Config)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Node$OfDouble: void forEach(java.util.function.Consumer)>
<org.springframework.security.core.userdetails.User$AuthorityComparator: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><io.lettuce.core.ClientOptions$Builder: io.lettuce.core.ClientOptions$Builder socketOptions(io.lettuce.core.SocketOptions)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator spliterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void setPort(java.lang.Integer)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: int characteristics()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: java.lang.Object run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Vector: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: org.springframework.web.servlet.DispatcherServlet dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)>-><org.springframework.web.servlet.FrameworkServlet: void setDispatchOptionsRequest(boolean)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.flywaydb.core.internal.database.mysql.MySQLDatabaseType: java.lang.String getBackupDriverClass(java.lang.String,java.lang.ClassLoader)>-><org.flywaydb.core.internal.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.SpinedBuffer$OfDouble$1Splitr: boolean tryAdvance(java.util.function.DoubleConsumer)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Object run()>
<org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateCustomizer[])>-><java.lang.Object: void <init>()>
<org.apache.catalina.connector.ResponseFacade: java.io.PrintWriter getWriter()>-><org.apache.catalina.connector.Response: void setSuspended(boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>-><java.util.ArrayList: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.SupBookRecord: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>-><java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setTaskExecutorBuilder(org.springframework.boot.task.TaskExecutorBuilder)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.lang.AssertionError: void <init>()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><org.springframework.security.config.annotation.AbstractSecurityBuilder: java.lang.Object build()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration: org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor(org.springframework.core.env.Environment)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: void configurePartConverters(org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter,java.util.Collection)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ExtendedFormatRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<org.apache.tomcat.jni.Library: void <init>()>-><javax.xml.transform.TransformerFactoryConfigurationError: java.lang.String getMessage()>
<org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration validateMigrationNaming(boolean)>-><org.flywaydb.core.api.configuration.ClassicConfiguration: void setValidateMigrationNaming(boolean)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.HttpURLConnection$TunnelState tunnelState()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.HashMap: boolean isEmpty()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.catalina.core.AprLifecycleListener: void terminateAPR()>
<sun.net.www.protocol.http.HttpURLConnection$9: java.io.InputStream run()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream access$200(sun.net.www.protocol.http.HttpURLConnection)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void <init>()>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void <init>()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.StringBuilder: void <init>()>
<java.io.InputStream: long skip(long)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.security.web.session.SessionManagementFilter: void setAuthenticationFailureHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping welcomePageHandlerMapping(org.springframework.context.ApplicationContext,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: void setInterceptors(java.lang.Object[])>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setBaselineVersion(java.lang.String)>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.Nodes$LongArrayNode: void forEach(java.util.function.LongConsumer)>-><java.util.stream.Sink: void accept(long)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>
<sun.net.www.HeaderParser: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.User: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Collection)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationToken: void <init>(java.lang.String,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: void <init>(java.lang.Integer,java.lang.Object,java.util.Collection)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: void <init>(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder,javax.sql.DataSource)>-><java.util.HashMap: void <init>()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><java.io.FileInputStream: void close()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.ClassLoader getClassLoader()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.Duration: java.lang.String toString()>
<org.flywaydb.core.api.configuration.ClassicConfiguration: void setDataSource(java.lang.String,java.lang.String,java.lang.String)>-><org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$LongArraySpliterator: java.util.Spliterator trySplit()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.apache.commons.math3.exception.MathArithmeticException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Collections$1: boolean hasNext()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.BufferedInputStream: int available()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: org.springframework.boot.info.BuildProperties buildProperties()>-><org.springframework.boot.autoconfigure.info.ProjectInfoProperties: org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build getBuild()>
<org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: java.lang.Thread currentThread()>
<java.lang.Object: java.lang.String toString()>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration: org.springframework.data.redis.core.RedisTemplate redisTemplate(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.RedisAccessor: void setConnectionFactory(org.springframework.data.redis.connection.RedisConnectionFactory)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.MeteredStream: void close()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.PermitAllSupport: void permitAll(org.springframework.security.config.annotation.web.HttpSecurityBuilder,java.lang.String[])>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>-><com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] optimize(java.security.ProtectionDomain[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration: org.springframework.jdbc.core.JdbcTemplate jdbcTemplate(javax.sql.DataSource,org.springframework.boot.autoconfigure.jdbc.JdbcProperties)>-><org.springframework.jdbc.core.JdbcTemplate: void <init>(javax.sql.DataSource)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Node: java.util.stream.Node getChild(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: java.util.List getInterceptors()>-><java.util.Collection: java.util.stream.Stream stream()>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.lang.String: int length()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.util.List getInitSqls()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>-><javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.session.ConcurrentSessionFilter createConcurrencyFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.session.SessionInformationExpiredStrategy getExpiredSessionStrategy()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$EmptySpliterator: java.util.Spliterator trySplit()>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String quote(java.lang.String,int,int)>-><java.util.regex.Pattern: java.lang.String quote(java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean dispatcherServletRegistration(org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void setLoadOnStartup(int)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>-><java.util.HashSet: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.lang.String toString()>
<java.io.InputStream: int read(byte[])>-><java.io.InputStream: int read(byte[],int,int)>
<sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: int characteristics()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void setReadTimeout(int)>-><sun.net.www.protocol.http.HttpURLConnection: void setReadTimeout(int)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.csrf.CsrfAuthenticationStrategy: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties: org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Pool getPool()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.data.redis.connection.RedisSentinelConfiguration: void setPassword(org.springframework.data.redis.connection.RedisPassword)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$EmptySpliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder: io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder enablePeriodicRefresh(java.time.Duration)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeEmbeddedOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>-><io.r2dbc.spi.ConnectionFactoryOptions: io.r2dbc.spi.ConnectionFactoryOptions parse(java.lang.CharSequence)>
<org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeParseException createError(java.lang.CharSequence,java.lang.RuntimeException)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<sun.net.NetworkClient$2: java.lang.Object run()>-><sun.net.NetworkClient$2: java.net.Socket run()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.catalina.core.AprStatus: boolean getUseAprConnector()>
<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>-><java.lang.Integer: java.lang.Integer decode(java.lang.String)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder messageConverters(java.util.Collection)>-><org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateBuilder$RequestFactoryCustomizer,boolean,java.lang.String,java.util.Set,java.util.Set,java.util.function.Supplier,org.springframework.web.util.UriTemplateHandler,org.springframework.web.client.ResponseErrorHandler,org.springframework.boot.web.client.BasicAuthentication,java.util.Map,java.util.Set,java.util.Set)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$AbstractConcNode: java.util.stream.Node getChild(int)>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.io.StringReader: void reset()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.format.support.DefaultFormattingConversionService: void <init>(boolean)>-><org.springframework.format.support.DefaultFormattingConversionService: void <init>(org.springframework.util.StringValueResolver,boolean)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$ArrayNode: long count()>
<org.springframework.data.redis.core.ReactiveStringRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.csrf.CsrfLogoutHandler: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<sun.net.NetworkClient$2: void <init>(sun.net.NetworkClient)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.task.TaskExecutionProperties: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.javaboy.vhr.config.CustomFilterInvocationSecurityMetadataSource: boolean supports(java.lang.Class)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.web.util.pattern.InternalPathPatternParser: boolean peekDoubleWildcard()>
<sun.security.x509.X500Name: void <init>(byte[])>-><sun.security.util.DerInputStream: void <init>(byte[])>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.SpinedBuffer$1Splitr: long estimateSize()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.util.List getValue()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter: io.undertow.util.HeaderMap access$100(org.springframework.http.server.reactive.UndertowHeadersAdapter)>
<java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>-><java.lang.Math: long max(long,long)>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.savedrequest.RequestCache getRequestCache(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.savedrequest.HttpSessionRequestCache: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: java.lang.String getPath()>
<java.util.Collections$SetFromMap: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap: int size()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder customizers(java.lang.Iterable)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: org.springframework.data.redis.core.ReactiveRedisTemplate reactiveRedisTemplate(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder key(org.springframework.data.redis.serializer.RedisSerializer)>
<java.io.BufferedInputStream: void fill()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void run()>-><sun.net.www.http.KeepAliveCache: void removeVector(sun.net.www.http.KeepAliveKey)>
<java.io.PushbackInputStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisClusterConfiguration getClusterConfiguration()>-><org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(java.util.Collection)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getReturnValueHandlers()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.channel.ReflectiveChannelFactory: java.lang.String toString()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: void run()>-><java.lang.String: boolean endsWith(java.lang.String)>
<java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><java.io.FileInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$IntIteratorSpliterator: int characteristics()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.orm.jpa.JpaVendorAdapter getJpaVendorAdapter()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$DoubleArraySpliterator: void forEachRemaining(java.lang.Object)>
<org.springframework.security.web.header.writers.CacheControlHeadersWriter: java.util.List createHeaders()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration: void <init>(org.mybatis.spring.boot.autoconfigure.MybatisProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><javax.management.AttributeList: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Character: java.lang.String toString()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.io.FilterInputStream: void reset()>-><sun.net.httpserver.SSLStreams$InputStream: void reset()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.mvc.ParameterizableViewController: void <init>()>-><org.springframework.web.servlet.support.WebContentGenerator: void setSupportedMethods(java.lang.String[])>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReferencePipeline$2$1: void begin(long)>
<org.flywaydb.core.internal.database.cockroachdb.CockroachDBDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.web.header.Header: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint getAuthenticationEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint createDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<sun.net.www.MeteredStream: void close()>-><java.io.SequenceInputStream: void close()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void ensureOpen()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.Socket access$200(java.net.HttpConnectSocketImpl,java.lang.String,int)>-><java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutSuccessHandler createDefaultSuccessHandler()>-><java.util.HashMap: boolean isEmpty()>
<reactor.util.function.Tuple4: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder corePoolSize(int)>-><org.springframework.boot.task.TaskExecutorBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.Boolean,java.time.Duration,java.lang.String,org.springframework.core.task.TaskDecorator,java.util.Set)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.security.AccessControlContext: java.security.DomainCombiner getCombiner()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.Vector: java.util.List subList(int,int)>
<org.apache.tomcat.jni.Library: boolean initialize(java.lang.String)>-><org.apache.tomcat.jni.Library: void <init>(java.lang.String)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void setUuidRepresentation(org.bson.UuidRepresentation)>
<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>-><java.lang.Object: java.lang.Object clone()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<org.springframework.security.core.userdetails.User: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Collection)>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: org.springframework.boot.jdbc.DatabaseDriver getDatabaseDriver()>-><org.springframework.boot.jdbc.DatabaseDriver: org.springframework.boot.jdbc.DatabaseDriver fromJdbcUrl(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory redisConnectionFactory(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources)>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory createLettuceConnectionFactory(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration)>
<org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String getPatternString()>
<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.ProgressSource: void finishTracking()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <init>(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.support.DefaultFormattingConversionService: void addDefaultFormatters(org.springframework.format.FormatterRegistry)>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void registerDelegateApplicationListener(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.context.ApplicationListener)>-><org.springframework.context.event.GenericApplicationListenerAdapter: void <init>(org.springframework.context.ApplicationListener)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.util.regex.Matcher: int start()>
<sun.net.www.protocol.http.HttpURLConnection$6: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$6: java.lang.Void run()>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler configure(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source from(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.CalcModeRecord: java.lang.String toString()>
<java.io.DataInputStream: int readInt()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceSslClientConfigurationBuilder useSsl()>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceSslClientConfigurationBuilder: void <init>(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setSqlSessionFactory(org.apache.ibatis.session.SqlSessionFactory)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureContentNegotiation(org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.catalina.connector.ResponseFacade: void setContentType(java.lang.String)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getContentType()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper get()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.ReferencePipeline: java.util.stream.StreamShape getOutputShape()>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.InternalPathPatternParser: void recordCapturedVariable(int,java.lang.String)>
<sun.net.www.MessageHeader$HeaderIterator: void <init>(sun.net.www.MessageHeader,java.lang.String,java.lang.Object)>-><java.lang.Object: void <init>()>
<java.io.BufferedOutputStream: void flushBuffer()>-><java.io.PrintStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int,int)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void <init>(java.util.Spliterator,java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: void <init>(java.util.Spliterator,java.util.stream.StreamSpliterators$UnorderedSliceSpliterator)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.data.redis.core.DefaultReactiveValueOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EnumMap$1: java.lang.String toString()>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Spliterators$EmptySpliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>-><java.util.Spliterators$EmptySpliterator: void forEachRemaining(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy: void <init>(org.springframework.security.core.session.SessionRegistry)>-><java.lang.Object: void <init>()>
<sun.net.ProgressSource: void updateProgress(long,long)>-><sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>
<javax.net.ssl.HttpsURLConnection: void <init>(java.net.URL)>-><javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>
<java.net.URLPermission: java.lang.String actions()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>-><java.nio.Buffer: int remaining()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.String: boolean endsWith(java.lang.String)>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter: void <init>()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType getReferencedType()>
<java.util.stream.SliceOps$SliceTask: long completedSize(long)>-><java.util.stream.SliceOps$SliceTask: long completedSize(long)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer restTemplateBuilderConfigurer(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setResponseBodyAdvice(java.util.List)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<sun.net.www.HeaderParser: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>
<sun.nio.cs.StreamDecoder: int readBytes()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.PathMatchConfigurer: java.lang.Boolean isUseSuffixPatternMatch()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.http.PosterOutputStream: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getQuery()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><sun.net.util.IPAddressUtil: boolean isIPv6LiteralAddress(java.lang.String)>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration$OAuth2ClasspathGuard: boolean shouldConfigure(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String[] getBeanNamesForType(java.lang.Class)>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder properties(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig: org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter access$2000(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext,boolean)>-><java.lang.Object: void <init>()>
<java.net.Socket: int getSoTimeout()>-><java.net.SocketException: void <init>(java.lang.String)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: boolean isCommitted()>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration: org.springframework.boot.web.reactive.result.view.MustacheViewResolver mustacheViewResolver(com.samskivert.mustache.Mustache$Compiler,org.springframework.boot.autoconfigure.mustache.MustacheProperties)>-><org.springframework.boot.autoconfigure.template.AbstractViewResolverProperties: java.lang.String getCharsetName()>
<sun.security.action.GetIntegerAction: java.lang.Integer run()>-><java.lang.Integer: void <init>(int)>
<java.util.AbstractList: int hashCode()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader getUserSetHeaders()>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.web.reactive.result.method.annotation.CurrentSecurityContextArgumentResolver reactiveCurrentSecurityContextArgumentResolver()>-><org.springframework.security.web.reactive.result.method.annotation.CurrentSecurityContextArgumentResolver: void setBeanResolver(org.springframework.expression.BeanResolver)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.SliceOps$1$1: boolean cancellationRequested()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler configure(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder newSerializationContext(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: org.springframework.boot.jackson.JsonComponentModule jsonComponentModule()>
<org.springframework.http.HttpHeaders: java.util.Set entrySet()>-><org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.MeteredStream: long skip(long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$IntFixedNodeBuilder: void begin(long)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: org.springframework.boot.info.GitProperties gitProperties()>-><org.springframework.boot.info.GitProperties: void <init>(java.util.Properties)>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>-><java.net.URL: java.lang.String getProtocol()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setFilterRegistrationBean(org.springframework.boot.web.servlet.FilterRegistrationBean)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean: void <init>(org.springframework.web.servlet.DispatcherServlet,java.lang.String)>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath: java.lang.String getServletUrlMapping()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.Ptg: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: void remove()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.FormatRecord: java.lang.String toString()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration: com.fasterxml.jackson.databind.ObjectMapper jacksonObjectMapper(org.springframework.http.converter.json.Jackson2ObjectMapperBuilder)>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder createXmlMapper(boolean)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$ConcatSpliterator: long estimateSize()>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.security.cert.CertificateException: void <init>(java.lang.String)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: int limit()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnectionFromDriver(java.lang.String,java.lang.String)>-><org.flywaydb.core.api.FlywayException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.config.web.server.ServerHttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.authentication.ReactiveAuthenticationManager authenticationManager()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><java.io.BufferedInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void <init>()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean add(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer rewind()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URL: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.lang.Long: long parseLong(java.lang.String)>
<org.springframework.boot.autoconfigure.jackson.JacksonProperties: void <init>()>-><java.util.EnumMap: void <init>(java.lang.Class)>
<org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy: void <init>(java.lang.String)>-><org.springframework.security.web.DefaultRedirectStrategy: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$HashMapSpliterator: long estimateSize()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setOracleSqlplusWarn(java.lang.Boolean)>
<java.io.PrintStream: boolean checkError()>-><java.io.PrintStream: boolean checkError()>
<org.springframework.data.redis.cache.DefaultRedisCacheWriter: org.springframework.data.redis.cache.RedisCacheWriter withStatisticsCollector(org.springframework.data.redis.cache.CacheStatisticsCollector)>-><org.springframework.data.redis.cache.DefaultRedisCacheWriter: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory,java.time.Duration,org.springframework.data.redis.cache.CacheStatisticsCollector)>
<java.net.HttpConnectSocketImpl: int getLocalPort()>-><java.net.InetSocketAddress: int getPort()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.apache.catalina.connector.ResponseFacade: void setContentType(java.lang.String)>-><org.apache.catalina.connector.Response: void setContentType(java.lang.String)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory$1: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedCollection: int size()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutSuccessHandler createDefaultSuccessHandler()>-><org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler: void <init>()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.lang.String: char charAt(int)>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.access.AccessDeniedHandler createDefaultDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>-><javax.xml.transform.TransformerFactoryConfigurationError: java.lang.Throwable getCause()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: boolean isStateless()>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.config.http.SessionCreationPolicy getSessionCreationPolicy()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><java.io.StringReader: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.security.core.userdetails.User: java.util.SortedSet sortAuthorities(java.util.Collection)>-><java.util.TreeSet: void <init>(java.util.Comparator)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.ChunkedInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpClient,sun.net.www.MessageHeader)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.HashMap$KeySpliterator: int characteristics()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.springframework.data.redis.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheConfiguration defaultCacheConfig(java.lang.ClassLoader)>-><org.springframework.data.redis.cache.RedisCacheConfiguration: void registerDefaultConverters(org.springframework.core.convert.converter.ConverterRegistry)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$ArrayNode: long count()>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.http.KeepAliveStream: void close()>
<java.io.BufferedOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List resolveLocations(java.util.List)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: boolean usesVendorLocation(java.util.Collection)>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><java.lang.Object: void <init>()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode: long count()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.KeyManager[] configureKeyManagers()>-><java.io.FileInputStream: void close()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceSslClientConfigurationBuilder: void <init>(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.net.URL: java.lang.String getFile()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder shutdownTimeout(java.time.Duration)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder shutdownTimeout(java.time.Duration)>
<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.Area2DPtgBase: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.apache.catalina.connector.OutputBuffer: void realWriteBytes(java.nio.ByteBuffer)>-><org.apache.catalina.connector.ClientAbortException: void <init>(java.lang.Throwable)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.IntPipeline$9$1: void accept(int)>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: org.springframework.security.web.server.SecurityWebFilterChain springSecurityFilterChain()>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setSqlMigrationPrefix(java.lang.String)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeEmbeddedOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: void <init>()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: java.util.Optional getWelcomePage()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration: java.lang.String[] getResourceLocations(java.lang.String[])>
<org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.security.config.annotation.authentication.configuration.GlobalAuthenticationConfigurerAdapter: void <init>()>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>-><java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void setPasswordEncoder(org.springframework.security.crypto.password.PasswordEncoder)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.springframework.data.redis.cache.RedisCacheManager: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder builder(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder fromConnectionFactory(org.springframework.data.redis.connection.RedisConnectionFactory)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.Buffer: int limit()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void registerJsr310(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.boot.autoconfigure.web.format.WebConversionService: void configure(java.util.function.Supplier,java.util.function.Consumer)>
<org.javaboy.vhr.config.SecurityConfig: void lambda$loginFilter$1(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.apache.catalina.connector.ResponseFacade: java.io.PrintWriter getWriter()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.access.AccessDeniedHandler createDefaultDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.RequestMatcherDelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>
<sun.net.NetworkClient$2: java.net.Socket run()>-><java.net.Socket: void <init>(java.net.Proxy)>
<org.springframework.web.util.pattern.InternalPathPatternParser: void <init>(org.springframework.web.util.pattern.PathPatternParser)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.security.web.session.SessionManagementFilter: void <init>(org.springframework.security.web.context.SecurityContextRepository,org.springframework.security.web.authentication.session.SessionAuthenticationStrategy)>-><org.springframework.security.authentication.AuthenticationTrustResolverImpl: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.filter.RequestContextFilter requestContextFilter()>-><org.springframework.boot.web.servlet.filter.OrderedRequestContextFilter: void <init>()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.util.AbstractMap: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.ServletRequestImpl: void <init>()>-><java.lang.Object: void <init>()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: java.lang.Object next()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setOpenEntityManagerInViewInterceptor(org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: int getNCCount()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer restTemplateBuilderConfigurer(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer: void <init>()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.HttpConnectSocketImpl: java.net.Socket privilegedDoTunnel(java.lang.String,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter: org.springframework.security.web.server.header.ServerHttpHeadersWriter createDelegate(org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode)>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder builder()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.GridsetRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.LocalDateTime: java.lang.String toString()>
<java.io.DataOutputStream: void writeInt(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<org.springframework.boot.autoconfigure.web.ResourceProperties: java.lang.String[] getStaticLocations()>-><org.springframework.boot.autoconfigure.web.WebProperties$Resources: java.lang.String[] getStaticLocations()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setView(org.springframework.web.servlet.View)>
<org.javaboy.vhr.VhrApplication: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>-><org.springframework.boot.jdbc.DataSourceBuilder: org.springframework.boot.jdbc.DataSourceBuilder url(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.VCenterRecord: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setInitializeUserDetailsBeanManagerConfigurer(org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: org.springframework.security.core.userdetails.MapReactiveUserDetailsService reactiveUserDetailsService(org.springframework.boot.autoconfigure.security.SecurityProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: org.springframework.security.core.userdetails.UserDetails getUserDetails(org.springframework.boot.autoconfigure.security.SecurityProperties$User,java.lang.String)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.FooterRecord: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void main(java.lang.String[])>-><synthetic.method.ServletResponseImpl: void <init>()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.io.DataInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.net.www.http.KeepAliveCache: int getMaxConnections()>-><java.lang.Integer: int intValue()>
<sun.net.www.MessageHeader: void setIfNotSet(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerOpaqueTokenConfiguration$OpaqueTokenIntrospectionClientConfiguration: org.springframework.security.oauth2.server.resource.introspection.NimbusOpaqueTokenIntrospector opaqueTokenIntrospector(org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>-><java.nio.HeapCharBuffer: java.nio.CharBuffer slice()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.bind.support.ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer(org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.bind.support.ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer(org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.ArrayList: void <init>()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String parseVirtualHost(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter: void <init>(org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter$XFrameOptionsMode)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>
<org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>-><org.apache.catalina.connector.OutputBuffer: void realWriteBytes(java.nio.ByteBuffer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration: org.springframework.http.converter.StringHttpMessageConverter stringHttpMessageConverter(org.springframework.core.env.Environment)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.httpserver.Request$WriteStream: void write(int)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnection()>-><org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnectionFromDriver(java.lang.String,java.lang.String)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: int getDefaultPort(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><java.net.HttpConnectSocketImpl$2: java.lang.Object run()>
<org.flywaydb.core.internal.database.derby.DerbyDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Socket: void setSoTimeout(int)>
<org.flywaydb.core.internal.database.oracle.OracleDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void <init>(com.fasterxml.jackson.core.JsonStreamContext,com.fasterxml.jackson.core.JsonLocation)>-><com.fasterxml.jackson.core.filter.TokenFilterContext: java.lang.Object getCurrentValue()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.protocol.https.HttpsClient: void closeIdleConnection()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setRequestedHeartbeat(java.time.Duration)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: int characteristics()>
<reactor.util.function.Tuple2: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo parseUrl(java.lang.String)>-><org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxException: void <init>(java.lang.String,java.lang.Exception)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setEmbeddedDatabase(org.springframework.jdbc.datasource.embedded.EmbeddedDatabase)>
<org.apache.catalina.connector.ResponseFacade: void setContentType(java.lang.String)>-><org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: void <init>(org.apache.catalina.connector.ResponseFacade,java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.WeakHashMap$ValueSpliterator: int characteristics()>
<java.io.FilterInputStream: void reset()>-><sun.net.www.MeteredStream: void reset()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addArgumentResolvers(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.config.RabbitConfig: org.springframework.amqp.core.Queue mailQueue()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.io.File: void <init>(java.io.File,java.lang.String)>
<org.springframework.security.web.server.savedrequest.WebSessionServerRequestCache: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher createDefaultRequestMacher()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: void <init>(org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher)>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingSslClientConfigurationBuilder useSsl()>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingSslClientConfigurationBuilder: void <init>(org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.DigestAuthentication: boolean supportsPreemptiveAuthorization()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: javax.sql.DataSource configureDataSource(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,javax.sql.DataSource,javax.sql.DataSource)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isCreateDataSource()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.WeakHashMap: void clear()>
<java.util.stream.DistinctOps$1$2: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: int getDefaultPort()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations$Generic: io.r2dbc.spi.ConnectionFactory connectionFactory(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations: io.r2dbc.spi.ConnectionFactory createConnectionFactory(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.lang.ClassLoader,java.util.List)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>
<org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>-><org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.BlankRecord: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter: boolean isEnabled()>
<org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.data.redis.connection.RedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.boot.autoconfigure.cache.CacheProperties$Redis: boolean isEnableStatistics()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.io.InputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.config.web.server.ServerHttpSecurity httpSecurity()>-><org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec: org.springframework.security.config.web.server.ServerHttpSecurity and()>
<java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfInt spliterator()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.ProgressSource: void finishTracking()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations$Generic: io.r2dbc.spi.ConnectionFactory connectionFactory(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getWorkID()>
<sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Socket: void setImpl()>
<java.text.MessageFormat: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.core.io.support.PropertiesLoaderSupport: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce$Cluster$Refresh: boolean isAdaptive()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskExecutorBuilder: void <init>()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder: void <init>(org.springframework.orm.jpa.JpaVendorAdapter,java.util.Map,org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager,java.net.URL)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: java.lang.String getPath()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.lang.Error: void <init>(java.lang.String)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>
<org.springframework.security.web.csrf.CsrfLogoutHandler: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration: org.springframework.boot.autoconfigure.web.embedded.TomcatWebServerFactoryCustomizer tomcatWebServerFactoryCustomizer(org.springframework.core.env.Environment,org.springframework.boot.autoconfigure.web.ServerProperties)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.Sink: void accept(int)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: java.util.Map access$100(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: org.apache.commons.pool2.impl.GenericObjectPoolConfig getPoolConfig(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: void setMaxWaitMillis(long)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><javax.xml.transform.TransformerFactoryConfigurationError: java.lang.String getMessage()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.security.ssl.Krb5Helper$1: java.lang.Object run()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.Map getCorsConfigurations()>-><org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Double: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.InflaterInputStream: void close()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void logFinest(java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.MeteredStream: int read()>-><java.io.ObjectInputStream$BlockDataInputStream: int read()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.jar.Manifest$FastInputStream: void fill()>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.zip.InflaterInputStream: void fill()>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$StatViewServlet: java.lang.String getLoginPassword()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setConcurrentMapCacheManager(org.springframework.cache.concurrent.ConcurrentMapCacheManager)>
<org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.AbstractTask: boolean isRoot()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.mustache.MustacheServletWebConfiguration: void <init>()>
<org.flywaydb.core.internal.database.hsqldb.HSQLDBDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.zip.DeflaterOutputStream: void deflate()>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readInt()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: javax.sql.DataSource configureDataSource(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,javax.sql.DataSource,javax.sql.DataSource)>-><org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration dataSource(javax.sql.DataSource)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>-><sun.net.www.http.HttpClient: java.lang.String getProxyHostUsed()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher: void <init>(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<org.apache.tomcat.jni.Library: void <init>(java.lang.String)>-><java.lang.System: void loadLibrary(java.lang.String)>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.io.FileNotFoundException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response$PrivilegedDoIsEncodable: java.lang.Object run()>-><org.apache.catalina.connector.Response$PrivilegedDoIsEncodable: java.lang.Boolean run()>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.io.FilePermission: boolean impliesIgnoreMask(java.io.FilePermission)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String trimPrefix(java.lang.String)>-><java.lang.String: int length()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: boolean determineEnabled()>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><java.net.HttpConnectSocketImpl$1: java.lang.Object run()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setInstalledBy(java.lang.String)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.net.URL: java.io.InputStream openStream()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<sun.net.www.MeteredStream: void close()>-><sun.net.ProgressSource: void finishTracking()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<sun.net.www.ParseUtil: java.net.URI createURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: void checkPath(java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy: void <init>(java.lang.String)>-><java.lang.Object: java.lang.Class getClass()>
<io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder: io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder enableAllAdaptiveRefreshTriggers()>-><java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.WebProperties)>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: java.lang.String getOrDeducePassword(org.springframework.boot.autoconfigure.security.SecurityProperties$User,org.springframework.security.crypto.password.PasswordEncoder)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setIgnoreFutureMigrations(boolean)>
<org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor$MethodSecurityMetadataSourcePointcut: void <init>(org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor)>-><org.springframework.aop.support.StaticMethodMatcherPointcut: void <init>()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getNativePlace()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource)>-><org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><javax.security.auth.Policy$2: java.lang.Object run()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$1: void <init>(javax.security.auth.SubjectDomainCombiner,javax.security.auth.Subject)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: long estimateSize()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder allowCoreThreadTimeOut(boolean)>-><org.springframework.boot.task.TaskExecutorBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.Boolean,java.time.Duration,java.lang.String,org.springframework.core.task.TaskDecorator,java.util.Set)>
<reactor.core.scheduler.Schedulers: reactor.core.scheduler.Scheduler boundedElastic()>-><reactor.core.scheduler.Schedulers: reactor.core.scheduler.Schedulers$CachedScheduler cache(java.util.concurrent.atomic.AtomicReference,java.lang.String,java.util.function.Supplier)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.misc.Signal: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: boolean determineEnabled()>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.data.redis.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheConfiguration defaultCacheConfig(java.lang.ClassLoader)>-><org.springframework.data.redis.cache.CacheKeyPrefix: org.springframework.data.redis.cache.CacheKeyPrefix simple()>
<java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: org.springframework.boot.info.GitProperties gitProperties()>-><org.springframework.boot.autoconfigure.info.ProjectInfoProperties: org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git getGit()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$EmptySpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.net.HttpConnectSocketImpl: java.net.InetAddress getInetAddress()>-><java.net.SocketImpl: java.net.InetAddress getInetAddress()>
<sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>-><java.net.InetSocketAddress: int getPort()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>
<java.io.FilterOutputStream: void flush()>-><com.rabbitmq.client.impl.nio.ByteBufferOutputStream: void flush()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.lang.StringBuilder: int length()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.web.cors.UrlBasedCorsConfigurationSource: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Collections$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder threadNamePrefix(java.lang.String)>-><org.springframework.boot.task.TaskExecutorBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.Boolean,java.time.Duration,java.lang.String,org.springframework.core.task.TaskDecorator,java.util.Set)>
<org.springframework.web.cors.UrlBasedCorsConfigurationSource: void <init>(org.springframework.web.util.pattern.PathPatternParser)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureCreateSchemas(org.flywaydb.core.api.configuration.FluentConfiguration,boolean)>-><org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration createSchemas(boolean)>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$4(org.springframework.security.web.session.SessionInformationExpiredEvent)>-><org.apache.catalina.connector.CoyoteWriter: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: boolean isFull(java.nio.Buffer)>-><java.nio.Buffer: int limit()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setBaselineDescription(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntArraySpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration dataSource(javax.sql.DataSource)>-><org.flywaydb.core.api.configuration.ClassicConfiguration: void setDataSource(javax.sql.DataSource)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.feed.RssChannelHttpMessageConverter: void <init>()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: org.apache.commons.pool2.impl.GenericObjectPoolConfig getPoolConfig(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: void setTimeBetweenEvictionRunsMillis(long)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setMessageSourceProperties(org.springframework.boot.autoconfigure.context.MessageSourceProperties)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveStream: sun.net.www.http.KeepAliveStreamCleaner access$100()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URL: void <init>(java.net.URL,java.lang.String)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.http.server.PathContainer$Options: char separator()>
<sun.net.www.protocol.http.HttpURLConnection$3: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$3: java.net.ResponseCache run()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.savedrequest.RequestCache getRequestCache(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.locale.Extension: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration: org.springframework.boot.autoconfigure.web.reactive.TomcatReactiveWebServerFactoryCustomizer tomcatReactiveWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.ServerProperties)>-><org.springframework.boot.autoconfigure.web.reactive.TomcatReactiveWebServerFactoryCustomizer: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.UnresolvedPermissionCollection: java.util.Enumeration elements()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>-><javax.xml.stream.FactoryConfigurationError: java.lang.Throwable getCause()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator$OfInt spliterator()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.lang.String getHeaderNamesInList()>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void forEach(java.util.function.Consumer)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: org.springframework.validation.MessageCodesResolver getMessageCodesResolver()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: org.springframework.web.servlet.DispatcherServlet dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: boolean isDispatchTraceRequest()>
<sun.misc.URLClassPath: void check(java.net.URL)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.security.Permission getPermission()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration$AuthenticationManagerDelegator: void <init>(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<java.util.AbstractList: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.core.io.support.PropertiesLoaderSupport: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.MeteredStream: void close()>-><sun.net.httpserver.Request$ReadStream: void close()>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.jackson.JacksonProperties)>-><java.lang.Object: void <init>()>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void <init>(org.springframework.context.ApplicationEventPublisher)>-><org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void addMapping(java.lang.String,java.lang.Class)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: org.springframework.security.core.userdetails.UserDetails getUserDetails(org.springframework.boot.autoconfigure.security.SecurityProperties$User,java.lang.String)>-><org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder roles(java.lang.String[])>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration: void <init>()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher notMatchingMediaType(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.http.MediaType)>-><java.util.Collections: java.util.Set singleton(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void <init>()>-><org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter: void <init>()>
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.api.FlywayException: void <init>(java.lang.String)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnectionFromDriver(java.lang.String,java.lang.String)>-><java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.web.util.pattern.InternalPathPatternParser: void skipCaptureRegex()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><org.springframework.core.io.support.EncodedResource: boolean requiresReader()>
<org.springframework.web.cors.UrlBasedCorsConfigurationSource: void <init>(org.springframework.web.util.pattern.PathPatternParser)>-><java.util.LinkedHashMap: void <init>()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.FileInputStream: void close()>
<org.springframework.context.annotation.MBeanExportConfiguration: void setupRegistrationPolicy(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>-><org.springframework.jmx.support.MBeanRegistrationSupport: void setRegistrationPolicy(org.springframework.jmx.support.RegistrationPolicy)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.web.servlet.config.annotation.CorsRegistry: java.util.Map getCorsConfigurations()>-><java.util.ArrayList: java.util.Iterator iterator()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>-><org.springframework.boot.web.servlet.server.Session: void <init>()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: boolean isEmpty()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.InetSocketAddress: void <init>(java.lang.String,int)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void setRootViewName(java.lang.String)>-><org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: void setRootHandler(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator spliterator()>
<org.springframework.http.client.support.InterceptingHttpAccessor: void <init>()>-><org.springframework.http.client.support.HttpAccessor: void <init>()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.HashSet: void <init>()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisClusterConfiguration getClusterConfiguration()>-><org.springframework.data.redis.connection.RedisClusterConfiguration: void setUsername(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.AbstractCollection: boolean isEmpty()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: int size()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.config.RabbitConfig: org.springframework.amqp.core.Binding mailBinding()>
<org.apache.catalina.connector.Response: boolean isAppCommitted()>-><org.apache.catalina.connector.Response: boolean isCommitted()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: boolean hasNext()>
<io.netty.util.internal.DefaultPriorityQueue: void bubbleUp(int,io.netty.util.internal.PriorityQueueNode)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint createDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.Http403ForbiddenEntryPoint: void <init>()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: org.springframework.data.redis.core.ReactiveRedisTemplate reactiveRedisTemplate(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.serializer.JdkSerializationRedisSerializer: void <init>(java.lang.ClassLoader)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>
<java.net.URI: int needsNormalization(java.lang.String)>-><java.lang.String: char charAt(int)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,java.util.List)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.List sortErrorViewResolvers(java.util.List)>
<java.util.LinkedHashMap: void afterNodeInsertion(boolean)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder: io.r2dbc.spi.ConnectionFactory build()>-><io.r2dbc.spi.ConnectionFactories: io.r2dbc.spi.ConnectionFactory get(io.r2dbc.spi.ConnectionFactoryOptions)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>
<java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.MeteredStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers getCacheManagerCustomizersInstance()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>
<java.util.stream.Nodes$ConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.io.BufferedInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URL: java.lang.String getPath()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String raw()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setBaselineOnMigrate(boolean)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Object run()>-><sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>
<org.springframework.http.client.support.HttpAccessor: void <init>()>-><org.springframework.http.client.SimpleClientHttpRequestFactory: void <init>()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.String: int length()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.charset.CoderResult: boolean isError()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getDefaultConverters()>-><org.springframework.web.client.RestTemplate: java.util.List getMessageConverters()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.http.HttpClient: void openServer()>-><java.net.Proxy: java.net.SocketAddress address()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.http.HttpClient: void closeServer()>
<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.boot.context.properties.bind.Binder: java.lang.Object bindOrCreate(org.springframework.boot.context.properties.source.ConfigurationPropertyName,org.springframework.boot.context.properties.bind.Bindable,org.springframework.boot.context.properties.bind.BindHandler)>-><org.springframework.boot.context.properties.bind.Binder: java.lang.Object bind(org.springframework.boot.context.properties.source.ConfigurationPropertyName,org.springframework.boot.context.properties.bind.Bindable,org.springframework.boot.context.properties.bind.BindHandler,boolean)>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.Collection: java.util.stream.Stream stream()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <init>(boolean,java.util.Collection)>-><java.lang.Object: void <init>()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$ConcNode: java.util.Spliterator spliterator()>
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: java.lang.String getKey()>-><java.util.UUID: java.util.UUID randomUUID()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.LinkedList: int size()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.DelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: org.flywaydb.core.Flyway flyway(org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureJavaMigrations(org.flywaydb.core.api.configuration.FluentConfiguration,java.util.List)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Boolean: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.PermissionsEnumerator: boolean hasMoreElements()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.FileInputStream: int read(byte[],int,int)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder(org.springframework.context.ApplicationContext,java.util.List)>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory tomcatServletWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration: org.springframework.transaction.support.TransactionTemplate transactionTemplate(org.springframework.transaction.PlatformTransactionManager)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientOptions(io.lettuce.core.ClientOptions)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.function.FunctionMetadata: java.lang.String toString()>
<org.springframework.cache.concurrent.ConcurrentMapCacheManager: void setCacheNames(java.util.Collection)>-><org.springframework.cache.concurrent.ConcurrentMapCacheManager: org.springframework.cache.Cache createConcurrentMapCache(java.lang.String)>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler getDefaultAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.Spliterator: boolean hasCharacteristics(int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.ArrayList$Itr: void remove()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer reset()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setSecuritySocketAcceptorInterceptor(org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor)>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.beans.factory.support.DisposableBeanAdapter: void destroy()>-><org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory: void destroy()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>-><java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.common.UnicodeString: java.lang.String toString()>
<org.springframework.data.redis.cache.RedisCacheManager: void <init>(org.springframework.data.redis.cache.RedisCacheWriter,org.springframework.data.redis.cache.RedisCacheConfiguration,boolean)>-><java.util.LinkedHashMap: void <init>()>
<sun.net.www.http.KeepAliveStream$1: void <init>()>-><java.lang.Object: void <init>()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration$ContextAwareServerHttpSecurity: void <init>()>-><org.springframework.security.config.web.server.ServerHttpSecurity: void <init>()>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cache.concurrent.ConcurrentMapCacheManager: void <init>()>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setIgnorePendingMigrations(boolean)>
<org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor: void <init>(java.lang.String,org.springframework.security.access.method.MethodSecurityMetadataSource,java.lang.String)>-><org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor$MethodSecurityMetadataSourcePointcut: void <init>(org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainCustomizerConfiguration: org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.WebProperties)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainResourceHandlerRegistrationCustomizer: void <init>(org.springframework.boot.autoconfigure.web.WebProperties$Resources)>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <init>()>-><java.util.HashMap: void <init>()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressEvent: void <init>(sun.net.ProgressSource,java.net.URL,java.lang.String,java.lang.String,sun.net.ProgressSource$State,long,long)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.util.DefaultPropertiesPersister: void load(java.util.Properties,java.io.Reader)>-><java.util.Properties: void load(java.io.Reader)>
<java.net.URLPermission: void init(java.lang.String)>-><java.security.Permission: java.lang.String getName()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.stream.Node$OfInt build()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void updateDelegate()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter build()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.config.web.server.ServerHttpSecurity httpSecurity()>-><org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: org.springframework.security.config.web.server.ServerHttpSecurity and()>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean forwardedHeaderFilter()>-><org.springframework.web.filter.ForwardedHeaderFilter: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setResponseBodyAdvice(java.util.List)>
<org.springframework.security.web.header.writers.HstsHeaderWriter: void <init>(org.springframework.security.web.util.matcher.RequestMatcher,long,boolean,boolean)>-><java.lang.Object: void <init>()>
<java.io.FilterInputStream: void reset()>-><java.io.PushbackInputStream: void reset()>
<java.io.DataOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>-><org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$3: java.lang.Object nextElement()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.WebProperties getWebPropertiesInstance()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.InputStream: int read(byte[],int,int)>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Collection)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.util.Date getBirthday()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.BufferedOutputStream: void write(int)>
<java.lang.System$2: void invokeFinalize(java.lang.Object)>-><sun.net.www.http.HttpClient: void finalize()>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.Object next()>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<org.springframework.core.annotation.AnnotationAwareOrderComparator: void sort(java.lang.Object[])>-><java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType getReferencedType()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.charset.CoderResult: boolean isMalformed()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void setPriority(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$2: void forEachRemaining(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: java.util.Spliterator makeSpliterator(java.util.Spliterator,long,long,long,long)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long,long,long)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void <init>()>
<org.springframework.security.web.header.writers.HstsHeaderWriter: void <init>()>-><org.springframework.security.web.header.writers.HstsHeaderWriter: void <init>(long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.AbstractChunk: void recycle()>
<sun.net.www.protocol.http.HttpURLConnection$5: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><java.io.BufferedInputStream: void close()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)>-><java.io.BufferedInputStream: void close()>
<org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper alwaysApplying(org.springframework.boot.context.properties.PropertyMapper$SourceOperator)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNonce(java.lang.String)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void extendMessageConverters(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull()>
<org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration: org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar springApplicationAdminRegistrar(org.springframework.beans.factory.ObjectProvider,org.springframework.core.env.Environment)>-><org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar: void <init>(java.lang.String)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: org.javaboy.vhr.model.Department getDepartment()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$ArraySpliterator: java.util.Spliterator trySplit()>
<org.springframework.cache.support.SimpleCacheManager: void <init>()>-><java.util.Collections: java.util.Set emptySet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.web.servlet.view.UrlBasedViewResolver: void setViewClass(java.lang.Class)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitTemplateConfiguration: org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer rabbitTemplateConfigurer(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.springframework.security.core.userdetails.User$UserBuilder: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: int getPort()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: int getPort()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getBaselineVersion()>
<io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder: io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder enablePeriodicRefresh(java.time.Duration)>-><io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder: io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder enablePeriodicRefresh()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><java.lang.Integer: int parseInt(java.lang.String)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.http.KeepAliveStreamCleaner$2: java.lang.Integer run()>-><sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><java.util.Collections$SingletonList: int size()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.mysql.MySQLDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.web.util.pattern.InternalPathPatternParser: void resetPathElementState()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.asm.Label: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner$1: void <init>(javax.security.auth.SubjectDomainCombiner,javax.security.auth.Subject)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Department: java.lang.String getName()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.http.HttpHeaders: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpHeaders: java.util.List put(java.lang.String,java.util.List)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.net.InetAddressContainer: void <init>()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.CorsRegistry: void <init>()>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<org.springframework.security.web.server.header.XXssProtectionServerHttpHeadersWriter: void updateDelegate()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder header(java.lang.String,java.lang.String[])>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>-><sun.net.www.protocol.http.HttpURLConnection$6: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ColumnInfoRecord: java.lang.String toString()>
<org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.data.redis.connection.RedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.boot.autoconfigure.cache.CacheProperties: org.springframework.boot.autoconfigure.cache.CacheProperties$Redis getRedis()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder authorities(java.util.Collection)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<org.springframework.web.servlet.view.UrlBasedViewResolver: void setViewClass(java.lang.Class)>-><org.springframework.web.servlet.view.InternalResourceViewResolver: java.lang.Class requiredViewClass()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: org.springframework.web.servlet.DispatcherServlet dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)>-><org.springframework.web.servlet.DispatcherServlet: void setThrowExceptionIfNoHandlerFound(boolean)>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><org.apache.tomcat.util.buf.C2BConverter: boolean isUndeflow()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>-><org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher[])>
<org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder hashKey(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair: org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair fromSerializer(org.springframework.data.redis.serializer.RedisSerializer)>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><java.net.SocketInputStream: int read(byte[])>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: boolean hasNext()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.flywaydb.core.internal.sqlscript.FlywaySqlScriptException: java.lang.String getMessage()>
<org.springframework.security.config.annotation.web.configurers.PermitAllSupport$ExactUrlRequestMatcher: void <init>(java.lang.String,org.springframework.security.config.annotation.web.configurers.PermitAllSupport$1)>-><org.springframework.security.config.annotation.web.configurers.PermitAllSupport$ExactUrlRequestMatcher: void <init>(java.lang.String)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.SecurityContextConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SecurityContextConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><org.springframework.core.io.support.EncodedResource: java.io.InputStream getInputStream()>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.text.FieldPosition: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void setUseTrailingSlashMatch(boolean)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: org.springframework.web.context.request.WebRequest getObject()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletResponse getResponse()>
<org.springframework.security.authentication.AnonymousAuthenticationProvider: void <init>(java.lang.String)>-><org.springframework.security.core.SpringSecurityMessageSource: org.springframework.context.support.MessageSourceAccessor getAccessor()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.net.www.URLConnection: void setProxiedHost(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactory(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder properties(java.util.Map)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressMonitor: boolean shouldMeterInput(java.net.URL,java.lang.String)>
<org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration: org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryCustomizer reactiveWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.ServerProperties)>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryCustomizer: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>
<org.springframework.security.web.server.header.CacheControlServerHttpHeadersWriter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isPlaceholderReplacement()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactory(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<sun.net.www.http.ChunkedInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpClient,sun.net.www.MessageHeader)>-><java.io.InputStream: void <init>()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: java.lang.String redactJdbcUrl(java.lang.String,java.util.regex.Pattern)>-><java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List replaceVendorLocations(java.util.List,org.springframework.boot.jdbc.DatabaseDriver)>-><org.springframework.boot.jdbc.DatabaseDriver$6: java.lang.String getId()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientName(java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: javax.sql.DataSource configureDataSource(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,javax.sql.DataSource,javax.sql.DataSource)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: java.lang.String getProperty(java.util.function.Supplier,java.util.function.Supplier)>
<org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>-><java.lang.String: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node: java.util.stream.StreamShape getShape()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisClusterConfiguration getClusterConfiguration()>-><org.springframework.data.redis.connection.RedisClusterConfiguration: void setMaxRedirects(int)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: void setObserveOncePerRequest(boolean)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList: java.util.ListIterator listIterator()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.web.servlet.support.ErrorPageFilterConfiguration: org.springframework.boot.web.servlet.support.ErrorPageFilter errorPageFilter()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setXa(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer initializeAuthenticationProviderBeanManagerConfigurer(org.springframework.context.ApplicationContext)>-><org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer: void <init>(org.springframework.context.ApplicationContext)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.util.regex.Matcher: java.lang.String group(int)>
<org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter: org.springframework.security.web.server.header.ServerHttpHeadersWriter createDelegate(org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode)>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter build()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>
<sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>-><java.util.StringTokenizer: java.lang.String nextToken()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.task.TaskExecutionProperties getTaskExecutionPropertiesInstance()>
<java.util.stream.DistinctOps$1$1: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><sun.net.ApplicationProxy: sun.net.ApplicationProxy create(java.net.Proxy)>
<org.springframework.security.web.server.savedrequest.WebSessionServerRequestCache: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher createDefaultRequestMacher()>-><org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher: void <init>(org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher[])>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setThrowExceptionIfNoHandlerFound(boolean)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.mvc.ParameterizableViewController: void <init>()>-><org.springframework.web.servlet.mvc.AbstractController: void <init>(boolean)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration: org.springframework.security.authentication.DefaultAuthenticationEventPublisher authenticationEventPublisher(org.springframework.context.ApplicationEventPublisher)>
<sun.net.www.http.ChunkedInputStream: void closeUnderlying()>-><sun.net.www.http.HttpClient: void closeServer()>
<org.springframework.security.web.access.RequestMatcherDelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><java.lang.Object: void <init>()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><org.springframework.http.HttpHeaders: java.util.Set entrySet()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.oracle.OracleDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<java.io.PrintStream: void flush()>-><java.io.PrintStream: void flush()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: long estimateSize()>
<org.springframework.data.redis.core.DefaultReactiveStreamOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext,org.springframework.data.redis.hash.HashMapper)>-><org.springframework.data.redis.core.DefaultReactiveStreamOperations$1: void <init>(org.springframework.data.redis.core.DefaultReactiveStreamOperations,org.springframework.data.redis.hash.HashMapper,org.springframework.data.redis.serializer.RedisSerializationContext)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.OrRequestMatcher: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.net.ProtocolException: void <init>(java.lang.String)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder customizers(java.lang.Iterable)>-><org.springframework.boot.task.TaskExecutorBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.Boolean,java.time.Duration,java.lang.String,org.springframework.core.task.TaskDecorator,java.util.Set)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$ArraySpliterator: long estimateSize()>
<org.apache.tomcat.util.buf.ByteChunk: void <init>(int)>-><org.apache.tomcat.util.buf.AbstractChunk: void <init>()>
<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.io.BufferedInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int available()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory createLettuceConnectionFactory(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration)>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.mysql.mariadb.MariaDBDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.cache.concurrent.ConcurrentMapCacheManager: void setCacheNames(java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.core.io.support.EncodedResource: void <init>(org.springframework.core.io.Resource,java.nio.charset.Charset)>-><org.springframework.core.io.support.EncodedResource: void <init>(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration: void <init>()>-><org.javaboy.vhr.config.SecurityConfig$1: void <init>(org.javaboy.vhr.config.SecurityConfig)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><java.io.InputStream: void close()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.bind.support.ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer(org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.bind.support.ConfigurableWebBindingInitializer: void setConversionService(org.springframework.core.convert.ConversionService)>
<sun.nio.cs.StreamDecoder: void implClose()>-><sun.net.www.MeteredStream: void close()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setChannelRpcTimeout(java.time.Duration)>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setTomcatReactiveWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.reactive.TomcatReactiveWebServerFactoryCustomizer)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping welcomePageHandlerMapping(org.springframework.context.ApplicationContext,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: java.lang.String getStaticPathPattern()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<sun.net.www.http.HttpClient$1: void <init>(sun.net.www.http.HttpClient,java.net.InetSocketAddress)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: void remove()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: void <init>(java.lang.String,org.springframework.http.HttpMethod)>-><org.springframework.web.util.pattern.PathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>
<org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration: org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers platformTransactionManagerCustomizers(org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers: void <init>(java.util.Collection)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: int length()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.SubList$1: boolean hasNext()>
<java.security.ProtectionDomain: java.lang.String toString()>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getName()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: int characteristics()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.security.web.access.RequestMatcherDelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.io.FilterInputStream: void mark(int)>-><java.io.FilterInputStream: void mark(int)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.lang.String detectFallbackUser(java.lang.String)>-><java.lang.System: java.lang.String getenv(java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setSeparator(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: java.util.Spliterator trySplit()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.redshift.RedshiftDatabaseType: java.lang.String getBackupDriverClass(java.lang.String,java.lang.ClassLoader)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.MessageHeader: java.util.Iterator multiValueIterator(java.lang.String)>-><sun.net.www.MessageHeader$HeaderIterator: void <init>(sun.net.www.MessageHeader,java.lang.String,java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisProperties getProperties()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.web.util.DefaultUriBuilderFactory: void <init>()>-><java.util.HashMap: void <init>()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.flywaydb.core.internal.exception.FlywaySqlException: java.lang.String getMessage()>
<org.apache.catalina.connector.OutputBuffer: org.apache.tomcat.util.buf.C2BConverter createConverter(java.nio.charset.Charset)>-><org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.http.ChunkedInputStream: void ensureRawAvailable(int)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.ArrayList$ArrayListSpliterator: int characteristics()>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory tomcatServletWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: java.util.Collection getTomcatProtocolHandlerCustomizers()>
<org.springframework.security.config.web.server.ServerHttpSecurity: void <init>()>-><org.springframework.security.config.web.server.ServerHttpSecurity$LoginPageSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>
<org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration: org.mybatis.spring.SqlSessionTemplate sqlSessionTemplate(org.apache.ibatis.session.SqlSessionFactory)>-><org.mybatis.spring.SqlSessionTemplate: void <init>(org.apache.ibatis.session.SqlSessionFactory,org.apache.ibatis.session.ExecutorType)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Optional: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping welcomePageHandlerMapping(org.springframework.context.ApplicationContext,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getConnection()>-><org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getTransactionAwareConnectionProxy(javax.sql.DataSource)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor applicationTaskExecutor(org.springframework.boot.task.TaskExecutorBuilder)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void checkLocationExists(javax.sql.DataSource,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.core.io.ResourceLoader)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.AbstractPipeline: long exactOutputSizeIfKnown(java.util.Spliterator)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.net.SocketOutputStream: void close()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$LongArrayNode: void forEach(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Pool: int getCoreSize()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: char charAt(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.context.HttpSessionSecurityContextRepository: void setDisableUrlRewriting(boolean)>
<org.apache.tomcat.jni.Library: boolean initialize(java.lang.String)>-><org.apache.tomcat.jni.Library: int version(int)>
<java.util.HashMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setCustomReturnValueHandlers(java.util.List)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration: org.springframework.cache.concurrent.ConcurrentMapCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers)>-><org.springframework.cache.concurrent.ConcurrentMapCacheManager: void <init>()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.ComparableTimSort: void mergeHi(int,int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$2: void <init>(javax.security.auth.SubjectDomainCombiner)>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: java.lang.String getOrDeducePassword(org.springframework.boot.autoconfigure.security.SecurityProperties$User,org.springframework.security.crypto.password.PasswordEncoder)>-><java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitTemplateConfiguration: org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer rabbitTemplateConfigurer(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.InternalResourceViewResolver defaultViewResolver()>-><org.springframework.web.servlet.view.UrlBasedViewResolver: void setPrefix(java.lang.String)>
<org.springframework.boot.context.properties.bind.Binder: java.lang.Object bindOrCreate(java.lang.String,java.lang.Class)>-><org.springframework.boot.context.properties.bind.Bindable: org.springframework.boot.context.properties.bind.Bindable of(java.lang.Class)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.base.TestContainersDatabaseType: java.lang.String getName()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.WebExpressionVoter: void setExpressionHandler(org.springframework.security.access.expression.SecurityExpressionHandler)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DateWindow1904Record: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration: org.springframework.boot.autoconfigure.websocket.servlet.TomcatWebSocketServletWebServerCustomizer websocketServletWebServerCustomizer()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$IteratorSpliterator: long estimateSize()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: void <init>()>-><java.util.LinkedHashSet: void <init>()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void updateDelegate()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder builder()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$EmptySpliterator: void forEachRemaining(java.lang.Object)>
<org.springframework.boot.info.BuildProperties: void <init>(java.util.Properties)>-><org.springframework.boot.info.BuildProperties: java.util.Properties processEntries(java.util.Properties)>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<org.mybatis.spring.SqlSessionTemplate: void <init>(org.apache.ibatis.session.SqlSessionFactory,org.apache.ibatis.session.ExecutorType,org.springframework.dao.support.PersistenceExceptionTranslator)>-><org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor: void <init>(org.mybatis.spring.SqlSessionTemplate,org.mybatis.spring.SqlSessionTemplate$1)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: org.springframework.security.web.server.WebFilterChainProxy springSecurityWebFilterChainFilter()>-><org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: java.util.List getSecurityWebFilterChains()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor build()>-><org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void <init>()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.BasicAuthentication: boolean supportsPreemptiveAuthorization()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.ExpPtg: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<sun.net.www.http.ChunkedOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void ensureOpen()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onNextDropped(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>-><java.net.URL: int getPort()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.io.File: boolean exists()>
<sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: java.lang.Object getBeanOrNull(java.lang.Class)>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object getSharedObject(java.lang.Class)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void disconnect()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.jmx.export.MBeanExporter: void setAutodetectMode(int)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>-><javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Proxy: java.net.Proxy$Type type()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.PropertyPermissionCollection: java.util.Enumeration elements()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<reactor.util.function.Tuple4: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: org.springframework.security.config.annotation.rsocket.RSocketSecurity rsocketSecurity(org.springframework.context.ApplicationContext)>
<java.io.FilterOutputStream: void flush()>-><java.io.ObjectOutputStream$BlockDataOutputStream: void flush()>
<sun.nio.cs.StreamDecoder: void implClose()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determineUsername()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.boot.task.TaskExecutorBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.Boolean,java.time.Duration,java.lang.String,org.springframework.core.task.TaskDecorator,java.util.Set)>-><java.lang.Object: void <init>()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.util.function.Supplier)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeEmbeddedOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setFilter(javax.servlet.Filter)>
<org.flywaydb.core.internal.database.sqlserver.SQLServerDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>-><org.flywaydb.core.internal.database.sqlserver.SQLServerDatabaseType: boolean supportsJTDS()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.sqlserver.SQLServerDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <init>(java.util.Collection)>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <init>(boolean,java.util.Collection)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.text.AttributeEntry: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: int characteristics()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.security.core.userdetails.User: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Collection)>-><org.springframework.security.core.userdetails.User: java.util.SortedSet sortAuthorities(java.util.Collection)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void setRequestMethod(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>
<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter,org.springframework.http.server.reactive.UndertowHeadersAdapter$1)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: java.nio.Buffer position(int)>
<org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.data.redis.connection.RedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<java.net.Proxy: java.lang.String toString()>-><java.net.Proxy: java.net.SocketAddress address()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><sun.net.www.ParseUtil: boolean isEscaped(java.lang.String,int)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.security.web.header.Header: void <init>(java.lang.String,java.lang.String[])>-><org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration: org.springframework.boot.autoconfigure.context.MessageSourceProperties messageSourceProperties()>-><org.springframework.boot.autoconfigure.context.MessageSourceProperties: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer: void <init>()>
<sun.security.util.HostnameChecker: boolean isMatched(java.lang.String,java.lang.String)>-><sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList: void clear()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.io.BufferedInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>
<java.net.Socket: void setTcpNoDelay(boolean)>-><java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.core.io.support.ResourcePropertiesPersister: void loadFromXml(java.util.Properties,java.io.InputStream)>-><org.springframework.util.DefaultPropertiesPersister: void loadFromXml(java.util.Properties,java.io.InputStream)>
<java.util.IdentityHashMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.Map getDefaultMediaTypes()>-><org.springframework.http.MediaType: org.springframework.http.MediaType valueOf(java.lang.String)>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: void <init>()>-><org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder: void <init>()>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: void <init>(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter: org.springframework.security.web.server.header.ServerHttpHeadersWriter createDelegate(org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy)>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder builder()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.springframework.http.InvalidMediaTypeException: void <init>(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.net.ProtocolException: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.hsqldb.HSQLDBDatabaseType: java.lang.String getName()>
<org.springframework.jmx.export.annotation.AnnotationMBeanExporter: void <init>()>-><org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource: void <init>()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<org.springframework.web.servlet.view.BeanNameViewResolver: void <init>()>-><org.springframework.web.context.support.WebApplicationObjectSupport: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: org.springframework.validation.MessageCodesResolver getMessageCodesResolver()>-><java.lang.StringBuilder: java.lang.String toString()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: org.springframework.data.redis.core.ReactiveRedisTemplate reactiveRedisTemplate(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder value(org.springframework.data.redis.serializer.RedisSerializer)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.task.TaskSchedulingProperties: void <init>()>-><org.springframework.boot.autoconfigure.task.TaskSchedulingProperties$Shutdown: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.database.saphana.SAPHANADatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>-><java.lang.Long: java.lang.Long valueOf(long)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: org.springframework.web.servlet.DispatcherServlet dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)>-><org.springframework.web.servlet.DispatcherServlet: void <init>()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.http.ChunkedInputStream: int read()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType getContentType()>
<java.io.DataInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.ResponseFacade: void setContentType(java.lang.String)>-><org.apache.catalina.security.SecurityUtil: boolean isPackageProtectionEnabled()>
<org.springframework.security.web.header.Header: void <init>(java.lang.String,java.lang.String[])>-><org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder commandTimeout(java.time.Duration)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.catalina.core.AprStatus: void setAprAvailable(boolean)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.io.PrintStream: void newLine()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: void <init>(int,char[],boolean,char)>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.apache.catalina.core.AprLifecycleListener: void terminateAPR()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<sun.net.ApplicationProxy: void <init>(java.net.Proxy)>-><java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>
<sun.net.www.MeteredStream: int available()>-><java.io.ObjectInputStream$BlockDataInputStream: int available()>
<java.io.DataOutputStream: void writeLong(long)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: long estimateSize()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$LongArrayNode: long count()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.DatabaseTypeRegister: java.util.List getDatabaseTypesForUrl(java.lang.String)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setLettuceConnectionFactory(org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void ensureOpen()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.SliceOps$SliceTask: void <init>(java.util.stream.AbstractPipeline,java.util.stream.PipelineHelper,java.util.Spliterator,java.util.function.IntFunction,long,long)>-><java.util.stream.AbstractShortCircuitTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator)>
<org.springframework.boot.web.client.RestTemplateBuilder$RequestFactoryCustomizer: void <init>(java.time.Duration,java.time.Duration,java.lang.Boolean)>-><java.lang.Object: void <init>()>
<org.apache.tomcat.jni.Library: boolean initialize(java.lang.String)>-><java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FeaturePolicyConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FeaturePolicyConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.db2.DB2DatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><sun.security.util.Debug: void println(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.AuthenticationInfo: void endAuthRequest(java.lang.String)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><javax.net.ssl.SSLSocketFactory: java.lang.String getSecurityProperty(java.lang.String)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureMessageConverters(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<synthetic.method.HttpSessionImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDelegatingApplicationListener(org.springframework.security.context.DelegatingApplicationListener)>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Collection)>-><org.springframework.security.core.userdetails.User: java.lang.String getUsername()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.nio.cs.StreamDecoder: void implClose()>-><sun.net.www.http.ChunkedInputStream: void close()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: int getPort()>
<java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfInt spliterator()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: org.flywaydb.core.Flyway flyway(org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureCallbacks(org.flywaydb.core.api.configuration.FluentConfiguration,java.util.List)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>-><java.lang.String: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.DigestAuthentication: boolean supportsPreemptiveAuthorization()>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.config.web.server.ServerHttpSecurity httpSecurity()>-><org.springframework.security.config.web.server.ServerHttpSecurity: org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec headers()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.io.FilterInputStream: void reset()>-><org.apache.poi.poifs.filesystem.DocumentInputStream: void reset()>
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void setPathPrefixes(java.util.Map)>-><java.util.LinkedHashMap: void <init>(java.util.Map)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setDateFormat(java.lang.String)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Format: void setDate(java.lang.String)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>
<org.apache.tomcat.util.buf.UEncoder: void urlEncode(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.lang.Character: char forDigit(int,int)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void appendFragment(java.lang.StringBuffer,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<org.springframework.context.annotation.MBeanExportConfiguration: void setupDomain(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.BeanNameViewResolver beanNameViewResolver()>-><org.springframework.web.servlet.view.BeanNameViewResolver: void setOrder(int)>
<org.springframework.security.access.method.AbstractMethodSecurityMetadataSource: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><org.javaboy.vhr.model.JobLevel: java.lang.Integer getId()>
<java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<java.lang.System$2: void invokeFinalize(java.lang.Object)>-><sun.net.www.MeteredStream: void finalize()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.lang.String detectFallbackPassword(java.lang.String)>-><org.flywaydb.core.internal.util.StringUtils: boolean hasText(java.lang.String)>
<org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.mybatis.spring.SqlSessionTemplate: void <init>(org.apache.ibatis.session.SqlSessionFactory,org.apache.ibatis.session.ExecutorType,org.springframework.dao.support.PersistenceExceptionTranslator)>-><java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.util.function.Supplier)>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: java.lang.String getUrl()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,boolean,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.stream.SliceOps$SliceTask: java.lang.Object getEmptyResult()>-><java.util.stream.SliceOps$SliceTask: java.util.stream.Node getEmptyResult()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration$AuthenticationManagerDelegator: void <init>(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: org.springframework.security.core.userdetails.UserDetails getUserDetails(org.springframework.boot.autoconfigure.security.SecurityProperties$User,java.lang.String)>-><org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder password(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URLConnection: long getIfModifiedSince()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void <init>(java.nio.ByteBuffer,java.io.InputStream)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.net.SocketInputStream: void close()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.catalina.core.AprStatus: void setAprInitialized(boolean)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>-><java.io.FilterInputStream: int read(byte[],int,int)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.security.config.annotation.authentication.configuration.GlobalAuthenticationConfigurerAdapter getGlobalAuthenticationConfigurerAdapter()>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Socket: void connect(java.net.SocketAddress,int)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.security.context.DelegatingApplicationListener: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: void <init>()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.flywaydb.core.internal.license.Edition: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainCustomizerConfiguration: org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.WebProperties)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.Ref3DPtg: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.web.header.writers.HstsHeaderWriter: void <init>(long)>-><org.springframework.security.web.header.writers.HstsHeaderWriter: void <init>(org.springframework.security.web.util.matcher.RequestMatcher,long,boolean,boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder builder()>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>-><java.lang.StringBuilder: void <init>()>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.SubList: java.util.AbstractList access$100(java.util.SubList)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.AssertionError: void <init>()>
<javax.management.AttributeList: void <init>()>-><java.util.ArrayList: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: org.springframework.security.web.header.HeaderWriterFilter createHeaderWriterFilter()>-><org.springframework.security.web.header.HeaderWriterFilter: void <init>(java.util.List)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setLicenseKey(java.lang.String)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$DoubleArraySpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<reactor.util.function.Tuple3: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.apache.catalina.core.AprLifecycleListener: void terminateAPR()>-><org.apache.catalina.core.AprStatus: void setAprInitialized(boolean)>
<sun.net.www.http.KeepAliveStreamCleaner$2: java.lang.Object run()>-><sun.net.www.http.KeepAliveStreamCleaner$2: java.lang.Integer run()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongFixedNodeBuilder: void begin(long)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder messageConverters(java.util.Collection)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxException: void <init>(java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setAmqpAdmin(org.springframework.amqp.core.AmqpAdmin)>
<org.springframework.security.config.web.server.ServerHttpSecurity$ExceptionHandlingSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean)>-><java.util.Collections: java.util.Set emptySet()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setValidateOnMigrate(boolean)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.data.redis.connection.RedisSentinelConfiguration: void setSentinelPassword(org.springframework.data.redis.connection.RedisPassword)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createLogoutRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher[])>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void setSentinels(java.lang.Iterable)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.savedrequest.RequestCache getRequestCache(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: java.lang.Object getBeanOrNull(java.lang.Class)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream access$200(sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.feed.AtomFeedHttpMessageConverter: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void beforeConfigure()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.LocalTime: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfInt: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode: void forEach(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.AbstractList$ListItr: void add(java.lang.Object)>-><java.util.AbstractList: void add(int,java.lang.Object)>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveCleanerEntry: void setQueuedForCleanup()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter: void <init>()>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<org.springframework.boot.autoconfigure.AutoConfigurationPackages: boolean has(org.springframework.beans.factory.BeanFactory)>-><org.springframework.boot.autoconfigure.AutoConfigurationPackages: java.util.List get(org.springframework.beans.factory.BeanFactory)>
<org.springframework.web.util.pattern.PathPattern: char getSeparator()>-><org.springframework.http.server.PathContainer$Options: char separator()>
<org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: org.springframework.data.redis.core.ReactiveRedisTemplate reactiveRedisTemplate(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder hashKey(org.springframework.data.redis.serializer.RedisSerializer)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(sun.net.www.protocol.http.HttpCallerInfo,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy: void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder roles(java.lang.String[])>-><org.springframework.util.Assert: void isTrue(boolean,java.util.function.Supplier)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.snowflake.SnowflakeDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutFilter createLogoutFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutSuccessHandler getLogoutSuccessHandler()>
<org.springframework.security.web.server.authentication.logout.LogoutWebFilter: void <init>()>-><org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler: void <init>()>
<javax.security.auth.SubjectDomainCombiner$4: java.lang.String run()>-><java.security.Security: java.lang.String getProperty(java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setPassword(java.lang.String)>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.boot.task.TaskExecutorBuilder: java.util.Set append(java.util.Set,java.lang.Iterable)>-><java.util.Collections: java.util.Set emptySet()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.CorsRegistry: java.util.Map getCorsConfigurations()>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.io.ByteArrayOutputStream: int size()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setCsrfRequestDataValueProcessor(org.springframework.security.web.reactive.result.view.CsrfRequestDataValueProcessor)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration build()>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration build()>
<java.net.URLPermission: void init(java.lang.String)>-><java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$EntrySpliterator: java.util.Spliterator trySplit()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: sun.net.ProgressSource$State getState()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: java.util.List getDefaultLifecycleListeners()>-><org.apache.catalina.core.AprLifecycleListener: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.LinkedHashMap: java.util.Collection values()>
<org.springframework.security.config.annotation.web.configurers.SecurityContextConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.context.SecurityContextPersistenceFilter: void <init>(org.springframework.security.web.context.SecurityContextRepository)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.stream.Node$OfDouble: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.security.web.authentication.WebAuthenticationDetails: boolean equals(java.lang.Object)>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String getRemoteAddress()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void disconnect()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnect()>
<java.util.zip.ZipFile: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.http.client.SimpleClientHttpRequestFactory: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>-><java.util.Random: void nextBytes(byte[])>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void <init>()>-><org.springframework.security.crypto.factory.PasswordEncoderFactories: org.springframework.security.crypto.password.PasswordEncoder createDelegatingPasswordEncoder()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskSchedulingProperties$Pool: int getSize()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void afterPropertiesSet()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setApplicationAvailabilityBean(org.springframework.boot.availability.ApplicationAvailabilityBean)>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.net.URL: java.lang.String toExternalForm()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determineUrl()>
<sun.net.www.protocol.http.HttpURLConnection$1: void <init>(java.lang.String,java.net.URL,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.Authenticator$RequestorType)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getDefaultConverters()>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters$1: java.util.List defaultMessageConverters()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: boolean determineEnabled()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getEmail()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream,boolean)>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>
<org.apache.catalina.connector.OutputBuffer: boolean isFull(java.nio.Buffer)>-><java.nio.Buffer: int capacity()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$8ReducingSink: void begin(long)>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>
<org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder hashValue(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder enableStatistics()>-><org.springframework.data.redis.cache.CacheStatisticsCollector: org.springframework.data.redis.cache.CacheStatisticsCollector create()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.data.redis.cache.RedisCacheManager: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder builder(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void <init>(java.lang.String,boolean)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String parseVirtualHost(java.lang.String)>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties: com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$StatViewServlet getStatViewServlet()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfInt: void forEach(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: void reset()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getNonce()>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: java.util.List getSecurityWebFilterChains()>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>-><org.springframework.context.support.AbstractRefreshableApplicationContext: void assertBeanFactoryActive()>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor securityMethodInterceptor(org.springframework.security.access.method.AbstractMethodSecurityMetadataSource,org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>-><org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor: void <init>(org.springframework.security.access.method.MethodSecurityMetadataSource,org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice,org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><java.lang.Object: void <init>()>
<java.io.FilterInputStream: void mark(int)>-><sun.net.httpserver.Request$ReadStream: void mark(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaProperties: java.lang.Boolean getOpenInView()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory createLettuceConnectionFactory(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration)>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void <init>(org.springframework.data.redis.connection.RedisClusterConfiguration,org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.RowRecord: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.web.access.RequestMatcherDelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><java.util.LinkedHashMap: void <init>(java.util.Map)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: char charAt(int)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.InetSocketAddress: int getPort()>
<org.springframework.security.context.DelegatingApplicationListener: void <init>()>-><java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.io.InputStream: void close()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter: void <init>(org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter$XFrameOptionsMode)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><java.net.SocketInputStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.cache.CacheProperties getCachePropertiesInstance()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: org.springframework.validation.MessageCodesResolver getMessageCodesResolver()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getBaselineDescription()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><java.net.SocketInputStream: void close()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfLong spliterator()>
<java.util.Spliterators$DoubleArraySpliterator: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$DoubleArraySpliterator: boolean tryAdvance(java.util.function.DoubleConsumer)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><sun.security.util.HostnameChecker: void match(java.lang.String,java.security.cert.X509Certificate)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: java.time.format.DateTimeFormatter formatter(java.lang.String)>-><java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String)>
<org.springframework.web.servlet.view.UrlBasedViewResolver: void setViewClass(java.lang.Class)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.util.LazyStreamable: java.lang.String toString()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$CacheControlConfig: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$CacheControlConfig enable()>-><org.springframework.security.web.header.writers.CacheControlHeadersWriter: void <init>()>
<sun.net.www.protocol.https.HttpsClient: void putInKeepAliveCache()>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.jdbc.EmbeddedDatabaseConnection: org.springframework.boot.jdbc.EmbeddedDatabaseConnection getEmbeddedDatabaseConnection(java.lang.String)>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<org.springframework.security.web.header.writers.StaticHeadersWriter: void <init>(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: boolean isEscaped(java.lang.String,int)>-><java.lang.String: char charAt(int)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.web.reactive.config.WebFluxConfigurer getWebFluxConfigurer()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber: boolean isEmpty()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder createBuilder(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: org.apache.commons.pool2.impl.GenericObjectPoolConfig getPoolConfig(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: int getPort()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setIgnoreIgnoredMigrations(boolean)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: boolean isConfigured()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.FileOutputStream: void write(byte[],int,int)>
<java.util.Spliterators$DoubleArraySpliterator: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$DoubleArraySpliterator: void forEachRemaining(java.util.function.DoubleConsumer)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.io.DataOutputStream: void writeShort(int)>-><java.io.PrintStream: void write(int)>
<org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer restTemplateBuilderConfigurer(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer: void setHttpMessageConverters(org.springframework.boot.autoconfigure.http.HttpMessageConverters)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>
<org.springframework.cache.support.SimpleCacheManager: void <init>()>-><org.springframework.cache.support.AbstractCacheManager: void <init>()>
<org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration: org.springframework.jdbc.core.JdbcTemplate jdbcTemplate(javax.sql.DataSource,org.springframework.boot.autoconfigure.jdbc.JdbcProperties)>-><org.springframework.jdbc.core.JdbcTemplate: void setFetchSize(int)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$Values: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean supportsPreemptiveAuthorization()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer: void <init>(javax.servlet.ServletContext)>-><java.lang.Object: void <init>()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void setUseTrailingSlashMatch(boolean)>-><org.springframework.web.util.pattern.PathPatternParser: void setMatchOptionalTrailingSeparator(boolean)>
<java.io.FilterInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void extendMessageConverters(java.util.List)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void extendMessageConverters(java.util.List)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.MMSRecord: java.lang.String toString()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.net.Proxy: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntIteratorSpliterator: java.util.Spliterator trySplit()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.security.web.csrf.CsrfAuthenticationStrategy: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDelegatingFilterProxyRegistrationBean(org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,java.util.List)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$1Splitr: long estimateSize()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: org.springframework.security.web.header.HeaderWriterFilter createHeaderWriterFilter()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$EmptySpliterator: boolean tryAdvance(java.lang.Object)>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.net.URLPermission: void init(java.lang.String)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<sun.net.www.ParseUtil: boolean isEscaped(java.lang.String,int)>-><java.lang.String: int length()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.web.authentication.WebAuthenticationDetails: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor methodSecurityInterceptor(org.springframework.security.access.method.AbstractMethodSecurityMetadataSource)>-><org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor: void <init>(java.lang.String,org.springframework.security.access.method.MethodSecurityMetadataSource,java.lang.String)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.net.URL: int getPort()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler build()>-><org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$5: java.lang.String run()>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode: long count()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setForwardedHeaderTransformer(org.springframework.web.server.adapter.ForwardedHeaderTransformer)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$1: int size()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter: io.undertow.util.HeaderMap access$100(org.springframework.http.server.reactive.UndertowHeadersAdapter)>
<org.springframework.util.MultiValueMapAdapter: java.util.Set keySet()>-><java.util.Collections$UnmodifiableMap: java.util.Set keySet()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Hashtable: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryBeanCreationException: void <init>(java.lang.String,org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>-><org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setJdbcProperties(java.util.Map)>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.WildcardTheRestPathElement: int getNormalizedLength()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.BasicAuthentication: boolean isAuthorizationStale(java.lang.String)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor configure(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)>-><org.springframework.boot.context.properties.PropertyMapper$Source: void to(java.util.function.Consumer)>
<java.util.AbstractList: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.apache.tomcat.jni.Library: boolean initialize(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.stream.Sink$ChainedInt: boolean cancellationRequested()>-><java.util.stream.SliceOps$1$1: boolean cancellationRequested()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: java.util.Optional getWelcomePage()>-><java.util.stream.ReferencePipeline: java.util.Optional findFirst()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><com.fasterxml.jackson.databind.deser.UnresolvedForwardReference: java.lang.String getMessage()>
<org.springframework.web.servlet.HttpServletBean: void setEnvironment(org.springframework.core.env.Environment)>-><org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.text.MessageFormat: boolean equals(java.lang.Object)>-><java.util.Arrays: boolean equals(int[],int[])>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.client.support.InterceptingHttpAccessor: void <init>()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter createRequestMappingHandlerAdapter()>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void <init>()>
<org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: void <init>()>-><org.springframework.security.authentication.DelegatingReactiveAuthenticationManager: void <init>(org.springframework.security.authentication.ReactiveAuthenticationManager[])>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.awt.AppContext: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getIdCard()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.Enum: int ordinal()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy: void <init>(org.springframework.security.core.session.SessionRegistry)>
<org.springframework.web.servlet.config.annotation.CorsRegistry: void <init>()>-><java.util.ArrayList: void <init>()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: java.lang.Object getBeanOrNull(java.lang.Class)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: org.springframework.security.access.SecurityMetadataSource obtainSecurityMetadataSource()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: org.springframework.validation.MessageCodesResolver getMessageCodesResolver()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<sun.net.www.MeteredStream: void close()>-><java.io.FilterInputStream: void close()>
<org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyRegistrationConfiguration: org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository relyingPartyRegistrationRepository(org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyProperties)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setObjectPostProcessor(org.springframework.security.config.annotation.ObjectPostProcessor)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long,long,long)>-><java.util.stream.StreamSpliterators$SliceSpliterator: void <init>(java.util.Spliterator,long,long,long,long)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setIgnoreDefaultModelOnRedirect(boolean)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void addFormatters(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.boot.autoconfigure.web.format.WebConversionService: void registerJsr310(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder initialCacheNames(java.util.Set)>-><java.lang.Iterable: void forEach(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.web.WebProperties$Resources)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.bind.support.ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer(org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.bind.support.ConfigurableWebBindingInitializer: void setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.lang.Thread: boolean isAlive()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.autoconfigure.template.TemplateLocation: java.lang.String toString()>
<org.springframework.web.context.request.AbstractRequestAttributesScope: void registerDestructionCallback(java.lang.String,java.lang.Runnable)>-><org.springframework.web.context.request.ServletRequestAttributes: void registerDestructionCallback(java.lang.String,java.lang.Runnable,int)>
<java.net.Socket: void close()>-><java.net.AbstractPlainSocketImpl: void close()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.stream.Node: java.util.stream.Node getChild(int)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.JavaType getContentType()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.util.logging.PlatformLogger: void finer(java.lang.String)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap: int size()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: org.springframework.web.servlet.config.annotation.InterceptorRegistration addInterceptor(org.springframework.web.servlet.HandlerInterceptor)>-><org.springframework.web.servlet.config.annotation.InterceptorRegistration: void <init>(org.springframework.web.servlet.HandlerInterceptor)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveStream: java.lang.Thread access$002(java.lang.Thread)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String raw()>
<sun.net.www.MeteredStream: int available()>-><sun.net.www.MeteredStream: int available()>
<java.lang.Object: java.lang.String toString()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>-><java.lang.Object: java.lang.Object clone()>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.util.MimeType: void <init>(java.lang.String,java.lang.String,java.util.Map)>-><java.util.Map: void forEach(java.util.function.BiConsumer)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.security.web.context.HttpSessionSecurityContextRepository: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: javax.sql.DataSource getDataSource()>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.web.WebProperties$Resources)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: void <init>(org.springframework.context.ApplicationContext)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: org.springframework.boot.web.servlet.error.DefaultErrorAttributes errorAttributes()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.javaboy.vhr.VhrApplication: com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties getDruidStatPropertiesInstance()>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties: void <init>()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.CharChunk: int subtract()>-><org.apache.tomcat.util.buf.CharChunk: boolean checkEof()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.io.FilterInputStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.StringTokenizer: java.lang.String nextToken()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.util.List parseAddresses(java.lang.String)>-><org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.ChunkedInputStream: int available()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void setMaxAge(java.time.Duration)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: void <init>()>-><synthetic.method.SingletonFactory: org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration getAuthenticationConfiguration()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.MeteredStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$SpinedNodeBuilder: void begin(long)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.io.DataOutputStream: void writeInt(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getAlgorithm()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>-><sun.net.www.protocol.http.HttpURLConnection: int getReadTimeout()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.security.web.context.HttpSessionSecurityContextRepository: void <init>()>-><org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext createEmptyContext()>
<org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter build()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: void <init>(org.springframework.http.HttpHeaders)>
<org.springframework.data.redis.connection.RedisStandaloneConfiguration: void setDatabase(int)>-><org.springframework.util.Assert: void isTrue(boolean,java.util.function.Supplier)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$EmptySpliterator: long estimateSize()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getWedlock()>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><sun.net.www.protocol.http.HttpURLConnection$3: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: void afterPropertiesSet()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$ErrorPageCustomizer errorPageCustomizer(org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath)>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$ErrorPageCustomizer: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties,org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Vector: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.util.StdDateFormat: void _format(java.util.TimeZone,java.util.Locale,java.util.Date,java.lang.StringBuffer)>-><java.util.SimpleTimeZone: int getOffset(long)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.web.server.savedrequest.WebSessionServerRequestCache: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher createDefaultRequestMacher()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: void setIgnoredMediaTypes(java.util.Set)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setServletWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryCustomizer)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: int getStart()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setPlaceholderPrefix(java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setCherryPick(java.lang.String[])>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void putInKeepAliveCache()>-><sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: java.util.List createSentinels(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: void <init>()>-><org.springframework.data.redis.serializer.RedisSerializer: org.springframework.data.redis.serializer.RedisSerializer string()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.ArrayList: void <init>()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Long: long parseLong(java.lang.String)>
<java.util.stream.Sink$ChainedInt: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.http.HttpClient: void setIgnoreContinue(boolean)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder awaitTermination(boolean)>-><org.springframework.boot.task.TaskExecutorBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.Boolean,java.time.Duration,java.lang.String,org.springframework.core.task.TaskDecorator,java.util.Set)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureValidateMigrationNaming(org.flywaydb.core.api.configuration.FluentConfiguration,boolean)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.format.support.FormattingConversionService mvcConversionService()>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: org.springframework.boot.autoconfigure.web.format.DateTimeFormatters timeFormat(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: org.springframework.boot.autoconfigure.web.format.DateTimeFormatters timeFormat(java.lang.String)>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: boolean isIso(java.lang.String)>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Collection)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: void remove()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractResourceBasedMessageSource: java.util.Locale getDefaultLocale()>-><java.util.Locale: java.util.Locale getDefault()>
<sun.net.www.MeteredStream: void finalize()>-><java.lang.Object: void finalize()>
<java.util.stream.Nodes$LongArrayNode: void forEach(java.util.function.LongConsumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfLong: void accept(long)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerOpaqueTokenConfiguration$OpaqueTokenIntrospectionClientConfiguration: void <init>()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.SubList$1: java.lang.Object next()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.util.List parseAddresses(java.lang.String)>-><java.util.ArrayList: void <init>()>
<org.apache.catalina.connector.Response: java.lang.String getCharacterEncoding()>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>-><java.util.AbstractCollection: boolean isEmpty()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><java.util.Collections: java.util.Set emptySet()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscard(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration: org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$StringOrNumberToMigrationVersionConverter stringOrNumberMigrationVersionConverter()>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$StringOrNumberToMigrationVersionConverter: void <init>(org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$1)>
<org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Class: java.lang.String toString()>
<org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher: void <init>(org.springframework.security.web.header.writers.HstsHeaderWriter$1)>-><org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher: void <init>()>
<io.lettuce.core.TimeoutOptions$Builder: io.lettuce.core.TimeoutOptions$Builder timeoutSource(io.lettuce.core.TimeoutOptions$TimeoutSource)>-><io.lettuce.core.internal.LettuceAssert: void notNull(java.lang.Object,java.lang.String)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: java.util.EnumSet getDispatcherTypes(org.springframework.boot.autoconfigure.security.SecurityProperties)>-><java.util.stream.Collectors: java.util.stream.Collector toCollection(java.util.function.Supplier)>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutFilter createLogoutFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: java.lang.String determineUniqueName()>-><java.util.UUID: java.lang.String toString()>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter: org.springframework.security.web.server.header.ServerHttpHeadersWriter createDelegate(org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy)>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder header(java.lang.String,java.lang.String[])>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>-><java.lang.AssertionError: void <init>()>
<sun.net.www.http.ClientVector: void <init>(int)>-><java.util.Stack: void <init>()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>-><java.lang.System: long currentTimeMillis()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder clientName(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientName(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>-><org.apache.catalina.connector.OutputBuffer: boolean isFull(java.nio.Buffer)>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<sun.nio.cs.StreamDecoder: int readBytes()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity csrf(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.SecurityConfigurerAdapter getOrApply(org.springframework.security.config.annotation.SecurityConfigurerAdapter)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.task.TaskSchedulingProperties: void <init>()>-><org.springframework.boot.autoconfigure.task.TaskSchedulingProperties$Pool: void <init>()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.util.stream.Node build()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: java.lang.Class getSecureObjectClass()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void <init>(com.fasterxml.jackson.core.JsonStreamContext,com.fasterxml.jackson.core.JsonLocation)>-><com.fasterxml.jackson.core.filter.TokenFilterContext: com.fasterxml.jackson.core.JsonStreamContext getParent()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.flywaydb.core.internal.database.base.Schema: java.lang.String toString()>
<java.io.FilterOutputStream: void flush()>-><com.rabbitmq.client.impl.nio.SslEngineByteBufferOutputStream: void flush()>
<sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>-><java.io.FilterInputStream: void <init>(java.io.InputStream)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><sun.net.ProgressSource: java.lang.String toString()>
<javax.security.auth.Policy$3: java.lang.Void run()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getTransactionAwareConnectionProxy(javax.sql.DataSource)>-><java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<org.springframework.boot.jdbc.EmbeddedDatabaseConnection: org.springframework.boot.jdbc.EmbeddedDatabaseConnection getEmbeddedDatabaseConnection(java.lang.String)>-><java.util.stream.ReferencePipeline: java.util.Optional findFirst()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper get()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String parseUsernameAndPassword(java.lang.String)>-><org.springframework.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>
<org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration: org.springframework.security.authentication.DefaultAuthenticationEventPublisher authenticationEventPublisher(org.springframework.context.ApplicationEventPublisher)>-><org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void <init>(org.springframework.context.ApplicationEventPublisher)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ProtectionRev4Record: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void addMapping(java.lang.String,java.lang.Class)>-><java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: void remove()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$loginFilter$1(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.apache.catalina.connector.CoyoteWriter: void write(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><io.lettuce.core.SocketOptions: io.lettuce.core.SocketOptions$Builder builder()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.InterfaceEndRecord: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setDriverClassName(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.ArrayList$SubList: boolean addAll(java.util.Collection)>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setFormattingConversionService(org.springframework.format.support.FormattingConversionService)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setPassword(java.lang.String)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy: void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.beans.factory.config.BeanFactoryPostProcessor getBeanFactoryPostProcessor()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setCallableInterceptors(java.util.List)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.DistinctOps$1$1: void begin(long)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: void <init>()>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.session.SessionInformationExpiredStrategy getExpiredSessionStrategy()>-><org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy: void <init>(java.lang.String)>
<org.springframework.security.web.access.expression.WebExpressionVoter: void <init>()>-><org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void <init>()>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String getSessionId()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: boolean hasNext()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: int characteristics()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>-><org.springframework.boot.web.server.MimeMappings: void <init>(org.springframework.boot.web.server.MimeMappings)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.lettuce.core.masterreplica.RedisUpstreamReplicaNode: java.lang.String toString()>
<org.springframework.data.redis.core.DefaultReactiveStreamOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext,org.springframework.data.redis.hash.HashMapper)>-><java.lang.Object: void <init>()>
<org.apache.tomcat.jni.Library: void <init>()>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.springframework.aop.framework.ProxyFactoryBean: void <init>()>-><org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>
<java.io.BufferedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int available()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void setPathPrefixes(java.util.Map)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: int characteristics()>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><java.util.concurrent.locks.LockSupport: void parkNanos(long)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer findPropertyContentTypeSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.net.Socket: java.io.OutputStream getOutputStream()>
<org.springframework.cache.concurrent.ConcurrentMapCacheManager: org.springframework.cache.Cache createConcurrentMapCache(java.lang.String)>-><org.springframework.cache.concurrent.ConcurrentMapCacheManager: boolean isStoreByValue()>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><org.javaboy.vhr.model.Position: java.lang.Integer getId()>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider getProvider(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$HashMapSpliterator: long estimateSize()>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.ByteChunk: void recycle()>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: boolean hasNext()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setMethodSecurityMetadataSourceAdvisor(org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity headers(org.springframework.security.config.Customizer)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: java.lang.String valueOf(char)>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.util.HostnameChecker: sun.security.x509.X500Name getSubjectX500Name(java.security.cert.X509Certificate)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.SubjectDomainCombiner$2: java.lang.Object run()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.WeakHashMap$EntrySpliterator: int characteristics()>
<org.springframework.jmx.export.MBeanExporter: void setAutodetectMode(int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.security.web.access.expression.WebExpressionVoter: boolean supports(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.FilterInputStream: int read(byte[])>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$StringOrNumberToMigrationVersionConverter: void <init>(org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$1)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$StringOrNumberToMigrationVersionConverter: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.PrintStream: void write(int)>
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setAsyncRequestTimeout(long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.springframework.context.annotation.MBeanExportConfiguration: void setupServer(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1: javax.management.MBeanServer getMBeanServer()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureContentNegotiation(org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: java.util.List getInterceptors()>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setVirtualHost(java.lang.String)>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration$OAuth2ClasspathGuard: boolean shouldConfigure(org.springframework.context.ApplicationContext)>-><org.springframework.util.ClassUtils: java.lang.Class resolveClassName(java.lang.String,java.lang.ClassLoader)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.context.HttpSessionSecurityContextRepository: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<sun.net.www.MeteredStream: int available()>-><sun.net.httpserver.SSLStreams$InputStream: int available()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>
<javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRemoteUser()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>
<org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration: org.springframework.web.server.adapter.ForwardedHeaderTransformer forwardedHeaderTransformer()>-><org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <init>()>
<org.apache.catalina.connector.ResponseFacade: boolean isCommitted()>-><org.apache.catalina.connector.Response: boolean isAppCommitted()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$5$1: void accept(java.lang.Object)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.http.KeepAliveCache$1: java.lang.Object run()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void addMapping(java.lang.String,java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: sun.net.ProgressSource$State getState()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<org.springframework.http.MediaType: void <init>(org.springframework.util.MimeType)>-><org.springframework.util.MimeType: java.util.Map getParameters()>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: void <init>()>-><org.springframework.security.authentication.DelegatingReactiveAuthenticationManager: void <init>(org.springframework.security.authentication.ReactiveAuthenticationManager[])>
<org.springframework.security.authentication.ProviderManager: void checkState()>-><java.util.ArrayList: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.StackTraceElement: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractPipeline: java.util.stream.Sink wrapSink(java.util.stream.Sink)>
<org.apache.catalina.connector.OutputBuffer$PrivilegedCreateConverter: java.lang.Object run()>-><org.apache.catalina.connector.OutputBuffer$PrivilegedCreateConverter: org.apache.tomcat.util.buf.C2BConverter run()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getLicenseKey()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.SubList: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>-><java.util.HashMap: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.HttpURLConnection: int getResponseCode()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int length()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<com.fasterxml.jackson.core.filter.TokenFilterContext: com.fasterxml.jackson.core.JsonStreamContext getParent()>-><com.fasterxml.jackson.core.filter.TokenFilterContext: com.fasterxml.jackson.core.filter.TokenFilterContext getParent()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$EmptySpliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HstsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean dispatcherServletRegistration(org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean: void <init>(org.springframework.web.servlet.DispatcherServlet,java.lang.String)>
<org.springframework.web.util.pattern.PathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder jwtDecoderByPublicKeyValue()>-><org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder: org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder$PublicKeyReactiveJwtDecoderBuilder withPublicKey(java.security.interfaces.RSAPublicKey)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.SubjectDomainCombiner$5: java.lang.Object run()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.JsonViewRequestBodyAdvice: void <init>()>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.security.web.authentication.logout.LogoutFilter: void setFilterProcessesUrl(java.lang.String)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: void <init>(java.lang.String)>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform get()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: void <init>(int,char)>-><org.springframework.web.util.pattern.PathElement: void <init>(int,char)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider findProvider(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>-><java.util.ArrayList: java.util.Iterator iterator()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap: java.util.Set keySet()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$ConcNode$OfDouble: void <init>(java.util.stream.Node$OfDouble,java.util.stream.Node$OfDouble)>
<org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskSchedulingProperties: org.springframework.boot.autoconfigure.task.TaskSchedulingProperties$Shutdown getShutdown()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.autoconfigure.flyway.FlywayProperties: void <init>()>-><java.util.Collections: java.util.Set singleton(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureAsyncSupport(org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping createRequestMappingHandlerMapping()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.net.URI: int join(char[],int[])>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.SliceOps$SliceTask: void <init>(java.util.stream.AbstractPipeline,java.util.stream.PipelineHelper,java.util.Spliterator,java.util.function.IntFunction,long,long)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.util.logging.PlatformLogger: void fine(java.lang.String)>-><sun.util.logging.PlatformLogger$JavaLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
<java.util.AbstractMap: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.io.FileInputStream: void close()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxException: void <init>(java.lang.String,java.lang.Exception)>-><org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxException: java.lang.String buildMessage(java.lang.String)>
<sun.security.util.HostnameChecker: boolean isMatched(java.lang.String,java.lang.String)>-><sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager: void <init>(org.springframework.security.core.userdetails.ReactiveUserDetailsService)>-><org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void <init>()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo: void <init>(java.net.URI,boolean,java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.UserDetails build()>-><org.springframework.security.core.userdetails.User: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Collection)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration: org.springframework.jdbc.core.JdbcTemplate jdbcTemplate(javax.sql.DataSource,org.springframework.boot.autoconfigure.jdbc.JdbcProperties)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.SocketImpl: void setSocket(java.net.Socket)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.Spliterators$LongArraySpliterator: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$LongArraySpliterator: boolean tryAdvance(java.util.function.LongConsumer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: java.util.Spliterator makeSpliterator(java.util.Spliterator)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void <init>(java.util.Spliterator,java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationProvider: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveStreamOperations opsForStream(org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveStreamOperations opsForStream(org.springframework.data.redis.serializer.RedisSerializationContext,org.springframework.data.redis.hash.HashMapper)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determineDriverClassName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Collection)>-><org.springframework.security.core.userdetails.MapReactiveUserDetailsService: java.lang.String getKey(java.lang.String)>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><java.io.BufferedInputStream: void close()>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><java.lang.String: int length()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.springframework.web.filter.CharacterEncodingFilter: void <init>()>-><org.springframework.web.filter.OncePerRequestFilter: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toUpperCase()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.Map getCorsConfigurations()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: javax.sql.DataSource configureDataSource(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,javax.sql.DataSource,javax.sql.DataSource)>-><org.flywaydb.core.api.configuration.FluentConfiguration: javax.sql.DataSource getDataSource()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: org.springframework.security.core.userdetails.MapReactiveUserDetailsService reactiveUserDetailsService(org.springframework.boot.autoconfigure.security.SecurityProperties,org.springframework.beans.factory.ObjectProvider)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: long estimateSize()>
<sun.net.www.MeteredStream: int available()>-><org.apache.poi.poifs.filesystem.DocumentInputStream: int available()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.HttpsClient: int getDefaultPort()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.asm.Type: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getDefaultConverters()>-><java.util.ArrayList: void <init>()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void addUrlMappings(java.lang.String[])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$FixedNodeBuilder: java.util.stream.Node build()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<sun.net.www.protocol.http.HttpURLConnection$6: java.lang.Void run()>-><sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>-><java.util.StringTokenizer: java.lang.String nextToken()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: org.springframework.boot.autoconfigure.web.format.DateTimeFormatters dateFormat(java.lang.String)>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: java.time.format.DateTimeFormatter formatter(java.lang.String)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><sun.net.www.protocol.https.HttpsClient: java.net.Socket createSocket()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.redshift.RedshiftDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.Socket privilegedDoTunnel(java.lang.String,int)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void <init>()>-><org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void setMaxAge(java.time.Duration)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.flywaydb.core.internal.resolver.ResolvedMigrationImpl: java.lang.String toString()>
<org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor: void <init>(org.springframework.security.access.method.MethodSecurityMetadataSource,org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice,org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: void <init>(java.lang.String,java.lang.Object,java.util.Collection)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.security.web.header.Header: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.EnumMap: int entryHashCode(int)>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$IntArrayNode: java.util.Spliterator spliterator()>
<org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.csrf.CsrfWebFilter: void <init>()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object getValue(java.lang.Object)>-><java.lang.ref.Reference: java.lang.Object get()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Collections$2: int characteristics()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.json.GsonHttpMessageConverter: void <init>()>
<org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder shutdownTimeout(java.time.Duration)>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder: void <init>(org.springframework.orm.jpa.JpaVendorAdapter,java.util.Map,org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager,java.net.URL)>-><java.util.LinkedHashMap: void <init>(java.util.Map)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder authenticationProvider(org.springframework.security.authentication.AuthenticationProvider)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntArrayNode: long count()>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: void <init>()>-><javax.management.AttributeList: void <init>()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.context.LifecycleProperties getLifecyclePropertiesInstance()>-><org.springframework.boot.autoconfigure.context.LifecycleProperties: void setTimeoutPerShutdownPhase(java.time.Duration)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.NameMatchMethodPointcut: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setSchema(java.util.List)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.lang.Object: void <init>()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: int length()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.HashMap$EntrySpliterator: int characteristics()>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: java.util.List getDefaultLifecycleListeners()>-><java.util.ArrayList: void <init>()>
<sun.nio.cs.StreamEncoder: void writeBytes()>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: boolean endsWith(java.lang.String)>
<java.security.ProtectionDomain: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$LongArraySpliterator: boolean tryAdvance(java.util.function.LongConsumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.PathMatchConfigurer: java.util.Map getPathPrefixes()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.net.URL: java.lang.String getQuery()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.Object: java.lang.Class getClass()>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.stream.Node$OfLong build()>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler configure(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper alwaysApplyingWhenNonNull()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void addUrlMappings(java.lang.String[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$IntArrayNode: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.https.DelegateHttpsURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler,javax.net.ssl.HttpsURLConnection)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.SliceOps$SliceTask: java.lang.Object getEmptyResult()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.Integer: int parseInt(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Collections$1: java.lang.Object next()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes: java.util.stream.Node$Builder$OfDouble doubleBuilder(long)>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getMethod()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$StringOrNumberToMigrationVersionConverter: void <init>()>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String scheme()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$MessagingTemplateConfiguration: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<java.net.URLConnection: void setUseCaches(boolean)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$ConcNode$OfLong: void <init>(java.util.stream.Node$OfLong,java.util.stream.Node$OfLong)>
<java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>-><org.springframework.boot.jdbc.DataSourceBuilder: org.springframework.boot.jdbc.DataSourceBuilder username(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.File: void <init>(java.io.File,java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: org.springframework.web.filter.CharacterEncodingFilter characterEncodingFilter()>-><java.nio.charset.Charset: java.lang.String name()>
<org.apache.tomcat.jni.Library: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.boot.web.server.MimeMappings: void <init>(org.springframework.boot.web.server.MimeMappings)>-><org.springframework.boot.web.server.MimeMappings: void <init>(org.springframework.boot.web.server.MimeMappings,boolean)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.sybasease.SybaseASEJTDSDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.lang.StringBuilder: java.lang.String substring(int,int)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.AbstractCollection: java.lang.Object[] toArray()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.PermissionsEnumerator: java.lang.Object nextElement()>
<org.springframework.boot.task.TaskSchedulerBuilder: java.util.Set append(java.util.Set,java.lang.Iterable)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>-><org.springframework.web.cors.UrlBasedCorsConfigurationSource: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.stream.SliceOps$SliceTask: boolean isLeftCompleted(long)>-><java.util.stream.AbstractTask: java.util.stream.AbstractTask getParent()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.web.util.pattern.InternalPathPatternParser: void skipCaptureRegex()>-><org.springframework.web.util.pattern.PathPatternParser: org.springframework.http.server.PathContainer$Options getPathOptions()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.http.converter.ResourceHttpMessageConverter: void <init>(boolean)>-><org.springframework.http.converter.AbstractHttpMessageConverter: void <init>(org.springframework.http.MediaType)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$PermitStatus permitStatus()>
<java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations: io.r2dbc.spi.ConnectionFactory createConnectionFactory(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.lang.ClassLoader,java.util.List)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder: io.r2dbc.spi.ConnectionFactory build()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$IntIteratorSpliterator: int characteristics()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.io.PrintWriter: void newLine()>-><org.apache.catalina.connector.OutputBuffer: void flush()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.flywaydb.core.internal.database.firebird.FirebirdDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayProperties: void <init>()>-><java.util.ArrayList: void <init>()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setValidateMigrationNaming(boolean)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: java.io.InputStream getInputStream()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void <init>(java.nio.ByteBuffer)>-><java.io.InputStream: void <init>()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.net.ApplicationProxy: sun.net.ApplicationProxy create(java.net.Proxy)>-><sun.net.ApplicationProxy: void <init>(java.net.Proxy)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.FilterInputStream: void reset()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.csrf.CsrfFilter: void setAccessDeniedHandler(org.springframework.security.web.access.AccessDeniedHandler)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$KeySpliterator: java.util.Spliterator trySplit()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: java.nio.Buffer flip()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$CSLMSpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder: io.r2dbc.spi.ConnectionFactory build()>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder: io.r2dbc.spi.ConnectionFactoryOptions buildOptions()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.FontRecord: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><java.lang.String: char charAt(int)>
<java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.HeapCharBuffer: java.nio.CharBuffer put(char)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.EOFRecord: java.lang.String toString()>
<org.springframework.data.redis.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheConfiguration defaultCacheConfig()>-><org.springframework.data.redis.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheConfiguration defaultCacheConfig(java.lang.ClassLoader)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setAddresses(java.lang.String)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.util.List parseAddresses(java.lang.String)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void reorderXmlConvertersToEnd(java.util.List)>-><java.util.ArrayList$Itr: void remove()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.usermodel.HSSFName: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setJackson2ObjectMapperBuilder(org.springframework.http.converter.json.Jackson2ObjectMapperBuilder)>
<java.util.concurrent.Executors$DelegatedExecutorService: void execute(java.lang.Runnable)>-><java.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)>
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: java.lang.String getKey()>-><java.util.UUID: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration: void <init>()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createDefaultSavedRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: void <init>(java.lang.String)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getTiptopDegree()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.charset.CoderResult: boolean isUnderflow()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: int characteristics()>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$ConcNode$OfInt: void <init>(java.util.stream.Node$OfInt,java.util.stream.Node$OfInt)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.net.URI: void split(char[],int[])>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.web.util.pattern.PatternParseException: void <init>(java.lang.Throwable,int,char[],org.springframework.web.util.pattern.PatternParseException$PatternMessage,java.lang.Object[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$WeakHashMapSpliterator: long estimateSize()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator spliterator()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determinePassword()>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.boot.autoconfigure.websocket.reactive.TomcatWebSocketReactiveWebServerCustomizer: void <init>()>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setAutowiredWebSecurityConfigurersIgnoreParents(org.springframework.security.config.annotation.web.configuration.AutowiredWebSecurityConfigurersIgnoreParents)>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceSslClientConfigurationBuilder useSsl()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveCleanerEntry: boolean getQueuedForCleanup()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter: org.springframework.security.web.server.header.ServerHttpHeadersWriter createDelegate(org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy)>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter build()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setWelcomePageHandlerMapping(org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping)>
<org.springframework.web.accept.ContentNegotiationManagerFactoryBean: void addMediaTypes(java.util.Map)>-><java.util.HashMap: void forEach(java.util.function.BiConsumer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setNoOpCacheManager(org.springframework.cache.support.NoOpCacheManager)>
<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HpkpConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.InputStream: void close()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.apache.tomcat.jni.Library: void <init>()>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy: void <init>(org.springframework.security.core.session.SessionRegistry)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingSslClientConfigurationBuilder useSsl()>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceSslClientConfigurationBuilder useSsl()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.data.redis.connection.RedisSentinelConfiguration: void setSentinels(java.lang.Iterable)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler: void <init>()>-><org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler: void <init>()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><java.util.Vector: java.lang.Object[] toArray()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.SliceOps: java.util.function.IntFunction access$100()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void registerDelegateApplicationListener(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.context.ApplicationListener)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: java.lang.Object getBeanOrNull(java.lang.Class)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determinePassword()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<java.io.BufferedInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.MeteredStream: void close()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.io.BufferedInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><io.netty.util.internal.RecyclableArrayList: boolean addAll(java.util.Collection)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><com.rabbitmq.client.impl.TruncatedInputStream: int read(byte[],int,int)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer initializeAuthenticationProviderBeanManagerConfigurer(org.springframework.context.ApplicationContext)>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder parentAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.lang.String toString()>
<org.springframework.security.access.SecurityConfig: java.util.List createList(java.lang.String[])>-><org.springframework.security.access.SecurityConfig: void <init>(java.lang.String)>
<org.apache.tomcat.util.buf.CharChunk: int subtract(char[],int,int)>-><org.apache.tomcat.util.buf.CharChunk: boolean checkEof()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<org.springframework.boot.web.server.MimeMappings: void <init>(org.springframework.boot.web.server.MimeMappings,boolean)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration$HazelcastServerConfigConfiguration: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.WeakHashMap$KeySpliterator: int characteristics()>
<org.flywaydb.core.internal.database.firebird.FirebirdDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>-><java.lang.String: boolean startsWith(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.Properties: void loadFromXML(java.io.InputStream)>-><sun.net.www.MeteredStream: void close()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory tomcatReactiveWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo parseUrl(java.lang.String)>-><org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setUrl(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection$11: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String)>
<org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration: org.springframework.cache.concurrent.ConcurrentMapCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers)>-><org.springframework.boot.autoconfigure.cache.CacheProperties: java.util.List getCacheNames()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$IntArrayNode: java.util.Spliterator spliterator()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.ContentNegotiatingViewResolver viewResolver(org.springframework.beans.factory.BeanFactory)>-><org.springframework.web.servlet.view.ContentNegotiatingViewResolver: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>
<sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.SubList: boolean addAll(java.util.Collection)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.Operators$MonoSubscriber: boolean isEmpty()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addArgumentResolvers(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><java.io.FilterInputStream: int read(byte[])>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void finalize()>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: void dispose()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><java.lang.Object: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.Proxy: java.net.Proxy$Type type()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: boolean isTrustedSite(java.net.URL)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><io.lettuce.core.cluster.ClusterClientOptions$Builder: io.lettuce.core.ClientOptions build()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.NegotiateAuthentication: void <init>(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: int read(byte[],int,int)>-><org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: int read(byte[],int,int)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$2: java.util.Spliterator trySplit()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration: org.springframework.context.support.DefaultLifecycleProcessor defaultLifecycleProcessor(org.springframework.boot.autoconfigure.context.LifecycleProperties)>-><org.springframework.context.support.DefaultLifecycleProcessor: void <init>()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.CharChunk: int subtract(char[],int,int)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.Spliterators$ArraySpliterator: long estimateSize()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.util.SimpleTimeZone: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerOpaqueTokenConfiguration$OpaqueTokenIntrospectionClientConfiguration: void <init>()>
<sun.net.www.HeaderParser: int findInt(java.lang.String,int)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder queueCapacity(int)>-><org.springframework.boot.task.TaskExecutorBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.Boolean,java.time.Duration,java.lang.String,org.springframework.core.task.TaskDecorator,java.util.Set)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.concurrent.ConcurrentSkipListMap$CSLMSpliterator: long estimateSize()>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: void <init>()>-><org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator: void <init>(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder,org.springframework.context.ApplicationContext)>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.TrustManager[] configureTrustManagers()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.annotation.authentication.ProviderManagerBuilder authenticationProvider(org.springframework.security.authentication.AuthenticationProvider)>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder authenticationProvider(org.springframework.security.authentication.AuthenticationProvider)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setPlaceholderReplacement(boolean)>
<org.springframework.http.MediaType: void <init>(org.springframework.util.MimeType)>-><java.util.Collections$EmptyMap: void forEach(java.util.function.BiConsumer)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext,boolean)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder cbor()>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$CborFactoryInitializer: void <init>(org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$1)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void <init>()>-><java.util.LinkedHashSet: void <init>()>
<org.apache.tomcat.util.collections.ConcurrentCache: java.lang.Object get(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnectionFromDriver(java.lang.String,java.lang.String)>-><org.flywaydb.core.internal.database.DatabaseTypeRegister: java.lang.String redactJdbcUrl(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void <init>(org.springframework.context.ApplicationEventPublisher)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer apply(org.springframework.security.config.annotation.SecurityConfigurer)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping welcomePageHandlerMapping(org.springframework.context.ApplicationContext,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>
<org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration: org.springframework.http.converter.StringHttpMessageConverter stringHttpMessageConverter(org.springframework.core.env.Environment)>-><org.springframework.http.converter.StringHttpMessageConverter: void <init>(java.nio.charset.Charset)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.HCenterRecord: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.Streams$ConcatSpliterator: long estimateSize()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.jar.Manifest$FastInputStream: void fill()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: java.net.PasswordAuthentication privilegedRequestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: boolean isCustomLogoutSuccess()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setPathMatcher(org.springframework.util.PathMatcher)>-><org.springframework.web.cors.UrlBasedCorsConfigurationSource: void setPathMatcher(org.springframework.util.PathMatcher)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>
<org.springframework.context.annotation.MBeanExportConfiguration: void setupServer(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>-><org.springframework.jmx.support.MBeanRegistrationSupport: void setServer(javax.management.MBeanServer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.CharBuffer: char[] array()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.PushbackInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getAlgorithm()>
<org.springframework.security.access.SecurityConfig: java.util.List createList(java.lang.String[])>-><java.util.ArrayList: void <init>(int)>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder maxPoolSize(int)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.security.access.SecurityConfig: void <init>(java.lang.String)>-><org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>
<org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: org.springframework.security.config.annotation.rsocket.RSocketSecurity rsocketSecurity(org.springframework.context.ApplicationContext)>-><org.springframework.security.config.annotation.rsocket.RSocketSecurity: org.springframework.security.config.annotation.rsocket.RSocketSecurity authenticationManager(org.springframework.security.authentication.ReactiveAuthenticationManager)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.core.Constants: java.util.Set getValues(java.lang.String)>-><java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.io.BufferedInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController basicErrorController(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.boot.autoconfigure.web.ErrorProperties,java.util.List)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity logout(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.SecurityConfigurerAdapter getOrApply(org.springframework.security.config.annotation.SecurityConfigurerAdapter)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientResources(io.lettuce.core.resource.ClientResources)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder clientResources(io.lettuce.core.resource.ClientResources)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer restTemplateBuilderConfigurer(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getMessageConverters()>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void extendMessageConverters(java.util.List)>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.net.Socket: java.io.OutputStream getOutputStream()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.net.URL: java.lang.String getRef()>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider getProvider(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider findProvider(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.HeaderParser: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.lang.Object: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.ObjectProvider)>-><com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper: void <init>()>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: java.lang.String substring(int)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.web.util.pattern.PathPattern: int compareTo(org.springframework.web.util.pattern.PathPattern)>-><java.lang.String: int compareTo(java.lang.String)>
<org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher pathMatchers(java.lang.String[])>-><org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher pathMatchers(org.springframework.http.HttpMethod,java.lang.String[])>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setIgnoreDefaultModelOnRedirect(boolean)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HpkpConfig: org.springframework.security.web.header.writers.HpkpHeaderWriter access$2100(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HpkpConfig)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.collections.ConcurrentCache: java.lang.Object get(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.http.HttpClient: boolean getHttpKeepAliveSet()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: java.util.Optional getWelcomePage()>-><java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jackson.JacksonProperties getJacksonPropertiesInstance()>-><org.springframework.boot.autoconfigure.jackson.JacksonProperties: void setTimeZone(java.util.TimeZone)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Position: java.lang.String getName()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.lang.StringBuilder: void <init>()>
<org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration createSchemas(boolean)>-><org.flywaydb.core.api.configuration.ClassicConfiguration: void setShouldCreateSchemas(boolean)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeEmbeddedOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: java.lang.String determineEmbeddedDatabaseName(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.http.parser.MediaType: java.lang.String getCharset()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler: void <init>()>
<sun.net.www.http.HttpCaptureInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpCapture)>-><java.io.FilterInputStream: void <init>(java.io.InputStream)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder jwtDecoderByPublicKeyValue()>-><java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.http.KeepAliveStreamCleaner$1: java.lang.Object run()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.core.env.PropertySource: boolean containsProperty(java.lang.String)>
<sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter: void <init>()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: boolean hasNext()>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setTomcatWebSocketReactiveWebServerCustomizer(org.springframework.boot.autoconfigure.websocket.reactive.TomcatWebSocketReactiveWebServerCustomizer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(com.fasterxml.jackson.databind.ObjectMapper)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.charset.CoderResult: boolean isOverflow()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$TreeMapSpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void checkLocationExists(javax.sql.DataSource,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.core.io.ResourceLoader)>-><org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.AssertionError: void <init>()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <init>(boolean,java.util.Collection)>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List postProcessConverters(java.util.List)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: java.lang.Object next()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.util.MultiValueMapAdapter: java.util.List put(java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: org.springframework.web.servlet.DispatcherServlet dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection$5: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String)>
<java.util.concurrent.locks.LockSupport: void parkNanos(long)>-><sun.misc.Unsafe: void park(boolean,long)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean available()>-><java.io.BufferedInputStream: int read()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setPublisherReturns(boolean)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.TreeMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.TreeMap$EntrySpliterator: int characteristics()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressEvent: void <init>(sun.net.ProgressSource,java.net.URL,java.lang.String,java.lang.String,sun.net.ProgressSource$State,long,long)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.GregorianCalendar: void computeTime()>-><java.util.SimpleTimeZone: int getRawOffset()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: void <init>(java.util.Spliterator,long,long)>-><java.lang.Object: void <init>()>
<org.apache.catalina.connector.OutputBuffer: void checkConverter()>-><org.apache.catalina.connector.OutputBuffer: org.apache.tomcat.util.buf.C2BConverter createConverter(java.nio.charset.Charset)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<org.flywaydb.core.internal.database.oracle.OracleDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.lang.String: int length()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Shutdown: boolean isAwaitTermination()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager createDefaultAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>-><java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>
<org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor: void <init>()>-><org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor: void <init>()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.Subject: java.util.Set getPrincipals()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadSource(org.springframework.core.io.Resource,java.nio.charset.Charset)>-><org.springframework.core.io.support.PropertiesLoaderUtils: java.util.Properties loadProperties(org.springframework.core.io.Resource)>
<org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy: void <init>()>-><org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy: void <init>()>
<reactor.util.function.Tuple4: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>
<org.javaboy.vhr.VhrApplication: void main(java.lang.String[])>-><synthetic.method.FilterChainImpl: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream,boolean)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: long estimateSize()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: void <init>()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object lazyBean(java.lang.Class)>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.String getBeanName(java.lang.Class,java.lang.String[])>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration: org.springframework.data.redis.core.StringRedisTemplate stringRedisTemplate(org.springframework.data.redis.connection.RedisConnectionFactory)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.servlet.ServletRequestWrapper: java.lang.String getRemoteAddr()>-><javax.servlet.ServletRequestWrapper: java.lang.String getRemoteAddr()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter: void <init>()>-><org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveListOperations opsForList(org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.data.redis.core.DefaultReactiveListOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.io.File: void <init>(java.lang.String,java.lang.String)>
<org.springframework.web.util.pattern.PathPattern: int hashCode()>-><java.lang.String: int hashCode()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: java.lang.String trim()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getName()>
<sun.net.www.protocol.http.HttpURLConnection$2: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$2: java.net.CookieHandler run()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<java.util.zip.InflaterInputStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.AbstractList: int hashCode()>-><java.text.MessageFormat: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void setLogoutHandlers(java.util.List)>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler methodSecurityExpressionHandler()>-><org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler: void setDefaultRolePrefix(java.lang.String)>
<org.springframework.aop.target.LazyInitTargetSource: void <init>()>-><org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: void <init>()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.io.DataInputStream: int readInt()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setSessionRegistryImpl(org.springframework.security.core.session.SessionRegistryImpl)>
<org.springframework.aop.framework.ProxyFactoryBean: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings: void <init>(org.springframework.boot.web.server.MimeMappings,boolean)>-><java.lang.Object: void <init>()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.lang.String: int length()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: void setInterceptors(java.lang.Object[])>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.net.URL: java.lang.String getHost()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.Policy$1: java.lang.Object run()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setBeanNameViewResolver(org.springframework.web.servlet.view.BeanNameViewResolver)>
<org.springframework.cache.support.NoOpCacheManager: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.TreeMap$EntrySpliterator: int characteristics()>
<org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String[] getBeanNamesForType(java.lang.Class)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.AuthenticationFailureHandler getSessionAuthenticationFailureHandler()>-><org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler: void <init>(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator spliterator()>
<org.flywaydb.core.internal.database.h2.H2DatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$4(org.springframework.security.web.session.SessionInformationExpiredEvent)>-><org.apache.catalina.connector.CoyoteWriter: void write(java.lang.String)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveZSetOperations opsForZSet(org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.data.redis.core.DefaultReactiveZSetOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.net.URL: java.lang.String getHost()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: void <init>(java.util.Spliterator,java.util.stream.StreamSpliterators$UnorderedSliceSpliterator)>-><java.lang.Object: void <init>()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator spliterator()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<org.apache.catalina.connector.ResponseFacade: boolean isFinished()>-><org.apache.catalina.connector.Response: boolean isSuspended()>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder customizers(java.lang.Iterable)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration$OAuth2ClasspathGuard: boolean shouldConfigure(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.GenericApplicationContext: java.lang.ClassLoader getClassLoader()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <init>()>-><org.springframework.boot.web.servlet.support.ErrorPageFilter$1: void <init>(org.springframework.boot.web.servlet.support.ErrorPageFilter)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setSpringApplicationAdminMXBeanRegistrar(org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar)>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.CaptureVariablePathElement: int getNormalizedLength()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setLogResolvedException(boolean)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection: java.lang.String getUrl(java.lang.String)>-><org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.aopalliance.intercept.MethodInterceptor getMethodInterceptor()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: java.lang.String substring(int)>
<java.io.DataInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressEvent: void <init>(sun.net.ProgressSource,java.net.URL,java.lang.String,java.lang.String,sun.net.ProgressSource$State,long,long)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void configurePartConverters(org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter,java.util.Collection)>-><org.springframework.http.converter.FormHttpMessageConverter: void setPartConverters(java.util.List)>
<sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$3: void <init>(javax.security.auth.SubjectDomainCombiner,javax.security.auth.Subject,java.security.CodeSource)>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.Policy$4: java.lang.Object run()>
<java.io.FilterInputStream: void mark(int)>-><java.io.PushbackInputStream: void mark(int)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressSource: void finishTracking()>
<org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration: org.springframework.boot.autoconfigure.http.HttpMessageConverters messageConverters(org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <init>(java.util.Collection)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getCredentials()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.Spliterators$IntArraySpliterator: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$IntArraySpliterator: void forEachRemaining(java.util.function.IntConsumer)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<sun.net.www.MeteredStream: void reset()>-><java.io.FilterInputStream: void reset()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.Spliterators$LongArraySpliterator: long estimateSize()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><java.net.SocketInputStream: void close()>
<org.springframework.security.web.header.writers.StaticHeadersWriter: void <init>(java.lang.String,java.lang.String[])>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: void ensureOpen()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder fromConnectionFactory(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.PermissionsHash: java.util.Enumeration elements()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.String toString()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.http.PosterOutputStream: void close()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: void <init>(java.util.stream.Node$OfDouble)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive)>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IntArraySpliterator: long estimateSize()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>-><org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.security.x509.X500Name: sun.security.util.DerValue findMostSpecificAttribute(sun.security.util.ObjectIdentifier)>-><sun.security.x509.RDN: sun.security.util.DerValue findAttribute(sun.security.util.ObjectIdentifier)>
<org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: boolean isAprAvailable()>-><org.apache.catalina.core.AprLifecycleListener: void init()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Boolean run()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.http.InvalidMediaTypeException: void <init>(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setPlatformTransactionManager(org.springframework.transaction.PlatformTransactionManager)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource methodMetadataSource(org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadSource(org.springframework.core.io.Resource,java.nio.charset.Charset)>-><org.springframework.core.io.support.PropertiesLoaderUtils: java.util.Properties loadProperties(org.springframework.core.io.support.EncodedResource)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.HashMap$EntrySpliterator: int characteristics()>
<java.util.stream.Node$OfInt: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.http.HttpClient: void <init>()>
<com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.Map getDefaultMediaTypes()>-><java.util.HashMap: void <init>(int)>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: void <init>(org.springframework.http.MediaType[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.SliceOps$SliceTask: java.lang.Object doLeaf()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Vector$1: boolean hasMoreElements()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: int getConnectRetries()>
<io.lettuce.core.TimeoutOptions: io.lettuce.core.TimeoutOptions enabled()>-><io.lettuce.core.TimeoutOptions$Builder: io.lettuce.core.TimeoutOptions$Builder timeoutCommands()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.SingleCharWildcardedPathElement: void <init>(int,char[],int,boolean,char)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.security.cert.CertificateParsingException: void <init>()>-><java.security.cert.CertificateException: void <init>()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfRef: void forEach(java.util.function.Consumer)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler configure(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper get()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><java.io.BufferedInputStream: int read()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.io.DataOutputStream: void writeByte(int)>-><java.io.PrintStream: void write(int)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setMessageCodesResolverFormat(org.springframework.validation.DefaultMessageCodesResolver$Format)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.security.web.reactive.result.view.CsrfRequestDataValueProcessor: void <init>()>-><java.lang.Object: void <init>()>
<java.time.ZoneId: java.time.ZoneId systemDefault()>-><java.util.TimeZone: java.util.TimeZone getDefault()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void parseHostAndPort(java.lang.String,boolean)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: java.lang.String determineEmbeddedUsername(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: java.lang.String ifHasText(java.lang.String)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<sun.net.www.MeteredStream: void justRead(long)>-><sun.net.www.MeteredStream: boolean isMarked()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection: void access$400(sun.net.www.protocol.http.HttpURLConnection,boolean)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.User: java.util.SortedSet sortAuthorities(java.util.Collection)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder hashValue(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair: org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair fromSerializer(org.springframework.data.redis.serializer.RedisSerializer)>
<java.io.BufferedInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<java.io.BufferedOutputStream: void write(byte[],int,int)>-><java.io.PrintStream: void write(byte[],int,int)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: void parseHeader(java.io.InputStream)>
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.authentication.AnonymousAuthenticationProvider: void <init>(java.lang.String)>
<java.security.ProtectionDomain: java.lang.String toString()>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>
<org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.Flyway load()>-><org.flywaydb.core.Flyway: void <init>(org.flywaydb.core.api.configuration.Configuration)>
<java.net.Socket: int getLocalPort()>-><java.net.SocketImpl: int getLocalPort()>
<org.apache.catalina.connector.OutputBuffer$PrivilegedCreateConverter: org.apache.tomcat.util.buf.C2BConverter run()>-><org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void <init>(int)>-><java.util.stream.StreamSpliterators$ArrayBuffer: void <init>()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>
<org.springframework.util.ResourceUtils: void useCachesIfNecessary(java.net.URLConnection)>-><java.lang.Object: java.lang.Class getClass()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void checkPath(java.lang.String,java.lang.String,java.lang.String)>-><java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>
<org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy: void <init>(java.lang.String)>-><org.springframework.security.web.util.UrlUtils: boolean isValidRedirectUrl(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.Streams$RangeIntSpliterator: long estimateSize()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>
<org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder hashKey(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder hashKey(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.tomcat.util.collections.ConcurrentCache: java.lang.Object get(java.lang.Object)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><java.util.LinkedList: java.lang.Object[] toArray()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.lang.Object next()>
<javax.security.auth.Policy$4: java.lang.String run()>-><java.security.Security: java.lang.String getProperty(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.task.TaskExecutionProperties getTaskExecutionPropertiesInstance()>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties: void setThreadNamePrefix(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.web.cors.UrlBasedCorsConfigurationSource: void <init>(org.springframework.web.util.pattern.PathPatternParser)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter: org.springframework.security.web.server.header.ServerHttpHeadersWriter createDelegate(org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode)>-><java.lang.Enum: java.lang.String name()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void setMaxAge(java.time.Duration)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.orm.jpa.JpaProperties: void <init>()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder fromConnectionFactory(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.cache.DefaultRedisCacheWriter: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.util.List getSqlMigrationSuffixes()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.util.Date getEndContract()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.postgresql.PostgreSQLDatabaseType: java.lang.String getName()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.session.SessionManagementFilter: void <init>(org.springframework.security.web.context.SecurityContextRepository,org.springframework.security.web.authentication.session.SessionAuthenticationStrategy)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.HttpURLConnection$3: java.lang.Object run()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$ArraySpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,boolean,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer flywayInitializer(org.flywaydb.core.Flyway,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer: void <init>(org.flywaydb.core.Flyway,org.springframework.boot.autoconfigure.flyway.FlywayMigrationStrategy)>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder messageConverters(java.util.Collection)>-><org.springframework.boot.web.client.RestTemplateBuilder: java.util.Set copiedSetOf(java.util.Collection)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.MessageHeader: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: org.apache.commons.pool2.impl.GenericObjectPoolConfig getPoolConfig(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: void setMaxIdle(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: int read(byte[],int,int)>-><org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration$TomcatWebSocketConfiguration: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration: org.springframework.cache.concurrent.ConcurrentMapCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers)>
<org.springframework.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.CaptureTheRestPathElement: int getNormalizedLength()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getExpected()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Node$OfInt: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator spliterator()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: boolean checkError()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setFlyway(org.flywaydb.core.Flyway)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.MeteredStream: int read()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.URL: int getDefaultPort()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes: java.util.stream.Node$Builder builder(long,java.util.function.IntFunction)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.boot.autoconfigure.web.ErrorProperties,java.util.List)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,java.util.List)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.HttpRetryException: void <init>(java.lang.String,int)>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator$OfPrimitive spliterator()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.context.LifecycleProperties getLifecyclePropertiesInstance()>-><org.springframework.boot.autoconfigure.context.LifecycleProperties: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.apache.catalina.connector.Response: boolean access$000(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: void setUseSSL(boolean)>
<sun.net.www.http.ChunkedInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void closeUnderlying()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity requestCache(org.springframework.security.config.Customizer)>
<java.text.AttributeEntry: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: org.springframework.security.core.userdetails.UserDetails getUserDetails(org.springframework.boot.autoconfigure.security.SecurityProperties$User,java.lang.String)>-><org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.UserDetails build()>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.MessageHeader: java.util.Map getHeaders()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.CryptoPermissions: java.util.Enumeration elements()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.format.datetime.DateFormatter: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><io.lettuce.core.TimeoutOptions: io.lettuce.core.TimeoutOptions enabled()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.PasswordAuthentication privilegedRequestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><sun.net.www.protocol.http.HttpURLConnection$1: void <init>(java.lang.String,java.net.URL,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.Authenticator$RequestorType)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity headers(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void <init>()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder allowCoreThreadTimeOut(boolean)>
<java.lang.Character: boolean isJavaIdentifierStart(char)>-><java.lang.Character: boolean isJavaIdentifierStart(int)>
<sun.net.www.http.ChunkedInputStream: void ensureRawAvailable(int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.tomcat.jni.Library: void <init>()>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveCache: java.lang.Thread access$000(sun.net.www.http.KeepAliveCache)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.data.redis.connection.RedisStandaloneConfiguration: void setUsername(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MeteredStream: void mark(int)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.net.Socket createSocket()>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.InterceptorRegistry: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.math.BigDecimal: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void parseHostAndPort(java.lang.String,boolean)>-><java.lang.Integer: int parseInt(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.Subject: boolean isReadOnly()>
<reactor.core.publisher.Operators: void onDiscardQueueWithClear(java.util.Queue,reactor.util.context.Context,java.util.function.Function)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper get()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: sun.net.ProgressSource$State getState()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source asInt(java.util.function.Function)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source as(java.util.function.Function)>
<org.springframework.security.core.context.SecurityContextImpl: int hashCode()>-><org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HstsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setSqlMigrationSeparator(java.lang.String)>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><sun.security.util.Debug: void println(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.AbstractList: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>-><java.io.ByteArrayOutputStream: void write(byte[],int,int)>
<org.springframework.security.config.web.server.ServerHttpSecurity$RequestCacheSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>-><org.springframework.security.config.web.server.ServerHttpSecurity$RequestCacheSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.stream.Node: int getChildCount()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.NetProperties$1: java.lang.Object run()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactoryCustomizer tomcatServletWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.ServerProperties)>-><org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactoryCustomizer: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void openServer()>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><org.springframework.core.NestedExceptionUtils: java.lang.String buildMessage(java.lang.String,java.lang.Throwable)>
<org.springframework.security.web.authentication.logout.CompositeLogoutHandler: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.web.util.pattern.RegexPathElement: int getNormalizedLength()>-><java.util.ArrayList: int size()>
<org.springframework.security.web.server.authentication.logout.LogoutWebFilter: void <init>()>-><org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher pathMatchers(org.springframework.http.HttpMethod,java.lang.String[])>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$LongArraySpliterator: long estimateSize()>
<java.text.AttributeEntry: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$7: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Sink$ChainedReference: void begin(long)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.WebExpressionVoter: void <init>()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.String: java.lang.String toLowerCase()>
<org.springframework.security.web.header.writers.HstsHeaderWriter: void updateHstsHeaderValue()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><com.fasterxml.jackson.core.exc.StreamReadException: java.lang.String getMessage()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.sqlite.SQLiteDatabaseType: java.lang.String getName()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.String: java.lang.String valueOf(long)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: int characteristics()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: void close()>-><sun.net.httpserver.SSLStreams$InputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: org.springframework.boot.info.GitProperties gitProperties()>-><org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git: org.springframework.core.io.Resource getLocation()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.SecurityException: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Boolean run()>
<java.io.DataInputStream: int read(byte[])>-><java.io.InputStream: int read(byte[],int,int)>
<org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: javax.servlet.http.HttpSession getObject()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession()>
<sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>-><sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyRegistrationConfiguration: org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository relyingPartyRegistrationRepository(org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyProperties)>
<sun.misc.URLClassPath: void check(java.net.URL)>-><java.lang.String: int indexOf(java.lang.String)>
<java.io.BufferedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.httpserver.Request$WriteStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: boolean authQop()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: void <init>(org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.web.reactive.result.method.annotation.CurrentSecurityContextArgumentResolver reactiveCurrentSecurityContextArgumentResolver()>-><org.springframework.context.expression.BeanFactoryResolver: void <init>(org.springframework.beans.factory.BeanFactory)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.jdbc.DriverDataSource: java.lang.String detectFallbackUser(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: boolean isConcurrentSessionControlEnabled()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<org.apache.catalina.connector.OutputBuffer: int transfer(java.lang.String,int,int,java.nio.CharBuffer)>-><java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>
<java.util.Properties: void loadFromXML(java.io.InputStream)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.lang.Math: long min(long,long)>
<java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.net.SocketException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<java.util.zip.DeflaterOutputStream: void deflate()>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void setFieldNamingStrategy(java.lang.Class)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.Boolean getOracleSqlplus()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><io.lettuce.core.ClientOptions$Builder: io.lettuce.core.ClientOptions$Builder timeoutOptions(io.lettuce.core.TimeoutOptions)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.context.NullSecurityContextRepository: void <init>()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfInt: void forEach(java.util.function.Consumer)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$IdentityHashMapSpliterator: long estimateSize()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setErrorPageFilter(org.springframework.boot.web.servlet.support.ErrorPageFilter)>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setHost(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: void destroy()>-><org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory: void destroy()>
<org.springframework.boot.info.InfoProperties: java.util.Properties copy(java.util.Properties)>-><java.util.Hashtable: void putAll(java.util.Map)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>-><java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void info(java.lang.Object)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.net.HostPortrange: int[] parsePort(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>-><sun.net.www.protocol.http.HttpURLConnection: void reset()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.NetworkClient$1: java.lang.Void run()>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyRegistrationConfiguration: void <init>()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>-><java.util.Collections: java.util.List emptyList()>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.Integer: int parseInt(java.lang.String)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$LongFixedNodeBuilder: void begin(long)>
<sun.net.www.MeteredStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$3(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.apache.catalina.connector.ResponseFacade: void setContentType(java.lang.String)>
<java.util.EnumMap: int entryHashCode(int)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.ResourceHttpMessageConverter: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PrintSetupRecord: java.lang.String toString()>
<java.util.stream.Node$OfInt: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: java.util.Iterator iterator()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.nio.cs.StreamDecoder: boolean inReady()>-><sun.net.www.MeteredStream: int available()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)>-><java.net.SocketInputStream: void close()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.KeepAliveStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long,sun.net.www.http.HttpClient)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: int getEnd()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.ArrayDeque: void <init>(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String getRemoteAddress()>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void setRootViewName(java.lang.String)>-><org.springframework.web.servlet.mvc.ParameterizableViewController: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getOracleKerberosCacheFile()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.http.PosterOutputStream: void close()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><org.springframework.util.Assert: void state(boolean,java.util.function.Supplier)>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void <init>()>-><java.time.Duration: java.time.Duration ofDays(long)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.net.HostPortrange: int[] defaultPort()>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.charset.CoderResult: void throwException()>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(org.springframework.boot.autoconfigure.security.SecurityProperties)>-><org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean: void <init>(java.lang.String,org.springframework.boot.web.servlet.ServletRegistrationBean[])>
<org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<org.springframework.security.config.web.server.ServerHttpSecurity: void <init>()>-><org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: void <init>(java.util.List)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.security.authentication.AnonymousAuthenticationProvider: void <init>(java.lang.String)>-><org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PageBreakRecord: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.NetworkClient: void setReadTimeout(int)>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.InternalError: void <init>(java.lang.String)>
<java.util.ComparableTimSort: void mergeLo(int,int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.Subject: boolean isReadOnly()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.mysql.MySQLDatabaseType: java.lang.String getBackupDriverClass(java.lang.String,java.lang.ClassLoader)>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: java.util.List getSecurityWebFilterChains()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void afterPropertiesSet()>
<org.apache.tomcat.util.buf.CharChunk: void makeSpace(int)>-><org.apache.tomcat.util.buf.AbstractChunk: int getLimitInternal()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><sun.net.www.MessageHeader: java.lang.String getHeaderNamesInList()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: void add(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.InterceptorRegistry: org.springframework.web.servlet.config.annotation.InterceptorRegistration addInterceptor(org.springframework.web.servlet.HandlerInterceptor)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.PrintStream: void write(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ExtSSTRecord: java.lang.String toString()>
<java.io.InputStream: int read(byte[],int,int)>-><java.lang.NullPointerException: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: int characteristics()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.WebProperties,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: org.springframework.data.redis.core.ReactiveRedisTemplate reactiveRedisTemplate(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.security.GeneralSecurityException: void <init>()>-><java.lang.Exception: void <init>()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean remove(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.sqlserver.SQLServerDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryCustomizer servletWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.ServerProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryCustomizer: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties,java.util.List)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration: void <init>()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int getResponseCode()>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.URL: int getPort()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.io.ObjectStreamField: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: boolean determineEnabled()>-><java.util.ArrayList: java.lang.Object get(int)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration: org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver conventionErrorViewResolver()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReferencePipeline$5$1: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration: com.fasterxml.jackson.databind.ObjectMapper jacksonObjectMapper(org.springframework.http.converter.json.Jackson2ObjectMapperBuilder)>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: com.fasterxml.jackson.databind.ObjectMapper build()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.AuthenticationInfo: void endAuthRequest(java.lang.String)>
<sun.net.www.MeteredStream: void close()>-><java.io.ObjectInputStream$BlockDataInputStream: void close()>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>-><sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo parseUrl(java.lang.String)>-><java.net.URI: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.FileOutputStream: void close()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void setIfNotSet(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.authentication.ProviderManager: void setEraseCredentialsAfterAuthentication(boolean)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.StringBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration: org.springframework.boot.web.reactive.result.view.MustacheViewResolver mustacheViewResolver(com.samskivert.mustache.Mustache$Compiler,org.springframework.boot.autoconfigure.mustache.MustacheProperties)>-><org.springframework.boot.autoconfigure.mustache.MustacheProperties: java.lang.String getPrefix()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.io.BufferedInputStream: void close()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer standardJacksonObjectMapperBuilderCustomizer(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.jackson.JacksonProperties)>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.jackson.JacksonProperties)>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.AbstractList: int hashCode()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.HttpClient: void closeServer()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.util.Base64: java.util.Base64$Decoder getDecoder()>
<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<org.apache.tomcat.jni.Library: void <init>()>-><javax.xml.parsers.FactoryConfigurationError: java.lang.String getMessage()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void setUseCaches(boolean)>-><java.net.URLConnection: void setUseCaches(boolean)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor applicationTaskExecutor(org.springframework.boot.task.TaskExecutorBuilder)>-><org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor build()>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><org.javaboy.vhr.model.Nation: java.lang.Integer getId()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties: void <init>()>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$WebStatFilter: void <init>()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readInt()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration: org.springframework.boot.web.reactive.result.view.MustacheViewResolver mustacheViewResolver(com.samskivert.mustache.Mustache$Compiler,org.springframework.boot.autoconfigure.mustache.MustacheProperties)>-><org.springframework.boot.web.reactive.result.view.MustacheViewResolver: void <init>(com.samskivert.mustache.Mustache$Compiler)>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: char[] toCharArray()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source from(java.lang.Object)>
<org.springframework.jmx.export.annotation.AnnotationMBeanExporter: void <init>()>-><org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: void <init>(org.springframework.jmx.export.metadata.JmxAttributeSource)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.LocalDate: java.lang.String toString()>
<org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNot(java.util.function.Predicate)>-><java.util.function.Predicate: java.util.function.Predicate negate()>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter: void <init>()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.GenericTypeResolver: java.lang.Class resolveTypeArgument(java.lang.Class,java.lang.Class)>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.http.HttpClient: void finished()>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHost()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>-><sun.net.ProgressSource: void finishTracking()>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: void <init>(int,char[],char)>-><org.springframework.web.util.pattern.PathElement: void <init>(int,char)>
<org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter: void setResolveHiddenInputs(java.util.function.Function)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.CryptoAllPermissionCollection: java.util.Enumeration elements()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: boolean determineSslEnabled(boolean)>-><java.lang.Boolean: boolean booleanValue()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping welcomePageHandlerMapping(org.springframework.context.ApplicationContext,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.flywaydb.core.internal.database.redshift.RedshiftDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void setMaxAge(java.time.Duration)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.mongo.MongoProperties: void setGridFsDatabase(java.lang.String)>-><org.springframework.boot.autoconfigure.mongo.MongoProperties$Gridfs: void setDatabase(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: void <init>(java.util.Spliterator,long,long)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.ClientVector: void <init>(int)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.io.PrintStream: void write(int)>-><java.io.PrintStream: void write(int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: void <init>(int,char[],int,boolean,char)>-><java.lang.Character: char toLowerCase(char)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.HashSet: void <init>(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: int size()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration: org.springframework.boot.web.servlet.filter.OrderedFormContentFilter formContentFilter()>
<org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter: void setResolveHiddenInputs(java.util.function.Function)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$CacheControlConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><java.lang.Object: void <init>()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: char charAt(int)>
<org.springframework.util.DefaultPropertiesPersister: void loadFromXml(java.util.Properties,java.io.InputStream)>-><java.util.Properties: void loadFromXML(java.io.InputStream)>
<org.springframework.web.context.request.AbstractRequestAttributesScope: java.lang.Object get(java.lang.String,org.springframework.beans.factory.ObjectFactory)>-><org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setJsr250MethodSecurityMetadataSource(org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource)>
<org.flywaydb.core.internal.database.saphana.SAPHANADatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.Properties: void loadFromXML(java.io.InputStream)>-><java.io.BufferedInputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String toString()>-><org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.http.ChunkedInputStream: void close()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder jwtDecoderByPublicKeyValue()>-><org.springframework.security.oauth2.jose.jws.SignatureAlgorithm: org.springframework.security.oauth2.jose.jws.SignatureAlgorithm from(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setConnectTimeout(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.net.InetAddress: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isGroup()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutSuccessHandler createDefaultSuccessHandler()>-><org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler: void setDefaultTargetUrl(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.FileInputStream: int read(byte[])>
<org.springframework.http.InvalidMediaTypeException: void <init>(org.springframework.util.InvalidMimeTypeException)>-><org.springframework.util.InvalidMimeTypeException: java.lang.String getMimeType()>
<java.util.stream.SliceOps$SliceTask: void cancel()>-><java.util.stream.SliceOps$SliceTask: java.util.stream.Node getEmptyResult()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getProgress()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<sun.net.www.protocol.http.HttpURLConnection: void access$400(sun.net.www.protocol.http.HttpURLConnection,boolean)>-><sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.tomcat.jni.Library: boolean initialize(java.lang.String)>-><org.apache.tomcat.jni.Library: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void <init>(java.nio.ByteBuffer,java.io.InputStream)>-><java.io.InputStream: void <init>()>
<org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: java.util.List getDefaultLifecycleListeners()>-><java.util.ArrayList: void <init>(java.util.Collection)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.HashSet: void <init>(java.util.Collection)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.EmptyByteBuf: java.lang.String toString()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: long estimateSize()>
<org.springframework.web.servlet.view.InternalResourceViewResolver: void <init>()>-><org.springframework.web.servlet.view.UrlBasedViewResolver: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><org.springframework.util.DefaultPropertiesPersister: void load(java.util.Properties,java.io.InputStream)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: boolean determineEnabled()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: java.lang.Boolean getEnabled()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: void <init>(int,char[],int,boolean,char)>-><org.springframework.web.util.pattern.PathElement: void <init>(int,char)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<javax.security.auth.Policy$3: java.lang.Object run()>-><javax.security.auth.Policy$3: java.lang.Void run()>
<java.util.TimSort: void binarySort(java.lang.Object[],int,int,int,java.util.Comparator)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><java.net.ProtocolException: void <init>(java.lang.String)>
<sun.net.www.http.HttpClient: boolean isKeepingAlive()>-><sun.net.www.http.HttpClient: boolean getHttpKeepAliveSet()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ArrayNode: long count()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.Sink: boolean cancellationRequested()>
<sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter,io.undertow.util.HttpString)>-><java.lang.Object: void <init>()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNonce(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.MessageHeader: java.util.Iterator multiValueIterator(java.lang.String)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><java.util.Properties: void <init>(java.util.Properties)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo: java.lang.String getUsername()>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void setRolePrefix(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.List sortErrorViewResolvers(java.util.List)>-><java.util.ArrayList: void <init>()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.SliceOps$SliceTask makeChild(java.util.Spliterator)>-><java.util.stream.SliceOps$SliceTask: void <init>(java.util.stream.SliceOps$SliceTask,java.util.Spliterator)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>-><java.lang.Enum: int ordinal()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler methodSecurityExpressionHandler()>-><org.springframework.security.config.core.GrantedAuthorityDefaults: java.lang.String getRolePrefix()>
<java.util.HashMap: int hash(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: org.springframework.boot.autoconfigure.web.format.DateTimeFormatters timeFormat(java.lang.String)>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: boolean isIsoOffset(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.security.config.annotation.ObjectPostProcessor getObjectPostProcessor()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader getUserSetHeaders()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration: org.springframework.boot.web.reactive.result.view.MustacheViewResolver mustacheViewResolver(com.samskivert.mustache.Mustache$Compiler,org.springframework.boot.autoconfigure.mustache.MustacheProperties)>-><org.springframework.boot.autoconfigure.template.AbstractViewResolverProperties: java.lang.String[] getViewNames()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator spliterator()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: org.springframework.web.filter.CharacterEncodingFilter characterEncodingFilter()>-><org.springframework.web.filter.CharacterEncodingFilter: void setForceRequestEncoding(boolean)>
<java.util.Properties: void loadFromXML(java.io.InputStream)>-><java.net.SocketInputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$LongArrayNode: void forEach(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.StringRecord: java.lang.String toString()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.CoyoteWriter: void flush()>-><org.apache.catalina.connector.OutputBuffer: void flush()>
<org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$LazyPasswordEncoder: void <init>(org.springframework.context.ApplicationContext)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection$9: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setLazyInitializationExcludeFilter(org.springframework.boot.LazyInitializationExcludeFilter)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.UnknownClassOrMethodId: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: java.lang.String findValue(int)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: void <init>()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$loginFilter$0(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.apache.catalina.connector.CoyoteWriter: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntArraySpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Collection)>-><org.javaboy.vhr.model.Hr: java.lang.String getUsername()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.regex.Pattern: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration: void <init>()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>
<reactor.core.publisher.Operators: void onErrorDropped(java.lang.Throwable,reactor.util.context.Context)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder: io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder enablePeriodicRefresh(java.time.Duration)>-><io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder: io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder refreshPeriod(java.time.Duration)>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$4(org.springframework.security.web.session.SessionInformationExpiredEvent)>-><org.apache.catalina.connector.ResponseFacade: void setStatus(int)>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void addMapping(java.lang.String,java.lang.Class)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setPageableHandlerMethodArgumentResolverCustomizer(org.springframework.data.web.config.PageableHandlerMethodArgumentResolverCustomizer)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.format.support.FormattingConversionService mvcConversionService()>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.format.support.FormattingConversionService mvcConversionService()>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: org.springframework.boot.autoconfigure.web.format.DateTimeFormatters dateFormat(java.lang.String)>
<java.util.AbstractCollection: java.lang.Object[] toArray()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: int size()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.Spliterator spliterator()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setCachedHA1(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.BOFRecord: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.ReactiveJwtDecoder jwtDecoder()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties$Jwt: java.lang.String getJwsAlgorithm()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.NetworkClient: void setConnectTimeout(int)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.InetSocketAddress: boolean isUnresolved()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: void <init>(char[],int,int)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><io.lettuce.core.cluster.ClusterClientOptions$Builder: io.lettuce.core.cluster.ClusterClientOptions$Builder topologyRefreshOptions(io.lettuce.core.cluster.ClusterTopologyRefreshOptions)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>-><java.util.Collections: java.util.Map emptyMap()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration: org.springframework.http.converter.StringHttpMessageConverter stringHttpMessageConverter(org.springframework.core.env.Environment)>-><org.springframework.boot.context.properties.bind.Binder: org.springframework.boot.context.properties.bind.Binder get(org.springframework.core.env.Environment)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.AbstractList: java.util.ListIterator listIterator()>
<sun.net.www.protocol.http.HttpURLConnection$11: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>-><java.lang.Long: long parseLong(java.lang.String)>
<org.springframework.boot.autoconfigure.mongo.MongoProperties: java.lang.String getMongoClientDatabase()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: java.lang.String determineUri()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.util.List parseAddresses(java.lang.String)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void <init>(java.lang.String,boolean,org.springframework.boot.autoconfigure.amqp.RabbitProperties$1)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setWebMvcAutoConfiguration$ResourceChainResourceHandlerRegistrationCustomizer(org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainResourceHandlerRegistrationCustomizer)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder awaitTermination(boolean)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.web.servlet.view.UrlBasedViewResolver: void setViewClass(java.lang.Class)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReferencePipeline$7$1: void begin(long)>
<org.springframework.boot.task.TaskExecutorBuilder: java.util.Set append(java.util.Set,java.lang.Iterable)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.context.support.PropertySourcesPlaceholderConfigurer: void <init>()>-><org.springframework.beans.factory.config.PlaceholderConfigurerSupport: void <init>()>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurations(java.util.Map)>-><org.springframework.web.cors.UrlBasedCorsConfigurationSource: void setCorsConfigurations(java.util.Map)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: java.util.Spliterator trySplit()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.String getBeanName(java.lang.Class,java.lang.String[])>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<org.springframework.boot.web.server.MimeMappings: void <init>(org.springframework.boot.web.server.MimeMappings,boolean)>-><java.util.LinkedHashMap: void <init>(java.util.Map)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$FixedNodeBuilder: void begin(long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<javax.security.auth.Policy$3: java.lang.Void run()>-><javax.security.auth.Policy: void setPolicy(javax.security.auth.Policy)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.net.URISyntaxException: java.lang.String getMessage()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>-><sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter createRequestMappingHandlerAdapter()>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter createRequestMappingHandlerAdapter()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(org.springframework.security.core.userdetails.UserDetails[])>-><org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Collection)>
<org.springframework.security.core.userdetails.User$AuthorityComparator: void <init>(org.springframework.security.core.userdetails.User$1)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: void <init>()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.lang.String getPassword()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory redisConnectionFactory(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources)>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisProperties getProperties()>
<java.net.URLPermission: java.lang.String actions()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setPassword(java.lang.String)>
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setCallableInterceptors(java.util.List)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.util.MultiValueMapAdapter: boolean containsKey(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.net.Proxy: boolean equals(java.lang.Object)>-><java.net.Proxy: java.net.Proxy$Type type()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory redisConnectionFactory(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources)>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce: org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool getPool()>
<org.springframework.security.config.annotation.web.configurers.PermitAllSupport: void permitAll(org.springframework.security.config.annotation.web.HttpSecurityBuilder,java.lang.String[])>-><org.springframework.security.config.annotation.web.configurers.PermitAllSupport: void permitAll(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher[])>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.time.Duration: java.time.Duration ofDays(long)>-><java.time.Duration: java.time.Duration create(long,int)>
<org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: org.springframework.data.redis.core.ReactiveRedisTemplate reactiveRedisTemplate(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder hashValue(org.springframework.data.redis.serializer.RedisSerializer)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.security.access.SecurityConfig: java.util.List createList(java.lang.String[])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: boolean isReplacement(org.springframework.http.converter.HttpMessageConverter,org.springframework.http.converter.HttpMessageConverter)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver authenticationPrincipalArgumentResolver()>-><org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver: void setBeanResolver(org.springframework.expression.BeanResolver)>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><io.netty.util.concurrent.AbstractEventExecutor: boolean inEventLoop()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Object: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.SpinedBuffer$1Splitr: long estimateSize()>
<sun.net.www.HeaderParser: sun.net.www.HeaderParser subsequence(int,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.util.Spliterator trySplit()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.ReactiveJwtDecoder jwtDecoder()>-><org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder: org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder$JwkSetUriReactiveJwtDecoderBuilder withJwkSetUri(java.lang.String)>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setPrePostAdviceReactiveMethodInterceptor(org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><java.io.StringReader: int read()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties getOAuth2ClientPropertiesInstance()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.io.StringReader: int read()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>-><org.springframework.web.util.pattern.PatternParseException$PatternMessage: java.lang.String formatMessage(java.lang.Object[])>
<java.util.HashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.sqlite.SQLiteDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><java.io.InputStream: void close()>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.CaptureVariablePathElement: int getScore()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: void <init>()>-><java.util.ArrayList: void <init>()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setServletRegistrationBean(org.springframework.boot.web.servlet.ServletRegistrationBean)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping createRequestMappingHandlerMapping()>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping createRequestMappingHandlerMapping()>
<org.apache.tomcat.util.buf.CharChunk: int subtract(char[],int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void addUrlMappings(java.lang.String[])>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext build()>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration: org.springframework.cache.support.SimpleCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,java.util.Collection)>-><org.springframework.cache.support.SimpleCacheManager: void setCaches(java.util.Collection)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isFinal()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.Integer: int parseInt(java.lang.String,int)>
<org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext createEmptyContext()>-><org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy: org.springframework.security.core.context.SecurityContext createEmptyContext()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><java.io.InputStream: void close()>
<org.springframework.boot.info.GitProperties: java.lang.String coerceToEpoch(java.lang.String)>-><org.springframework.boot.info.GitProperties: java.lang.Long parseEpochSecond(java.lang.String)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.springframework.web.util.pattern.RegexPathElement: void <init>(int,char[],boolean,char[],char)>-><org.springframework.web.util.pattern.PathElement: void <init>(int,char)>
<org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: void <init>()>-><org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Map)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.zip.InflaterInputStream: void fill()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EventObject: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.TblPtg: java.lang.String toString()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration: com.fasterxml.jackson.module.paramnames.ParameterNamesModule parameterNamesModule()>-><com.fasterxml.jackson.module.paramnames.ParameterNamesModule: void <init>(com.fasterxml.jackson.annotation.JsonCreator$Mode)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.ibatis.mapping.ResultMapping: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration: org.springframework.http.converter.StringHttpMessageConverter stringHttpMessageConverter(org.springframework.core.env.Environment)>-><org.springframework.http.converter.StringHttpMessageConverter: void setWriteAcceptCharset(boolean)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo parseUrl(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.CoyoteWriter: void write(java.lang.String,int,int)>-><org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: java.lang.String toString()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.info.GitProperties: java.lang.String coerceToEpoch(java.lang.String)>-><java.time.Instant: long toEpochMilli()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.mysql.MySQLDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.lang.System: java.lang.String mapLibraryName(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$SpinedNodeBuilder: void end()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration: org.springframework.boot.autoconfigure.flyway.FlywaySchemaManagementProvider flywayDefaultDdlModeProvider(org.springframework.beans.factory.ObjectProvider)>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Object run()>-><org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>
<org.springframework.jdbc.support.JdbcUtils: java.lang.Object extractDatabaseMetaData(javax.sql.DataSource,org.springframework.jdbc.support.DatabaseMetaDataCallback)>-><org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getConnection()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration: org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor securitySocketAcceptorInterceptor(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor: void <init>(io.rsocket.plugins.SocketAcceptorInterceptor)>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.ServerProperties getServerPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.ServerProperties: void setForwardHeadersStrategy(org.springframework.boot.autoconfigure.web.ServerProperties$ForwardHeadersStrategy)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setPlatform(java.lang.String)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$MessagingTemplateConfiguration: org.springframework.amqp.rabbit.core.RabbitMessagingTemplate rabbitMessagingTemplate(org.springframework.amqp.rabbit.core.RabbitTemplate)>-><org.springframework.amqp.rabbit.core.RabbitMessagingTemplate: void <init>(org.springframework.amqp.rabbit.core.RabbitTemplate)>
<sun.net.www.http.ChunkedInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.data.redis.connection.RedisStandaloneConfiguration: void setPassword(org.springframework.data.redis.connection.RedisPassword)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getProgress()>
<org.apache.tomcat.jni.Library: boolean initialize(java.lang.String)>-><org.apache.tomcat.jni.Library: int size(int)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List resolveLocations(java.util.List)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: org.springframework.boot.jdbc.DatabaseDriver getDatabaseDriver()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.http.client.support.HttpAccessor: void <init>()>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setHttpEncodingAutoConfiguration$LocaleCharsetMappingsCustomizer(org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration$LocaleCharsetMappingsCustomizer)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void <init>(java.nio.ByteBuffer)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.LinkedList$LLSpliterator: java.util.Spliterator trySplit()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutFilter createLogoutFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.io.PrintStream: void write(int)>-><java.io.PrintStream: void flush()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.util.List getValue()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.net.SocketInputStream: long skip(long)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<org.springframework.web.context.request.SessionScope: java.lang.Object get(java.lang.String,org.springframework.beans.factory.ObjectFactory)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getSessionMutex()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Vector: boolean addAll(java.util.Collection)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce getLettuce()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.http.KeepAliveStream$1: java.lang.Object run()>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfDouble spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<java.util.GregorianCalendar: void computeTime()>-><java.util.SimpleTimeZone: int getOffsets(long,int[])>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Politicsstatus: java.lang.String getName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.ProtectionDomain: java.lang.String toString()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.servlet.FrameworkServlet: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity exceptionHandling(org.springframework.security.config.Customizer)>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.io.FilterInputStream: void reset()>-><com.rabbitmq.client.impl.TruncatedInputStream: void reset()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.Spliterators$DoubleArraySpliterator: long estimateSize()>
<java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.json.MappingJackson2HttpMessageConverter: void <init>()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.URL: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.BufferedInputStream: void close()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><io.netty.util.internal.RecyclableArrayList: boolean add(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void setPathPrefixes(java.util.Map)>
<java.util.stream.AbstractShortCircuitTask: void cancelLaterNodes()>-><java.util.stream.SliceOps$SliceTask: void cancel()>
<java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>-><java.util.Spliterators: java.util.Spliterator emptySpliterator()>
<org.springframework.boot.web.servlet.filter.OrderedRequestContextFilter: void <init>()>-><org.springframework.web.filter.RequestContextFilter: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(sun.net.www.protocol.http.HttpCallerInfo,java.lang.String)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void addFormatters(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.boot.autoconfigure.web.format.WebConversionService: void registerJavaDate(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>
<org.springframework.aop.framework.ProxyFactoryBean: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void setSentinels(java.lang.Iterable)>-><java.util.ArrayList: java.util.Iterator iterator()>
<sun.security.action.GetIntegerAction: java.lang.Integer run()>-><java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: org.springframework.security.core.userdetails.UserDetails getUserDetails(org.springframework.boot.autoconfigure.security.SecurityProperties$User,java.lang.String)>-><org.springframework.security.core.userdetails.User: org.springframework.security.core.userdetails.User$UserBuilder withUsername(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.StringTokenizer: java.lang.String nextToken()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource methodMetadataSource(org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>-><org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource: void <init>(java.util.List)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getWorkState()>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void setRootViewName(java.lang.String)>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.net.URI: int needsNormalization(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.io.File: java.lang.String toString()>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.PathPatternParser: boolean isMatchOptionalTrailingSeparator()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$IntArrayNode: long count()>
<org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>-><java.util.Arrays$ArrayList: boolean contains(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.util.Collections$EmptySet: boolean contains(java.lang.Object)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.tomcat.jni.Library: void <init>()>-><org.flywaydb.core.internal.exception.FlywaySqlException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: void close()>-><org.apache.poi.poifs.filesystem.DocumentInputStream: void close()>
<java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext,boolean)>-><org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveZSetOperations opsForZSet(org.springframework.data.redis.serializer.RedisSerializationContext)>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration: void <init>()>
<org.springframework.security.web.server.savedrequest.WebSessionServerRequestCache: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher createDefaultRequestMacher()>-><org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher pathMatchers(org.springframework.http.HttpMethod,java.lang.String[])>
<java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator spliterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String access$000(sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.CodeSource: java.lang.String toString()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: java.lang.String toLowerCase()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.MeteredStream: void reset()>-><sun.net.www.MeteredStream: boolean isMarked()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter: void <init>()>-><java.lang.Object: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setContentNegotiatingViewResolver(org.springframework.web.servlet.view.ContentNegotiatingViewResolver)>
<org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryConfiguration: org.springframework.data.mongodb.core.MongoDatabaseFactorySupport mongoDatabaseFactory(com.mongodb.client.MongoClient,org.springframework.boot.autoconfigure.mongo.MongoProperties)>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: java.lang.String getMongoClientDatabase()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.util.MimeType: void <init>(java.lang.String,java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: int size()>
<org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration: org.springframework.context.support.DefaultLifecycleProcessor defaultLifecycleProcessor(org.springframework.boot.autoconfigure.context.LifecycleProperties)>-><org.springframework.context.support.DefaultLifecycleProcessor: void setTimeoutPerShutdownPhase(long)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider getProvider(java.lang.String,org.springframework.context.ApplicationContext)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.net.InetAddressContainer: void <init>()>-><java.lang.Object: void <init>()>
<java.net.URI: java.net.URI normalize(java.net.URI)>-><java.net.URI: java.lang.String normalize(java.lang.String)>
<java.net.HttpURLConnection: void <init>(java.net.URL)>-><java.net.URLConnection: void <init>(java.net.URL)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.ByteChunk: byte[] getBuffer()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.db2.DB2DatabaseType: java.lang.String getName()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ExternSheetRecord: java.lang.String toString()>
<org.springframework.web.util.pattern.InternalPathPatternParser: void pushPathElement(org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.InternalPathPatternParser: void resetPathElementState()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory redisConnectionFactory(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources)>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce getLettuce()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jackson.JacksonProperties getJacksonPropertiesInstance()>-><org.springframework.boot.autoconfigure.jackson.JacksonProperties: void <init>()>
<org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Pool: void <init>()>-><java.time.Duration: java.time.Duration ofSeconds(long)>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(org.springframework.security.core.userdetails.UserDetails[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void <init>(org.springframework.context.ApplicationEventPublisher)>-><java.util.HashMap: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.info.GitProperties: java.lang.String coerceToEpoch(java.lang.String)>-><java.lang.String: java.lang.String valueOf(long)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.time.Duration getTimeout()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType getContentType()>
<org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration$LocaleCharsetMappingsCustomizer: void <init>(org.springframework.boot.web.servlet.server.Encoding)>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.IntPipeline$9$1: void begin(long)>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.util.AbstractSet: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration$AuthenticationManagerDelegator: void <init>(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.Byte: java.lang.Byte valueOf(byte)>
<java.io.FilterInputStream: void mark(int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void mark(int)>
<org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<io.lettuce.core.TimeoutOptions$Builder: io.lettuce.core.TimeoutOptions$Builder timeoutCommands()>-><io.lettuce.core.TimeoutOptions$Builder: io.lettuce.core.TimeoutOptions$Builder timeoutCommands(boolean)>
<org.javaboy.vhr.model.Politicsstatus: void setName(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.util.Base64: java.util.Base64$Encoder getEncoder()>
<org.springframework.boot.autoconfigure.mongo.MongoProperties: java.lang.String getMongoClientDatabase()>-><com.mongodb.ConnectionString: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.HttpClient: void closeServer()>
<org.springframework.security.web.util.matcher.OrRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getArgumentResolvers()>-><java.util.ArrayList: void <init>()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determineUsername()>-><org.springframework.boot.jdbc.EmbeddedDatabaseConnection: boolean isEmbedded(java.lang.String,java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setTransactionTemplate(org.springframework.transaction.support.TransactionTemplate)>
<java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.SpinedBuffer$1Splitr: int characteristics()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setCharacterEncodingFilter(org.springframework.web.filter.CharacterEncodingFilter)>
<sun.net.www.protocol.https.HttpsClient: void closeIdleConnection()>-><sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache: org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel getChannel()>
<org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory tomcatReactiveWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: java.util.Collection getTomcatContextCustomizers()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List replaceVendorLocations(java.util.List,org.springframework.boot.jdbc.DatabaseDriver)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo parseUrl(java.lang.String)>
<org.apache.tomcat.jni.Library: void <init>()>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><java.io.PushbackInputStream: int available()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.BufferedInputStream: void close()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.PathMatchConfigurer: org.springframework.util.PathMatcher getPathMatcherOrDefault()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: java.net.PasswordAuthentication privilegedRequestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$StatViewServlet: java.lang.String getUrlPattern()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void setSentinels(java.lang.Iterable)>-><java.util.HashSet: void clear()>
<sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<java.lang.Object: java.lang.String toString()>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.security.config.web.server.ServerHttpSecurity: void <init>()>-><java.util.ArrayList: void <init>()>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>-><java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><sun.net.www.ParseUtil: java.net.URI createURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.Object instantiate(java.lang.String,java.lang.ClassLoader)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$AbstractConcNode: java.util.stream.Node getChild(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<javax.security.auth.Policy$1: java.lang.Object run()>-><javax.security.auth.Policy$1: java.lang.String run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setPropertySourcesPlaceholderConfigurer(org.springframework.context.support.PropertySourcesPlaceholderConfigurer)>
<java.util.GregorianCalendar: int computeFields(int,int)>-><java.util.SimpleTimeZone: int getRawOffset()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.ObjectOutputStream$BlockDataOutputStream: void write(byte[],int,int)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean)>-><sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.net.HttpRetryException: void <init>(java.lang.String,int)>-><java.io.IOException: void <init>(java.lang.String)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.KeepAliveCleanerEntry: sun.net.www.http.KeepAliveStream getKeepAliveStream()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <init>(boolean,java.util.Collection)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDefaultAuthenticationEventPublisher(org.springframework.security.authentication.DefaultAuthenticationEventPublisher)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,org.springframework.http.MediaType[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>-><java.io.FilterInputStream: void close()>
<reactor.core.publisher.Operators: void onNextDropped(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>-><java.util.SimpleTimeZone: int getDSTSavings()>
<java.net.AbstractPlainSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.AbstractPlainSocketImpl: void close()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.apache.catalina.connector.Response: java.lang.String getCharacterEncoding()>-><org.apache.catalina.connector.Response: org.apache.catalina.Context getContext()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.database.sqlserver.SQLServerDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void setSentinels(java.lang.Iterable)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.lang.String: void <init>(char[])>
<org.javaboy.vhr.config.CustomFilterInvocationSecurityMetadataSource: java.util.Collection getAttributes(java.lang.Object)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: org.springframework.boot.autoconfigure.web.format.DateTimeFormatters dateTimeFormat(java.lang.String)>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: boolean isIsoOffset(java.lang.String)>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: void updateHeaderValue()>-><java.lang.StringBuilder: void <init>()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity anonymous(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void <init>()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform get()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object,java.lang.Throwable)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: void init(org.springframework.security.config.annotation.SecurityBuilder)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$EmptySpliterator: int characteristics()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.WriteAccessRecord: java.lang.String toString()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: int indexOf(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<java.util.jar.Manifest$FastInputStream: void fill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.nio.cs.StreamDecoder: int readBytes()>-><org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: int read(byte[],int,int)>
<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.io.FilterInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String trimPrefix(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.Address: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl getSsl()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.Permissions: java.util.Enumeration elements()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: void <init>()>-><java.util.LinkedHashSet: void <init>()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: java.util.Iterator multiValueIterator(java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<sun.net.www.protocol.http.HttpURLConnection$7: java.net.ProxySelector run()>-><java.net.ProxySelector: java.net.ProxySelector getDefault()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator spliterator()>
<org.apache.catalina.connector.ResponseFacade: boolean isFinished()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: org.springframework.security.config.annotation.rsocket.RSocketSecurity rsocketSecurity(org.springframework.context.ApplicationContext)>-><org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: org.springframework.security.authentication.ReactiveAuthenticationManager authenticationManager()>
<org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy: void <init>()>-><org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy$NullEventPublisher: void <init>()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$3(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.apache.catalina.connector.CoyoteWriter: void flush()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setLocalContainerEntityManagerFactoryBean(org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<org.springframework.aop.framework.ProxyFactoryBean: void <init>()>-><org.springframework.aop.framework.ProxyCreatorSupport: void <init>()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: void <init>()>-><javax.management.AttributeList: void <init>()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><java.time.Duration: boolean isZero()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.net.www.protocol.http.HttpURLConnection$10: java.lang.Object run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration: java.lang.Object createDataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,java.lang.Class)>-><org.springframework.boot.jdbc.DataSourceBuilder: javax.sql.DataSource build()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: javax.sql.DataSource configureDataSource(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,javax.sql.DataSource,javax.sql.DataSource)>-><org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration dataSource(java.lang.String,java.lang.String,java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: int characteristics()>
<java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: void <init>(javax.sql.DataSource)>
<sun.net.www.MeteredStream: void close()>-><java.io.ByteArrayInputStream: void close()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>()>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.security.MessageDigest: void update(byte[])>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration: void <init>()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.BasicAuthentication: boolean supportsPreemptiveAuthorization()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection$10: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$10: java.io.IOException run()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Package: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.format.support.FormattingConversionService mvcConversionService()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object resolveReference(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.beans.FeatureDescriptor: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: void <init>()>-><java.lang.Object: void <init>()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>-><java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.SliceOps$1: java.util.Spliterator unorderedSkipLimitSpliterator(java.util.Spliterator,long,long,long)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.format.support.FormattingConversionService mvcConversionService()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Format: java.lang.String getDate()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><java.util.Vector: int size()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner$1: java.lang.Integer run()>-><sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<sun.util.logging.PlatformLogger: void fine(java.lang.String)>-><sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
<reactor.core.publisher.Operators: void onDiscard(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><com.rabbitmq.client.impl.TruncatedInputStream: int read()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.flywaydb.core.internal.database.oracle.OracleDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.lang.Math: int min(int,int)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Vector: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder entityManagerFactoryBuilder(org.springframework.orm.jpa.JpaVendorAdapter,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder: void <init>(org.springframework.orm.jpa.JpaVendorAdapter,java.util.Map,org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.io.FilterOutputStream: void flush()>-><sun.net.httpserver.SSLStreams$OutputStream: void flush()>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(javax.servlet.http.HttpServletRequest)>-><org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.net.URI: void maybeAddLeadingDot(char[],int[])>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void addMapping(java.lang.String,java.lang.Class)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.data.redis.connection.RedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.boot.autoconfigure.cache.CacheProperties: java.util.List getCacheNames()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.SequenceInputStream: int read(byte[],int,int)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><org.springframework.web.util.pattern.PatternParseException: void <init>(int,char[],org.springframework.web.util.pattern.PatternParseException$PatternMessage,java.lang.Object[])>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><com.rabbitmq.client.impl.nio.SslEngineByteBufferOutputStream: void write(int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source asInt(java.util.function.Function)>
<java.util.Properties: void loadFromXML(java.io.InputStream)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.PermitAllSupport: void permitAll(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher[])>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.ArrayList: void <init>()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.Proxy: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String parseVirtualHost(java.lang.String)>-><java.lang.String: int indexOf(int)>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: int length()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.util.Base64$Decoder: byte[] decode(java.lang.String)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.User: java.util.SortedSet sortAuthorities(java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.Spliterators$IntArraySpliterator: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$IntArraySpliterator: boolean tryAdvance(java.util.function.IntConsumer)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration: org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver conventionErrorViewResolver()>-><org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.web.WebProperties$Resources)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer: java.lang.Long getTimeout()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.lang.String detectFallbackUser(java.lang.String)>-><org.flywaydb.core.internal.util.StringUtils: boolean hasText(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.IdentityHashMap$KeySpliterator: int characteristics()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void setMaxAge(java.time.Duration)>-><org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void updateDelegate()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setSecurityFilterChain(org.springframework.security.web.SecurityFilterChain)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType getContentType()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.FilterInputStream: void mark(int)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.savedrequest.RequestCacheAwareFilter: void <init>(org.springframework.security.web.savedrequest.RequestCache)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$2(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.apache.catalina.connector.CoyoteWriter: void write(java.lang.String)>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void forEach(java.lang.Object)>
<org.springframework.boot.info.GitProperties: java.lang.String coerceToEpoch(java.lang.String)>-><java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.Map getDefaultMediaTypes()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>-><java.lang.Math: long min(long,long)>
<org.springframework.util.DefaultPropertiesPersister: void load(java.util.Properties,java.io.InputStream)>-><java.util.Properties: void load(java.io.InputStream)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void info(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.javaboy.vhr.model.JobLevel: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<sun.net.ProgressSource: void beginTracking()>-><sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfDouble spliterator()>-><java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: void <init>(java.util.stream.Node$OfDouble)>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.PathPatternParser: boolean isCaseSensitive()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String)>-><java.lang.String: int length()>
<org.springframework.security.web.server.authentication.logout.LogoutWebFilter: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.io.PushbackInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>-><sun.net.www.MessageHeader: java.lang.String[] access$100(sun.net.www.MessageHeader)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setType(java.lang.Class)>
<org.springframework.cache.support.NoOpCacheManager: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>(int)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><java.text.MessageFormat: int hashCode()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.lang.String: int indexOf(java.lang.String,int)>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.x509.X500Name: sun.security.util.DerValue findMostSpecificAttribute(sun.security.util.ObjectIdentifier)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getUndoSqlMigrationPrefix()>
<javax.security.auth.Policy$3: java.lang.Void run()>-><javax.security.auth.Policy: boolean access$002(boolean)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$EmptySpliterator: long estimateSize()>
<java.io.BufferedInputStream: void fill()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.io.PushbackInputStream: void close()>-><java.io.InputStream: void close()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><java.util.AbstractCollection: java.lang.Object[] toArray()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.LinkedList$LLSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><org.springframework.core.io.support.ResourcePropertiesPersister: void loadFromXml(java.util.Properties,java.io.InputStream)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder roles(java.lang.String[])>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.stream.SliceOps: java.util.function.IntFunction access$100()>-><java.util.stream.SliceOps: java.util.function.IntFunction castingArray()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>-><java.lang.String: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setRequestMappingHandlerAdapter(org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter)>
<reactor.util.function.Tuple3: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.springframework.jdbc.support.JdbcUtils: java.lang.Object extractDatabaseMetaData(javax.sql.DataSource,org.springframework.jdbc.support.DatabaseMetaDataCallback)>-><org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnection()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.net.SocketInputStream: void close()>-><java.net.AbstractPlainSocketImpl: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: long estimateSize()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.net.ProgressSource: java.lang.String toString()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.security.web.header.writers.XContentTypeOptionsHeaderWriter: void <init>()>-><org.springframework.security.web.header.writers.StaticHeadersWriter: void <init>(java.lang.String,java.lang.String[])>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object)>-><org.apache.juli.logging.DirectJDKLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.HeapCharBuffer: char get()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setAccessDecisionManager(org.springframework.security.access.AccessDecisionManager)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$LongArraySpliterator: int characteristics()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setFlywaySchemaManagementProvider(org.springframework.boot.autoconfigure.flyway.FlywaySchemaManagementProvider)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.bind.support.ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer(org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.Class)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: void finished()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.SelectionRecord: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration: org.springframework.boot.autoconfigure.http.HttpMessageConverters messageConverters(org.springframework.beans.factory.ObjectProvider)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler getDefaultAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.AccessDeniedHandlerImpl: void <init>()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Vector$1: java.lang.Object nextElement()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.access.expression.AbstractSecurityExpressionHandler: void setPermissionEvaluator(org.springframework.security.access.PermissionEvaluator)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter: void setResolveHiddenInputs(java.util.function.Function)>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.Integer getLockRetryCount()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.security.web.access.RequestMatcherDelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><org.springframework.util.Assert: void notEmpty(java.util.Map,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<java.util.zip.ZipFile: void close()>-><sun.net.www.MeteredStream: void close()>
<java.util.Collections$SetFromMap: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object remove(java.lang.Object)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setDispatchTraceRequest(boolean)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder cbor()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder: org.springframework.core.task.AsyncTaskExecutor access$500(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<org.springframework.security.config.web.server.ServerHttpSecurity: org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec logout()>-><org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.beans.CachedIntrospectionResults: boolean isClassLoaderAccepted(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationToken: void <init>(java.lang.Integer,java.lang.Object,java.util.Collection)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher pathMatchers(org.springframework.http.HttpMethod,java.lang.String[])>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: void <init>(java.util.List)>
<sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap: void putAll(java.util.Map)>
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>-><java.io.PrintStream: void flush()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.HttpURLConnection: int getResponseCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><java.io.InputStream: void close()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.http.MediaType: org.springframework.http.MediaType valueOf(java.lang.String)>-><org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.concurrent.ConcurrentSkipListMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.PathPatternParser: boolean isCaseSensitive()>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setInitializationMode(org.springframework.boot.jdbc.DataSourceInitializationMode)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter: void <init>()>-><org.springframework.web.filter.CharacterEncodingFilter: void <init>()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$FixedNodeBuilder: void end()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.io.DataOutputStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.lang.Object: void notifyAll()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>-><java.util.stream.SliceOps$1$1: void <init>(java.util.stream.SliceOps$1,java.util.stream.Sink)>
<java.io.FilterInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<sun.security.util.HostnameChecker: sun.security.x509.X500Name getSubjectX500Name(java.security.cert.X509Certificate)>-><java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setRequestedChannelMax(int)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.h2.H2DatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter: org.springframework.security.web.server.header.ServerHttpHeadersWriter createDelegate(org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy)>-><org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: java.lang.String getPolicy()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.Object next()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator spliterator()>
<org.springframework.boot.task.TaskExecutorBuilder: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder password(java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.util.ArrayList: void <init>()>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.MeteredStream: int read()>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>-><java.lang.Object: void <init>()>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: void <init>(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.charset.CoderResult: boolean isUnderflow()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: java.lang.String[] getPackagesToScan()>-><org.springframework.boot.autoconfigure.domain.EntityScanPackages: java.util.List getPackageNames()>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>-><org.springframework.web.util.ContentCachingRequestWrapper: java.io.ByteArrayOutputStream access$100(org.springframework.web.util.ContentCachingRequestWrapper)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setDataPassword(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: void <init>()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.Object instantiate(java.lang.String,java.lang.ClassLoader)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.Streams$ConcatSpliterator: long estimateSize()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.Nodes$IntFixedNodeBuilder: void accept(int)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: void <init>(int,char[],boolean,char[],char)>-><org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Character$Subset: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.RegexPathElement: int getScore()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<java.util.zip.InflaterInputStream: void fill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: void <init>(java.util.Spliterator,long,long)>-><java.util.concurrent.atomic.AtomicLong: void <init>(long)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.info.InfoProperties: void <init>(java.util.Properties)>-><org.springframework.boot.info.InfoProperties: java.util.Properties copy(java.util.Properties)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.web.util.pattern.WildcardTheRestPathElement: void <init>(int,char)>
<org.springframework.cache.support.NoOpCacheManager: void <init>()>-><java.util.LinkedHashSet: void <init>(int)>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity csrf(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void <init>(org.springframework.context.ApplicationContext)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <init>()>-><org.springframework.security.web.server.csrf.WebSessionServerCsrfTokenRepository: void <init>()>
<java.io.DataInputStream: short readShort()>-><sun.net.www.http.ChunkedInputStream: int read()>
<sun.net.www.HeaderParser: int findInt(java.lang.String,int)>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: org.springframework.security.web.header.HeaderWriterFilter createHeaderWriterFilter()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.InternalResourceViewResolver defaultViewResolver()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$View: java.lang.String getSuffix()>
<java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><java.lang.Character: java.lang.String toString(char)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void grow()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configurePathMatch(org.springframework.web.servlet.config.annotation.PathMatchConfigurer)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.ZonedDateTime: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder clientResources(io.lettuce.core.resource.ClientResources)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientResources(io.lettuce.core.resource.ClientResources)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactory(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder packages(java.lang.String[])>
<org.springframework.boot.web.servlet.filter.OrderedFormContentFilter: void <init>()>-><org.springframework.web.filter.FormContentFilter: void <init>()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.AbstractTask: void onCompletion(java.util.concurrent.CountedCompleter)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.database.mysql.mariadb.MariaDBDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.ArrayList: boolean addAll(int,java.util.Collection)>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.RegexPathElement: int getNormalizedLength()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler configure(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler)>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.util.ClassUtils: java.lang.Object instantiate(java.lang.String,java.lang.ClassLoader)>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases: org.springframework.boot.context.properties.source.ConfigurationPropertyName getNameForAlias(org.springframework.boot.context.properties.source.ConfigurationPropertyName)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: void <init>(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder,javax.sql.DataSource)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><sun.net.www.protocol.http.HttpURLConnection$2: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<java.util.AbstractSet: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext build()>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext: void <init>(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.DefaultRedisSerializationContext$1)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractPipeline: void copyIntoWithCancel(java.util.stream.Sink,java.util.Spliterator)>
<org.flywaydb.core.internal.database.db2.DB2DatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties$Jwt: java.lang.String readPublicKey()>-><org.springframework.boot.context.properties.source.InvalidConfigurationPropertyValueException: void <init>(java.lang.String,java.lang.Object,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.Provider$Service: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setCleanOnValidationError(boolean)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Vector$VectorSpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: org.springframework.boot.info.BuildProperties buildProperties()>-><org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>
<java.io.BufferedInputStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: void <init>()>-><java.time.Duration: java.time.Duration ofMillis(long)>
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setDeferredResultInterceptors(java.util.List)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: void setPackagesToScan(java.lang.String[])>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.SpinedBuffer$OfDouble: java.lang.String toString()>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$DoubleArraySpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer initializeUserDetailsBeanManagerConfigurer(org.springframework.context.ApplicationContext)>-><org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer: void <init>(org.springframework.context.ApplicationContext)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.security.util.HostnameChecker: boolean isIpAddress(java.lang.String)>-><sun.net.util.IPAddressUtil: boolean isIPv6LiteralAddress(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: void <init>(org.springframework.http.MediaType[])>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map getHeaders()>-><sun.net.www.MessageHeader: java.util.Map getHeaders(java.lang.String[])>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Collections$2: long estimateSize()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration: org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriberRegistrar securityReactorContextSubscriberRegistrar()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.text.MessageFormat: boolean equals(java.lang.Object)>-><java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>-><sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.info.ProjectInfoProperties)>-><org.springframework.boot.autoconfigure.info.ProjectInfoProperties: void <init>()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity sessionManagement(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.SecurityConfigurerAdapter getOrApply(org.springframework.security.config.annotation.SecurityConfigurerAdapter)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isCleanDisabled()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.ChunkedInputStream: void ensureRawAvailable(int)>
<sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.bind.Binder: java.lang.Object bindOrCreate(java.lang.String,org.springframework.boot.context.properties.bind.Bindable)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: org.springframework.boot.context.properties.source.ConfigurationPropertyName of(java.lang.CharSequence)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicy()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<io.netty.util.internal.DefaultPriorityQueue: boolean removeTyped(io.netty.util.internal.PriorityQueueNode)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.security.web.header.writers.StaticHeadersWriter: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutFilter createLogoutFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.logout.LogoutFilter: void <init>(org.springframework.security.web.authentication.logout.LogoutSuccessHandler,org.springframework.security.web.authentication.logout.LogoutHandler[])>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.javaboy.vhr.model.Politicsstatus: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManagerBean()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.io.FileInputStream: void close()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.bind.support.ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer(org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: org.springframework.validation.MessageCodesResolver getMessageCodesResolver()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.javaboy.vhr.model.Nation: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder shutdownTimeout(java.time.Duration)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$1: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>
<org.springframework.web.servlet.config.annotation.CorsRegistry: java.util.Map getCorsConfigurations()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<sun.net.www.http.KeepAliveStream: void close()>-><java.lang.Math: long min(long,long)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: long getContentLengthLong()>-><java.net.URLConnection: long getContentLengthLong()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><java.io.FileInputStream: void close()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder: io.lettuce.core.cluster.ClusterTopologyRefreshOptions build()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.commons.math3.exception.MathArithmeticException: java.lang.String getMessage()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.ProtocolException: void <init>(java.lang.String)>
<org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.context.support.MessageSourceAccessor: void <init>(org.springframework.context.MessageSource)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter: void <init>(org.springframework.http.MediaType)>-><org.springframework.http.converter.AbstractHttpMessageConverter: void <init>(org.springframework.http.MediaType)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void reorderXmlConvertersToEnd(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.apache.catalina.connector.ResponseFacade: java.io.PrintWriter getWriter()>-><org.apache.catalina.connector.Response: java.io.PrintWriter getWriter()>
<java.util.stream.SliceOps$SliceTask: void <init>(java.util.stream.SliceOps$SliceTask,java.util.Spliterator)>-><java.util.stream.AbstractShortCircuitTask: void <init>(java.util.stream.AbstractShortCircuitTask,java.util.Spliterator)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy createDefaultSessionFixationProtectionStrategy()>-><org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy: void <init>()>
<io.lettuce.core.SocketOptions$Builder: io.lettuce.core.SocketOptions$Builder connectTimeout(java.time.Duration)>-><io.lettuce.core.internal.LettuceAssert: void notNull(java.lang.Object,java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration: org.springframework.web.server.adapter.ForwardedHeaderTransformer forwardedHeaderTransformer()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>
<org.springframework.cache.concurrent.ConcurrentMapCache: void <init>(java.lang.String,java.util.concurrent.ConcurrentMap,boolean,org.springframework.core.serializer.support.SerializationDelegate)>-><org.springframework.cache.support.AbstractValueAdaptingCache: void <init>(boolean)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode: void forEach(java.lang.Object)>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity sessionManagement(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void <init>()>
<org.springframework.web.util.pattern.InternalPathPatternParser: void pushPathElement(org.springframework.web.util.pattern.PathElement)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext,boolean)>-><org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveHyperLogLogOperations opsForHyperLogLog(org.springframework.data.redis.serializer.RedisSerializationContext)>
<org.springframework.security.web.header.writers.StaticHeadersWriter: void <init>(java.lang.String,java.lang.String[])>-><org.springframework.security.web.header.Header: void <init>(java.lang.String,java.lang.String[])>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration: org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$StringOrNumberToMigrationVersionConverter stringOrNumberMigrationVersionConverter()>
<java.text.AttributeEntry: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter: void <init>()>-><org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter: org.springframework.security.web.server.header.ServerHttpHeadersWriter createDelegate(org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><com.fasterxml.jackson.core.JsonParseException: java.lang.String getMessage()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.HttpsClient: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>-><org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><java.net.SocketInputStream: void close()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void end()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactory: void <init>()>-><org.springframework.boot.web.server.AbstractConfigurableWebServerFactory: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: long estimateSize()>
<java.io.FilterInputStream: void reset()>-><java.io.FilterInputStream: void reset()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedCollection: int size()>
<org.apache.tomcat.util.buf.CharChunk: void <init>(int)>-><org.apache.tomcat.util.buf.AbstractChunk: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.stream.StreamSpliterators$ArrayBuffer: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer: void reset()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>
<org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.header.CacheControlServerHttpHeadersWriter: void <init>()>
<org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext,boolean)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.config.annotation.web.configuration.AutowiredWebSecurityConfigurersIgnoreParents: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.lang.Object: void <init>()>
<javax.security.auth.SubjectDomainCombiner$3: void <init>(javax.security.auth.SubjectDomainCombiner,javax.security.auth.Subject,java.security.CodeSource)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: java.lang.String getOrDeducePassword(org.springframework.boot.autoconfigure.security.SecurityProperties$User,org.springframework.security.crypto.password.PasswordEncoder)>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void info(java.lang.Object)>
<org.springframework.web.util.pattern.InternalPathPatternParser: void recordCapturedVariable(int,java.lang.String)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void addFormatters(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.number.money.CurrencyUnitFormatter: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration: org.springframework.boot.web.servlet.filter.OrderedFormContentFilter formContentFilter()>-><org.springframework.boot.web.servlet.filter.OrderedFormContentFilter: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: org.springframework.validation.MessageCodesResolver getMessageCodesResolver()>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: org.springframework.validation.MessageCodesResolver getMessageCodesResolver()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.Area3DPtg: java.lang.String toString()>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: int length()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><java.lang.Double: double doubleValue()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: java.lang.String getHostName()>
<java.time.ZoneId: java.time.ZoneId systemDefault()>-><java.util.TimeZone: java.time.ZoneId toZoneId()>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.security.access.expression.method.ExpressionBasedPostInvocationAdvice: void <init>(org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.web.servlet.FrameworkServlet: void <init>()>-><java.util.ArrayList: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: long estimateSize()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor configure(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicy()>-><javax.security.auth.AuthPermission: void <init>(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory: void <init>(org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>-><java.lang.Object: void <init>()>
<java.io.FilterInputStream: int read()>-><sun.net.www.MeteredStream: int read()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>-><javax.management.RuntimeOperationsException: java.lang.Throwable getCause()>
<org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveStreamOperations opsForStream(org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.data.redis.hash.ObjectHashMapper: org.springframework.data.redis.hash.ObjectHashMapper getSharedInstance()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutFilter createLogoutFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.logout.LogoutFilter: void setLogoutRequestMatcher(org.springframework.security.web.util.matcher.RequestMatcher)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.cache.concurrent.ConcurrentMapCacheManager: org.springframework.cache.Cache createConcurrentMapCache(java.lang.String)>-><org.springframework.cache.concurrent.ConcurrentMapCacheManager: boolean isAllowNullValues()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.ZoneId: java.lang.String toString()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List resolveLocations(java.util.List)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List replaceVendorLocations(java.util.List,org.springframework.boot.jdbc.DatabaseDriver)>
<java.util.AbstractCollection: java.lang.Object[] toArray()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: boolean hasNext()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.web.servlet.support.ErrorPageFilterConfiguration: void <init>()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder awaitTermination(boolean)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer: org.springframework.boot.web.client.RestTemplateBuilder addCustomizers(org.springframework.boot.web.client.RestTemplateBuilder,java.util.List,java.util.function.BiFunction)>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void checkLocationExists(javax.sql.DataSource,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.core.io.ResourceLoader)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: void <init>(javax.sql.DataSource)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setInternalResourceViewResolver(org.springframework.web.servlet.view.InternalResourceViewResolver)>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void <init>()>-><org.springframework.security.core.SpringSecurityMessageSource: org.springframework.context.support.MessageSourceAccessor getAccessor()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void forEach(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: void <init>()>-><java.time.Duration: java.time.Duration ofSeconds(long)>
<reactor.util.function.Tuple4: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutFilter createLogoutFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$loginFilter$1(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.apache.catalina.connector.ResponseFacade: void setContentType(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity exceptionHandling(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: void <init>()>
<org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String getAttribute()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.security.web.server.header.ContentSecurityPolicyServerHttpHeadersWriter: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setEnabled(boolean)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: void <init>()>-><io.lettuce.core.cluster.ClusterClientOptions$Builder: io.lettuce.core.ClientOptions build()>
<org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.web.util.pattern.SeparatorPathElement: void <init>(int,char)>
<com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$WebStatFilter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair: org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair fromSerializer(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <init>(org.springframework.data.redis.serializer.RedisSerializer)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.session.InvalidSessionStrategy getInvalidSessionStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: void justRead(long)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.PathMatchConfigurer: org.springframework.web.util.UrlPathHelper getUrlPathHelperOrDefault()>-><org.springframework.web.util.UrlPathHelper: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Short: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.bind.support.ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer(org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>
<org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor: void <init>(org.mybatis.spring.SqlSessionTemplate)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext,boolean)>-><org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveSetOperations opsForSet(org.springframework.data.redis.serializer.RedisSerializationContext)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.WindowOneRecord: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.util.Spliterator trySplit()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><sun.net.www.MeteredStream: void justRead(long)>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.stream.ReferencePipeline$7$1: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setHazelcastInstance(com.hazelcast.core.HazelcastInstance)>
<org.springframework.data.redis.core.ReactiveStringRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory)>-><org.springframework.data.redis.core.ReactiveStringRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: org.springframework.security.web.server.WebFilterChainProxy springSecurityWebFilterChainFilter()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void parseHostAndPort(java.lang.String,boolean)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: boolean determineSslEnabled(boolean)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void extendMessageConverters(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.Vector: int size()>
<java.util.AbstractSet: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setDateFormat(java.lang.String)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.apache.tomcat.util.buf.UEncoder: void urlEncode(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: int getStart()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping welcomePageHandlerMapping(org.springframework.context.ApplicationContext,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.Map getCorsConfigurations()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: org.springframework.boot.jdbc.DatabaseDriver getDatabaseDriver()>-><java.lang.IllegalStateException: void <init>(java.lang.Throwable)>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<org.springframework.data.redis.serializer.RedisSerializer: org.springframework.data.redis.serializer.RedisSerializer java(java.lang.ClassLoader)>-><org.springframework.data.redis.serializer.JdkSerializationRedisSerializer: void <init>(java.lang.ClassLoader)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void forEachRemaining(java.util.function.Consumer)>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><io.netty.channel.nio.NioEventLoop: void wakeup(boolean)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.json.MappingJackson2HttpMessageConverter: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>
<org.springframework.boot.autoconfigure.context.LifecycleProperties: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.httpserver.SSLStreams$OutputStream: void write(byte[],int,int)>
<org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration: org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor(org.springframework.core.env.Environment)>-><org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor: void <init>()>
<sun.net.www.http.KeepAliveStreamCleaner: boolean offer(sun.net.www.http.KeepAliveCleanerEntry)>-><java.util.LinkedList: boolean offer(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfLong: void <init>(java.util.stream.Node$OfLong)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determineUsername()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determineUrl()>
<org.apache.catalina.connector.Response: java.io.PrintWriter getWriter()>-><org.apache.catalina.connector.Response: java.lang.String getCharacterEncoding()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Integer: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: void <init>(javax.sql.DataSource)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void connect()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.net.URL: java.lang.String getProtocol()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.MergeCellsRecord: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: boolean isAprAvailable()>-><org.apache.catalina.core.AprStatus: boolean isAprAvailable()>
<org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration javaMigrations(org.flywaydb.core.api.migration.JavaMigration[])>-><org.flywaydb.core.api.configuration.ClassicConfiguration: void setJavaMigrations(org.flywaydb.core.api.migration.JavaMigration[])>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Node: int getChildCount()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: org.springframework.web.filter.CharacterEncodingFilter characterEncodingFilter()>
<sun.net.www.MeteredStream: void finalize()>-><sun.net.ProgressSource: void close()>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$StatViewServlet: java.lang.String getLoginUsername()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.config.web.server.ServerHttpSecurity$LoginPageSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><java.lang.Object: void <init>()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: int getPort()>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,long)>-><sun.net.ProgressMonitor: int getProgressUpdateThreshold()>
<java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration: void <init>()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addFormatters(org.springframework.format.FormatterRegistry)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.FindOps$FindSink: boolean cancellationRequested()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: int getLength()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.WildcardPathElement: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.flywaydb.core.api.callback.Event: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$10: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.IOException,java.lang.Object[])>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations$Generic: io.r2dbc.spi.ConnectionFactory connectionFactory(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.net.URLConnection: java.net.URL getURL()>
<org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession obtainSession()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.Provider$UString: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.data.redis.connection.RedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><java.util.ArrayList: boolean isEmpty()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createDefaultSavedRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: void <init>()>
<org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>
<sun.net.www.http.HttpClient: void openServer()>-><java.net.Proxy: java.net.Proxy$Type type()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void set(int,java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void grow()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.util.AbstractCollection: java.lang.String toString()>
<org.flywaydb.core.internal.database.mysql.MySQLDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.ArrayList$SubList$1: void add(java.lang.Object)>-><java.util.ArrayList$SubList: void add(int,java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void setServlet(javax.servlet.Servlet)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.net.URL: int getPort()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.time.Clock: java.time.Clock systemDefaultZone()>-><java.time.Clock$SystemClock: void <init>(java.time.ZoneId)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: org.springframework.web.servlet.DispatcherServlet dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)>-><org.springframework.web.servlet.FrameworkServlet: void setEnableLoggingRequestDetails(boolean)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.context.properties.PropertyMapper$Source: void to(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determinePassword()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determineUrl()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.format.support.FormattingConversionService mvcConversionService()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Format: java.lang.String getTime()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration)>-><java.util.Properties: void <init>()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>
<org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration: org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriberRegistrar securityReactorContextSubscriberRegistrar()>-><org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriberRegistrar: void <init>()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>-><java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.CalcCountRecord: java.lang.String toString()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.apache.tomcat.jni.Library: void <init>()>-><javax.xml.stream.FactoryConfigurationError: java.lang.String getMessage()>
<org.springframework.core.annotation.AnnotationAwareOrderComparator: void sortIfNecessary(java.lang.Object)>-><org.springframework.core.annotation.AnnotationAwareOrderComparator: void sort(java.util.List)>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor securityMethodInterceptor(org.springframework.security.access.method.AbstractMethodSecurityMetadataSource,org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>-><org.springframework.security.access.expression.method.ExpressionBasedPostInvocationAdvice: void <init>(org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: java.lang.String getHostString()>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: org.springframework.security.web.reactive.result.view.CsrfRequestDataValueProcessor requestDataValueProcessor()>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: void <init>(org.springframework.http.MediaType[])>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurations(java.util.Map)>-><org.springframework.web.cors.UrlBasedCorsConfigurationSource: void <init>()>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>-><sun.net.www.MessageHeader: java.lang.String[] access$200(sun.net.www.MessageHeader)>
<org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: void <init>()>-><java.util.ArrayList: void <init>()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: void finer(java.lang.String)>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: org.springframework.security.core.userdetails.MapReactiveUserDetailsService reactiveUserDetailsService(org.springframework.boot.autoconfigure.security.SecurityProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(org.springframework.security.core.userdetails.UserDetails[])>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.lang.Object next()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.util.Map$Entry next()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$RangeIntSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<java.net.HttpConnectSocketImpl: int getPort()>-><java.net.SocketImpl: int getPort()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>-><java.util.ArrayList: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String reducePath(java.lang.String)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: org.springframework.security.authentication.ReactiveAuthenticationManager authenticationManager()>-><org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void setPasswordEncoder(org.springframework.security.crypto.password.PasswordEncoder)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int indexOf(int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.util.Map getPlaceholders()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: org.springframework.boot.info.BuildProperties buildProperties()>-><org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build: java.nio.charset.Charset getEncoding()>
<org.springframework.http.InvalidMediaTypeException: void <init>(org.springframework.util.InvalidMimeTypeException)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.String: char charAt(int)>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Pool: int getMaxSize()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><sun.net.www.protocol.http.HttpURLConnection$12: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String,int,java.net.URL)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration: org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar springApplicationAdminRegistrar(org.springframework.beans.factory.ObjectProvider,org.springframework.core.env.Environment)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: java.lang.String substring(int)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.JsonMappingException: void <init>(java.io.Closeable,java.lang.String)>-><com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.impl.recovery.AutorecoveringChannel: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.security.web.header.writers.StaticHeadersWriter: void <init>(java.lang.String,java.lang.String[])>-><org.springframework.security.web.header.writers.StaticHeadersWriter: void <init>(java.util.List)>
<org.apache.catalina.connector.Response: boolean isAppCommitted()>-><org.apache.catalina.connector.Response: long getContentWritten()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.ByteArrayOutputStream: void write(int)>
<java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<org.springframework.boot.web.servlet.server.DocumentRoot: void <init>(org.apache.commons.logging.Log)>-><java.lang.Object: void <init>()>
<java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.xml.SourceHttpMessageConverter: void <init>()>
<java.io.FilterInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: boolean isReplacement(org.springframework.http.converter.HttpMessageConverter,org.springframework.http.converter.HttpMessageConverter)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskSchedulingProperties$Shutdown: java.time.Duration getAwaitTerminationPeriod()>
<org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter: void <init>()>-><org.springframework.web.filter.OncePerRequestFilter: void <init>()>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext fromSerializer(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair: org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair fromSerializer(org.springframework.data.redis.serializer.RedisSerializer)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.AbstractShortCircuitTask: void setLocalResult(java.lang.Object)>
<org.springframework.security.web.context.NullSecurityContextRepository: void <init>()>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.FilterOutputStream: void close()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$IntIteratorSpliterator: long estimateSize()>
<java.io.FilterInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: org.springframework.security.core.userdetails.MapReactiveUserDetailsService reactiveUserDetailsService(org.springframework.boot.autoconfigure.security.SecurityProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: java.lang.String getOrDeducePassword(org.springframework.boot.autoconfigure.security.SecurityProperties$User,org.springframework.security.crypto.password.PasswordEncoder)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean: void <init>(org.springframework.web.servlet.DispatcherServlet,java.lang.String)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void addUrlMappings(java.lang.String[])>
<java.security.ProtectionDomain$2: boolean getStaticPermissionsField(java.security.ProtectionDomain)>-><java.security.ProtectionDomain: boolean access$200(java.security.ProtectionDomain)>
<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Variable getKey()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<sun.net.www.http.KeepAliveStreamCleaner$1: java.lang.Object run()>-><sun.net.www.http.KeepAliveStreamCleaner$1: java.lang.Integer run()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfDouble: void forEach(java.util.function.Consumer)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$LongArraySpliterator: boolean tryAdvance(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$2(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.apache.catalina.connector.ResponseFacade: void setContentType(java.lang.String)>
<sun.security.util.HostnameChecker: sun.security.x509.X500Name getSubjectX500Name(java.security.cert.X509Certificate)>-><java.security.cert.CertificateParsingException: void <init>()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void info(java.lang.Object)>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler configure(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source asInt(java.util.function.Function)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: java.lang.String[] getPackagesToScan()>-><org.springframework.boot.autoconfigure.AutoConfigurationPackages: java.util.List get(org.springframework.beans.factory.BeanFactory)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object lazyBean(java.lang.Class)>-><org.javaboy.vhr.config.SecurityConfig$1: java.lang.Object postProcess(java.lang.Object)>
<org.springframework.web.servlet.HttpServletBean: void <init>()>-><java.util.HashSet: void <init>(int)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Node$OfInt: void forEach(java.util.function.Consumer)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.info.GitProperties: java.lang.String coerceToEpoch(java.lang.String)>-><java.time.format.DateTimeFormatter: java.lang.Object parse(java.lang.CharSequence,java.time.temporal.TemporalQuery)>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder newSerializationContext(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder hashKey(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>
<java.util.Properties: void loadFromXML(java.io.InputStream)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.security.util.HostnameChecker: sun.security.x509.X500Name getSubjectX500Name(java.security.cert.X509Certificate)>-><sun.security.x509.X500Name: void <init>(byte[])>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$StatViewServlet: java.lang.String getAllow()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.slf4j.event.Level: java.lang.String toString()>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.CaptureVariablePathElement: int getCaptureCount()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder commandTimeout(java.time.Duration)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder commandTimeout(java.time.Duration)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>-><org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setSecurityExpressionHandler(org.springframework.security.access.expression.SecurityExpressionHandler)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getMethod()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher[])>-><org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: sun.net.www.HeaderParser subsequence(int,int)>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1: javax.management.MBeanServer getMBeanServer()>-><org.springframework.jndi.JndiLocatorDelegate: java.lang.Object lookup(java.lang.String,java.lang.Class)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>-><org.apache.tomcat.util.buf.AbstractChunk: int getLimit()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setLocaleResolver(org.springframework.web.servlet.LocaleResolver)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder shutdownTimeout(java.time.Duration)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher: java.lang.String toString()>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.apache.tomcat.jni.Library: boolean initialize(java.lang.String)>-><org.apache.tomcat.jni.Library: java.lang.String aprVersionString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: void customizeConfigurationFromUrl(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceSslClientConfigurationBuilder useSsl()>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL,java.lang.String,int)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: int getDatabase()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.tomcat.jni.Library: boolean initialize(java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.WeakHashMap$EntrySpliterator: int characteristics()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void updateDelegate()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder header(java.lang.String,java.lang.String[])>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.web.servlet.LocaleResolver getLocaleResolver()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.hsqldb.HSQLDBDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<com.rabbitmq.client.impl.ValueWriter: void writeTable(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration: java.lang.String[] getResourceLocations(java.lang.String[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<sun.net.www.protocol.http.HttpURLConnection$11: java.net.InetAddress run()>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.security.web.access.AccessDeniedHandlerImpl: void <init>()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.nio.ByteBuffer: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setSqlMigrationSuffixes(java.util.List)>
<org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource: void <init>(java.util.List)>-><java.util.HashMap: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<java.util.Collections$SetFromMap: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap: void clear()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Object run()>-><sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>
<io.lettuce.core.TimeoutOptions$Builder: io.lettuce.core.TimeoutOptions$Builder connectionTimeout()>-><io.lettuce.core.TimeoutOptions$DefaultTimeoutSource: void <init>(io.lettuce.core.TimeoutOptions$1)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.config.web.server.ServerHttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration$ContextAwareServerHttpSecurity: void <init>(org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration$1)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void setDaemon(boolean)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.CharChunk: int subtract()>
<javax.net.ssl.SSLSocketFactory: java.lang.String getSecurityProperty(java.lang.String)>-><javax.net.ssl.SSLSocketFactory$1: void <init>(java.lang.String)>
<sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.web.util.pattern.InternalPathPatternParser: void recordCapturedVariable(int,java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: void <init>(int,char[],org.springframework.web.util.pattern.PatternParseException$PatternMessage,java.lang.Object[])>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<java.util.Spliterators$EmptySpliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>-><java.util.Spliterators$EmptySpliterator: boolean tryAdvance(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: void setResourceLoader(org.springframework.core.io.ResourceLoader)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig enable()>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: void <init>()>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.security.web.server.savedrequest.WebSessionServerRequestCache: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveHyperLogLogOperations opsForHyperLogLog(org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath: java.lang.String getServletUrlMapping()>-><java.lang.String: boolean endsWith(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Byte: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration: void <init>()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.PrintStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.HashSet: int size()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.security.config.annotation.web.configurers.PermitAllSupport: void permitAll(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher[])>-><org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry$UrlMapping: void <init>(org.springframework.security.web.util.matcher.RequestMatcher,java.util.Collection)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties getR2dbcPropertiesInstance()>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: void setName(java.lang.String)>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.io.FileInputStream: int read(byte[],int,int)>
<java.io.FilterInputStream: void mark(int)>-><com.rabbitmq.client.impl.TruncatedInputStream: void mark(int)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: org.flywaydb.core.Flyway flyway(org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.flywaydb.core.api.configuration.FluentConfiguration: void <init>(java.lang.ClassLoader)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.SpinedBuffer$OfLong$1Splitr: boolean tryAdvance(java.util.function.LongConsumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: void <init>(java.util.List)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.util.function.Supplier)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.util.StringTokenizer: java.lang.String nextToken()>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: java.time.format.DateTimeFormatter formatter(java.lang.String)>-><java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverStyle(java.time.format.ResolverStyle)>
<java.net.URL: int getDefaultPort()>-><sun.net.www.protocol.https.Handler: int getDefaultPort()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder corePoolSize(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.charset.CoderResult: boolean isOverflow()>
<org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy: void <init>(java.lang.String)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration: void <init>()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.data.redis.cache.RedisCacheManager: void <init>(org.springframework.data.redis.cache.RedisCacheWriter,org.springframework.data.redis.cache.RedisCacheConfiguration,java.util.Map,boolean)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.web.context.SecurityContextPersistenceFilter: void <init>(org.springframework.security.web.context.SecurityContextRepository)>-><org.springframework.web.filter.GenericFilterBean: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jackson.JacksonProperties getJacksonPropertiesInstance()>-><org.springframework.boot.autoconfigure.jackson.JacksonProperties: void setPropertyNamingStrategy(java.lang.String)>
<reactor.util.function.Tuple3: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo: int getPort()>-><java.net.URI: int getPort()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.session.SessionManagementFilter: void setInvalidSessionStrategy(org.springframework.security.web.session.InvalidSessionStrategy)>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void addMapping(java.lang.String,java.lang.Class)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.context.annotation.MBeanExportConfiguration: void setupServer(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2: javax.management.MBeanServer getMBeanServer()>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurations(java.util.Map)>-><org.springframework.web.cors.UrlBasedCorsConfigurationSource: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><sun.net.www.protocol.http.HttpURLConnection$10: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.IOException,java.lang.Object[])>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.config.SecurityConfig: void <init>()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientName(java.lang.String)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder clientName(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.session.SessionManagementFilter: void setAuthenticationFailureHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.WebProperties,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory$1: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory,org.springframework.core.ResolvableType,boolean)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity addFilter(javax.servlet.Filter)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.Operators$ScalarSubscription: boolean isEmpty()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform[] values()>-><java.lang.Object: java.lang.Object clone()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getMethod()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><sun.net.www.MeteredStream: void close()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor: void <init>(org.springframework.security.access.method.MethodSecurityMetadataSource,org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice,org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.authentication.DelegatingReactiveAuthenticationManager: void <init>(org.springframework.security.authentication.ReactiveAuthenticationManager[])>-><org.springframework.security.authentication.DelegatingReactiveAuthenticationManager: void <init>(java.util.List)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.InputStream,java.net.CacheRequest)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><sun.net.www.ParseUtil: boolean match(char,long,long)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$IdentityHashMapSpliterator: long estimateSize()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.security.web.access.ExceptionTranslationFilter: void afterPropertiesSet()>
<org.springframework.context.annotation.MBeanExportConfiguration: void setupServer(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>-><org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>
<org.springframework.security.web.access.DelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><org.springframework.util.Assert: void notEmpty(java.util.Map,java.lang.String)>
<java.net.HttpConnectSocketImpl$2: java.lang.Object run()>-><java.net.HttpConnectSocketImpl$2: java.net.Socket run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.String: java.lang.String toString()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.boot.web.client.RestTemplateBuilder: java.util.Set copiedSetOf(java.util.Collection)>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration: void <init>()>
<java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>-><java.lang.StringBuilder: void <init>()>
<org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object,java.lang.Throwable)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>
<javax.security.auth.SubjectDomainCombiner$1: java.lang.Void run()>-><javax.security.auth.SubjectDomainCombiner: sun.security.util.Debug access$100()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity servletApi(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: org.springframework.data.redis.core.ReactiveRedisTemplate reactiveRedisTemplate(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder newSerializationContext()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: java.lang.String determineDatabaseName(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: java.lang.String getName()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.catalina.connector.Response$PrivilegedDoIsEncodable: java.lang.Boolean run()>-><org.apache.catalina.connector.Response: boolean access$000(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: boolean isAllowSessionCreation()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><io.lettuce.core.cluster.ClusterClientOptions: io.lettuce.core.cluster.ClusterClientOptions$Builder builder()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>-><sun.net.NetworkClient: void setReadTimeout(int)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.io.DataOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<org.springframework.web.util.pattern.PathPattern: int compareTo(org.springframework.web.util.pattern.PathPattern)>-><java.util.Comparators$NullComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<javax.security.auth.Policy$3: void <init>(javax.security.auth.Policy,java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher: void <init>(org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher[])>-><org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher: void <init>(java.util.List)>
<org.springframework.boot.autoconfigure.flyway.FlywayProperties: void <init>()>-><java.util.HashMap: void <init>()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager createDefaultAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.access.vote.AffirmativeBased: void <init>(java.util.List)>
<org.springframework.web.servlet.config.annotation.CorsRegistry: java.util.Map getCorsConfigurations()>-><org.springframework.util.CollectionUtils: java.util.LinkedHashMap newLinkedHashMap(int)>
<org.springframework.security.web.authentication.logout.LogoutFilter: void <init>(org.springframework.security.web.authentication.logout.LogoutSuccessHandler,org.springframework.security.web.authentication.logout.LogoutHandler[])>-><org.springframework.security.web.authentication.logout.CompositeLogoutHandler: void <init>(org.springframework.security.web.authentication.logout.LogoutHandler[])>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.String: int length()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.apache.poi.util.LittleEndianOutputStream: void writeInt(int)>-><java.io.PrintStream: void write(int)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration$ContextAwareServerHttpSecurity: void <init>(org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration$1)>-><org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration$ContextAwareServerHttpSecurity: void <init>()>
<org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: java.util.List getDefaultLifecycleListeners()>-><org.apache.catalina.core.AprLifecycleListener: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.net.SocketInputStream: int read(byte[])>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.StreamOpFlag: boolean isKnown(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: void begin(long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<org.springframework.context.annotation.MBeanExportConfiguration: org.springframework.jmx.export.annotation.AnnotationMBeanExporter mbeanExporter()>-><org.springframework.context.annotation.MBeanExportConfiguration: void setupDomain(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void setDispatcherTypes(javax.servlet.DispatcherType,javax.servlet.DispatcherType[])>-><java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum[])>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<sun.net.www.MessageHeader: void set(int,java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><java.io.BufferedInputStream: void close()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.web.session.ConcurrentSessionFilter: void setLogoutHandlers(java.util.List)>-><org.springframework.security.web.authentication.logout.CompositeLogoutHandler: void <init>(java.util.List)>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler taskScheduler(org.springframework.boot.task.TaskSchedulerBuilder)>-><org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler build()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void setIfNotSet(java.lang.String,java.lang.String)>
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: void <init>(org.springframework.jdbc.core.JdbcOperations)>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.json.JsonbHttpMessageConverter: void <init>()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source from(java.util.function.Supplier)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<io.lettuce.core.cluster.ClusterClientOptions$Builder: io.lettuce.core.ClientOptions build()>-><io.lettuce.core.cluster.ClusterClientOptions$Builder: io.lettuce.core.cluster.ClusterClientOptions build()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$ArraySpliterator: long estimateSize()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.config.RabbitConfig: org.springframework.amqp.core.DirectExchange mailExchange()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$EmptySpliterator: long estimateSize()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.SubjectDomainCombiner$3: java.lang.Object run()>
<org.apache.catalina.connector.OutputBuffer: org.apache.tomcat.util.buf.C2BConverter createConverter(java.nio.charset.Charset)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<sun.net.www.http.KeepAliveStreamCleaner: boolean offer(sun.net.www.http.KeepAliveCleanerEntry)>-><java.util.LinkedList: int size()>
<org.springframework.boot.info.BuildProperties: void coerceDate(java.util.Properties,java.lang.String)>-><java.lang.String: java.lang.String valueOf(long)>
<org.springframework.web.cors.UrlBasedCorsConfigurationSource: void setCorsConfigurations(java.util.Map)>-><java.util.LinkedHashMap: void clear()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setSchemaPassword(java.lang.String)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void setSentinels(java.lang.Iterable)>-><org.springframework.data.redis.connection.RedisSentinelConfiguration: void addSentinel(org.springframework.data.redis.connection.RedisNode)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: java.lang.String substring(int,int)>
<org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>-><sun.nio.cs.US_ASCII: java.nio.charset.CharsetEncoder newEncoder()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <init>(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.DefaultSerializationPair: void <init>(org.springframework.data.redis.serializer.RedisElementReader,org.springframework.data.redis.serializer.RedisElementWriter)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void configurePartConverters(org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter,java.util.Collection)>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List postProcessPartConverters(java.util.List)>
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration: org.springframework.data.redis.core.StringRedisTemplate stringRedisTemplate(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.RedisAccessor: void setConnectionFactory(org.springframework.data.redis.connection.RedisConnectionFactory)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: org.flywaydb.core.Flyway flyway(org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureFlywayCallbacks(org.flywaydb.core.api.configuration.FluentConfiguration,java.util.List)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.lang.String: java.lang.String valueOf(int)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.net.URI: java.net.URI normalize()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><java.lang.StringBuilder: int length()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setGenerateUniqueName(boolean)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void reset()>-><java.io.FilterInputStream: void reset()>
<java.io.FilterInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.apache.tomcat.jni.Library: boolean initialize(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><org.apache.catalina.util.SessionConfig: java.lang.String getSessionUriParamName(org.apache.catalina.Context)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpCaptureInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpCapture)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.config.annotation.PathMatchConfigurer getPathMatchConfigurer()>-><org.springframework.web.servlet.config.annotation.PathMatchConfigurer: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: org.springframework.boot.info.BuildProperties buildProperties()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.mybatis.spring.SqlSessionTemplate: void <init>(org.apache.ibatis.session.SqlSessionFactory,org.apache.ibatis.session.ExecutorType,org.springframework.dao.support.PersistenceExceptionTranslator)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: void <init>(org.springframework.data.redis.cache.RedisCacheWriter)>-><java.util.LinkedHashMap: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: org.springframework.validation.MessageCodesResolver getMessageCodesResolver()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$DoubleArrayNode: void forEach(java.lang.Object)>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy$TransactionAwareInvocationHandler: void <init>(org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy,javax.sql.DataSource)>-><java.lang.Object: void <init>()>
<java.util.stream.Node$OfDouble: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode: void forEach(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations$Generic: void <init>()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer: void <init>()>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void <init>()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: void reset()>
<java.io.DataOutputStream: void writeShort(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: java.util.List getSecurityWebFilterChains()>-><org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: org.springframework.security.web.server.SecurityWebFilterChain springSecurityFilterChain()>
<org.apache.catalina.connector.OutputBuffer: void checkConverter()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.bind.support.ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer(org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.bind.support.ConfigurableWebBindingInitializer: void <init>()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.LinkedHashMap: void <init>()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.Buffer: int position()>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.InputStream: long skip(long)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><java.io.InputStream: void close()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$DoubleArraySpliterator: boolean tryAdvance(java.util.function.DoubleConsumer)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><java.io.IOException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void <init>()>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.io.FilterInputStream: void mark(int)>-><java.io.InputStream: void mark(int)>
<sun.nio.cs.StreamDecoder: void implClose()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: java.lang.String getProtocol()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration: org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate namedParameterJdbcTemplate(org.springframework.jdbc.core.JdbcTemplate)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Value getValue()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$1Splitr: java.util.Spliterator trySplit()>
<java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.SaveRecalcRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.MessageHeader: void set(int,java.lang.String,java.lang.String)>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.CountDownLatch: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties getR2dbcPropertiesInstance()>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: void setGenerateUniqueName(boolean)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.web.util.pattern.InternalPathPatternParser: void recordCapturedVariable(int,java.lang.String)>-><java.util.ArrayList: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: void <init>()>-><io.lettuce.core.ClientOptions$Builder: io.lettuce.core.ClientOptions$Builder timeoutOptions(io.lettuce.core.TimeoutOptions)>
<org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.header.XXssProtectionServerHttpHeadersWriter: void <init>()>
<java.util.Objects: int hashCode(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.ChunkedInputStream: void processRaw()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><java.net.ProtocolException: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: boolean isIso(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.MimeType: java.lang.String toString()>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: java.util.List getDefaultLifecycleListeners()>-><org.apache.catalina.core.AprLifecycleListener: boolean isAprAvailable()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getExpected()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter$1: void <init>(org.springframework.boot.web.servlet.support.ErrorPageFilter)>-><org.springframework.web.filter.OncePerRequestFilter: void <init>()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder: java.util.Map access$300(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>
<java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfLong spliterator()>-><java.util.Spliterators: java.util.Spliterator$OfLong emptyLongSpliterator()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode: java.lang.String toString()>-><java.lang.Long: java.lang.Long valueOf(long)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.FilterInvocation: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.mybatis.spring.SqlSessionTemplate: void <init>(org.apache.ibatis.session.SqlSessionFactory)>-><org.mybatis.spring.SqlSessionTemplate: void <init>(org.apache.ibatis.session.SqlSessionFactory,org.apache.ibatis.session.ExecutorType)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.CharChunk: char[] getBuffer()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.ResourceLeakDetector$TraceRecord: java.lang.String toString()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor()>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void warn(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String parseVirtualHost(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.CodepageRecord: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties getDruidStatPropertiesInstance()>
<org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxException: java.lang.String buildMessage(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractSet: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver authenticationPrincipalArgumentResolver()>-><org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver: void <init>(org.springframework.core.ReactiveAdapterRegistry)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.ServerProperties getServerPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.ServerProperties: void <init>()>
<java.text.AttributeEntry: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.config.annotation.PathMatchConfigurer getPathMatchConfigurer()>-><org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void configurePathMatch(org.springframework.web.servlet.config.annotation.PathMatchConfigurer)>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void addUrlMappings(java.lang.String[])>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.access.AccessDeniedHandler getAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.access.AccessDeniedHandler createDefaultDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.security.authentication.DelegatingReactiveAuthenticationManager: void <init>(org.springframework.security.authentication.ReactiveAuthenticationManager[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$DefaultPasswordEncoderAuthenticationManagerBuilder: void <init>(org.springframework.security.config.annotation.ObjectPostProcessor,org.springframework.security.crypto.password.PasswordEncoder)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Vector$Itr: boolean hasNext()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void addReturnValueHandlers(java.util.List)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addReturnValueHandlers(java.util.List)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<java.lang.System$2: void invokeFinalize(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void finalize()>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.constant.ErrorConstant: java.lang.String toString()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.logging.javautil.JavaUtilLog: void debug(java.lang.String)>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><sun.net.www.http.ChunkedOutputStream: void reset()>
<org.springframework.data.redis.core.DefaultReactiveListOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>-><java.lang.Object: void <init>()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.SliceOps: long access$300(long,long,long)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Hr: int hashCode()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession obtainSession()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><io.lettuce.core.SocketOptions$Builder: io.lettuce.core.SocketOptions build()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: void <init>(int,char[],org.springframework.web.util.pattern.PatternParseException$PatternMessage,java.lang.Object[])>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.net.URL: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.web.client.RestTemplate: org.springframework.web.util.DefaultUriBuilderFactory initUriTemplateHandler()>-><org.springframework.web.util.DefaultUriBuilderFactory: void setEncodingMode(org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><sun.net.www.http.ChunkedInputStream: void closeUnderlying()>
<java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration$TomcatWebSocketConfiguration: org.springframework.boot.autoconfigure.websocket.reactive.TomcatWebSocketReactiveWebServerCustomizer websocketReactiveWebServerCustomizer()>-><org.springframework.boot.autoconfigure.websocket.reactive.TomcatWebSocketReactiveWebServerCustomizer: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: java.util.Spliterator trySplit()>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><java.io.InputStream: int read(byte[],int,int)>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.PathElement: int getCaptureCount()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void <init>()>-><java.util.ArrayList: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction: java.lang.Void run()>-><org.apache.catalina.connector.Response: void setAppCommitted(boolean)>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.io.BufferedInputStream: void fill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.security.x509.X500Name: void <init>(byte[])>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <init>()>-><java.lang.Object: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder header(java.lang.String,java.lang.String[])>-><org.springframework.http.HttpHeaders: java.util.List put(java.lang.String,java.util.List)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce getLettuce()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.servlet.MultipartProperties)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.http.HttpClient: boolean getHttpKeepAliveSet()>
<org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: org.springframework.boot.info.BuildProperties buildProperties()>-><org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build: org.springframework.core.io.Resource getLocation()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.Period: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><java.security.cert.CertificateException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentTypeOptionsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentTypeOptionsConfig: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentTypeOptionsConfig enable()>
<sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Vector$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.io.DataInputStream: char readChar()>-><sun.net.www.MeteredStream: int read()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.StringJoiner: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: long estimateSize()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.savedrequest.RequestCache getRequestCache(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration: org.springframework.data.redis.core.RedisTemplate redisTemplate(org.springframework.data.redis.connection.RedisConnectionFactory)>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder(org.springframework.context.ApplicationContext,java.util.List)>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration: void customize(org.springframework.http.converter.json.Jackson2ObjectMapperBuilder,java.util.List)>
<org.apache.catalina.connector.OutputBuffer: void close()>-><org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: org.springframework.boot.autoconfigure.web.format.DateTimeFormatters dateFormat(java.lang.String)>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: boolean isIso(java.lang.String)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.util.List parseAddresses(java.lang.String)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: java.lang.Boolean getEnabled()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>-><java.lang.Object: void <init>()>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setBuildProperties(org.springframework.boot.info.BuildProperties)>
<org.springframework.security.config.annotation.web.configurers.PermitAllSupport: void permitAll(org.springframework.security.config.annotation.web.HttpSecurityBuilder,java.lang.String[])>-><org.springframework.security.config.annotation.web.configurers.PermitAllSupport$ExactUrlRequestMatcher: void <init>(java.lang.String,org.springframework.security.config.annotation.web.configurers.PermitAllSupport$1)>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.BasicAuthentication: boolean supportsPreemptiveAuthorization()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.calendar.Era: java.lang.String toString()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$3(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.apache.catalina.connector.ResponseFacade: void setStatus(int)>
<org.springframework.security.config.web.server.ServerHttpSecurity: void <init>()>-><org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>
<org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: java.util.List getDefaultLifecycleListeners()>-><org.apache.catalina.core.AprLifecycleListener: boolean isAprAvailable()>
<java.io.BufferedInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$ArrayNode: long count()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.SpinedBuffer$1Splitr: long estimateSize()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder customizers(java.lang.Iterable)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createLogoutRequestMatcher(java.lang.String)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: void <init>(java.lang.String,java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: org.flywaydb.core.Flyway flyway(org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<javax.security.auth.Policy$2: javax.security.auth.Policy run()>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler: void <init>(org.springframework.http.HttpStatus)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.nio.ByteOrder: java.lang.String toString()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.charset.CoderResult: boolean isMalformed()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.util.logging.PlatformLogger: void warning(java.lang.String)>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.io.FilterInputStream: void mark(int)>-><java.io.ByteArrayInputStream: void mark(int)>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractTask: boolean isRoot()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void <init>()>-><org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter: void <init>()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void disconnect()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.util.List parseAddresses(java.lang.String)>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.text.DigitList: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>-><org.springframework.boot.jdbc.DataSourceBuilder: org.springframework.boot.jdbc.DataSourceBuilder create(java.lang.ClassLoader)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.BufferedInputStream: void mark(int)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>-><java.util.SimpleTimeZone: int getRawOffset()>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.Thread: void <init>(java.lang.Runnable)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: void <init>()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter: void <init>()>
<org.javaboy.vhr.model.Department: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder: void <init>(io.r2dbc.spi.ConnectionFactoryOptions$Builder)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.flywaydb.core.api.Location: java.lang.String toString()>
<java.security.cert.CertificateException: void <init>()>-><java.security.GeneralSecurityException: void <init>()>
<org.javaboy.vhr.config.SecurityConfig$1: org.springframework.security.web.access.intercept.FilterSecurityInterceptor postProcess(org.springframework.security.web.access.intercept.FilterSecurityInterceptor)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setAccessDecisionManager(org.springframework.security.access.AccessDecisionManager)>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.KeyManager[] configureKeyManagers()>-><java.net.SocketInputStream: void close()>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setNimbusReactiveJwtDecoder(org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: long estimateSize()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><java.util.Arrays$ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setDefaultSchema(java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties getR2dbcPropertiesInstance()>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: void setPassword(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.net.URL: int getPort()>
<sun.net.www.MeteredStream: void close()>-><java.io.FileInputStream: void close()>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.TrustManager[] configureTrustManagers()>-><sun.net.www.MeteredStream: void close()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.lang.String: boolean endsWith(java.lang.String)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setOrderedFormContentFilter(org.springframework.boot.web.servlet.filter.OrderedFormContentFilter)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor configure(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper alwaysApplyingWhenNonNull()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration master(java.lang.String)>-><org.springframework.data.redis.connection.RedisConfiguration$SentinelConfiguration: void setMaster(java.lang.String)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setAddresses(java.lang.String)>
<org.springframework.web.util.pattern.LiteralPathElement: void <init>(int,char[],boolean,char)>-><java.lang.Character: char toLowerCase(char)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.ProgressSource: void updateProgress(long,long)>-><sun.net.ProgressSource: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.IterationRecord: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.ArrayList$ArrayListSpliterator: long estimateSize()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.net.CookieHandler: java.net.CookieHandler getDefault()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple3: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint createDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint: void setDefaultEntryPoint(org.springframework.security.web.AuthenticationEntryPoint)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><org.springframework.security.web.access.expression.WebExpressionVoter: boolean supports(java.lang.Class)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<java.io.BufferedInputStream: void close()>-><java.io.InputStream: void close()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientResources(io.lettuce.core.resource.ClientResources)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.Character: boolean isSpaceChar(char)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.MeteredStream: void close()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.Vector: void addElement(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: long estimateSize()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<sun.net.www.MeteredStream: int read()>-><java.net.SocketInputStream: int read()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping welcomePageHandlerMapping(org.springframework.context.ApplicationContext,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: java.util.Optional getWelcomePage()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: boolean isReplacement(org.springframework.http.converter.HttpMessageConverter,org.springframework.http.converter.HttpMessageConverter)>-><java.lang.Class: boolean isInstance(java.lang.Object)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: int getNCCount()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder jwtDecoderByPublicKeyValue()>-><java.security.spec.X509EncodedKeySpec: void <init>(byte[])>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <init>()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>-><java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getCause()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getOracleKerberosConfigFile()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getTable()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: boolean usesVendorLocation(java.util.Collection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder customizers(java.lang.Iterable)>-><org.springframework.boot.task.TaskExecutorBuilder: java.util.Set append(java.util.Set,java.lang.Iterable)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode: long count()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.SecurityContextConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long,long,long)>
<org.springframework.security.config.annotation.web.configurers.SecurityContextConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer: void <init>()>
<org.springframework.context.expression.BeanFactoryResolver: java.lang.Object resolve(org.springframework.expression.EvaluationContext,java.lang.String)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String)>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.KeyManager[] configureKeyManagers()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.access.AccessDeniedHandler getAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: java.util.List getDefaultLifecycleListeners()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.Streams$ConcatSpliterator: int characteristics()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: void <init>(org.springframework.data.redis.cache.RedisCacheWriter)>-><org.springframework.data.redis.cache.CacheStatisticsCollector: org.springframework.data.redis.cache.CacheStatisticsCollector none()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>
<java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfLong spliterator()>-><java.util.stream.Nodes$InternalNodeSpliterator$OfLong: void <init>(java.util.stream.Node$OfLong)>
<io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder: io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder enablePeriodicRefresh()>-><io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder: io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder enablePeriodicRefresh(boolean)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnectionFromDriver(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: void <init>()>-><org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: java.util.List getDefaultLifecycleListeners()>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.stream.IntPipeline$9$1: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$DoubleArrayNode: void forEach(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>-><java.net.URL: java.lang.String getHost()>
<java.util.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.apache.tomcat.util.buf.CharChunk: void append(char)>-><org.apache.tomcat.util.buf.AbstractChunk: int getLimitInternal()>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><java.net.SocketInputStream: void close()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.MeteredStream: void close()>
<java.net.HttpURLConnection: int getResponseCode()>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>
<synthetic.method.HttpSessionImpl: void <init>()>-><java.util.HashMap: void <init>()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig: org.springframework.security.web.header.writers.XXssProtectionHeaderWriter access$1700(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.SubList$1: int previousIndex()>
<io.lettuce.core.TimeoutOptions: io.lettuce.core.TimeoutOptions enabled()>-><io.lettuce.core.TimeoutOptions: io.lettuce.core.TimeoutOptions$Builder builder()>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,long)>-><java.lang.Object: void <init>()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$LongArrayNode: long count()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<org.springframework.security.web.authentication.Http403ForbiddenEntryPoint: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.catalina.connector.Response: boolean isAppCommitted()>-><org.apache.catalina.connector.Response: boolean isSuspended()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream access$100(sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void addFormatters(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.number.NumberFormatAnnotationFormatterFactory: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.ChunkedInputStream: void closeUnderlying()>-><sun.net.www.http.HttpClient: void finished()>
<org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder hashKey(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.web.util.pattern.InternalPathPatternParser: void pushPathElement(org.springframework.web.util.pattern.PathElement)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: java.lang.String determineDatabaseName(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.SubList$1: java.lang.Object next()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder authenticationManagerBuilder(org.springframework.security.config.annotation.ObjectPostProcessor,org.springframework.context.ApplicationContext)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.HeaderParser$ParserIterator: void <init>(sun.net.www.HeaderParser,boolean)>-><java.lang.Object: void <init>()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><java.io.InputStream: void close()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String exceptionMessage(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.core.Constants: java.util.Set getValues(java.lang.String)>-><java.util.HashSet: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<org.springframework.security.web.access.DelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><java.lang.Object: void <init>()>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: void <init>(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void checkConverter()>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.util.StringTokenizer: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration: org.springframework.transaction.support.TransactionTemplate transactionTemplate(org.springframework.transaction.PlatformTransactionManager)>-><org.springframework.transaction.support.TransactionTemplate: void <init>(org.springframework.transaction.PlatformTransactionManager)>
<org.flywaydb.core.internal.database.cockroachdb.CockroachDBDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.access.SecurityConfig: java.util.List createList(java.lang.String[])>-><java.lang.String: java.lang.String trim()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: java.lang.String normalizePrefix(java.lang.String)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>
<org.javaboy.vhr.config.CustomFilterInvocationSecurityMetadataSource: java.util.Collection getAttributes(java.lang.Object)>-><org.springframework.util.AntPathMatcher: boolean match(java.lang.String,java.lang.String)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher notMatchingMediaType(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.http.MediaType)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.util.Hashtable: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>-><java.io.StringReader: int read()>
<org.springframework.util.MultiValueMapAdapter: int size()>-><java.util.Collections$UnmodifiableMap: int size()>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: void <init>()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createDefaultSavedRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: void add(int,java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.TrustManager[] configureTrustManagers()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.filter.RequestContextFilter requestContextFilter()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveEntry: void <init>(sun.net.www.http.HttpClient,long)>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.text.DateFormat: void setTimeZone(java.util.TimeZone)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.web.util.pattern.PathPatternParser: org.springframework.http.server.PathContainer$Options getPathOptions()>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: java.util.Spliterator trySplit()>
<java.util.Properties: void loadFromXML(java.io.InputStream)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.io.FilterInputStream: void mark(int)>-><org.apache.poi.poifs.filesystem.DocumentInputStream: void mark(int)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.InetSocketAddress: boolean isUnresolved()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.CellRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object lazyBean(java.lang.Class)>-><org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.AssertionError: void <init>()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressMonitor: sun.net.ProgressMonitor getDefault()>
<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method determineDestroyMethod(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.http.HttpClient: void openServer()>-><sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.AssertionError: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>-><java.util.Collections$EmptyList: boolean isEmpty()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<org.springframework.security.web.csrf.CsrfAuthenticationStrategy: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfInt spliterator()>-><java.util.Spliterators: java.util.Spliterator$OfInt emptyIntSpliterator()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureJavaMigrations(org.flywaydb.core.api.configuration.FluentConfiguration,java.util.List)>-><org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration javaMigrations(org.flywaydb.core.api.migration.JavaMigration[])>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration: org.springframework.cache.concurrent.ConcurrentMapCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers)>-><java.util.ArrayList: boolean isEmpty()>
<org.javaboy.vhr.VhrApplication: void main(java.lang.String[])>-><org.javaboy.vhr.VhrApplication: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<reactor.core.Exceptions: java.lang.Throwable addSuppressed(java.lang.Throwable,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration: org.springframework.jdbc.core.JdbcTemplate jdbcTemplate(javax.sql.DataSource,org.springframework.boot.autoconfigure.jdbc.JdbcProperties)>-><org.springframework.jdbc.core.JdbcTemplate: void setMaxRows(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isSkipDefaultCallbacks()>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.lang.StringBuilder: void <init>()>
<java.io.FilterInputStream: void reset()>-><sun.net.httpserver.Request$ReadStream: void reset()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.AuthenticationFailureHandler getSessionAuthenticationFailureHandler()>
<org.springframework.web.servlet.view.UrlBasedViewResolver: void setViewClass(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.boot.info.GitProperties: void <init>(java.util.Properties)>-><org.springframework.boot.info.GitProperties: java.util.Properties processEntries(java.util.Properties)>
<org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void setAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.util.MultiValueMapAdapter: java.util.List get(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskSchedulerBuilder: void <init>()>
<org.springframework.boot.context.properties.bind.Binder: java.lang.Object bindOrCreate(java.lang.String,org.springframework.boot.context.properties.bind.Bindable)>-><org.springframework.boot.context.properties.bind.Binder: java.lang.Object bindOrCreate(org.springframework.boot.context.properties.source.ConfigurationPropertyName,org.springframework.boot.context.properties.bind.Bindable,org.springframework.boot.context.properties.bind.BindHandler)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.net.URI: void split(char[],int[])>-><java.lang.InternalError: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureCallbacks(org.flywaydb.core.api.configuration.FluentConfiguration,java.util.List)>-><org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration callbacks(org.flywaydb.core.api.callback.Callback[])>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.apache.catalina.connector.Response$PrivilegedEncodeUrl: java.lang.Object run()>-><org.apache.catalina.connector.Response$PrivilegedEncodeUrl: org.apache.tomcat.util.buf.CharChunk run()>
<java.io.FilterInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: java.util.stream.Node$OfDouble build()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.HashSet: int size()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.data.redis.connection.RedisPassword: org.springframework.data.redis.connection.RedisPassword of(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo: java.lang.String getPassword()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.DelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.task.TaskSchedulingProperties getTaskSchedulingPropertiesInstance()>-><org.springframework.boot.autoconfigure.task.TaskSchedulingProperties: void setThreadNamePrefix(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser$ParserIterator: boolean hasNext()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><org.javaboy.vhr.model.Politicsstatus: java.lang.Integer getId()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.access.expression.AbstractSecurityExpressionHandler: void setRoleHierarchy(org.springframework.security.access.hierarchicalroles.RoleHierarchy)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.BasicPermissionCollection: java.util.Enumeration elements()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>-><java.nio.Buffer: int position()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.util.List parseAddresses(java.lang.String)>-><java.lang.Boolean: boolean booleanValue()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>-><org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getPath()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.lang.String getUrl()>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.Object: int hashCode()>
<org.springframework.security.core.userdetails.User: java.util.SortedSet sortAuthorities(java.util.Collection)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: void <init>(org.springframework.security.core.userdetails.User$1)>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.URL: int getDefaultPort()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo: java.lang.String getHostName()>-><java.net.URI: java.lang.String getHost()>
<org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: long estimateSize()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.jndi.JndiPropertySource: java.lang.Object getProperty(java.lang.String)>
<org.apache.poi.util.LittleEndianOutputStream: void writeUInt(long)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<java.net.InetSocketAddress: void <init>(int,java.lang.String)>-><java.net.InetSocketAddress$InetSocketAddressHolder: void <init>(java.lang.String,java.net.InetAddress,int,java.net.InetSocketAddress$1)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.http.PosterOutputStream: void close()>-><java.io.ByteArrayOutputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.protocol.http.HttpCallerInfo getHttpCallerInfo()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.util.function.Supplier)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setPasswordEncoder(org.springframework.security.crypto.password.PasswordEncoder)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>
<java.util.Spliterator: boolean hasCharacteristics(int)>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration: org.springframework.cache.concurrent.ConcurrentMapCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers)>-><org.springframework.cache.concurrent.ConcurrentMapCacheManager: void setCacheNames(java.util.Collection)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setUndoSqlMigrationPrefix(java.lang.String)>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setBatch(java.lang.Boolean)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void <init>(java.util.stream.Node)>-><java.util.stream.Nodes$InternalNodeSpliterator: void <init>(java.util.stream.Node)>
<sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$CborFactoryInitializer: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void reorderXmlConvertersToEnd(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setLogRequestDetails(boolean)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.util.CellReference: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisProperties getProperties()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.flywaydb.core.internal.database.base.TestContainersDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2: javax.management.MBeanServer getMBeanServer()>-><org.springframework.jmx.support.WebSphereMBeanServerFactoryBean: void afterPropertiesSet()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.core.context.GlobalSecurityContextHolderStrategy: org.springframework.security.core.context.SecurityContext createEmptyContext()>-><org.springframework.security.core.context.SecurityContextImpl: void <init>()>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.SortedOps$RefSortingSink: void begin(long)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>-><java.util.ArrayList: java.util.ListIterator listIterator()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$EmptyNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.ServerProperties getServerPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.ServerProperties: void setPort(java.lang.Integer)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeEmbeddedOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryBeanCreationException connectionFactoryBeanCreationException(java.lang.String,org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactory(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: boolean isJta()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setPort(java.lang.Integer)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$10: java.io.IOException run()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.lang.String getUsername()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: void <init>(org.springframework.http.MediaType[])>-><org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>
<sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>-><javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.LinkedList$LLSpliterator: long estimateSize()>
<org.springframework.web.util.pattern.PatternParseException: void <init>(int,char[],org.springframework.web.util.pattern.PatternParseException$PatternMessage,java.lang.Object[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Pool: java.time.Duration getKeepAlive()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.savedrequest.RequestCache getRequestCache(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.savedrequest.HttpSessionRequestCache: void setRequestMatcher(org.springframework.security.web.util.matcher.RequestMatcher)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$ArrayNode: long count()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.security.web.header.writers.HstsHeaderWriter: void <init>(org.springframework.security.web.util.matcher.RequestMatcher,long,boolean,boolean)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$IntArraySpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void <init>(java.lang.String,boolean)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String parseUsernameAndPassword(java.lang.String)>
<org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: org.springframework.security.core.userdetails.UserDetails getUserDetails(org.springframework.boot.autoconfigure.security.SecurityProperties$User,java.lang.String)>-><org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy: void <init>(java.lang.String,org.springframework.security.web.RedirectStrategy)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeEmbeddedOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>-><org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection: java.lang.String getUrl(java.lang.String)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.WeakHashMap$WeakHashMapSpliterator: long estimateSize()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void registerJsr310(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.datetime.standard.DateTimeFormatterRegistrar: void registerFormatters(org.springframework.format.FormatterRegistry)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: org.javaboy.vhr.model.Nation getNation()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder createBuilder(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder createBuilder(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: void setOffset(int)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.InternalResourceViewResolver defaultViewResolver()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$View getView()>
<org.springframework.security.authentication.AnonymousAuthenticationToken: void <init>(java.lang.Integer,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.NameXPtg: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction: java.lang.Object run()>-><org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction: java.lang.Void run()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<java.io.FilterInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.Collections$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setInMemoryClientRegistrationRepository(org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository)>
<java.util.JapaneseImperialCalendar: int computeFields(int,int)>-><java.util.SimpleTimeZone: int getRawOffset()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>-><java.net.URLConnection: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.KeepAliveCleanerEntry: sun.net.www.http.HttpClient getHttpClient()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void accept(int)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.SeparatorPathElement: int getNormalizedLength()>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.CharChunk: void append(char)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: void end()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$DoubleArraySpliterator: long estimateSize()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$AbstractConcNode: java.util.stream.Node getChild(int)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.net.PlainSocketImpl: void <init>()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void addFormatters(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.support.FormattingConversionService: void addFormatter(org.springframework.format.Formatter)>
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void setUseTrailingSlashMatch(boolean)>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: org.springframework.web.util.pattern.PathPatternParser getPatternParser()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$ArraySpliterator: int characteristics()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.javaboy.vhr.model.Employee: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>-><java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Node$OfPrimitive: java.util.stream.Node getChild(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DBCellRecord: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.template.AbstractViewResolverProperties: java.lang.String getCharsetName()>-><java.nio.charset.Charset: java.lang.String name()>
<sun.net.www.ParseUtil: void appendEscape(java.lang.StringBuffer,byte)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.io.FilterInputStream: void reset()>-><sun.net.www.http.KeepAliveStream: void reset()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HstsConfig: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HstsConfig enable()>-><org.springframework.security.web.header.writers.HstsHeaderWriter: void <init>()>
<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>-><sun.net.www.MessageHeader: int access$000(sun.net.www.MessageHeader)>
<org.springframework.boot.info.GitProperties: java.lang.Long parseEpochSecond(java.lang.String)>-><java.lang.Long: long parseLong(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler getMethodSecurityExpressionHandler()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.lang.StringBuilder: int length()>
<org.springframework.boot.web.servlet.server.StaticResourceJars: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: void <init>(java.net.URL,java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><java.util.ArrayList: java.util.Iterator iterator()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getContentType()>
<org.springframework.security.web.csrf.CsrfFilter: void setAccessDeniedHandler(org.springframework.security.web.access.AccessDeniedHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.time.format.DateTimeFormatterBuilder$ZoneTextPrinterParser: java.time.format.DateTimeFormatterBuilder$PrefixTree getTree(java.time.format.DateTimeParseContext)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.apache.tomcat.util.buf.ByteChunk: void <init>(int)>-><org.apache.tomcat.util.buf.ByteChunk: void allocate(int,int)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayProperties: void <init>()>-><java.util.ArrayList: void <init>(java.util.Collection)>
<sun.net.www.MeteredStream: long skip(long)>-><sun.net.www.MeteredStream: long skip(long)>
<org.springframework.data.redis.cache.RedisCacheManager: void <init>(org.springframework.data.redis.cache.RedisCacheWriter,org.springframework.data.redis.cache.RedisCacheConfiguration,java.util.Map,boolean)>-><org.springframework.data.redis.cache.RedisCacheManager: void <init>(org.springframework.data.redis.cache.RedisCacheWriter,org.springframework.data.redis.cache.RedisCacheConfiguration,boolean)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void mark(int)>-><java.io.FilterInputStream: void mark(int)>
<org.springframework.cache.concurrent.ConcurrentMapCacheManager: void setCacheNames(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory tomcatReactiveWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties getR2dbcPropertiesInstance()>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: void setUrl(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.net.URI: java.net.URI normalize(java.net.URI)>-><java.lang.String: int length()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper alwaysApplyingWhenNonNull()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.io.FilterOutputStream: void flush()>-><java.io.PrintStream: void flush()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.info.GitProperties: java.lang.Long parseEpochSecond(java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>-><org.springframework.web.accept.ContentNegotiationManager: java.util.List getStrategies()>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.String getBeanName(java.lang.Class,java.lang.String[])>-><java.util.ArrayList: int size()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryConfiguration: org.springframework.data.mongodb.core.MongoDatabaseFactorySupport mongoDatabaseFactory(com.mongodb.client.MongoClient,org.springframework.boot.autoconfigure.mongo.MongoProperties)>
<org.springframework.boot.task.TaskSchedulerBuilder: java.util.Set append(java.util.Set,java.lang.Iterable)>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1: javax.management.MBeanServer getMBeanServer()>-><org.springframework.jndi.JndiLocatorDelegate: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isIgnoreFutureMigrations()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.nio.cs.StreamDecoder: int readBytes()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(char[])>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><java.net.SocketInputStream: void close()>
<java.util.stream.ReferencePipeline$StatefulOp: void <init>(java.util.stream.AbstractPipeline,java.util.stream.StreamShape,int)>-><java.util.stream.IntPipeline: java.util.stream.StreamShape getOutputShape()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.util.StringTokenizer: java.lang.String nextToken()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><sun.net.www.protocol.http.HttpURLConnection$8: java.lang.Object run()>
<java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.ArrayList$SubList$1: int previousIndex()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.context.support.MessageSourceAccessor: void <init>(org.springframework.context.MessageSource)>
<org.springframework.boot.info.GitProperties: void <init>(java.util.Properties)>-><org.springframework.boot.info.InfoProperties: void <init>(java.util.Properties)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: int getKey(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.stream.SliceOps$SliceTask: boolean isLeftCompleted(long)>-><java.util.stream.SliceOps$SliceTask: long completedSize(long)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$loginFilter$1(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.apache.catalina.connector.CoyoteWriter: void flush()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.PathMatchConfigurer: org.springframework.web.util.pattern.PathPatternParser getPatternParser()>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void ensureOpen()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: java.lang.Object next()>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.net.AbstractPlainSocketImpl: boolean isClosedOrPending()>
<org.springframework.security.authentication.ProviderManager: void setAuthenticationEventPublisher(org.springframework.security.authentication.AuthenticationEventPublisher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><org.apache.commons.logging.LogAdapter$Log4jLog: void info(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.net.URL: int getPort()>
<java.util.stream.Nodes$ConcNode$OfDouble: void <init>(java.util.stream.Node$OfDouble,java.util.stream.Node$OfDouble)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive,java.util.stream.Node$OfPrimitive)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.MeteredStream: void close()>
<reactor.core.publisher.Operators: void onErrorDropped(java.lang.Throwable,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setRepeatableSqlMigrationPrefix(java.lang.String)>
<java.net.URI: java.net.URI normalize(java.net.URI)>-><java.net.URI: boolean isOpaque()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Currency: java.lang.String toString()>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>-><javax.servlet.ServletRequestWrapper: javax.servlet.ServletRequest getRequest()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.net.URLPermission: java.lang.String actions()>-><java.lang.StringBuilder: void <init>()>
<java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.TrustManager[] configureTrustManagers()>-><java.net.SocketInputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.UUID: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: int hashCode()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>
<sun.net.httpserver.Request$ReadStream: int read(byte[],int,int)>-><java.nio.Buffer: int remaining()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$ArrayNode: long count()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.springframework.web.util.pattern.PathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.web.util.pattern.InternalPathPatternParser: void <init>(org.springframework.web.util.pattern.PathPatternParser)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity sessionManagement(org.springframework.security.config.Customizer)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.web.servlet.mvc.method.annotation.JsonViewRequestBodyAdvice: void <init>()>-><org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: java.util.Spliterator trySplit()>
<sun.net.www.MeteredStream: long skip(long)>-><sun.net.httpserver.SSLStreams$InputStream: long skip(long)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void setMessageSource(org.springframework.context.MessageSource)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.text.MessageFormat: int hashCode()>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.MeteredStream: int read()>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: org.springframework.boot.autoconfigure.web.format.DateTimeFormatters timeFormat(java.lang.String)>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: java.time.format.DateTimeFormatter formatter(java.lang.String)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.io.IOException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ThreadGroup: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setPersistenceExceptionTranslationPostProcessor(org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveSetOperations opsForSet(org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.data.redis.core.DefaultReactiveSetOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.context.annotation.MBeanExportConfiguration: void setupServer(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.JobLevel: java.lang.String getName()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>
<java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator$OfDouble spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>
<org.springframework.security.web.server.csrf.WebSessionServerCsrfTokenRepository: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void setUseRegisteredSuffixPatternMatch(boolean)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy: void <init>(org.springframework.security.core.session.SessionRegistry)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: org.javaboy.vhr.model.Position getPosition()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.springframework.cache.concurrent.ConcurrentMapCacheManager: void setCacheNames(java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$2(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.apache.catalina.connector.CoyoteWriter: void flush()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.cache.CacheProperties getCachePropertiesInstance()>-><org.springframework.boot.autoconfigure.cache.CacheProperties: void setCacheNames(java.util.List)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void setUsername(java.lang.String)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getMessageConverters()>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>
<org.springframework.boot.autoconfigure.jackson.JacksonProperties: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.StringBuffer: void <init>(int)>
<sun.net.www.http.KeepAliveEntry: void <init>(sun.net.www.http.HttpClient,long)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.net.URL: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setLocale(java.util.Locale)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.LinkedList$LLSpliterator: long estimateSize()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>-><org.springframework.web.context.request.AbstractRequestAttributes: boolean isRequestActive()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration: void <init>(org.mybatis.spring.boot.autoconfigure.MybatisProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>
<org.springframework.security.access.SecurityConfig: java.util.List createList(java.lang.String[])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.apache.ibatis.parsing.XNode: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long,sun.net.www.http.HttpClient)>-><sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.Boolean: boolean getBoolean(java.lang.String)>
<org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(org.springframework.web.util.pattern.PathPattern)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setTomcatServletWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactoryCustomizer)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDataSource(javax.sql.DataSource)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.CharChunk: int subtract(char[],int,int)>-><org.apache.tomcat.util.buf.AbstractChunk: int getLength()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: int size()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.web.client.RestTemplate$HeadersExtractor: void <init>(org.springframework.web.client.RestTemplate$1)>
<sun.net.www.http.HttpClient$1: java.lang.Object run()>-><sun.net.www.http.HttpClient$1: java.lang.Void run()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.validation.Validator getValidator()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration: org.springframework.cache.support.SimpleCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,java.util.Collection)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: java.lang.String substring(int,int)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setSecurityWebFilterChain(org.springframework.security.web.server.SecurityWebFilterChain)>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><java.util.concurrent.RejectedExecutionException: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<org.springframework.security.authentication.DelegatingReactiveAuthenticationManager: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void updateDelegate()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.config.CustomFilterInvocationSecurityMetadataSource: java.util.Collection getAttributes(java.lang.Object)>-><java.util.Collections$1: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getRepeatableSqlMigrationPrefix()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><java.io.FilterInputStream: int available()>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.MatchOps$BooleanTerminalSink: boolean cancellationRequested()>
<java.io.FilterInputStream: int available()>-><sun.net.www.MeteredStream: int available()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.ZoneOffset: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: org.springframework.boot.jdbc.DatabaseDriver getDatabaseDriver()>-><org.springframework.jdbc.support.JdbcUtils: java.lang.Object extractDatabaseMetaData(javax.sql.DataSource,org.springframework.jdbc.support.DatabaseMetaDataCallback)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String exceptionMessage(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.web.util.pattern.RegexPathElement: int getScore()>-><org.springframework.web.util.pattern.RegexPathElement: int getWildcardCount()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.stream.Sink)>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.session.SessionManagementFilter: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.data.redis.core.script.DefaultReactiveScriptExecutor: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext)>-><java.lang.Object: void <init>()>
<org.springframework.context.i18n.LocaleContextHolder: java.util.Locale getLocale(org.springframework.context.i18n.LocaleContext)>-><org.springframework.context.i18n.SimpleLocaleContext: java.util.Locale getLocale()>
<org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PasswordRev4Record: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setErrorMvcAutoConfiguration$PreserveErrorControllerTargetClassPostProcessor(org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$PreserveErrorControllerTargetClassPostProcessor)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: int indexOf(int)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><org.springframework.util.DefaultPropertiesPersister: void load(java.util.Properties,java.io.Reader)>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: java.lang.Object run()>-><org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: java.lang.Void run()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$3: java.net.ResponseCache run()>-><java.net.ResponseCache: java.net.ResponseCache getDefault()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.MeteredStream: void justRead(long)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.apache.tomcat.jni.Library: boolean initialize(java.lang.String)>-><org.apache.tomcat.jni.Library: boolean has(int)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int getResponseCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Locale: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean: void <init>(java.lang.String,org.springframework.boot.web.servlet.ServletRegistrationBean[])>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void <init>(org.springframework.boot.web.servlet.ServletRegistrationBean[])>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: java.lang.String determineUniqueName()>-><java.util.UUID: java.util.UUID randomUUID()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: org.springframework.boot.info.GitProperties gitProperties()>-><org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git: java.nio.charset.Charset getEncoding()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: java.lang.String getProtocol()>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.TrustManager[] configureTrustManagers()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Node: int getChildCount()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getAuthority()>
<java.util.concurrent.ConcurrentSkipListMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisStandaloneConfiguration: void setPassword(org.springframework.data.redis.connection.RedisPassword)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.util.List getSchemas()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: java.lang.String printDomain(java.security.ProtectionDomain)>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: java.lang.Object getBeanOrNull(java.lang.Class)>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object getSharedObject(java.lang.Class)>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext fromSerializer(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext just(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.javaboy.vhr.config.SecurityConfig: void lambda$loginFilter$0(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.Authentication)>-><org.apache.catalina.connector.CoyoteWriter: void write(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<org.springframework.web.client.RestTemplate: org.springframework.web.util.DefaultUriBuilderFactory initUriTemplateHandler()>-><org.springframework.web.util.DefaultUriBuilderFactory: void <init>()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.base.DatabaseType: void setConfigConnectionProps(org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.lang.ClassLoader)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties$Pool: void <init>()>-><java.time.Duration: java.time.Duration ofMinutes(long)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.flywaydb.core.internal.database.postgresql.PostgreSQLDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.security.access.expression.method.ExpressionBasedPostInvocationAdvice: void <init>(org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.security.web.server.header.XXssProtectionServerHttpHeadersWriter: void updateDelegate()>-><org.springframework.security.web.server.header.XXssProtectionServerHttpHeadersWriter: java.lang.String createHeaderValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>-><org.springframework.web.context.request.AbstractRequestAttributes: boolean isRequestActive()>
<java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.MessageHeader: void <init>()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: org.springframework.data.redis.core.ReactiveRedisTemplate reactiveRedisTemplate(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext build()>
<synthetic.method.SecurityWebFilterChainImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getTarget()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<org.springframework.security.config.core.GrantedAuthorityDefaults: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.security.web.header.writers.HstsHeaderWriter: void <init>(org.springframework.security.web.util.matcher.RequestMatcher,long,boolean,boolean)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration: org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers platformTransactionManagerCustomizers(org.springframework.beans.factory.ObjectProvider)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<java.util.Collections$SetFromMap: java.util.Iterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.FileOutputStream: void write(int)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.io.PrintStream: void write(byte[],int,int)>-><java.io.PrintStream: void flush()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.net.Proxy: java.lang.String toString()>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>-><java.net.PlainSocketImpl: int socketGetOption(int,java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setQueue(org.springframework.amqp.core.Queue)>
<org.apache.catalina.connector.ResponseFacade: void setStatus(int)>-><org.apache.catalina.connector.Response: void setStatus(int)>
<sun.net.www.HeaderParser$ParserIterator: java.lang.Object next()>-><sun.net.www.HeaderParser$ParserIterator: java.lang.String next()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Node: java.util.stream.Node getChild(int)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.ChunkedInputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.common.UnicodeString$FormatRun: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: boolean welcomeTemplateExists(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.protocol.http.HttpCallerInfo getHttpCallerInfo()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: int getPort()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: java.lang.String getOrDeducePassword(org.springframework.boot.autoconfigure.security.SecurityProperties$User,org.springframework.security.crypto.password.PasswordEncoder)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: java.util.Spliterator makeSpliterator(java.util.Spliterator)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnectionFromDriver(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.flywaydb.core.internal.database.firebird.FirebirdDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: void <init>(java.lang.String,int)>
<org.springframework.security.web.header.Header: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$DoubleArrayNode: long count()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.LongPipeline: java.util.stream.Node$Builder makeNodeBuilder(long,java.util.function.IntFunction)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<org.springframework.web.util.pattern.CaptureVariablePathElement: void <init>(int,char[],boolean,char)>-><org.springframework.web.util.pattern.PathElement: void <init>(int,char)>
<org.apache.catalina.connector.ResponseFacade: void setStatus(int)>-><org.apache.catalina.connector.ResponseFacade: boolean isCommitted()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfDouble spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.net.Proxy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><java.io.PrintStream: void flush()>
<org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler: void <init>()>-><org.springframework.security.web.server.DefaultServerRedirectStrategy: void <init>()>
<org.apache.tomcat.jni.Library: void <init>()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.boot.web.client.RestTemplateBuilder$RequestFactoryCustomizer: void <init>()>-><org.springframework.boot.web.client.RestTemplateBuilder$RequestFactoryCustomizer: void <init>(java.time.Duration,java.time.Duration,java.lang.Boolean)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientResources(io.lettuce.core.resource.ClientResources)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.pattern.RegexPathElement: int getNormalizedLength()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.XXssProtectionServerHttpHeadersWriter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration$LocaleCharsetMappingsCustomizer localeCharsetMappingsCustomizer()>-><org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration$LocaleCharsetMappingsCustomizer: void <init>(org.springframework.boot.web.servlet.server.Encoding)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: java.lang.String[] getPackagesToScan()>-><org.springframework.boot.autoconfigure.AutoConfigurationPackages: boolean has(org.springframework.beans.factory.BeanFactory)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.File: void <init>(java.lang.String,java.lang.String)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider findProvider(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$NoTemplateAvailabilityProvider: boolean isTemplateAvailable(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>
<java.util.SimpleTimeZone: java.lang.Object clone()>-><java.util.TimeZone: java.lang.Object clone()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getPhone()>
<org.springframework.security.config.annotation.web.configurers.PermitAllSupport: void permitAll(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher[])>-><org.springframework.security.access.SecurityConfig: java.util.List createList(java.lang.String[])>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.User: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Collection)>-><java.lang.Object: void <init>()>
<org.springframework.http.HttpHeaders: java.util.List put(java.lang.String,java.util.List)>-><org.springframework.http.HttpHeaders: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.beans.CachedIntrospectionResults: boolean isClassLoaderAccepted(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean forwardedHeaderFilter()>-><org.springframework.boot.web.servlet.RegistrationBean: void setOrder(int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.io.DataInputStream: int readInt()>-><sun.net.www.MeteredStream: int read()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: int length()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder jwtDecoderByPublicKeyValue()>-><java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>
<java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><sun.security.util.Debug: void println(java.lang.String)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: boolean determineEnabled()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.util.List access$600(org.springframework.boot.autoconfigure.amqp.RabbitProperties)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.AbstractPipeline: java.util.Spliterator wrapSpliterator(java.util.Spliterator)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: java.util.List getInterceptors()>-><java.util.stream.ReferencePipeline: java.util.stream.Stream sorted(java.util.Comparator)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isArrayType()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.net.ApplicationProxy: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: void <init>()>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><org.springframework.http.InvalidMediaTypeException: void <init>(java.lang.String,java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.ServerProperties getServerPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.ServerProperties: void setSsl(org.springframework.boot.web.server.Ssl)>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskSchedulingProperties: java.lang.String getThreadNamePrefix()>
<java.text.AttributeEntry: java.lang.String toString()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder roles(java.lang.String[])>-><org.springframework.security.core.authority.SimpleGrantedAuthority: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<org.springframework.web.util.pattern.InternalPathPatternParser: boolean peekDoubleWildcard()>-><org.springframework.web.util.pattern.PatternParseException: void <init>(int,char[],org.springframework.web.util.pattern.PatternParseException$PatternMessage,java.lang.Object[])>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.security.ssl.Krb5Helper$1: java.lang.Object run()>-><sun.security.ssl.Krb5Helper$1: sun.security.ssl.Krb5Proxy run()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.String getBeanName(java.lang.Class,java.lang.String[])>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator spliterator()>
<sun.net.www.MessageHeader: java.util.Map getHeaders(java.lang.String[])>-><sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>
<org.springframework.security.web.authentication.logout.LogoutFilter: void <init>(org.springframework.security.web.authentication.logout.LogoutSuccessHandler,org.springframework.security.web.authentication.logout.LogoutHandler[])>-><org.springframework.web.filter.GenericFilterBean: void <init>()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.springframework.data.redis.core.DefaultReactiveSetOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory redisConnectionFactory(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources)>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.MeteredStream: void close()>-><java.io.PushbackInputStream: void close()>
<io.lettuce.core.TimeoutOptions$DefaultTimeoutSource: void <init>(io.lettuce.core.TimeoutOptions$1)>-><io.lettuce.core.TimeoutOptions$DefaultTimeoutSource: void <init>()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void setPriority(int)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.concurrent.ForkJoinTask: java.lang.Object invoke()>
<org.apache.tomcat.util.buf.ByteChunk: void recycle()>-><org.apache.tomcat.util.buf.AbstractChunk: void recycle()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$9: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: java.lang.String[] getMappingResources()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaProperties: java.util.List getMappingResources()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes: java.util.stream.Node$Builder$OfLong longBuilder(long)>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><org.springframework.util.AntPathMatcher: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void accept(java.lang.Object)>
<org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration: org.mybatis.spring.SqlSessionTemplate sqlSessionTemplate(org.apache.ibatis.session.SqlSessionFactory)>-><org.mybatis.spring.SqlSessionTemplate: void <init>(org.apache.ibatis.session.SqlSessionFactory)>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource methodMetadataSource(org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>-><org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory: void <init>(org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher notMatchingMediaType(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.http.MediaType)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,org.springframework.http.MediaType[])>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntFixedNodeBuilder: void begin(long)>
<org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void ensureOpen()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyRegistrationConfiguration: org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository relyingPartyRegistrationRepository(org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyProperties)>-><org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository: void <init>(java.util.Collection)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setDryRunOutput(java.io.File)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory createLettuceConnectionFactory(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration)>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void <init>(org.springframework.data.redis.connection.RedisStandaloneConfiguration,org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.h2.H2DatabaseType: java.lang.String getName()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.LinkedList: boolean add(java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setInterceptors(java.lang.Object[])>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: void <init>()>-><org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void <init>()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainCustomizerConfiguration: org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.WebProperties)>-><org.springframework.boot.autoconfigure.web.WebProperties: org.springframework.boot.autoconfigure.web.WebProperties$Resources getResources()>
<sun.net.www.protocol.http.HttpURLConnection$7: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$7: java.net.ProxySelector run()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$DoubleArraySpliterator: boolean tryAdvance(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setMultipartConfigElement(javax.servlet.MultipartConfigElement)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDataSourcePoolMetadataProvider(org.springframework.boot.jdbc.metadata.DataSourcePoolMetadataProvider)>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: void <init>(java.lang.String,org.springframework.http.HttpMethod)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.pattern.InternalPathPatternParser: void recordCapturedVariable(int,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><sun.nio.cs.ThreadLocalCoders: java.nio.charset.CharsetEncoder encoderFor(java.lang.Object)>
<java.io.FilterOutputStream: void flush()>-><java.io.BufferedOutputStream: void flush()>
<org.springframework.security.web.access.expression.WebExpressionVoter: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.rsocket.RSocketSecurity: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.ByteBuffer: byte[] array()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.lang.String: char[] toCharArray()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.PasswordAuthentication privilegedRequestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getArgumentResolvers()>-><org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void addArgumentResolvers(java.util.List)>
<org.springframework.boot.autoconfigure.hazelcast.HazelcastInstanceFactory: void <init>(com.hazelcast.config.Config)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.access.AccessDeniedHandler createDefaultDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.HashMap: int size()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.Sink$ChainedReference: boolean cancellationRequested()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.util.Date: void <init>(long)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction: java.lang.Object run()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setMongoDatabaseFactorySupport(org.springframework.data.mongodb.core.MongoDatabaseFactorySupport)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.Year: java.lang.String toString()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari: com.zaxxer.hikari.HikariDataSource dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String getName()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: void <init>(java.util.Spliterator,long,long,long,long)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean hasCharacteristics(int)>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutFilter createLogoutFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getLogoutRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.io.FileInputStream: int read(byte[],int,int)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void updateDelegate()>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator spliterator()>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.File: java.lang.String getCanonicalPath()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.security.AccessController: java.security.AccessControlContext getContext()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.springframework.jmx.export.annotation.AnnotationMBeanExporter: void setDefaultDomain(java.lang.String)>-><org.springframework.jmx.export.naming.MetadataNamingStrategy: void setDefaultDomain(java.lang.String)>
<java.io.FilterInputStream: void reset()>-><java.io.BufferedInputStream: void reset()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.ChunkedInputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: java.util.Spliterator trySplit()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.informix.InformixDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<java.net.Socket: void connect(java.net.SocketAddress,int)>-><java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<sun.net.www.http.HttpCaptureInputStream: void close()>-><java.io.FilterInputStream: void close()>
<java.lang.Object: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.NetworkClient$2: java.lang.Object run()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><java.io.InputStream: void close()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getInstalledBy()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.naming.NamingException: java.lang.String toString()>
<org.springframework.boot.autoconfigure.task.TaskSchedulingProperties: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Node$OfInt: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setMethodInterceptor(org.aopalliance.intercept.MethodInterceptor)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.util.zip.InflaterInputStream: long skip(long)>
<sun.net.www.http.ChunkedOutputStream: boolean checkError()>-><java.io.PrintStream: boolean checkError()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><java.io.InputStream: void close()>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder customizers(java.lang.Iterable)>-><org.springframework.boot.task.TaskSchedulerBuilder: void <init>(java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.String,java.util.Set)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: long estimateSize()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.KeepAliveStream: void mark(int)>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceSslClientConfigurationBuilder useSsl()>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingSslClientConfigurationBuilder useSsl()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.security.util.HostnameChecker: boolean match(java.lang.String,java.security.Principal)>-><sun.security.util.HostnameChecker: java.lang.String getServerName(java.security.Principal)>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$ConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>
<java.io.FilterOutputStream: void flush()>-><java.io.OutputStream: void flush()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadSource(org.springframework.core.io.Resource,java.nio.charset.Charset)>-><org.springframework.core.io.support.EncodedResource: void <init>(org.springframework.core.io.Resource,java.nio.charset.Charset)>
<java.util.stream.AbstractTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: int getDatabase()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: org.springframework.web.servlet.DispatcherServlet dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)>-><org.springframework.web.servlet.FrameworkServlet: void setPublishEvents(boolean)>
<org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.authentication.ReactiveAuthenticationManager authenticationManager()>-><org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void setUserDetailsPasswordService(org.springframework.security.core.userdetails.ReactiveUserDetailsPasswordService)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$LongArraySpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>-><java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.http.HttpClient: boolean isCachedConnection()>
<java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString()>-><javax.security.auth.Subject: java.lang.String toString(boolean)>
<org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor methodSecurityInterceptor(org.springframework.security.access.method.AbstractMethodSecurityMetadataSource)>-><org.springframework.aop.support.AbstractPointcutAdvisor: void setOrder(int)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$ErrorPageCustomizer: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties,org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath)>-><java.lang.Object: void <init>()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>-><java.io.ByteArrayOutputStream: int size()>
<org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: void <init>(org.springframework.http.HttpHeaders)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskSchedulingProperties$Shutdown: boolean isAwaitTermination()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.ContentNegotiatingViewResolver viewResolver(org.springframework.beans.factory.BeanFactory)>-><org.springframework.web.servlet.view.ContentNegotiatingViewResolver: void setOrder(int)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.servlet.MultipartProperties)>-><org.springframework.boot.autoconfigure.web.servlet.MultipartProperties: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hpsf.Section: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration: org.springframework.cache.support.SimpleCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,java.util.Collection)>-><org.springframework.cache.support.SimpleCacheManager: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.lang.String: int length()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.awt.Point: java.lang.String toString()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Sink$ChainedInt: void begin(long)>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: void remove()>
<java.text.MessageFormat: boolean equals(java.lang.Object)>-><java.util.Locale: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentTypeOptionsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.TreeMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.MeteredStream: void justRead(long)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.HashMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.WeakHashMap$KeySpliterator: int characteristics()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder authenticationManagerBuilder(org.springframework.security.config.annotation.ObjectPostProcessor,org.springframework.context.ApplicationContext)>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder authenticationEventPublisher(org.springframework.security.authentication.AuthenticationEventPublisher)>
<java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String reducePath(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getTransactionAwareConnectionProxy(javax.sql.DataSource)>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>-><java.lang.Math: long max(long,long)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<org.apache.catalina.connector.CoyoteWriter: void close()>-><org.apache.catalina.connector.OutputBuffer: void close()>
<reactor.util.function.Tuple2: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.boot.LazyInitializationExcludeFilter getLazyInitializationExcludeFilter()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mustache.MustacheProperties getMustachePropertiesInstance()>-><org.springframework.boot.autoconfigure.mustache.MustacheProperties: void setSuffix(java.lang.String)>
<org.springframework.aop.support.StaticMethodMatcher: void <init>()>-><java.lang.Object: void <init>()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.jdbc.DriverDataSource: java.lang.String detectFallbackUrl(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>
<reactor.util.function.Tuple4: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.HashMap: int size()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator$OfLong spliterator()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: org.springframework.web.servlet.DispatcherServlet dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)>-><org.springframework.web.servlet.FrameworkServlet: void setDispatchTraceRequest(boolean)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void closeServer()>
<java.net.HttpConnectSocketImpl: int getLocalPort()>-><java.net.SocketImpl: int getLocalPort()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.AbstractList$ListItr: int previousIndex()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ArrayNode: java.util.Spliterator spliterator()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator spliterator()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Node: int getChildCount()>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setTomcatWebSocketServletWebServerCustomizer(org.springframework.boot.autoconfigure.websocket.servlet.TomcatWebSocketServletWebServerCustomizer)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String scheme()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.cockroachdb.CockroachDBDatabaseType: java.lang.String getName()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.ProgressSource: void setContentType(java.lang.String)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfInt spliterator()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.io.DataOutputStream: void flush()>-><java.io.PrintStream: void flush()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void registerJsr310(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><java.lang.Object: java.lang.Class getClass()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.HttpClient: java.io.InputStream getInputStream()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity securityContext(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.SecurityConfigurerAdapter getOrApply(org.springframework.security.config.annotation.SecurityConfigurerAdapter)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.io.support.PropertiesLoaderUtils: java.util.Properties loadProperties(org.springframework.core.io.support.EncodedResource)>-><java.util.Properties: void <init>()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.data.redis.connection.RedisStandaloneConfiguration: void setHostName(java.lang.String)>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: void <init>(org.springframework.boot.autoconfigure.orm.jpa.JpaProperties)>-><org.springframework.boot.autoconfigure.orm.jpa.JpaProperties: void <init>()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<org.springframework.security.web.savedrequest.RequestCacheAwareFilter: void <init>(org.springframework.security.web.savedrequest.RequestCache)>-><org.springframework.web.filter.GenericFilterBean: void <init>()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void setIncludeSubDomains(boolean)>-><org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void updateDelegate()>
<org.springframework.security.web.server.WebFilterChainProxy: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<org.springframework.data.redis.cache.RedisCacheManager: void <init>(org.springframework.data.redis.cache.RedisCacheWriter,org.springframework.data.redis.cache.RedisCacheConfiguration,boolean)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.Boolean getSkipExecutingMigrations()>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: java.util.Map createSharedObjects()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: int capacity()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations: io.r2dbc.spi.ConnectionFactory createConnectionFactory(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.lang.ClassLoader,java.util.List)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder: org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder configure(java.util.function.Consumer)>
<java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder poolSize(int)>-><org.springframework.boot.task.TaskSchedulerBuilder: void <init>(java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.String,java.util.Set)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider getProvider(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.String: java.lang.String trim()>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.SubList$1: void add(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.FileInputStream: int available()>
<java.net.Socket: int getSoTimeout()>-><java.net.Socket: boolean isClosed()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><sun.net.www.http.HttpClient: void closeServer()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.security.access.method.MethodSecurityMetadataSource getMethodSecurityMetadataSource()>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>-><org.apache.catalina.connector.OutputBuffer: int transfer(java.lang.String,int,int,java.nio.CharBuffer)>
<org.springframework.web.util.pattern.InternalPathPatternParser: char[] getPathElementText()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setThreadPoolTaskScheduler(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$EmptySpliterator: java.util.Spliterator trySplit()>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.io.FilterInputStream: int read(byte[])>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void reorderXmlConvertersToEnd(java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<org.springframework.boot.web.reactive.result.view.MustacheViewResolver: void <init>(com.samskivert.mustache.Mustache$Compiler)>-><org.springframework.web.reactive.result.view.UrlBasedViewResolver: void <init>()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.WildcardPathElement: int getScore()>
<org.springframework.web.util.pattern.LiteralPathElement: void <init>(int,char[],boolean,char)>-><org.springframework.web.util.pattern.PathElement: void <init>(int,char)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.HeapCharBuffer: java.nio.CharBuffer get(char[],int,int)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.apache.tomcat.jni.Library: boolean initialize(java.lang.String)>-><org.apache.tomcat.jni.Library: boolean initialize()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: boolean isAuthorizationStale(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.util.Base64: java.util.Base64$Encoder getEncoder()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setCustomArgumentResolvers(java.util.List)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setConnectionTimeout(java.time.Duration)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator: void forEachRemaining(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.data.redis.connection.RedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.cache.RedisCacheManager: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder builder(org.springframework.data.redis.connection.RedisConnectionFactory)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: java.lang.String substring(int,int)>
<org.apache.tomcat.jni.Library: boolean initialize(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PatternParseException$PatternMessage: java.lang.String formatMessage(java.lang.Object[])>-><java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.task.TaskSchedulingProperties getTaskSchedulingPropertiesInstance()>
<org.flywaydb.core.internal.database.sqlite.SQLiteDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$FixedNodeBuilder: void begin(long)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.IdentityHashMap$IdentityHashMapSpliterator: long estimateSize()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfDouble spliterator()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setRelyingPartyRegistrationRepository(org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setValidator(org.springframework.validation.Validator)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxHide$SuppressFuseableSubscriber: boolean isEmpty()>
<org.flywaydb.core.internal.database.mysql.MySQLDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.http.client.support.HttpAccessor: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory createLettuceConnectionFactory(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration)>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<reactor.core.publisher.Operators: void onNextDropped(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.autoconfigure.AutoConfigurationPackages: java.util.List get(org.springframework.beans.factory.BeanFactory)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>-><java.lang.String: void <init>(byte[],int,int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.Extension: java.lang.String toString()>
<org.springframework.security.access.expression.AbstractSecurityExpressionHandler: void setApplicationContext(org.springframework.context.ApplicationContext)>-><org.springframework.context.expression.BeanFactoryResolver: void <init>(org.springframework.beans.factory.BeanFactory)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy()>-><org.springframework.security.web.csrf.CsrfAuthenticationStrategy: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void <init>()>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter: void <init>()>-><org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter: org.springframework.security.web.server.header.ServerHttpHeadersWriter createDelegate(org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determinePassword()>-><org.springframework.boot.jdbc.EmbeddedDatabaseConnection: boolean isEmbedded(java.lang.String,java.lang.String)>
<org.springframework.data.redis.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheConfiguration defaultCacheConfig(java.lang.ClassLoader)>-><org.springframework.format.support.DefaultFormattingConversionService: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.net.URL: int getPort()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.User: org.springframework.security.core.userdetails.User$UserBuilder withUsername(java.lang.String)>-><org.springframework.security.core.userdetails.User: org.springframework.security.core.userdetails.User$UserBuilder builder()>
<org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor: void <init>(org.mybatis.spring.SqlSessionTemplate,org.mybatis.spring.SqlSessionTemplate$1)>-><org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor: void <init>(org.mybatis.spring.SqlSessionTemplate)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.security.action.GetIntegerAction: java.lang.Object run()>-><sun.security.action.GetIntegerAction: java.lang.Integer run()>
<java.util.stream.SliceOps$1: java.util.Spliterator unorderedSkipLimitSpliterator(java.util.Spliterator,long,long,long)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>
<sun.net.NetworkClient$1: java.lang.Void run()>-><java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>
<org.springframework.core.Constants: java.util.Set getValues(java.lang.String)>-><java.util.HashMap: void forEach(java.util.function.BiConsumer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setReactiveRedisTemplate(org.springframework.data.redis.core.ReactiveRedisTemplate)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>-><java.lang.Math: long min(long,long)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.context.support.MessageSourceAccessor: void <init>(org.springframework.context.MessageSource)>
<org.apache.catalina.connector.ResponseFacade: void setContentType(java.lang.String)>-><org.apache.catalina.connector.ResponseFacade: boolean isCommitted()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<org.apache.tomcat.util.buf.CharChunk: void append(char)>-><org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>
<java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.data.redis.cache.RedisCacheConfiguration: void registerDefaultConverters(org.springframework.core.convert.converter.ConverterRegistry)>-><org.springframework.core.convert.support.GenericConversionService: void addConverter(java.lang.Class,java.lang.Class,org.springframework.core.convert.converter.Converter)>
<org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration: org.springframework.security.context.DelegatingApplicationListener delegatingApplicationListener()>-><org.springframework.security.context.DelegatingApplicationListener: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.XXssProtectionServerHttpHeadersWriter: void updateDelegate()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter build()>
<sun.net.www.protocol.http.HttpURLConnection$8: java.io.OutputStream run()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream access$100(sun.net.www.protocol.http.HttpURLConnection)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.lang.String detectFallbackUrl(java.lang.String)>-><org.flywaydb.core.api.FlywayException: void <init>(java.lang.String)>
<org.flywaydb.core.internal.database.oracle.OracleDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeRegularOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.LinkedList$ListItr: void add(java.lang.Object)>-><java.util.LinkedList: void linkLast(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.util.Date getBeginContract()>
<org.javaboy.vhr.model.Position: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari: com.zaxxer.hikari.HikariDataSource dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)>-><org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration: java.lang.Object createDataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,java.lang.Class)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource: void <init>(java.util.List)>-><org.springframework.security.access.method.AbstractMethodSecurityMetadataSource: void <init>()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>-><org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getMessageConverters()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.BasicAuthentication: boolean supportsPreemptiveAuthorization()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration: org.springframework.context.support.PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><java.util.Stack: java.lang.Object push(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator spliterator()>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext just(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder newSerializationContext(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.Object: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManagerBean()>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object lazyBean(java.lang.Class)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>
<org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: void <init>()>-><org.springframework.http.HttpHeaders: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.context.properties.PropertyMapper$Source: void to(java.util.function.Consumer)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.io.PushbackInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.oracle.OracleDatabaseType: java.lang.String getName()>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><java.net.CookieHandler: java.net.CookieHandler getDefault()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder json()>
<org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.OutputStream: void close()>
<org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration: org.springframework.boot.autoconfigure.websocket.servlet.TomcatWebSocketServletWebServerCustomizer websocketServletWebServerCustomizer()>-><org.springframework.boot.autoconfigure.websocket.servlet.TomcatWebSocketServletWebServerCustomizer: void <init>()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getSessionMutex()>-><org.springframework.web.util.WebUtils: java.lang.Object getSessionMutex(javax.servlet.http.HttpSession)>
<java.util.concurrent.Executors$RunnableAdapter: java.lang.Object call()>-><io.netty.util.internal.ThreadExecutorMap$2: void run()>
<org.flywaydb.core.internal.database.snowflake.SnowflakeDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.Nodes$InternalNodeSpliterator: int characteristics()>
<org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext,boolean)>-><org.springframework.data.redis.core.script.DefaultReactiveScriptExecutor: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext)>
<java.io.BufferedInputStream: int available()>-><sun.net.www.MeteredStream: int available()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator spliterator()>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.SortedOps$AbstractRefSortingSink: boolean cancellationRequested()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getMessageConverters()>-><org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void configureMessageConverters(java.util.List)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder entityManagerFactoryBuilder(org.springframework.orm.jpa.JpaVendorAdapter,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters$1: java.util.List defaultMessageConverters()>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getMessageConverters()>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: void <init>()>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler taskScheduler(org.springframework.boot.task.TaskSchedulerBuilder)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void configurePartConverters(org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter,java.util.Collection)>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: int getKey(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createDefaultSavedRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>
<org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(org.springframework.boot.autoconfigure.security.SecurityProperties)>-><org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: java.util.EnumSet getDispatcherTypes(org.springframework.boot.autoconfigure.security.SecurityProperties)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setPublisherConfirmType(org.springframework.amqp.rabbit.connection.CachingConnectionFactory$ConfirmType)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.Integer: int intValue()>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder threadNamePrefix(java.lang.String)>-><org.springframework.boot.task.TaskSchedulerBuilder: void <init>(java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.String,java.util.Set)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean dispatcherServletRegistration(org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void setName(java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory createLettuceConnectionFactory(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration)>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void <init>(org.springframework.data.redis.connection.RedisSentinelConfiguration,org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration)>
<java.text.ChoiceFormat: boolean equals(java.lang.Object)>-><java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <init>(org.springframework.web.accept.ContentNegotiationStrategy)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$PermitStatus permitStatus()>-><java.util.concurrent.atomic.AtomicLong: long get()>
<java.util.Spliterators$EmptySpliterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>-><java.util.Spliterators$EmptySpliterator: void forEachRemaining(java.lang.Object)>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.StringHttpMessageConverter: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.boot.autoconfigure.web.WebProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.autoconfigure.web.WebProperties: void <init>()>
<org.flywaydb.core.internal.database.informix.InformixDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.security.access.SecurityConfig: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><java.io.FileInputStream: int read(byte[])>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.net.URL: int getDefaultPort()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.LinkedList$ListItr: int previousIndex()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.ObjectName: java.lang.String toString()>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<org.springframework.data.redis.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheConfiguration defaultCacheConfig(java.lang.ClassLoader)>-><org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair: org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair fromSerializer(org.springframework.data.redis.serializer.RedisSerializer)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setUsername(java.lang.String)>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setRequestBodyAdvice(java.util.List)>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: boolean usesVendorLocation(java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration$DefaultPasswordEncoderAuthenticationManagerBuilder: void <init>(org.springframework.security.config.annotation.ObjectPostProcessor,org.springframework.security.crypto.password.PasswordEncoder)>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: void <init>(org.springframework.security.config.annotation.ObjectPostProcessor)>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.cache.CacheProperties getCachePropertiesInstance()>-><org.springframework.boot.autoconfigure.cache.CacheProperties: void <init>()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: void <init>()>-><java.lang.Object: void <init>()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String getAttribute()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.Vector: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$2: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.HttpClient: boolean isInKeepAliveCache()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setRequestMappingHandlerMapping(org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder queueCapacity(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicy()>-><javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.io.FilterInputStream: void reset()>-><java.util.zip.InflaterInputStream: void reset()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: int transfer(java.lang.String,int,int,java.nio.CharBuffer)>-><java.lang.Math: int min(int,int)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.security.web.header.Header: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.context.request.AbstractRequestAttributesScope: java.lang.Object resolveContextualObject(java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object resolveReference(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.net.URL: int getPort()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.security.crypto.password.PasswordEncoder getPasswordEncoder()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getDefaultSchema()>
<sun.util.logging.PlatformLogger: void finest(java.lang.String)>-><sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: int transfer(java.lang.String,int,int,java.nio.CharBuffer)>-><java.nio.Buffer: int remaining()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.math.BigInteger: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: int characteristics()>
<sun.net.www.ParseUtil: boolean isEscaped(java.lang.String,int)>-><sun.net.www.ParseUtil: boolean match(char,long,long)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: long estimateSize()>
<org.springframework.security.config.web.server.ServerHttpSecurity$CorsSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>-><org.springframework.security.config.web.server.ServerHttpSecurity$CorsSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><java.lang.Object: void <init>()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>-><org.springframework.web.context.request.AbstractRequestAttributes: boolean isRequestActive()>
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: java.lang.String getKey()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: void setPersistenceUnitManager(org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager)>
<org.apache.tomcat.util.buf.C2BConverter: void <init>(java.nio.charset.Charset)>-><java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$EmptyNode: long count()>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: java.util.Spliterator trySplit()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setReactiveJwtDecoder(org.springframework.security.oauth2.jwt.ReactiveJwtDecoder)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.access.AccessDeniedHandler createDefaultDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.HashMap: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.lang.StringBuilder: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.format.support.FormattingConversionService mvcConversionService()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Format: java.lang.String getDateTime()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.util.List parseAddresses(java.lang.String)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.net.HostPortrange: int[] defaultPort()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)>-><java.io.InputStream: void close()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Nation: java.lang.String getName()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void <init>()>-><org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void updateDelegate()>
<org.springframework.security.authentication.AnonymousAuthenticationProvider: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.context.support.MessageSourceAccessor: void <init>(org.springframework.context.MessageSource)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$4(org.springframework.security.web.session.SessionInformationExpiredEvent)>-><org.apache.catalina.connector.ResponseFacade: java.io.PrintWriter getWriter()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void setGridFsDatabase(java.lang.String)>
<org.springframework.security.web.util.matcher.OrRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: void setEnd(int)>
<io.lettuce.core.TimeoutOptions: io.lettuce.core.TimeoutOptions enabled()>-><io.lettuce.core.TimeoutOptions$Builder: io.lettuce.core.TimeoutOptions build()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: void closeUnderlying()>-><sun.net.www.http.ChunkedInputStream: boolean hurry()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.boot.autoconfigure.web.ErrorProperties,java.util.List)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.ContentNegotiatingViewResolver viewResolver(org.springframework.beans.factory.BeanFactory)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: java.lang.Object getBeanOrNull(java.lang.Class)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Long: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: java.lang.String toString()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.WeakHashMap$WeakHashMapSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<javax.security.auth.SubjectDomainCombiner$1: java.lang.Void run()>-><sun.security.util.Debug: void println(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$1Splitr: java.util.Spliterator trySplit()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.feed.RssChannelHttpMessageConverter: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.FileInputStream: void close()>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.String: int length()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateCustomizer[])>-><java.util.Collections: java.util.Set emptySet()>
<java.util.AbstractList: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jackson.JacksonProperties getJacksonPropertiesInstance()>-><org.springframework.boot.autoconfigure.jackson.JacksonProperties: void setDefaultPropertyInclusion(com.fasterxml.jackson.annotation.JsonInclude$Include)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.client.RestTemplate$HeadersExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setSkipDefaultResolvers(boolean)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.view.UrlBasedViewResolver: void setViewClass(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<org.springframework.http.InvalidMediaTypeException: void <init>(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractPipeline: long exactOutputSizeIfKnown(java.util.Spliterator)>
<sun.net.www.http.HttpCaptureInputStream: int read()>-><java.io.FilterInputStream: int read()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureCreateSchemas(org.flywaydb.core.api.configuration.FluentConfiguration,boolean)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.net.URL: int getPort()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>-><sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean isReferenceType()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>-><org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: java.lang.String getOrDeducePassword(org.springframework.boot.autoconfigure.security.SecurityProperties$User,org.springframework.security.crypto.password.PasswordEncoder)>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void info(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Node$OfLong: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher pathMatchers(org.springframework.http.HttpMethod,java.lang.String[])>-><java.util.ArrayList: void <init>(int)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.String: int length()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void reorderXmlConvertersToEnd(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList: void <init>()>
<org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy: void <init>(java.lang.String,org.springframework.security.web.RedirectStrategy)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setRSocketSecurity(org.springframework.security.config.annotation.rsocket.RSocketSecurity)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.io.BufferedOutputStream: void flush()>-><java.io.PrintStream: void flush()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: java.util.Spliterator trySplit()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.net.Socket: int getLocalPort()>-><java.net.HttpConnectSocketImpl: int getLocalPort()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.config.http.SessionCreationPolicy getSessionCreationPolicy()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object getSharedObject(java.lang.Class)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.io.BufferedInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><java.io.BufferedInputStream: void close()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>-><org.springframework.security.access.expression.AbstractSecurityExpressionHandler: org.springframework.expression.ExpressionParser getExpressionParser()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$IntArrayNode: void forEach(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource methodMetadataSource(org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void setUseSuffixPatternMatch(boolean)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder builder()>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: java.lang.Object performBuild()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$1: java.util.Iterator iterator()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.UndertowHeadersAdapter,org.springframework.http.server.reactive.UndertowHeadersAdapter$1)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.boot.web.client.RestTemplateBuilder: java.util.Set copiedSetOf(java.lang.Object[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration: org.springframework.context.support.DefaultLifecycleProcessor defaultLifecycleProcessor(org.springframework.boot.autoconfigure.context.LifecycleProperties)>-><java.time.Duration: long toMillis()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.catalina.connector.CoyoteWriter: void write(java.lang.String)>-><java.lang.String: int length()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><com.rabbitmq.client.impl.nio.ByteBufferOutputStream: void write(int)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: void <init>()>-><org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: java.util.List getDefaultLifecycleListeners()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.net.SocketInputStream: int read(byte[],int,int)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Policy$1: java.lang.String run()>-><java.security.Security: java.lang.String getProperty(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.bootstrap.AbstractBootstrap: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser$ParserIterator: java.lang.Object next()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><java.lang.String: char[] toCharArray()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setStream(java.lang.Boolean)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: boolean determineEnabled()>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setTablespace(java.lang.String)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder awaitTerminationPeriod(java.time.Duration)>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: void <init>(java.util.List)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce: org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce$Cluster getCluster()>
<org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: org.springframework.boot.web.client.RestTemplateBuilder restTemplateBuilder(org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer)>-><org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer: org.springframework.boot.web.client.RestTemplateBuilder configure(org.springframework.boot.web.client.RestTemplateBuilder)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: long getContentLengthLong()>
<org.springframework.security.access.SecurityConfig: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.URL: java.lang.String getAuthority()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration: org.springframework.http.converter.StringHttpMessageConverter stringHttpMessageConverter(org.springframework.core.env.Environment)>-><org.springframework.boot.context.properties.bind.Binder: java.lang.Object bindOrCreate(java.lang.String,java.lang.Class)>
<java.io.FilterInputStream: void mark(int)>-><sun.net.www.http.KeepAliveStream: void mark(int)>
<org.springframework.security.web.authentication.logout.DelegatingLogoutSuccessHandler: void <init>(java.util.LinkedHashMap)>-><java.lang.Object: void <init>()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: void openServer()>-><sun.net.NetworkClient: void openServer(java.lang.String,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void setReadTimeout(int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: void cancel()>-><java.util.stream.AbstractShortCircuitTask: void setLocalResult(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PrecisionRecord: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setMustacheViewResolver(org.springframework.boot.web.servlet.view.MustacheViewResolver)>
<java.util.stream.Nodes$AbstractConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>-><java.util.stream.Nodes$ArrayNode: long count()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer standardJacksonObjectMapperBuilderCustomizer(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.jackson.JacksonProperties)>
<javax.imageio.stream.FileCacheImageInputStream: long readUntil(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setJacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer(org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer)>
<java.util.AbstractList: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.URL: java.lang.String getProtocol()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager build()>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><java.lang.Object: void <init>()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap: void <init>()>
<org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void <init>(java.lang.String,boolean)>-><java.lang.String: java.lang.String trim()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$RangeIntSpliterator: java.util.Spliterator trySplit()>
<org.springframework.web.util.pattern.InternalPathPatternParser: boolean peekDoubleWildcard()>-><org.springframework.http.server.PathContainer$Options: char separator()>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><java.net.HttpURLConnection: void <init>(java.net.URL)>
<org.apache.catalina.connector.Response: long getContentWritten()>-><org.apache.catalina.connector.OutputBuffer: long getContentWritten()>
<org.javaboy.vhr.utils.POIUtils: java.util.List excel2Employee(org.springframework.web.multipart.MultipartFile,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.SocketImpl: int getPort()>
<javax.security.auth.SubjectDomainCombiner: void printInputDomains(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: java.lang.String printDomain(java.security.ProtectionDomain)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: java.util.Map getHeaders(java.lang.String[])>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$EmptyNode: void forEach(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.SpinedBuffer$OfInt$1Splitr: boolean tryAdvance(java.util.function.IntConsumer)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.data.redis.serializer.DefaultRedisSerializationContext: void <init>(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><java.lang.Object: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HstsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HstsConfig: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HstsConfig enable()>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: void <init>()>-><org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Map)>
<org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter: void <init>()>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder cbor()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.stream.Node$OfPrimitive: java.util.stream.Node getChild(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.BitSet: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration: void <init>()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: java.util.Map getHeaders()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.URL: java.lang.String getPath()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.security.x509.RDN: sun.security.util.DerValue findAttribute(sun.security.util.ObjectIdentifier)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.HashMap$KeySpliterator: int characteristics()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.util.stream.Node build()>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntArrayNode: long count()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.EmptyInputStream: void <init>()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.boot.jdbc.EmbeddedDatabaseConnection: boolean isEmbedded(java.lang.String,java.lang.String)>-><org.springframework.boot.jdbc.EmbeddedDatabaseConnection: boolean isEmbeddedUrl(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: void <init>(org.springframework.boot.autoconfigure.orm.jpa.JpaProperties)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.CaptureVariablePathElement: void <init>(int,char[],boolean,char)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.String: java.lang.String toLowerCase()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity servletApi(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.SecurityConfigurerAdapter getOrApply(org.springframework.security.config.annotation.SecurityConfigurerAdapter)>
<org.springframework.security.core.userdetails.User: org.springframework.security.core.userdetails.User$UserBuilder withUsername(java.lang.String)>-><org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder username(java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setCleanDisabled(boolean)>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder customizers(java.lang.Iterable)>-><org.springframework.boot.task.TaskSchedulerBuilder: java.util.Set append(java.util.Set,java.lang.Iterable)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><org.apache.poi.poifs.filesystem.DocumentInputStream: int read()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.data.util.Pair: java.lang.String toString()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void setMaxAge(java.time.Duration)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.sql.Date: java.lang.String toString()>
<org.springframework.data.redis.core.ReactiveStringRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory)>-><org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext string()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.Streams$RangeIntSpliterator: int characteristics()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int lastIndexOf(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$ArraySpliterator: long estimateSize()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadSource(org.springframework.core.io.Resource,java.nio.charset.Charset)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.net.URL: java.lang.String getAuthority()>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfLong: void forEach(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.nio.cs.StreamDecoder: int readBytes()>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.Boolean getOracleSqlplusWarn()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><javax.xml.stream.FactoryConfigurationError: java.lang.String getMessage()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>
<sun.net.www.MeteredStream: int read()>-><java.io.FilterInputStream: int read()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: int getResponseCode()>-><java.net.HttpURLConnection: int getResponseCode()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.io.InputStream: int read(byte[],int,int)>
<org.springframework.core.Constants: java.util.Set getValues(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><javax.net.ssl.SSLSocketFactory: void log(java.lang.String)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setReadTimeout(int)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getOpaque()>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder username(java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.ServerProperties getServerPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.ServerProperties: void setServerHeader(java.lang.String)>
<io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder: io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder enableAllAdaptiveRefreshTriggers()>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager build()>-><org.springframework.data.redis.cache.DefaultRedisCacheWriter: org.springframework.data.redis.cache.RedisCacheWriter withStatisticsCollector(org.springframework.data.redis.cache.CacheStatisticsCollector)>
<java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.net.URLConnection: long getContentLengthLong()>-><java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientOptions(io.lettuce.core.ClientOptions)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: int characteristics()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setUsername(java.lang.String)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.database.sybasease.SybaseASEJTDSDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.KeyManager[] configureKeyManagers()>-><java.io.BufferedInputStream: void close()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.session.ConcurrentSessionFilter createConcurrencyFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.ReferencePipeline: java.util.stream.Node$Builder makeNodeBuilder(long,java.util.function.IntFunction)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeRegularOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: java.lang.String getUrl()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.FileInputStream: int read(byte[],int,int)>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping welcomePageHandlerMapping(org.springframework.context.ApplicationContext,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: void <init>(org.springframework.context.ApplicationContext)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object resolveReference(java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.data.redis.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheConfiguration defaultCacheConfig(java.lang.ClassLoader)>-><org.springframework.data.redis.serializer.RedisSerializer: org.springframework.data.redis.serializer.RedisSerializer string()>
<java.net.URLPermission: java.lang.String actions()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.LinkedHashMap$LinkedValues: void forEach(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties getDruidStatPropertiesInstance()>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties: void setAopPatterns(java.lang.String[])>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.time.Duration getConnectTimeout()>
<java.net.URI: java.net.URI normalize()>-><java.net.URI: java.net.URI normalize(java.net.URI)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.boot.autoconfigure.task.TaskExecutionProperties: void <init>()>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Shutdown: void <init>()>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientRegistrationRepositoryConfiguration: org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository clientRegistrationRepository(org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties)>-><org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository: void <init>(java.util.List)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean dispatcherServletRegistration(org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Servlet: java.lang.String getPath()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>
<org.springframework.boot.autoconfigure.web.reactive.TomcatReactiveWebServerFactoryCustomizer: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setParameterNamesModule(com.fasterxml.jackson.module.paramnames.ParameterNamesModule)>
<sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>-><java.lang.String: int length()>
<org.apache.catalina.connector.Response: void setCharacterEncoding(java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: java.lang.String getOrDeducePassword(org.springframework.boot.autoconfigure.security.SecurityProperties$User,org.springframework.security.crypto.password.PasswordEncoder)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.Hashtable: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: long estimateSize()>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><io.netty.util.concurrent.SingleThreadEventExecutor: void wakeup(boolean)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.charset.CoderResult: boolean isError()>
<java.util.concurrent.Executors$DelegatedExecutorService: void shutdown()>-><java.util.concurrent.Executors$DelegatedExecutorService: void shutdown()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$IntFixedNodeBuilder: void end()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: boolean hurry()>-><sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: boolean isAllowSessionCreation()>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.config.http.SessionCreationPolicy getSessionCreationPolicy()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.net.ssl.SSLSocketFactory$1: java.lang.String run()>-><java.security.Security: java.lang.String getProperty(java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.List sortErrorViewResolvers(java.util.List)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.nio.cs.StreamDecoder: int readBytes()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.nio.charset.Charset: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer: java.util.List getCallableInterceptors()>
<org.springframework.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration: org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers platformTransactionManagerCustomizers(org.springframework.beans.factory.ObjectProvider)>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.zip.ZipFile: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.net.Socket: void setSoLinger(boolean,int)>-><java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>
<io.lettuce.core.TimeoutOptions$Builder: io.lettuce.core.TimeoutOptions$Builder timeoutSource(io.lettuce.core.TimeoutOptions$TimeoutSource)>-><io.lettuce.core.TimeoutOptions$Builder: io.lettuce.core.TimeoutOptions$Builder timeoutCommands(boolean)>
<org.springframework.data.redis.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheConfiguration defaultCacheConfig(java.lang.ClassLoader)>-><org.springframework.data.redis.cache.RedisCacheConfiguration: void <init>(java.time.Duration,java.lang.Boolean,java.lang.Boolean,org.springframework.data.redis.cache.CacheKeyPrefix,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.core.convert.ConversionService)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.http.client.support.InterceptingHttpAccessor: void <init>()>-><java.util.ArrayList: void <init>()>
<org.springframework.security.core.userdetails.User$UserBuilder: void <init>(org.springframework.security.core.userdetails.User$1)>-><org.springframework.security.core.userdetails.User$UserBuilder: void <init>()>
<org.springframework.security.web.session.SessionManagementFilter: void <init>(org.springframework.security.web.context.SecurityContextRepository,org.springframework.security.web.authentication.session.SessionAuthenticationStrategy)>-><org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler: void <init>()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.HeaderParser: java.util.Iterator keys()>-><sun.net.www.HeaderParser$ParserIterator: void <init>(sun.net.www.HeaderParser,boolean)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String reducePath(java.lang.String)>-><java.lang.String: int lastIndexOf(int)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<sun.net.www.MeteredStream: int available()>-><sun.net.httpserver.Request$ReadStream: int available()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.ByteArrayHttpMessageConverter: void <init>()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><sun.net.www.http.HttpClient: void closeServer()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog: void debug(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(sun.net.www.protocol.http.HttpCallerInfo,java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.ArrayPtg: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.security.config.annotation.authentication.configuration.GlobalAuthenticationConfigurerAdapter: void <init>()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: byte[] getKeySpec(java.lang.String)>-><java.util.Base64: java.util.Base64$Decoder getMimeDecoder()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer: void <init>()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.data.redis.connection.RedisSentinelConfiguration: void setUsername(java.lang.String)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getDefaultConverters()>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters$1: void <init>(org.springframework.boot.autoconfigure.http.HttpMessageConverters)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: org.flywaydb.core.Flyway flyway(org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: void configure(com.fasterxml.jackson.databind.ObjectMapper)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder: org.springframework.orm.jpa.JpaVendorAdapter access$200(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.http.KeepAliveStreamCleaner$2: java.lang.Object run()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder roles(java.lang.String[])>-><java.lang.StringBuilder: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver authenticationPrincipalArgumentResolver()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$EmptyNode: long count()>
<org.flywaydb.core.internal.database.postgresql.PostgreSQLDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.apache.catalina.connector.Response$PrivilegedEncodeUrl: org.apache.tomcat.util.buf.CharChunk run()>-><org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>
<javax.net.ssl.SSLSocketFactory$1: java.lang.Object run()>-><javax.net.ssl.SSLSocketFactory$1: java.lang.String run()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.core.session.SessionRegistry getSessionRegistry(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.AbstractList$ListItr: void add(java.lang.Object)>-><java.util.AbstractList$Itr: void checkForComodification()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.Vector: int size()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void reorderXmlConvertersToEnd(java.util.List)>-><java.util.ArrayList: void <init>()>
<java.io.PrintWriter: void newLine()>-><org.apache.catalina.connector.OutputBuffer: void write(java.lang.String)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.InputStream)>-><java.io.FilterInputStream: void <init>(java.io.InputStream)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.io.DataInputStream: short readShort()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitTemplateConfiguration: org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer rabbitTemplateConfigurer(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer: void setRetryTemplateCustomizers(java.util.List)>
<org.springframework.cache.concurrent.ConcurrentMapCacheManager: void setCacheNames(java.util.Collection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setWebFilterChainProxy(org.springframework.security.web.server.WebFilterChainProxy)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: void <init>()>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: void <init>()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.format.support.FormattingConversionService mvcConversionService()>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: org.springframework.boot.autoconfigure.web.format.DateTimeFormatters dateTimeFormat(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.lang.String getHost()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheValue: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configurePathMatch(org.springframework.web.servlet.config.annotation.PathMatchConfigurer)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.ForgivingExceptionHandler: void log(java.lang.String,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.Permission: java.lang.String toString()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$IntWrappingSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Policy$2: javax.security.auth.Policy run()>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.ByteChunk: void <init>(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IntArraySpliterator: java.util.Spliterator trySplit()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Properties: void <init>()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><java.util.Arrays$ArrayList: java.lang.Object[] toArray()>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>-><java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: void <init>()>-><java.lang.Object: void <init>()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.CryptoPermissionCollection: java.util.Enumeration elements()>
<java.util.stream.Sink$ChainedReference: boolean cancellationRequested()>-><java.util.stream.SliceOps$1$1: boolean cancellationRequested()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.io.InputStream: int read(byte[],int,int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfLong spliterator()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>-><java.lang.String: boolean endsWith(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.savedrequest.NullRequestCache: void <init>()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.util.Assert: void state(boolean,java.lang.String)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration: void <init>()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.api.FlywayException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.savedrequest.RequestCache getRequestCache(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean available()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity logout(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainResourceHandlerRegistrationCustomizer: void <init>(org.springframework.boot.autoconfigure.web.WebProperties$Resources)>-><java.lang.Object: void <init>()>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<org.apache.catalina.connector.OutputBuffer: int transfer(java.lang.String,int,int,java.nio.CharBuffer)>-><org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: org.springframework.security.web.server.SecurityWebFilterChain springSecurityFilterChain(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration$OAuth2ClasspathGuard: void configure(org.springframework.context.ApplicationContext,org.springframework.security.config.web.server.ServerHttpSecurity)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder authenticationEventPublisher(org.springframework.security.authentication.AuthenticationEventPublisher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.http.KeepAliveStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>-><org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter: void <init>(com.fasterxml.jackson.databind.ObjectMapper,org.springframework.http.MediaType)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.DefaultServerRedirectStrategy: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.web.access.expression.WebExpressionVoter: void <init>()>-><java.lang.Object: void <init>()>
<java.net.URLPermission: java.lang.String actions()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object postProcess(java.lang.Object)>-><org.javaboy.vhr.config.SecurityConfig$1: java.lang.Object postProcess(java.lang.Object)>
<java.io.PrintWriter: void write(java.lang.String,int,int)>-><org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint createDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.HashMap: int size()>
<java.net.URLPermission: java.lang.String actions()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><org.springframework.http.MediaType: void <init>(org.springframework.util.MimeType)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration: void <init>()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setGroup(boolean)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.WebProperties getWebPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.WebProperties: void setLocaleResolver(org.springframework.boot.autoconfigure.web.WebProperties$LocaleResolver)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.InetSocketAddress: java.lang.String getHostName()>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Socket: void <init>(java.net.Proxy)>
<org.springframework.aop.target.SingletonTargetSource: java.lang.Class getTargetClass()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: int characteristics()>
<java.util.EnumMap: int entryHashCode(int)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<org.springframework.security.web.access.expression.WebExpressionVoter: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<sun.net.www.http.HttpClient: boolean available()>-><java.net.Socket: void setSoTimeout(int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.ServerProperties getServerPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.ServerProperties: void setShutdown(org.springframework.boot.web.server.Shutdown)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setSimpleCacheManager(org.springframework.cache.support.SimpleCacheManager)>
<org.apache.tomcat.jni.Library: void <init>()>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder shutdownTimeout(java.time.Duration)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder shutdownTimeout(java.time.Duration)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: org.javaboy.vhr.model.JobLevel getJobLevel()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.core.session.SessionRegistry getSessionRegistry(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void registerDelegateApplicationListener(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.context.ApplicationListener)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: void remove()>
<sun.net.www.protocol.https.HttpsClient: java.net.Socket createSocket()>-><sun.net.NetworkClient: java.net.Socket createSocket()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<sun.net.www.http.HttpCaptureOutputStream: void flush()>-><java.io.FilterOutputStream: void flush()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor configure(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper get()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: int characteristics()>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void addMapping(java.lang.String,java.lang.Class)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentTypeOptionsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentTypeOptionsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createDefaultSavedRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.LinkedList$LLSpliterator: int characteristics()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint createDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.LinkedHashMap: java.util.Collection values()>
<java.util.AbstractList$ListItr: void add(java.lang.Object)>-><java.util.ConcurrentModificationException: void <init>()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.SubjectDomainCombiner$4: java.lang.Object run()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.ServerProperties getServerPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.ServerProperties: void setMaxHttpHeaderSize(org.springframework.util.unit.DataSize)>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: java.lang.String getOrDeducePassword(org.springframework.boot.autoconfigure.security.SecurityProperties$User,org.springframework.security.crypto.password.PasswordEncoder)>-><java.util.regex.Matcher: boolean matches()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: void <init>(org.springframework.security.config.annotation.ObjectPostProcessor,org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder,java.util.Map)>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><sun.security.util.HostnameChecker: boolean matchWildCards(java.lang.String,java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void <init>()>
<org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateCustomizer[])>-><org.springframework.boot.web.client.RestTemplateBuilder$RequestFactoryCustomizer: void <init>()>
<java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationToken: void <init>(java.lang.String,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Integer extractKeyHash(java.lang.String)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.String: java.lang.String toLowerCase()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: int remaining()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$IntArrayNode: java.util.Spliterator spliterator()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><java.io.BufferedInputStream: void close()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,java.util.List)>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void configureContentNegotiation(org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureContentNegotiation(org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.NegotiateAuthentication: byte[] nextToken(byte[])>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.Character: boolean isISOControl(char)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: org.javaboy.vhr.model.Politicsstatus getPoliticsstatus()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void debug(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$ConcNode: java.util.Spliterator spliterator()>
<java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.httpserver.SSLStreams$OutputStream: void write(int)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: org.springframework.web.servlet.DispatcherServlet dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: boolean isLogRequestDetails()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.data.redis.connection.RedisConnectionFactory,org.springframework.core.io.ResourceLoader)>
<org.springframework.web.util.pattern.PathPattern: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: char getSeparator()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.Streams$ConcatSpliterator: int characteristics()>
<java.util.stream.Nodes$AbstractConcNode: java.util.stream.Node getChild(int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.boot.autoconfigure.task.TaskSchedulingProperties$Shutdown: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.TreeMap$KeySpliterator: int characteristics()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration: void <init>()>
<org.springframework.data.redis.cache.RedisCacheConfiguration: void <init>(java.time.Duration,java.lang.Boolean,java.lang.Boolean,org.springframework.data.redis.cache.CacheKeyPrefix,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.core.convert.ConversionService)>-><java.lang.Object: void <init>()>
<java.util.Collections$SetFromMap: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean containsKey(java.lang.Object)>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager createDefaultAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.resource.DefaultClientResources lettuceClientResources()>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration: void <init>()>-><javax.management.AttributeList: void <init>()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.net.SocksSocketImpl: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: java.lang.String getHostString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: java.util.Iterator keys()>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>-><java.util.SimpleTimeZone: int getRawOffset()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: void end()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor()>-><org.apache.commons.logging.LogAdapter$Slf4jLog: void warn(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Vector$VectorSpliterator: int characteristics()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.SubjectDomainCombiner$1: java.lang.Object run()>
<sun.net.www.ParseUtil: java.net.URI createURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.net.URI: void <init>(java.lang.String)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.catalina.core.AprStatus: boolean isAprInitialized()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration build()>-><org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: void <init>(boolean,boolean,boolean,io.lettuce.core.resource.ClientResources,io.lettuce.core.ClientOptions,java.lang.String,io.lettuce.core.ReadFrom,java.time.Duration,java.time.Duration,java.time.Duration)>
<java.io.DataOutputStream: void writeByte(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setCreateSchemas(boolean)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>-><org.springframework.context.support.AbstractResourceBasedMessageSource: java.util.Locale getDefaultLocale()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setAsyncRequestTimeout(long)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer: void <init>()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutSuccessHandler getLogoutSuccessHandler()>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutSuccessHandler createDefaultSuccessHandler()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveStreamCleaner: boolean offer(sun.net.www.http.KeepAliveCleanerEntry)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void forEach(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$CacheControlConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$CacheControlConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>
<org.springframework.web.util.pattern.InternalPathPatternParser: void skipCaptureRegex()>-><org.springframework.web.util.pattern.PatternParseException: void <init>(int,char[],org.springframework.web.util.pattern.PatternParseException$PatternMessage,java.lang.Object[])>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainCustomizerConfiguration: void <init>()>
<java.io.BufferedInputStream: long skip(long)>-><sun.net.www.MeteredStream: long skip(long)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder poolSize(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object lazyBean(java.lang.Class)>-><org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: void setTargetBeanName(java.lang.String)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><java.lang.SecurityException: void <init>(java.lang.String)>
<javax.security.auth.Policy$2: java.lang.Object run()>-><javax.security.auth.Policy$2: javax.security.auth.Policy run()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentSecurityPolicyConfig: org.springframework.security.web.header.writers.ContentSecurityPolicyHeaderWriter access$1500(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentSecurityPolicyConfig)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicyNoCheck()>-><sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><java.util.SimpleTimeZone: int hashCode()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean isAuthorizationStale(java.lang.String)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: org.springframework.boot.info.GitProperties gitProperties()>-><org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathPattern parse(java.lang.String)>-><java.lang.Character: boolean isJavaIdentifierStart(char)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void addFormatters(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.support.FormattingConversionService: void addFormatterForFieldAnnotation(org.springframework.format.AnnotationFormatterFactory)>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object,java.lang.Throwable)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void <init>()>-><org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void setPreload(boolean)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: void <init>()>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: void <init>()>-><io.lettuce.core.TimeoutOptions: io.lettuce.core.TimeoutOptions enabled()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: void customizeConfigurationFromUrl(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo: boolean isUseSsl()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Vector$VectorSpliterator: int characteristics()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>
<java.io.FilePermission: boolean impliesIgnoreMask(java.io.FilePermission)>-><java.lang.String: int lastIndexOf(int)>
<org.springframework.boot.info.GitProperties: void coercePropertyToEpoch(java.util.Properties,java.lang.String)>-><org.springframework.boot.info.GitProperties: java.lang.String coerceToEpoch(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getQuery()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.util.Arrays: void fill(byte[],byte)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.httpserver.Request$WriteStream: void close()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getMessageConverters()>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void configureMessageConverters(java.util.List)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>
<java.util.stream.SliceOps: long calcSize(long,long,long)>-><java.lang.Math: long min(long,long)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.String: int lastIndexOf(int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.stream.Nodes$AbstractConcNode: java.util.stream.Node getChild(int)>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: org.springframework.boot.autoconfigure.web.format.DateTimeFormatters dateTimeFormat(java.lang.String)>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: boolean isIso(java.lang.String)>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.stream.ReferencePipeline$2$1: void begin(long)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.springframework.boot.jdbc.EmbeddedDatabaseConnection: org.springframework.boot.jdbc.EmbeddedDatabaseConnection getEmbeddedDatabaseConnection(java.lang.String)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getDefaultConverters()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.String: java.lang.String toLowerCase()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.MBeanInfo: java.lang.String toString()>
<io.netty.util.internal.ThreadExecutorMap$1: void execute(java.lang.Runnable)>-><java.util.concurrent.Executors$DelegatedExecutorService: void execute(java.lang.Runnable)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.authentication.logout.LogoutWebFilter: void <init>()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: void <init>(java.lang.String,java.lang.Object,java.util.Collection)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator spliterator()>
<java.util.stream.Nodes$ConcNode: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ArrayNode: long count()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.net.URL: java.lang.String getHost()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<synthetic.method.FilterChainImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.pattern.PathElement: void <init>(int,char)>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.cache.DefaultRedisCacheWriter: void <init>(org.springframework.data.redis.connection.RedisConnectionFactory,java.time.Duration)>-><org.springframework.data.redis.cache.CacheStatisticsCollector: org.springframework.data.redis.cache.CacheStatisticsCollector none()>
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void afterPropertiesSet()>-><org.springframework.security.authentication.dao.DaoAuthenticationProvider: void doAfterPropertiesSet()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><org.springframework.core.io.support.EncodedResource: org.springframework.core.io.Resource getResource()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><org.springframework.core.io.ClassPathResource: java.lang.String getFilename()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: void setDataSource(javax.sql.DataSource)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node getEmptyResult()>-><java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.util.Collections$3: boolean hasMoreElements()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.flywaydb.core.api.FlywayException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>-><org.springframework.expression.spel.InternalParseException: java.lang.Throwable getCause()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.IdentityHashMap$ValueSpliterator: int characteristics()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: java.util.Optional getWelcomePage()>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setLoginFilter(org.javaboy.vhr.config.LoginFilter)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.ServerProperties getServerPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.ServerProperties: void setAddress(java.net.InetAddress)>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(org.springframework.security.core.GrantedAuthority,org.springframework.security.core.GrantedAuthority)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.security.util.HostnameChecker: boolean matchLeftmostWildcard(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisClusterConfiguration getClusterConfiguration()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.lang.String getPassword()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.data.redis.core.DefaultReactiveZSetOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>-><java.lang.Object: void <init>()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber: boolean isEmpty()>
<reactor.util.function.Tuple4: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: java.lang.String[] getMappingResources()>-><org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.Buffer: java.nio.Buffer flip()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: java.util.List getDefaultLifecycleListeners()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>-><java.util.Vector: boolean isEmpty()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<javax.security.auth.Policy$2: javax.security.auth.Policy run()>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator subTypeValidator(com.fasterxml.jackson.databind.cfg.MapperConfig)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari: com.zaxxer.hikari.HikariDataSource dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)>
<java.io.PushbackInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor: void <init>(java.lang.String,org.springframework.security.access.method.MethodSecurityMetadataSource,java.lang.String)>-><org.springframework.aop.support.AbstractPointcutAdvisor: void <init>()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.springframework.security.web.header.Header: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><org.springframework.core.io.FileSystemResource: java.lang.String getFilename()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder eraseCredentials(boolean)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDefaultMethodSecurityExpressionHandler(org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setCachingConnectionFactory(org.springframework.amqp.rabbit.connection.CachingConnectionFactory)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.DigestAuthentication$1: java.lang.Object run()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.WeakHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<org.javaboy.vhr.VhrApplication: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getAddress()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.http.HttpClient: java.lang.String getProxyHostUsed()>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>-><java.util.ArrayList: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath: java.lang.String getServletUrlMapping()>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.Boolean getBatch()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.ibatis.mapping.ParameterMapping: java.lang.String toString()>
<org.springframework.security.authentication.DelegatingReactiveAuthenticationManager: void <init>(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$1: int size()>-><io.undertow.util.HeaderMap: int size()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object lazyBean(java.lang.Class)>-><org.springframework.aop.target.LazyInitTargetSource: void <init>()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfPrimitive$BaseSpliterator: boolean tryAdvance(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.security.web.util.matcher.OrRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.io.DataOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveCache: java.lang.Thread access$002(sun.net.www.http.KeepAliveCache,java.lang.Thread)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.task.TaskExecutorBuilder: java.util.Set append(java.util.Set,java.lang.Iterable)>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><java.io.InputStream: void close()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int lastIndexOf(int,int)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.amqp.rabbit.connection.AbstractConnectionFactory: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<org.springframework.web.servlet.view.UrlBasedViewResolver: void <init>()>-><java.util.HashMap: void <init>()>
<org.springframework.security.web.header.writers.CacheControlHeadersWriter: void <init>()>-><org.springframework.security.web.header.writers.StaticHeadersWriter: void <init>(java.util.List)>
<java.util.zip.ZipFile: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: java.lang.Object performBuild()>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>
<org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <init>(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.DefaultRedisElementWriter: void <init>(org.springframework.data.redis.serializer.RedisSerializer)>
<org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void setAuthenticationEntryPoint(org.springframework.security.web.AuthenticationEntryPoint)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthScheme getAuthScheme()>
<sun.net.www.MeteredStream: int available()>-><java.util.zip.ZipInputStream: int available()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.Spliterators$IntArraySpliterator: long estimateSize()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><sun.security.util.HostnameChecker: boolean match(java.lang.String,java.security.Principal)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeEmbeddedOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: java.lang.String determineEmbeddedUsername(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><sun.misc.SharedSecrets: sun.misc.JavaNetHttpCookieAccess getJavaNetHttpCookieAccess()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.AbstractList: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerOpaqueTokenConfiguration$OpaqueTokenIntrospectionClientConfiguration: org.springframework.security.oauth2.server.resource.introspection.NimbusReactiveOpaqueTokenIntrospector opaqueTokenIntrospector(org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties)>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.MeteredStream: void close()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<java.io.PrintStream: void write(java.lang.String)>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.ibatis.type.TypeReference: java.lang.String toString()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>-><java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addReturnValueHandlers(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mustache.MustacheProperties getMustachePropertiesInstance()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getConnection()>-><org.springframework.jdbc.datasource.DelegatingDataSource: javax.sql.DataSource obtainTargetDataSource()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.lang.StringBuilder: void <init>()>
<sun.net.httpserver.Request$ReadStream: void mark(int)>-><java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.support.EncodedResource,org.springframework.util.PropertiesPersister)>-><java.net.SocketInputStream: void close()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.ReactiveJwtDecoder jwtDecoder()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties$Jwt: java.lang.String getJwkSetUri()>
<org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>
<java.text.AttributeEntry: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.core.env.PropertySource: boolean containsProperty(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator: void <init>(java.util.Spliterator,long,long,long,long)>-><java.lang.AssertionError: void <init>()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration$TomcatWebSocketConfiguration: org.springframework.boot.autoconfigure.websocket.reactive.TomcatWebSocketReactiveWebServerCustomizer websocketReactiveWebServerCustomizer()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setGitProperties(org.springframework.boot.info.GitProperties)>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: void <init>()>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: void <init>()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor configure(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)>-><org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source from(java.lang.Object)>
<java.util.stream.Nodes: java.util.stream.Node conc(java.util.stream.StreamShape,java.util.stream.Node,java.util.stream.Node)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>
<java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$5$1: void accept(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean available()>-><java.net.Socket: int getSoTimeout()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: java.util.Spliterator trySplit()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><java.lang.Object: void notifyAll()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.data.redis.connection.RedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder cacheDefaults(org.springframework.data.redis.cache.RedisCacheConfiguration)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setGlobalAuthenticationConfigurerAdapter(org.springframework.security.config.annotation.authentication.configuration.GlobalAuthenticationConfigurerAdapter)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.JsonViewResponseBodyAdvice: void <init>()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.http.HttpClient: void openServer()>-><sun.net.www.http.HttpClient: void privilegedOpenServer(java.net.InetSocketAddress)>
<java.io.FilterInputStream: void reset()>-><java.io.InputStream: void reset()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>-><org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer: org.springframework.web.accept.ContentNegotiationManager buildContentNegotiationManager()>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.Vector$ListItr: void add(java.lang.Object)>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.lang.String: void <init>(char[],int,int)>
<java.util.SimpleTimeZone: boolean equals(java.lang.Object)>-><java.util.TimeZone: java.lang.String getID()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$3(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.apache.catalina.connector.ResponseFacade: java.io.PrintWriter getWriter()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: void reset()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: void <init>()>
<org.springframework.util.MimeType: void <init>(org.springframework.util.MimeType)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity csrf(org.springframework.security.config.Customizer)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addArgumentResolvers(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.io.PrintStream: void newLine()>-><java.io.PrintStream: void flush()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.CountryRecord: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity securityContext(org.springframework.security.config.Customizer)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<java.net.URLPermission: void init(java.lang.String)>-><java.net.URLPermission: void parseURI(java.lang.String)>
<org.springframework.context.annotation.MBeanExportConfiguration: org.springframework.jmx.export.annotation.AnnotationMBeanExporter mbeanExporter()>-><org.springframework.util.Assert: void state(boolean,java.lang.String)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.mysql.MySQLDatabaseType: java.lang.String getName()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setTomcatWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.embedded.TomcatWebServerFactoryCustomizer)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.boot.autoconfigure.web.WebProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: void <init>()>
<java.util.Vector$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.io.FilterInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.lang.String: java.lang.String copyValueOf(char[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.util.context.ContextN: java.lang.String toString()>
<org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: org.springframework.boot.task.TaskSchedulerBuilder taskSchedulerBuilder(org.springframework.boot.autoconfigure.task.TaskSchedulingProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.task.TaskSchedulingProperties: org.springframework.boot.autoconfigure.task.TaskSchedulingProperties$Pool getPool()>
<java.net.Socket: void setSoTimeout(int)>-><java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactory(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: java.lang.String[] getPackagesToScan()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean supportsPreemptiveAuthorization()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configurePathMatch(org.springframework.web.servlet.config.annotation.PathMatchConfigurer)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.mybatis.spring.SqlSessionTemplate: void <init>(org.apache.ibatis.session.SqlSessionFactory,org.apache.ibatis.session.ExecutorType,org.springframework.dao.support.PersistenceExceptionTranslator)>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object)>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.MeteredStream: int available()>-><java.util.zip.ZipFile$ZipFileInflaterInputStream: int available()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.ServerProperties getServerPropertiesInstance()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.URL: int getPort()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.ProtectRecord: java.lang.String toString()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleArrayNode: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.net.SocketInputStream: int available()>
<org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: org.springframework.web.context.request.WebRequest getObject()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory createLettuceConnectionFactory(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration)>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisClusterConfiguration getClusterConfiguration()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer findPropertyTypeSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: boolean isConcurrentSessionControlEnabled()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<org.springframework.security.web.server.header.XXssProtectionServerHttpHeadersWriter: void <init>()>-><org.springframework.security.web.server.header.XXssProtectionServerHttpHeadersWriter: void updateDelegate()>
<org.springframework.web.client.DefaultResponseErrorHandler: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: int characteristics()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationToken: void <init>(java.lang.Integer,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: void <init>(org.springframework.data.redis.cache.RedisCacheWriter)>-><org.springframework.data.redis.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheConfiguration defaultCacheConfig()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.io.FilterOutputStream: void close()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: org.springframework.boot.info.GitProperties gitProperties()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AnonymousAuthenticationToken: void <init>(java.lang.Integer,java.lang.Object,java.util.Collection)>-><java.lang.Integer: int intValue()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.InputStream: int read(byte[])>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void <init>(java.lang.String,boolean)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.SubList$1: boolean hasNext()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.StyleRecord: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void extendMessageConverters(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.jmx.support.MBeanRegistrationSupport: void setRegistrationPolicy(org.springframework.jmx.support.RegistrationPolicy)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getAlgorithm()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection: java.lang.String getUrl(java.lang.String)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: void updateHeaderValue()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.text.MessageFormat: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>-><org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: java.lang.String[] getPackagesToScan()>-><org.springframework.boot.autoconfigure.domain.EntityScanPackages: org.springframework.boot.autoconfigure.domain.EntityScanPackages get(org.springframework.beans.factory.BeanFactory)>
<org.apache.tomcat.util.buf.UEncoder: void urlEncode(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.ByteChunk: byte[] getBuffer()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.net.SocketInputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>-><org.javaboy.vhr.config.CustomFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.MeteredStream: void close()>
<sun.net.www.MeteredStream: void finalize()>-><sun.net.www.MeteredStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><java.util.ArrayList: java.util.Iterator iterator()>
<sun.net.www.MeteredStream: int read()>-><java.io.SequenceInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URL: java.lang.String getHost()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$ConcatSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.logout.LogoutSuccessEventPublishingLogoutHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint createDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.HashMap: boolean isEmpty()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void addMapping(java.lang.String,java.lang.Class)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveStream$1: void <init>()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.http.ChunkedInputStream: void processRaw()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity requestCache(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.SecurityConfigurerAdapter getOrApply(org.springframework.security.config.annotation.SecurityConfigurerAdapter)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: void <init>(org.springframework.boot.autoconfigure.data.redis.RedisProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeRegularOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: java.util.Map getProperties()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.sql.Timestamp: java.lang.String toString()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnection()>-><org.flywaydb.core.internal.jdbc.DriverDataSource: java.lang.String getUser()>
<java.io.FilterOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<org.springframework.core.io.support.PropertiesLoaderSupport: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: org.springframework.web.servlet.DispatcherServlet dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: boolean isThrowExceptionIfNoHandlerFound()>
<java.net.Socket: void connect(java.net.SocketAddress,int)>-><java.net.AbstractPlainSocketImpl: void connect(java.net.SocketAddress,int)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.stream.Node build()>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.PushbackInputStream: long skip(long)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration: org.springframework.boot.autoconfigure.web.reactive.TomcatReactiveWebServerFactoryCustomizer tomcatReactiveWebServerFactoryCustomizer(org.springframework.boot.autoconfigure.web.ServerProperties)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.BufferedOutputStream: void write(byte[],int,int)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo parseUrl(java.lang.String)>-><java.net.URI: java.lang.String getUserInfo()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void run()>-><sun.net.www.http.HttpClient: void closeServer()>
<java.util.JapaneseImperialCalendar: void computeTime()>-><java.util.SimpleTimeZone: int getOffsets(long,int[])>
<java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void <init>(java.io.OutputStream,sun.net.www.http.HttpCapture)>-><java.io.FilterOutputStream: void <init>(java.io.OutputStream)>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfLong spliterator()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.io.PrintStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<java.io.FilterInputStream: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$LongArraySpliterator: java.util.Spliterator trySplit()>
<org.apache.catalina.core.AprLifecycleListener: boolean isAprAvailable()>-><org.apache.catalina.core.AprStatus: boolean isInstanceCreated()>
<java.util.Calendar: java.lang.Object clone()>-><java.util.SimpleTimeZone: java.lang.Object clone()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties getR2dbcPropertiesInstance()>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: void <init>()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.security.config.annotation.authentication.configuration.GlobalAuthenticationConfigurerAdapter: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.ResponseFacade: boolean isCommitted()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.boot.jdbc.metadata.DataSourcePoolMetadataProvider getDataSourcePoolMetadataProvider()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Enum: java.lang.String toString()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.web.client.RestTemplate: org.springframework.web.util.DefaultUriBuilderFactory initUriTemplateHandler()>
<org.springframework.security.config.annotation.AbstractSecurityBuilder: java.lang.Object build()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void reset()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getSpecialty()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><sun.net.www.ParseUtil: void appendEscape(java.lang.StringBuffer,byte)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder jwtDecoderByPublicKeyValue()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: byte[] getKeySpec(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager build()>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ReferrerPolicyConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.SocksSocketImpl: void <init>(java.net.Proxy)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><java.io.FileInputStream: void close()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.lang.String detectFallbackUrl(java.lang.String)>-><org.flywaydb.core.internal.util.StringUtils: boolean hasText(java.lang.String)>
<sun.net.www.ParseUtil: java.net.URI createURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: void setMessageSource(org.springframework.context.MessageSource)>
<org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>-><org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>
<org.apache.tomcat.jni.Library: void <init>()>-><org.apache.tomcat.jni.LibraryNotFoundError: void <init>(java.lang.String,java.lang.String)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean supportsPreemptiveAuthorization()>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setRestTemplateBuilder(org.springframework.boot.web.client.RestTemplateBuilder)>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.ZipFile$ZipFileInputStream: void close()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getMessageConverters()>-><org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void extendMessageConverters(java.util.List)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void doTunneling(java.net.HttpURLConnection)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setUseCaches(boolean)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long acquirePermits(long)>-><java.util.concurrent.atomic.AtomicLong: long get()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.apache.poi.util.LittleEndianOutputStream: void writeInt(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isIgnorePendingMigrations()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.OffsetTime: java.lang.String toString()>
<sun.security.util.HostnameChecker: boolean isIpAddress(java.lang.String)>-><sun.net.util.IPAddressUtil: boolean isIPv4LiteralAddress(java.lang.String)>
<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.http.HttpClient: boolean available()>-><sun.net.www.http.HttpClient: void logFinest(java.lang.String)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientRegistrationRepositoryConfiguration: org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository clientRegistrationRepository(org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<org.springframework.web.servlet.view.UrlBasedViewResolver: void <init>()>-><org.springframework.web.servlet.view.AbstractCachingViewResolver: void <init>()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Policy$1: void <init>()>-><java.lang.Object: void <init>()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<io.netty.util.concurrent.SingleThreadEventExecutor: void reject(java.lang.Runnable)>-><io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$EmptySpliterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.Spliterators$IntArraySpliterator: long estimateSize()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><java.lang.Enum: int ordinal()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.stream.Nodes$ConcNode$OfLong: void <init>(java.util.stream.Node$OfLong,java.util.stream.Node$OfLong)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive,java.util.stream.Node$OfPrimitive)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: java.util.Spliterator trySplit()>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.Double getContractTerm()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getMessageConverters()>-><java.util.ArrayList: boolean isEmpty()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.IntPipeline: java.util.stream.Node$Builder makeNodeBuilder(long,java.util.function.IntFunction)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: void endAuthRequest(java.lang.String)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: boolean hasNext()>
<javax.security.auth.Policy$4: java.lang.Object run()>-><javax.security.auth.Policy$4: java.lang.String run()>
<org.springframework.boot.autoconfigure.task.TaskExecutionProperties: void <init>()>-><org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Pool: void <init>()>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.DefaultLettuceClientConfiguration: void <init>(boolean,boolean,boolean,io.lettuce.core.resource.ClientResources,io.lettuce.core.ClientOptions,java.lang.String,io.lettuce.core.ReadFrom,java.time.Duration,java.time.Duration,java.time.Duration)>-><java.lang.Object: void <init>()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder createBuilder(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder poolConfig(org.apache.commons.pool2.impl.GenericObjectPoolConfig)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getGender()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory: void destroy()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.zip.ZipFile: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: java.util.Spliterator trySplit()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder authenticationManagerBuilder(org.springframework.security.config.annotation.ObjectPostProcessor,org.springframework.context.ApplicationContext)>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object getBeanOrNull(org.springframework.context.ApplicationContext,java.lang.Class)>
<sun.net.NetworkClient: void setReadTimeout(int)>-><java.net.Socket: void setSoTimeout(int)>
<org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.authentication.logout.LogoutWebFilter: void <init>()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>
<sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.IntPipeline$3$1: void accept(int)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.AbstractList: boolean add(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.session.ConcurrentSessionFilter createConcurrencyFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.session.ConcurrentSessionFilter: void setLogoutHandlers(java.util.List)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.httpserver.SSLStreams$InputStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void <init>(java.lang.String,boolean)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: void parseHostAndPort(java.lang.String,boolean)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setRabbitMessagingTemplate(org.springframework.amqp.rabbit.core.RabbitMessagingTemplate)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void start()>
<java.util.Properties: void loadFromXML(java.io.InputStream)>-><java.io.InputStream: void close()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void flush()>-><org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><java.io.BufferedInputStream: void close()>
<org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.net.URL getURL()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice: void <init>()>-><org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler: void <init>()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver: void <init>(org.springframework.core.ReactiveAdapterRegistry)>-><org.springframework.expression.spel.standard.SpelExpressionParser: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$ConcatSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: org.springframework.security.web.server.SecurityWebFilterChain springSecurityFilterChain()>-><org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: org.springframework.security.web.server.SecurityWebFilterChain springSecurityFilterChain(org.springframework.security.config.web.server.ServerHttpSecurity)>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: void <init>(int,char[],char)>-><java.lang.String: void <init>(char[],int,int)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: void <init>()>-><org.javaboy.vhr.config.SecurityConfig$1: void <init>(org.javaboy.vhr.config.SecurityConfig)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void ensureOpen()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.io.PrintStream: boolean checkError()>-><java.io.PrintStream: void flush()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.net.SocketInputStream: int read()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<sun.net.www.http.HttpClient: void openServer()>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor()>-><org.apache.commons.logging.LogAdapter$Log4jLog: void warn(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration: void <init>(org.mybatis.spring.boot.autoconfigure.MybatisProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<java.io.FilterInputStream: void mark(int)>-><java.util.zip.InflaterInputStream: void mark(int)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Node$OfLong: void forEach(java.util.function.Consumer)>
<org.apache.catalina.connector.OutputBuffer: void close()>-><org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Deque initStack()>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: org.springframework.boot.web.client.RestTemplateBuilder restTemplateBuilder(org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer)>-><org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateCustomizer[])>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.api.FlywayException: void <init>(java.lang.String,java.lang.Throwable,org.flywaydb.core.api.ErrorCode)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.data.redis.connection.RedisSentinelConfiguration: void setDatabase(int)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isCleanOnValidationError()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.web.client.RestTemplate$HeadersExtractor: void <init>(org.springframework.web.client.RestTemplate$1)>-><org.springframework.web.client.RestTemplate$HeadersExtractor: void <init>()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.springframework.security.web.authentication.WebAuthenticationDetails: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.WildcardPathElement: int getNormalizedLength()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.Sink$ChainedInt: boolean cancellationRequested()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.NetworkClient: void setReadTimeout(int)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><java.nio.Buffer: int capacity()>
<java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator$OfDouble spliterator()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.SortedOps$SizedRefSortingSink: void begin(long)>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.KeyManager[] configureKeyManagers()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setRabbitTemplateConfigurer(org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: java.util.List getDefaultLifecycleListeners()>-><java.util.ArrayList: void <init>()>
<org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setRestTemplateBuilderConfigurer(org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.web.reactive.result.method.annotation.CurrentSecurityContextArgumentResolver reactiveCurrentSecurityContextArgumentResolver()>-><org.springframework.security.web.reactive.result.method.annotation.CurrentSecurityContextArgumentResolver: void <init>(org.springframework.core.ReactiveAdapterRegistry)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration build()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap: java.util.Set keySet()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager getAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager createDefaultAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: void <init>()>-><org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>
<org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter: void <init>()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: void <init>(java.lang.String,java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDefaultLifecycleProcessor(org.springframework.context.support.DefaultLifecycleProcessor)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: int length()>
<sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>-><sun.net.ProgressSource: void updateProgress(long,long)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: void <init>()>-><java.lang.Object: void <init>()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void ensureOpen()>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.concurrent.CountedCompleter: void tryComplete()>-><java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>-><sun.net.www.protocol.http.HttpURLConnection: boolean usingProxy()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: boolean isSuspended()>-><org.apache.catalina.connector.OutputBuffer: boolean isSuspended()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.InterceptorRegistry: java.util.List getInterceptors()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.HeaderParser: int findInt(java.lang.String,int)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$EmptyNode$OfRef: java.util.Spliterator spliterator()>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String[] getCherryPick()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthScheme getAuthScheme()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addReturnValueHandlers(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.util.stream.Node$OfLong build()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$LongArrayNode: long count()>
<reactor.core.publisher.Operators: void onDiscardQueueWithClear(java.util.Queue,reactor.util.context.Context,java.util.function.Function)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureMessageConverters(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurations(java.util.Map)>-><org.springframework.web.cors.UrlBasedCorsConfigurationSource: void <init>(org.springframework.web.util.pattern.PathPatternParser)>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><java.io.InputStream: int read(byte[],int,int)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getProtocol()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurations(java.util.Map)>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: org.springframework.web.util.pattern.PathPatternParser getPatternParser()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: void <init>(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder,javax.sql.DataSource,org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$1)>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: void <init>(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder,javax.sql.DataSource)>
<javax.security.auth.SubjectDomainCombiner$5: java.lang.String run()>-><java.security.ProtectionDomain: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryCustomizer: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>-><java.lang.Object: void <init>()>
<org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager: void <init>(org.springframework.security.core.userdetails.ReactiveUserDetailsService)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: boolean isEmpty()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.sybasease.SybaseASEJConnectDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap: java.util.Set entrySet()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UEncoder: void urlEncode(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><org.apache.tomcat.util.buf.AbstractChunk: int getEnd()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><sun.net.util.IPAddressUtil: byte[] textToNumericFormatV4(java.lang.String)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator$OfPrimitive spliterator()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.HttpURLConnection$TunnelState tunnelState()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: org.springframework.web.servlet.view.InternalResourceViewResolver defaultViewResolver()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$View: java.lang.String getPrefix()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.security.x509.AVA: java.lang.String toString()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.String: int length()>
<org.springframework.boot.autoconfigure.websocket.servlet.TomcatWebSocketServletWebServerCustomizer: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: long estimateSize()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration: com.fasterxml.jackson.module.paramnames.ParameterNamesModule parameterNamesModule()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter createRequestMappingHandlerAdapter()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor securityMethodInterceptor(org.springframework.security.access.method.AbstractMethodSecurityMetadataSource,org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>-><org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.ProgressMonitor: int getProgressUpdateThreshold()>-><sun.net.DefaultProgressMeteringPolicy: int getProgressUpdateThreshold()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.util.zip.ZipInputStream: long skip(long)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: void setPatternParser(org.springframework.web.util.pattern.PathPatternParser)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: boolean isSsl()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder commandTimeout(java.time.Duration)>
<sun.nio.cs.StreamDecoder: void implClose()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.MeteredStream: int available()>-><java.io.FileInputStream: int available()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.UEncoder: org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String,int,int)>-><org.apache.tomcat.util.buf.UEncoder: void urlEncode(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.cache.concurrent.ConcurrentMapCacheManager: org.springframework.cache.Cache createConcurrentMapCache(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: void <init>(int)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: int indexOf(java.lang.String)>
<org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration: org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor(org.springframework.core.env.Environment)>-><org.springframework.aop.framework.ProxyConfig: void setProxyTargetClass(boolean)>
<org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter: void <init>()>-><org.springframework.web.filter.OncePerRequestFilter: void <init>()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getCombinedConverters(java.util.Collection,java.util.List)>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: boolean isReplacement(org.springframework.http.converter.HttpMessageConverter,org.springframework.http.converter.HttpMessageConverter)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void addFormatters(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.number.money.MonetaryAmountFormatter: void <init>()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureContentNegotiation(org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void configureMessageConverters(java.util.List)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void configureMessageConverters(java.util.List)>
<sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.net.URL getURL()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer: void <init>()>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceSslClientConfigurationBuilder useSsl()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy: void setMessageSource(org.springframework.context.MessageSource)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.core.session.SessionRegistry getSessionRegistry(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: java.lang.Object getBeanOrNull(java.lang.Class)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$EmptyNode: long count()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void addIfNotNull(java.util.List,java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.String: boolean endsWith(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getCnonce()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeRegularOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><io.r2dbc.spi.ConnectionFactoryOptions: io.r2dbc.spi.ConnectionFactoryOptions parse(java.lang.CharSequence)>
<org.springframework.data.redis.cache.CacheStatisticsCollector: org.springframework.data.redis.cache.CacheStatisticsCollector create()>-><org.springframework.data.redis.cache.DefaultCacheStatisticsCollector: void <init>()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.security.AccessController: java.security.AccessControlContext createWrapper(java.security.DomainCombiner,java.lang.Class,java.security.AccessControlContext,java.security.AccessControlContext,java.security.Permission[])>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.flywaydb.core.api.configuration.FluentConfiguration: javax.sql.DataSource getDataSource()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: int length()>
<org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>-><org.springframework.boot.web.servlet.server.StaticResourceJars: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getCachedHA1()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.javaboy.vhr.config.SecurityConfig: void lambda$configure$4(org.springframework.security.web.session.SessionInformationExpiredEvent)>-><org.apache.catalina.connector.CoyoteWriter: void flush()>
<org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>-><java.util.HashMap: void <init>()>
<org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>-><org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getPlaceholderSuffix()>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.NetworkClient: int getReadTimeout()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.NetProperties$1: java.lang.Void run()>-><sun.net.NetProperties: void access$000()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder: void <init>(org.springframework.orm.jpa.JpaVendorAdapter,java.util.Map,org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager)>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder: void <init>(org.springframework.orm.jpa.JpaVendorAdapter,java.util.Map,org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager,java.net.URL)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getAuthority()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><org.apache.catalina.connector.Response$PrivilegedDoIsEncodable: java.lang.Object run()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnectionFromDriver(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setStringRedisTemplate(org.springframework.data.redis.core.StringRedisTemplate)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.net.SocketInputStream: void close()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: void forEachRemaining(java.util.function.Consumer)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.httpserver.Request$ReadStream: int read(byte[],int,int)>-><java.nio.HeapByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>
<org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.web.util.pattern.WildcardPathElement: void <init>(int,char)>-><org.springframework.web.util.pattern.PathElement: void <init>(int,char)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.config.RabbitConfig: org.springframework.amqp.rabbit.core.RabbitTemplate rabbitTemplate()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.HttpURLConnection$7: java.lang.Object run()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Map)>-><java.lang.Object: void <init>()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.lang.String detectFallbackPassword(java.lang.String)>-><java.lang.System: java.lang.String getenv(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.lang.String getClientName()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setStandardServletMultipartResolver(org.springframework.web.multipart.support.StandardServletMultipartResolver)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setAnnotationMBeanExporter(org.springframework.jmx.export.annotation.AnnotationMBeanExporter)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.util.function.Supplier)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeRegularOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>-><java.io.PrintStream: void <init>(java.io.OutputStream)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.Flux: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getTablespace()>
<org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder cbor()>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder factory(com.fasterxml.jackson.core.JsonFactory)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setRabbitTemplate(org.springframework.amqp.rabbit.core.RabbitTemplate)>
<org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.TreeMap$TreeMapSpliterator: long estimateSize()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.Spliterators$DoubleArraySpliterator: int characteristics()>
<org.javaboy.vhr.config.CustomFilterInvocationSecurityMetadataSource: java.util.Collection getAttributes(java.lang.Object)>-><org.javaboy.vhr.model.Menu: java.lang.String getUrl()>
<org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: org.springframework.security.config.annotation.rsocket.RSocketSecurity rsocketSecurity(org.springframework.context.ApplicationContext)>-><org.springframework.security.config.annotation.rsocket.RSocketSecurity: void <init>()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: org.flywaydb.core.Flyway flyway(org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>-><java.util.LinkedHashMap: void clear()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder authenticationManagerBuilder(org.springframework.security.config.annotation.ObjectPostProcessor,org.springframework.context.ApplicationContext)>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration$LazyPasswordEncoder: void <init>(org.springframework.context.ApplicationContext)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$2: java.net.CookieHandler run()>-><java.net.CookieHandler: java.net.CookieHandler getDefault()>
<sun.net.www.HeaderParser: sun.net.www.HeaderParser subsequence(int,int)>-><sun.net.www.HeaderParser: void <init>()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.boot.jdbc.EmbeddedDatabaseConnection: boolean isEmbedded(java.lang.String,java.lang.String)>-><org.springframework.boot.jdbc.EmbeddedDatabaseConnection: org.springframework.boot.jdbc.EmbeddedDatabaseConnection getEmbeddedDatabaseConnection(java.lang.String)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.io.FilterOutputStream: void close()>-><java.io.FilterOutputStream: void flush()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.resource.DefaultClientResources lettuceClientResources()>-><io.lettuce.core.resource.DefaultClientResources: io.lettuce.core.resource.DefaultClientResources create()>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider getProvider(java.lang.String,org.springframework.context.ApplicationContext)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider getProvider(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>-><com.alibaba.druid.support.http.StatViewServlet: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><java.lang.String: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.javaboy.vhr.model.Position: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<org.springframework.security.config.web.server.ServerHttpSecurity: void <init>()>-><org.springframework.security.config.web.server.ServerHttpSecurity$ExceptionHandlingSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.util.zip.InflaterInputStream: int read(byte[],int,int)>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.web.WebProperties$Resources)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.String: java.lang.String valueOf(int)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: java.lang.String determineDatabaseName(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties)>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: boolean isGenerateUniqueName()>
<java.util.ArrayList$SubList$1: void add(java.lang.Object)>-><java.util.ConcurrentModificationException: void <init>()>
<io.lettuce.core.TimeoutOptions$Builder: io.lettuce.core.TimeoutOptions$Builder connectionTimeout()>-><io.lettuce.core.TimeoutOptions$Builder: io.lettuce.core.TimeoutOptions$Builder timeoutSource(io.lettuce.core.TimeoutOptions$TimeoutSource)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.web.client.DefaultResponseErrorHandler: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.IdentityHashMap$ValueSpliterator: int characteristics()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)>-><sun.net.www.MeteredStream: void close()>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void updateFactory()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.Object: java.lang.Class getClass()>
<java.net.URLPermission: void init(java.lang.String)>-><java.net.URLPermission: java.lang.String actions()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.stream.Nodes$IntArrayNode: void forEach(java.util.function.IntConsumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfInt: void accept(int)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: void <init>()>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>
<org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler: void <init>()>-><java.net.URI: java.net.URI create(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.HttpURLConnection$1: java.lang.Object run()>
<org.springframework.web.servlet.mvc.ParameterizableViewController: void <init>()>-><java.lang.Enum: java.lang.String name()>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.PathMatchConfigurer: org.springframework.web.util.UrlPathHelper getUrlPathHelperOrDefault()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setConnectRetries(int)>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>
<org.javaboy.vhr.VhrApplication: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: org.flywaydb.core.Flyway flyway(org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void checkLocationExists(javax.sql.DataSource,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.core.io.ResourceLoader)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.security.web.authentication.logout.LogoutFilter: void setLogoutRequestMatcher(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.util.Map$Entry)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><org.apache.catalina.connector.OutputBuffer$PrivilegedCreateConverter: java.lang.Object run()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Date: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String[] getErrorOverrides()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: void customizeConfigurationFromUrl(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo parseUrl(java.lang.String)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: boolean isStateless()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<reactor.util.function.Tuple3: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.ObjectProvider)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<org.javaboy.vhr.config.SecurityConfig$1: org.springframework.security.web.access.intercept.FilterSecurityInterceptor postProcess(org.springframework.security.web.access.intercept.FilterSecurityInterceptor)>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: void setSecurityMetadataSource(org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.MessageHeader: void <init>()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void setMessageSource(org.springframework.context.MessageSource)>-><org.springframework.context.support.MessageSourceAccessor: void <init>(org.springframework.context.MessageSource)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node getEmptyResult()>-><java.util.stream.ReferencePipeline: java.util.stream.StreamShape getOutputShape()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping welcomePageHandlerMapping(org.springframework.context.ApplicationContext,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurations(java.util.Map)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedTomcat: void <init>()>
<java.util.Properties: void loadFromXML(java.io.InputStream)>-><java.io.FileInputStream: void close()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: java.lang.String scheme()>-><sun.net.www.HeaderParser: java.lang.String findKey(int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Throwable: java.lang.String toString()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.json.JsonbHttpMessageConverter: void <init>()>
<org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration: org.springframework.context.support.PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer()>-><org.springframework.context.support.PropertySourcesPlaceholderConfigurer: void <init>()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.ZipInputStream: void close()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setJdbcTemplate(org.springframework.jdbc.core.JdbcTemplate)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Nation: int hashCode()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.servlet.HttpServletBean: void setEnvironment(org.springframework.core.env.Environment)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setPlaceholders(java.util.Map)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.access.expression.AbstractSecurityExpressionHandler: void setApplicationContext(org.springframework.context.ApplicationContext)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isPrimitive()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.net.NetPermission: void <init>(java.lang.String)>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.web.header.Header: int hashCode()>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$IntArraySpliterator: boolean tryAdvance(java.util.function.IntConsumer)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.Integer: java.lang.String toHexString(int)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNonce(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.hazelcast.HazelcastInstanceFactory: com.hazelcast.core.HazelcastInstance getHazelcastInstance()>-><com.hazelcast.core.Hazelcast: com.hazelcast.core.HazelcastInstance newHazelcastInstance(com.hazelcast.config.Config)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.AbstractShortCircuitTask: void cancelLaterNodes()>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.HeaderRecord: java.lang.String toString()>
<io.lettuce.core.cluster.ClusterClientOptions: io.lettuce.core.cluster.ClusterClientOptions$Builder builder()>-><io.lettuce.core.cluster.ClusterClientOptions$Builder: void <init>()>
<org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration: org.springframework.boot.web.reactive.result.view.MustacheViewResolver mustacheViewResolver(com.samskivert.mustache.Mustache$Compiler,org.springframework.boot.autoconfigure.mustache.MustacheProperties)>-><org.springframework.boot.autoconfigure.template.AbstractTemplateViewResolverProperties: java.lang.String getRequestContextAttribute()>
<reactor.util.function.Tuple2: int hashCode()>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<javax.security.auth.Policy$2: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: org.springframework.data.redis.core.ReactiveRedisTemplate reactiveRedisTemplate(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.core.io.ResourceLoader)>
<sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>-><java.io.FilterInputStream: int read(byte[],int,int)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.config.http.SessionCreationPolicy getSessionCreationPolicy()>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: org.springframework.security.config.annotation.SecurityBuilder getBuilder()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$LongArrayNode: java.util.Spliterator spliterator()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setFlywayMigrationInitializer(org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: boolean writtenOK()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.HttpRetryException: void <init>(java.lang.String,int,java.lang.String)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,org.springframework.http.MediaType[])>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void <init>()>-><org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void setIncludeSubDomains(boolean)>
<org.springframework.data.redis.serializer.DefaultRedisElementWriter: void <init>(org.springframework.data.redis.serializer.RedisSerializer)>-><java.lang.Object: void <init>()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.lang.Thread: void sleep(long)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.postgresql.PostgreSQLDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.Character: int digit(char,int)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywaySchemaManagementProvider: void <init>(java.lang.Iterable)>-><java.lang.Object: void <init>()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>-><java.util.stream.Nodes$IntSpinedNodeBuilder: void forEach(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void registerJavaDate(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.datetime.DateFormatterRegistrar: void setFormatter(org.springframework.format.datetime.DateFormatter)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.sybasease.SybaseASEJTDSDatabaseType: java.lang.String getName()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity anonymous(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.SecurityConfigurerAdapter getOrApply(org.springframework.security.config.annotation.SecurityConfigurerAdapter)>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.DistinctOps$1$2: void begin(long)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader mapToMessageHeader(java.util.Map)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.security.authentication.AnonymousAuthenticationToken: void <init>(java.lang.Integer,java.lang.Object,java.util.Collection)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.SubjectDomainCombiner$4: java.lang.Object run()>-><javax.security.auth.SubjectDomainCombiner$4: java.lang.String run()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.security.auth.Policy: javax.security.auth.Policy getPolicy()>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setTarget(java.lang.String)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Properties: java.util.Set stringPropertyNames()>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$EmptyNode$OfInt: java.util.Spliterator spliterator()>
<java.lang.Thread: void run()>-><sun.net.www.http.KeepAliveCache: void run()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: boolean isConfigured()>-><java.util.ArrayList: boolean isEmpty()>
<org.springframework.security.core.userdetails.User: java.util.SortedSet sortAuthorities(java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.database.sqlserver.SQLServerDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>-><org.flywaydb.core.internal.database.sqlserver.synapse.SynapseDatabaseType: boolean supportsJTDS()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.Sink$OfDouble: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.SSTRecord: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$DoubleArraySpliterator: long estimateSize()>
<org.springframework.web.servlet.DispatcherServlet: void <init>()>-><org.springframework.web.servlet.FrameworkServlet: void <init>()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Position: int hashCode()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AllPermissionCollection$1: boolean hasMoreElements()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setInitializeAuthenticationProviderBeanManagerConfigurer(org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>-><java.util.Base64$Encoder: byte[] encode(byte[])>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.jndi.JndiPropertySource: java.lang.Object getProperty(java.lang.String)>
<org.apache.poi.util.LittleEndianOutputStream: void writeUInt(long)>-><java.io.PrintStream: void write(int)>
<org.springframework.web.servlet.config.annotation.PathMatchConfigurer: void <init>()>-><java.lang.Object: void <init>()>
<java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.util.Date getBeginDate()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setLocations(java.util.List)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.AbstractTask makeChild(java.util.Spliterator)>-><java.util.stream.SliceOps$SliceTask: java.util.stream.SliceOps$SliceTask makeChild(java.util.Spliterator)>
<org.springframework.boot.autoconfigure.flyway.FlywayProperties: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.CaptureTheRestPathElement: int getCaptureCount()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<com.fasterxml.jackson.databind.module.SimpleModule: void <init>(com.fasterxml.jackson.core.Version)>-><com.fasterxml.jackson.core.Version: java.lang.String getArtifactId()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$MessagingTemplateConfiguration: org.springframework.amqp.rabbit.core.RabbitMessagingTemplate rabbitMessagingTemplate(org.springframework.amqp.rabbit.core.RabbitTemplate)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.javaboy.vhr.model.Department: int hashCode()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.io.FileInputStream: int read()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: void <init>(java.util.Spliterator,long,long,long,long)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.util.regex.Pattern: java.lang.String pattern()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<sun.net.www.http.HttpClient: void finished()>-><sun.net.www.protocol.https.HttpsClient: void putInKeepAliveCache()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.data.redis.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheConfiguration defaultCacheConfig(java.lang.ClassLoader)>-><org.springframework.data.redis.serializer.RedisSerializer: org.springframework.data.redis.serializer.RedisSerializer java(java.lang.ClassLoader)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver authenticationPrincipalArgumentResolver()>-><org.springframework.context.expression.BeanFactoryResolver: void <init>(org.springframework.beans.factory.BeanFactory)>
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder newSerializationContext(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder value(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.net.URL: java.lang.String getHost()>
<org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher: void <init>(org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxDoFinally$DoFinallyFuseableSubscriber: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<org.springframework.cache.concurrent.ConcurrentMapCache: void <init>(java.lang.String,java.util.concurrent.ConcurrentMap,boolean,org.springframework.core.serializer.support.SerializationDelegate)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.InetSocketAddress: int getPort()>
<org.apache.catalina.connector.Response: void setCharacterEncoding(java.lang.String)>-><org.apache.catalina.connector.Response: boolean isCommitted()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.WeakHashMap$ValueSpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator: long estimateSize()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.sybasease.SybaseASEJConnectDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>
<java.io.FilterInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.mybatis.spring.SqlSessionTemplate: void <init>(org.apache.ibatis.session.SqlSessionFactory,org.apache.ibatis.session.ExecutorType)>-><org.mybatis.spring.MyBatisExceptionTranslator: void <init>(javax.sql.DataSource,boolean)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.net.InetSocketAddress: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.HashMap$HashMapSpliterator: long estimateSize()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: int characteristics()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.PrintHeadersRecord: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: boolean isEmpty()>-><java.util.Collections$UnmodifiableMap: boolean isEmpty()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><java.io.BufferedInputStream: int available()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setPathMatcher(org.springframework.util.PathMatcher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.MeteredStream: long skip(long)>-><com.rabbitmq.client.impl.TruncatedInputStream: long skip(long)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.web.multipart.MultipartResolver getMultipartResolver()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getOpaque()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.format.support.FormattingConversionService mvcConversionService()>-><org.springframework.boot.autoconfigure.web.format.WebConversionService: void <init>(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>
<java.io.PushbackInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>
<org.apache.catalina.connector.CoyoteWriter: void write(java.lang.String)>-><org.apache.catalina.connector.CoyoteWriter: void write(java.lang.String,int,int)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.lang.String: java.lang.String substring(int,int)>
<org.apache.catalina.connector.OutputBuffer: void realWriteBytes(java.nio.ByteBuffer)>-><java.nio.Buffer: int remaining()>
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>-><java.net.InetSocketAddress: void <init>(int,java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication$1: java.lang.Object run()>-><sun.net.www.protocol.http.DigestAuthentication$1: java.lang.Boolean run()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.sqlserver.synapse.SynapseDatabaseType: java.lang.String getName()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration: org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor securitySocketAcceptorInterceptor(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<org.apache.catalina.connector.ResponseFacade: java.io.PrintWriter getWriter()>-><org.apache.catalina.connector.ResponseFacade: boolean isFinished()>
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: org.springframework.boot.web.servlet.FilterRegistrationBean forwardedHeaderFilter()>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void setDispatcherTypes(javax.servlet.DispatcherType,javax.servlet.DispatcherType[])>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: void <init>()>-><org.springframework.security.config.core.GrantedAuthorityDefaults: void <init>(java.lang.String)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.net.Proxy: boolean equals(java.lang.Object)>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.TrustManager[] configureTrustManagers()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder applicationContext(org.springframework.context.ApplicationContext)>
<org.springframework.security.web.FilterInvocation: java.lang.String getRequestUrl()>-><org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(javax.servlet.http.HttpServletRequest)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.util.HashMap: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.net.URL: int getPort()>
<sun.net.www.URLConnection: void setProxiedHost(java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><java.io.BufferedInputStream: void close()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: void <init>()>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: void updateHeaderValue()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setTaskExecutor(org.springframework.core.task.AsyncTaskExecutor)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.HeaderParser headerParser()>
<org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>-><java.util.ArrayList: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: void <init>()>
<java.util.stream.Nodes$ConcNode: java.lang.String toString()>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<javax.imageio.stream.MemoryCache: long loadFromStream(java.io.InputStream,long)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: java.lang.String getKey(int)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.session.ConcurrentSessionFilter createConcurrencyFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.session.ConcurrentSessionFilter: void <init>(org.springframework.security.core.session.SessionRegistry)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.AbstractList$ListItr: void add(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl: boolean determineEnabled()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder jwtDecoderByPublicKeyValue()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties$Jwt: java.lang.String readPublicKey()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setAuthenticationManagerBuilder(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.io.PrintStream: void write(byte[],int,int)>-><java.io.PrintStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: java.net.Socket createSocket()>-><java.lang.Throwable: java.lang.Throwable getCause()>
<sun.net.www.MeteredStream: long skip(long)>-><java.util.zip.ZipFile$ZipFileInputStream: long skip(long)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: int indexOf(int)>
<sun.net.www.protocol.http.HttpURLConnection$8: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$8: java.io.OutputStream run()>
<sun.nio.cs.StreamDecoder: boolean inReady()>-><java.io.InputStream: int available()>
<org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Integer: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<org.mybatis.spring.SqlSessionTemplate: void <init>(org.apache.ibatis.session.SqlSessionFactory,org.apache.ibatis.session.ExecutorType)>-><org.mybatis.spring.SqlSessionTemplate: void <init>(org.apache.ibatis.session.SqlSessionFactory,org.apache.ibatis.session.ExecutorType,org.springframework.dao.support.PersistenceExceptionTranslator)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.CaptureTheRestPathElement: void <init>(int,char[],char)>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void setPreload(boolean)>-><org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void updateDelegate()>
<java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mustache.MustacheProperties getMustachePropertiesInstance()>-><org.springframework.boot.autoconfigure.mustache.MustacheProperties: void <init>()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.oracle.OracleDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: org.springframework.security.web.header.HeaderWriterFilter createHeaderWriterFilter()>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.http.HttpClient: boolean isCachedConnection()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isCreateSchemas()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters$1: void <init>(org.springframework.boot.autoconfigure.http.HttpMessageConverters)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void <init>()>
<sun.net.ProgressSource: void finishTracking()>-><sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>
<com.rabbitmq.client.impl.TruncatedInputStream: void mark(int)>-><java.io.FilterInputStream: void mark(int)>
<org.springframework.boot.task.TaskExecutorBuilder: java.util.Set append(java.util.Set,java.lang.Iterable)>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.tomcat.websocket.AsyncChannelGroupUtil$AsyncIOThreadFactory$NewThreadPrivilegedAction: java.lang.Thread run()>-><java.lang.Thread: void setDaemon(boolean)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath: java.lang.String getServletUrlMapping()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setNimbusReactiveOpaqueTokenIntrospector(org.springframework.security.oauth2.server.resource.introspection.NimbusReactiveOpaqueTokenIntrospector)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HstsConfig: org.springframework.security.web.header.writers.HstsHeaderWriter access$1900(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$HstsConfig)>
<org.springframework.security.web.session.SessionManagementFilter: void <init>(org.springframework.security.web.context.SecurityContextRepository,org.springframework.security.web.authentication.session.SessionAuthenticationStrategy)>-><org.springframework.web.filter.GenericFilterBean: void <init>()>
<org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder value(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: org.springframework.boot.web.servlet.ServletRegistrationBean statViewServletRegistrationBean(com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void setServlet(javax.servlet.Servlet)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder header(java.lang.String,java.lang.String[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.boot.web.server.AbstractConfigurableWebServerFactory: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.http.HttpClient: boolean available()>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.HttpServletBean: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.misc.SharedSecrets: sun.misc.JavaNetHttpCookieAccess getJavaNetHttpCookieAccess()>-><sun.misc.Unsafe: void ensureClassInitialized(java.lang.Class)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxIterable$IterableSubscription: boolean isEmpty()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.derby.DerbyDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder roles(java.lang.String[])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.DigestAuthentication: boolean supportsPreemptiveAuthorization()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: void setVirtualHost(java.lang.String)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.MeteredStream: int read()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void setHost(java.lang.String)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList$COWIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<java.util.jar.Manifest$FastInputStream: void fill()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
<java.io.BufferedInputStream: void fill()>-><java.io.InputStream: int read(byte[],int,int)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.FilterInvocation: java.lang.String toString()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: void <init>()>
<java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.awt.image.ColorModel: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.io.DataInputStream: char readChar()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setAuthenticationPrincipalArgumentResolver(org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver)>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.net.URL: java.lang.String getPath()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter: void <init>()>
<org.springframework.web.context.request.ServletRequestAttributes: void registerDestructionCallback(java.lang.String,java.lang.Runnable,int)>-><org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.data.redis.cache.RedisCacheConfiguration: void <init>(java.time.Duration,java.lang.Boolean,java.lang.Boolean,org.springframework.data.redis.cache.CacheKeyPrefix,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair,org.springframework.core.convert.ConversionService)>-><java.lang.Boolean: boolean booleanValue()>
<java.io.DataInputStream: int read(byte[])>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>-><org.springframework.boot.autoconfigure.web.ServerProperties: void <init>()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.tomcat.jni.LibraryNotFoundError: void <init>(java.lang.String,java.lang.String)>-><java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>
<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Collections$1: java.lang.Object next()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setSkipExecutingMigrations(java.lang.Boolean)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.Enum: int ordinal()>
<org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.api.configuration.FluentConfiguration callbacks(org.flywaydb.core.api.callback.Callback[])>-><org.flywaydb.core.api.configuration.ClassicConfiguration: void setCallbacks(org.flywaydb.core.api.callback.Callback[])>
<org.springframework.security.config.web.server.ServerHttpSecurity: void <init>()>-><org.springframework.security.config.web.server.ServerHttpSecurity$RequestCacheSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.Spliterators$LongArraySpliterator: void forEachRemaining(java.lang.Object)>-><java.util.Spliterators$LongArraySpliterator: void forEachRemaining(java.util.function.LongConsumer)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.security.config.web.server.ServerHttpSecurity: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList: void <init>()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.jdbc.DriverDataSource: java.lang.String detectFallbackPassword(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari: com.zaxxer.hikari.HikariDataSource dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<sun.misc.URLClassPath: void check(java.net.URL)>-><java.net.SocketPermission: java.lang.String getActions()>
<org.javaboy.vhr.exception.GlobalExceptionHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.data.redis.serializer.DefaultSerializationPair: void <init>(org.springframework.data.redis.serializer.RedisElementReader,org.springframework.data.redis.serializer.RedisElementWriter)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.lang.String)>
<org.springframework.web.util.pattern.RegexPathElement: void <init>(int,char[],boolean,char[],char)>-><java.util.ArrayList: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Vector$VectorSpliterator: long estimateSize()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<java.util.AbstractCollection: java.lang.Object[] toArray()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity exceptionHandling(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.SecurityConfigurerAdapter getOrApply(org.springframework.security.config.annotation.SecurityConfigurerAdapter)>
<org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.data.redis.connection.RedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager build()>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager build()>-><org.springframework.util.Assert: void state(boolean,java.lang.String)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.util.Properties: void load(java.io.InputStream)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator spliterator()>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,long)>-><sun.net.ProgressMonitor: sun.net.ProgressMonitor getDefault()>
<java.util.stream.Node$OfInt: java.util.stream.Node$OfInt truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.AbstractSpinedBuffer: long count()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()>-><java.util.ArrayList$ListItr: void set(java.lang.Object)>
<java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>
<java.net.HttpURLConnection: int getResponseCode()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<sun.security.ssl.Krb5Helper$1: sun.security.ssl.Krb5Proxy run()>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext,boolean)>-><org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveStreamOperations opsForStream(org.springframework.data.redis.serializer.RedisSerializationContext)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveGeoOperations opsForGeo(org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.data.redis.core.DefaultReactiveGeoOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientOptions(io.lettuce.core.ClientOptions)>
<org.springframework.data.redis.core.ReactiveRedisTemplate: org.springframework.data.redis.core.ReactiveValueOperations opsForValue(org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.data.redis.core.DefaultReactiveValueOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>
<java.net.URLPermission: void <init>(java.lang.String,java.lang.String)>-><java.net.URLPermission: void init(java.lang.String)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FeaturePolicyConfig: org.springframework.security.web.header.writers.FeaturePolicyHeaderWriter access$2300(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FeaturePolicyConfig)>
<java.net.URI: int needsNormalization(java.lang.String)>-><java.lang.String: int length()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.nio.cs.StreamEncoder: void implFlush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<org.springframework.boot.task.TaskSchedulerBuilder: org.springframework.boot.task.TaskSchedulerBuilder awaitTermination(boolean)>-><org.springframework.boot.task.TaskSchedulerBuilder: void <init>(java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.String,java.util.Set)>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.net.URI: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.net.ssl.SSLSocketFactory$1: java.lang.Object run()>
<java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setBinding(org.springframework.amqp.core.Binding)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void registerJavaDate(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.datetime.DateFormatter: void <init>(java.lang.String)>
<org.springframework.security.web.header.writers.HstsHeaderWriter: void updateHstsHeaderValue()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>-><java.io.PrintStream: void write(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.AssertionError: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.config.annotation.AbstractSecurityBuilder: java.lang.Object build()>-><org.springframework.security.config.annotation.AlreadyBuiltException: void <init>(java.lang.String)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setMessageSource(org.springframework.context.MessageSource)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.Subject: java.util.Set getPrincipals()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration: org.springframework.boot.web.reactive.result.view.MustacheViewResolver mustacheViewResolver(com.samskivert.mustache.Mustache$Compiler,org.springframework.boot.autoconfigure.mustache.MustacheProperties)>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.PathPatternParser: org.springframework.http.server.PathContainer$Options getPathOptions()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRemoteUser()>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRemoteUser()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><org.springframework.security.web.FilterInvocation: java.lang.String getRequestUrl()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.core.context.SecurityContextImpl: int hashCode()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: boolean usesVendorLocation(java.util.Collection)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getHost()>
<javax.security.auth.Policy: void setPolicy(javax.security.auth.Policy)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><java.util.ArrayList: java.util.Iterator iterator()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.ProviderManager: void checkState()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.core.session.SessionRegistry getSessionRegistry(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.core.session.SessionRegistryImpl: void <init>()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<sun.net.www.MeteredStream: int read()>-><java.io.ByteArrayInputStream: int read()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Calendar: java.lang.String toString()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.lang.StringBuilder: void <init>()>
<java.util.JapaneseImperialCalendar: void computeTime()>-><java.util.SimpleTimeZone: int getRawOffset()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void setSentinels(java.lang.Iterable)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: void ensureOpen()>-><java.io.PrintStream: void setError()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: java.util.Spliterator makeSpliterator(java.util.Spliterator,long,long,long,long)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><java.io.FileInputStream: void close()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: java.lang.String getSqlMigrationSeparator()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<sun.net.www.protocol.http.HttpURLConnection$6: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<sun.net.NetProperties: void access$000()>-><sun.net.NetProperties: void loadDefaultProperties()>
<org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>-><sun.net.www.MeteredStream: void close()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.tomcat.jni.Library: void <init>()>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.aggregates.CFRecordsAggregate: java.lang.String toString()>
<java.net.URLConnection: void <init>(java.net.URL)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder awaitTerminationPeriod(java.time.Duration)>-><org.springframework.boot.task.TaskExecutorBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.Boolean,java.time.Duration,java.lang.String,org.springframework.core.task.TaskDecorator,java.util.Set)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager getAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.context.HttpSessionSecurityContextRepository: void setAllowSessionCreation(boolean)>
<sun.nio.cs.StreamDecoder: void implClose()>-><java.io.InputStream: void close()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<java.net.HttpRetryException: void <init>(java.lang.String,int,java.lang.String)>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<sun.security.x509.X500Name: void <init>(byte[])>-><sun.security.x509.X500Name: void parseDER(sun.security.util.DerInputStream)>
<sun.net.www.protocol.https.HttpsClient: void closeIdleConnection()>-><sun.net.www.http.HttpClient: void closeServer()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.informix.InformixDatabaseType: java.lang.String getName()>
<org.springframework.security.web.access.intercept.FilterSecurityInterceptor: void <init>()>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>
<org.springframework.aop.support.NameMatchMethodPointcut: boolean equals(java.lang.Object)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.ExceptionTranslationFilter: void setAccessDeniedHandler(org.springframework.security.web.access.AccessDeniedHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.authentication.AuthenticationManager authenticationManager()>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.header.ContentSecurityPolicyServerHttpHeadersWriter: void <init>()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration build()>-><org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration build()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: int size()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void addIfNotNull(java.util.List,java.lang.Object)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void <init>()>-><java.util.ArrayList: void <init>()>
<java.util.TreeMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URLConnection: boolean getUseCaches()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.data.redis.cache.RedisCacheManager: void <init>(org.springframework.data.redis.cache.RedisCacheWriter,org.springframework.data.redis.cache.RedisCacheConfiguration,boolean)>-><org.springframework.cache.transaction.AbstractTransactionSupportingCacheManager: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>
<java.io.PushbackInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.security.web.access.WebInvocationPrivilegeEvaluator getWebInvocationPrivilegeEvaluator()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.csrf.WebSessionServerCsrfTokenRepository: void <init>()>
<sun.net.www.http.PosterOutputStream: void <init>()>-><java.io.ByteArrayOutputStream: void <init>(int)>
<org.springframework.security.web.header.Header: int hashCode()>-><java.util.AbstractList: int hashCode()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ReferrerPolicyConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.authentication.ProviderManager: void setAuthenticationEventPublisher(org.springframework.security.authentication.AuthenticationEventPublisher)>
<java.util.AbstractList: int hashCode()>-><java.util.SimpleTimeZone: int hashCode()>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.stream.Node build()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DefaultRowHeightRecord: java.lang.String toString()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.InternalPathPatternParser: int findRegexStart(char[],int)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.Vector: java.lang.Object elementAt(int)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.Customizer: org.springframework.security.config.Customizer withDefaults()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: void remove(java.lang.String)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void forEach(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$CacheControlConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$CacheControlConfig: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$CacheControlConfig enable()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder clientName(java.lang.String)>-><org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder newSerializationContext(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder hashValue(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>
<org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer: void <init>(javax.servlet.ServletContext)>-><org.springframework.web.accept.ContentNegotiationManagerFactoryBean: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.security.web.reactive.result.method.annotation.CurrentSecurityContextArgumentResolver: void <init>(org.springframework.core.ReactiveAdapterRegistry)>-><org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverSupport: void <init>(org.springframework.core.ReactiveAdapterRegistry)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>
<org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>-><org.springframework.web.context.request.DestructionCallbackBindingListener: void <init>(java.lang.Runnable)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<java.util.stream.SliceOps$1$1: boolean cancellationRequested()>-><java.util.stream.SliceOps$1$1: boolean cancellationRequested()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.NetProperties$1: java.lang.Object run()>-><sun.net.NetProperties$1: java.lang.Void run()>
<org.springframework.security.config.web.server.ServerHttpSecurity$CorsSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateBuilder$RequestFactoryCustomizer,boolean,java.lang.String,java.util.Set,java.util.Set,java.util.function.Supplier,org.springframework.web.util.UriTemplateHandler,org.springframework.web.client.ResponseErrorHandler,org.springframework.boot.web.client.BasicAuthentication,java.util.Map,java.util.Set,java.util.Set)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source as(java.util.function.Function)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: java.util.Map createSharedObjects()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.util.HashMap: void clear()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: void customizeConfigurationFromUrl(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(org.springframework.security.core.GrantedAuthority,org.springframework.security.core.GrantedAuthority)>-><java.lang.String: int compareTo(java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy: void setExceptionIfMaximumExceeded(boolean)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: void privilegedOpenServer(java.net.InetSocketAddress)>-><sun.net.www.http.HttpClient$1: void <init>(sun.net.www.http.HttpClient,java.net.InetSocketAddress)>
<org.springframework.security.web.csrf.CsrfAuthenticationStrategy: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void incrementNC()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.text.ParsePosition: java.lang.String toString()>
<sun.net.www.http.HttpClient$1: java.lang.Void run()>-><sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<java.io.DataOutputStream: void writeLong(long)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.firebird.FirebirdDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: boolean isEmpty()>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.Throwable getCause()>
<org.springframework.web.util.pattern.RegexPathElement: int getScore()>-><org.springframework.web.util.pattern.RegexPathElement: int getCaptureCount()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateCustomizer[])>-><org.springframework.boot.web.client.RestTemplateBuilder: java.util.Set copiedSetOf(java.lang.Object[])>
<org.flywaydb.core.internal.database.mysql.MySQLDatabaseType: java.lang.String getBackupDriverClass(java.lang.String,java.lang.ClassLoader)>-><org.flywaydb.core.internal.logging.javautil.JavaUtilLog: void warn(java.lang.String)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.zip.InflaterInputStream: void fill()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.security.util.HostnameChecker: boolean matchAllWildcards(java.lang.String,java.lang.String)>-><java.util.StringTokenizer: int countTokens()>
<org.springframework.jmx.export.annotation.AnnotationMBeanExporter: void <init>()>-><org.springframework.jmx.export.MBeanExporter: void setAssembler(org.springframework.jmx.export.assembler.MBeanInfoAssembler)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$ConcNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<sun.security.ssl.Krb5Helper: void ensureAvailable()>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration$LettucePoolingClientConfigurationBuilder: void <init>()>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: void <init>()>
<sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.springframework.boot.task.TaskSchedulerBuilder: java.util.Set append(java.util.Set,java.lang.Iterable)>-><java.util.Collections: java.util.Set emptySet()>
<org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxException: java.lang.String buildMessage(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy: void <init>(java.lang.String)>-><org.springframework.security.web.DefaultRedirectStrategy: void <init>()>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder fromConnectionFactory(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: void <init>(org.springframework.data.redis.cache.RedisCacheWriter)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$LongArrayNode: long count()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection: int access$500()>
<org.springframework.boot.autoconfigure.task.TaskSchedulingProperties$Pool: void <init>()>-><java.lang.Object: void <init>()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties: java.util.List parseAddresses(java.lang.String)>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<org.springframework.web.util.pattern.RegexPathElement: java.util.regex.Pattern buildPattern(char[],char[])>-><java.util.regex.Matcher: int end()>
<java.util.concurrent.ConcurrentSkipListMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter: void updateDelegate()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy: void setMaximumSessions(int)>
<org.springframework.data.redis.cache.RedisCacheManager: void <init>(org.springframework.data.redis.cache.RedisCacheWriter,org.springframework.data.redis.cache.RedisCacheConfiguration,java.util.Map,boolean)>-><java.util.HashMap: void putAll(java.util.Map)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain$2: boolean getStaticPermissionsField(java.security.ProtectionDomain)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$CacheControlConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: java.util.Collection getAllConfigAttributes()>-><java.util.LinkedHashMap: java.util.Collection values()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String value()>
<java.util.stream.Nodes$ToArrayTask: void compute()>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.net.URL: java.lang.String getRef()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.protocol.http.AuthenticationHeader$SchemeMapValue: void <init>(sun.net.www.HeaderParser,java.lang.String)>
<org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy: void <init>(java.lang.String,org.springframework.security.web.RedirectStrategy)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void closeServer()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.embedded.TomcatWebServerFactoryCustomizer: void <init>(org.springframework.core.env.Environment,org.springframework.boot.autoconfigure.web.ServerProperties)>-><java.lang.Object: void <init>()>
<java.net.URI: java.net.URI normalize(java.net.URI)>-><java.net.URI: void <init>()>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setInterceptors(java.lang.Object[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.http.client.support.HttpAccessor: void <init>()>-><org.springframework.http.HttpLogging: org.apache.commons.logging.Log forLogName(java.lang.Class)>
<java.util.Hashtable: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.Vector: java.lang.Object elementAt(int)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setJsonComponentModule(org.springframework.boot.jackson.JsonComponentModule)>
<org.springframework.web.util.pattern.RegexPathElement: int getNormalizedLength()>-><java.util.ArrayList: java.util.Iterator iterator()>
<sun.net.www.MeteredStream: int available()>-><java.net.SocketInputStream: int available()>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: void updateHeaderValue()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: org.springframework.validation.MessageCodesResolver getMessageCodesResolver()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] optimize(java.security.ProtectionDomain[])>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath: java.lang.String getServletUrlMapping()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: boolean isPresent()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.Vector$Itr: boolean hasNext()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$PermitStatus permitStatus()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.buf.ByteChunk: void allocate(int,int)>-><org.apache.tomcat.util.buf.AbstractChunk: void setLimit(int)>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: java.lang.Object getBeanOrNull(java.lang.Class)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: org.springframework.security.config.annotation.SecurityBuilder getBuilder()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties$Jwt: java.lang.String readPublicKey()>-><java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.lang.String getPassword()>
<sun.security.util.HostnameChecker: java.lang.String getServerName(java.security.Principal)>-><sun.security.ssl.Krb5Helper: java.lang.String getPrincipalHostName(java.security.Principal)>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setCorsConfigurationSource(org.springframework.web.cors.CorsConfigurationSource)>-><org.springframework.web.cors.UrlBasedCorsConfigurationSource: void setAllowInitLookupPath(boolean)>
<org.springframework.web.util.WebUtils: java.lang.Object getSessionMutex(javax.servlet.http.HttpSession)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.PermitAllSupport$ExactUrlRequestMatcher: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.web.server.ServerHttpSecurity: void <init>()>-><org.springframework.security.config.web.server.ServerHttpSecurity$CsrfSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>-><java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.base.DatabaseType: java.lang.String getBackupDriverClass(java.lang.String,java.lang.ClassLoader)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession obtainSession()>-><org.springframework.util.Assert: void state(boolean,java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><sun.net.www.ParseUtil: void appendEscape(java.lang.StringBuffer,byte)>
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: void configure(org.springframework.security.config.annotation.authentication.ProviderManagerBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray()>
<javax.security.auth.SubjectDomainCombiner$1: java.lang.Object run()>-><javax.security.auth.SubjectDomainCombiner$1: java.lang.Void run()>
<org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)>-><java.io.FileInputStream: void close()>
<org.springframework.security.config.annotation.AbstractSecurityBuilder: java.lang.Object build()>-><java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>
<java.nio.InvalidMarkException: void <init>()>-><java.lang.IllegalStateException: void <init>()>
<java.util.stream.SliceOps: long access$000(long,long)>-><java.util.stream.SliceOps: long calcSliceFence(long,long)>
<org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.rabbitmq.client.impl.VariableLinkedBlockingQueue: java.lang.String toString()>
<org.springframework.security.web.header.writers.CacheControlHeadersWriter: java.util.List createHeaders()>-><java.util.ArrayList: void <init>(int)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void setAutoIndexCreation(java.lang.Boolean)>
<org.springframework.security.config.web.server.ServerHttpSecurity$LogoutSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>
<com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping createRequestMappingHandlerMapping()>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void <init>()>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>-><org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><java.lang.Object: void wait(long)>
<org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream: void writeToCache(byte[],int,int)>-><org.springframework.web.util.ContentCachingRequestWrapper: java.lang.Integer access$000(org.springframework.web.util.ContentCachingRequestWrapper)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: org.springframework.web.servlet.DispatcherServlet dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: boolean isPublishRequestHandledEvents()>
<org.javaboy.vhr.config.CustomFilterInvocationSecurityMetadataSource: java.util.Collection getAttributes(java.lang.Object)>-><java.util.Collections$1: boolean hasNext()>
<sun.util.calendar.AbstractCalendar: long getTime(sun.util.calendar.CalendarDate)>-><java.util.SimpleTimeZone: int getOffset(long)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode: void forEach(java.util.function.Consumer)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$IntSpinedNodeBuilder: java.util.Spliterator spliterator()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void checkLocationExists(javax.sql.DataSource,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.core.io.ResourceLoader)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List resolveLocations(java.util.List)>
<org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter: void <init>()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: long estimateSize()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.javaboy.vhr.config.SecurityConfig$1: java.lang.Object postProcess(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getAuth(java.lang.String,java.net.URL)>-><sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$ArrayNode: java.util.Spliterator spliterator()>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><io.lettuce.core.cluster.ClusterClientOptions$Builder: io.lettuce.core.ClientOptions$Builder socketOptions(io.lettuce.core.SocketOptions)>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.lang.Thread: void run()>-><sun.net.www.http.KeepAliveStreamCleaner: void run()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisProperties getProperties()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfLong: void accept(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.security.action.GetIntegerAction: java.lang.Object run()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.URL: void <init>(java.net.URL,java.lang.String)>
<java.io.DataOutputStream: void write(byte[],int,int)>-><java.io.PrintStream: void write(byte[],int,int)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner$2: java.lang.Object run()>-><javax.security.auth.SubjectDomainCombiner$2: java.lang.Void run()>
<sun.net.www.protocol.http.EmptyInputStream: void <init>()>-><java.io.InputStream: void <init>()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String raw()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><sun.net.www.protocol.https.HttpsClient: java.security.Principal getPeerPrincipal()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.Permissions: boolean implies(java.security.Permission)>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory redisConnectionFactory(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources)>-><org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration getLettuceClientConfiguration(org.springframework.beans.factory.ObjectProvider,io.lettuce.core.resource.ClientResources,org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber: boolean isEmpty()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor configure(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source asInt(java.util.function.Function)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.web.server.savedrequest.WebSessionServerRequestCache: org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher createDefaultRequestMacher()>-><java.util.Collections: java.util.Set singleton(java.lang.Object)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: java.lang.String[] getPackagesToScan()>-><org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.HashMap$Node: java.lang.String toString()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor build()>-><org.springframework.boot.task.TaskExecutorBuilder: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor configure(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$ConcNode: java.util.Spliterator spliterator()>
<org.springframework.core.env.PropertySource: boolean containsProperty(java.lang.String)>-><org.springframework.jndi.JndiPropertySource: java.lang.Object getProperty(java.lang.String)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: boolean supports(java.lang.Class)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$PoolBuilderFactory: org.apache.commons.pool2.impl.GenericObjectPoolConfig getPoolConfig(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool)>-><org.apache.commons.pool2.impl.GenericObjectPoolConfig: void setMinIdle(int)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.util.Spliterator trySplit()>
<org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: void <init>()>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties$Pool: void <init>()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.HashMap$Node: java.lang.Object getKey()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$ArraySpliterator: java.util.Spliterator trySplit()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.core.type.ResolvedType: boolean isReferenceType()>
<java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions createClientOptions()>-><io.lettuce.core.SocketOptions$Builder: io.lettuce.core.SocketOptions$Builder connectTimeout(java.time.Duration)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FeaturePolicyConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void checkPath(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.nio.charset.Charset: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNot(java.util.function.Predicate)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.amqp.rabbit.connection.SimpleConnection: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.io.InputStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration: org.springframework.security.context.DelegatingApplicationListener delegatingApplicationListener()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object lazyBean(java.lang.Class)>-><org.springframework.aop.framework.ProxyFactoryBean: void <init>()>
<org.springframework.boot.info.BuildProperties: void <init>(java.util.Properties)>-><org.springframework.boot.info.InfoProperties: void <init>(java.util.Properties)>
<org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter: void <init>(org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter$XFrameOptionsMode)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.NetworkClient: int getReadTimeout()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>-><java.util.Locale: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$ArraySpliterator: int characteristics()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: int characteristics()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.FilePassRecord: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><javax.net.ssl.HttpsURLConnection$DefaultHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.lang.String printDomain(java.security.ProtectionDomain)>-><javax.security.auth.SubjectDomainCombiner$5: void <init>(java.security.ProtectionDomain)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.config.SecurityConfig: org.javaboy.vhr.config.LoginFilter loginFilter()>
<sun.net.www.MeteredStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>-><java.util.Stack: boolean empty()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: java.lang.String getHost()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.web.servlet.mvc.method.annotation.JsonViewResponseBodyAdvice: void <init>()>-><org.springframework.web.servlet.mvc.method.annotation.AbstractMappingJacksonResponseBodyAdvice: void <init>()>
<sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>-><sun.net.www.MessageHeader: java.lang.String getKey(int)>
<org.springframework.boot.web.server.MimeMappings: void <init>(org.springframework.boot.web.server.MimeMappings,boolean)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations: io.r2dbc.spi.ConnectionFactory createConnectionFactory(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.lang.ClassLoader,java.util.List)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder: org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder of(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.util.function.Supplier)>
<org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer: void <init>(javax.servlet.ServletContext)>-><org.springframework.web.accept.ContentNegotiationManagerFactoryBean: void setServletContext(javax.servlet.ServletContext)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.AllPermissionCollection$1: java.lang.Object nextElement()>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object getValue(java.lang.Object)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.security.web.authentication.logout.LogoutFilter: void <init>(org.springframework.security.web.authentication.logout.LogoutSuccessHandler,org.springframework.security.web.authentication.logout.LogoutHandler[])>-><org.springframework.security.web.authentication.logout.LogoutFilter: void setFilterProcessesUrl(java.lang.String)>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.MeteredStream: void close()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.apache.tomcat.jni.Library: void <init>()>-><org.apache.commons.math3.exception.MathArithmeticException: java.lang.String getMessage()>
<org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>-><java.lang.Throwable: java.lang.Throwable getCause()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String raw()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.io.IOException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeDynamic(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<javax.xml.bind.DatatypeConverterImpl$CalendarFormatter: void formatTimeZone(java.util.Calendar,java.lang.StringBuilder)>-><java.util.SimpleTimeZone: int getOffset(long)>
<org.springframework.web.util.pattern.InternalPathPatternParser: void pushPathElement(org.springframework.web.util.pattern.PathElement)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: int indexOf(int,int)>
<org.springframework.boot.web.servlet.support.ErrorPageFilterConfiguration: org.springframework.boot.web.servlet.support.ErrorPageFilter errorPageFilter()>-><org.springframework.boot.web.servlet.support.ErrorPageFilter: void <init>()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.mysql.mariadb.MariaDBDatabaseType: java.lang.String getName()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.session.ConcurrentSessionFilter createConcurrencyFilter(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.session.ConcurrentSessionFilter: void <init>(org.springframework.security.core.session.SessionRegistry,org.springframework.security.web.session.SessionInformationExpiredStrategy)>
<org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>-><org.springframework.boot.web.server.AbstractConfigurableWebServerFactory: void <init>()>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$5$1: void accept(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.net.URLConnection: boolean getUseCaches()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setEntityManagerFactoryBuilder(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce$Cluster: org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce$Cluster$Refresh getRefresh()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: java.lang.String getLogoutSuccessUrl()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>-><sun.net.www.MessageHeader: java.lang.String getKey(int)>
<sun.util.calendar.AbstractCalendar: long getTime(sun.util.calendar.CalendarDate)>-><java.util.SimpleTimeZone: int getRawOffset()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>-><org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean isConcrete()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.ReactiveJwtDecoder jwtDecoder()>-><org.springframework.security.oauth2.jwt.JwtValidators: org.springframework.security.oauth2.core.OAuth2TokenValidator createDefaultWithIssuer(java.lang.String)>
<java.util.stream.SliceOps$SliceTask: void onCompletion(java.util.concurrent.CountedCompleter)>-><java.util.stream.SliceOps$SliceTask: boolean isLeftCompleted(long)>
<java.net.SocketOutputStream: void close()>-><java.net.AbstractPlainSocketImpl: void close()>
<sun.security.util.HostnameChecker: void match(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><java.lang.System: long currentTimeMillis()>
<org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource: void <init>()>-><org.springframework.security.access.method.AbstractMethodSecurityMetadataSource: void <init>()>
<io.lettuce.core.TimeoutOptions$TimeoutSource: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: org.flywaydb.core.Flyway flyway(org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.flywaydb.core.api.configuration.FluentConfiguration: org.flywaydb.core.Flyway load()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(org.springframework.boot.autoconfigure.security.SecurityProperties)>
<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Policy: void setPolicy(javax.security.auth.Policy)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$LazyPasswordEncoder: void <init>(org.springframework.context.ApplicationContext)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setOracleKerberosCacheFile(java.lang.String)>
<sun.net.www.http.HttpClient: void openServer()>-><sun.net.www.URLConnection: void setProxiedHost(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DimensionsRecord: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: void <init>(java.util.stream.Node)>-><java.lang.Object: void <init>()>
<java.io.FilterOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.security.Provider: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.MeteredStream: void close()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive)>-><java.util.stream.Nodes$InternalNodeSpliterator: void <init>(java.util.stream.Node)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.WebProperties)>
<org.springframework.web.servlet.view.InternalResourceViewResolver: void <init>()>-><org.springframework.web.servlet.view.UrlBasedViewResolver: void setViewClass(java.lang.Class)>
<java.io.InputStream: long skip(long)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder entityManagerFactoryBuilder(org.springframework.orm.jpa.JpaVendorAdapter,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.orm.jpa.JpaProperties: java.util.Map getProperties()>
<sun.net.NetworkClient: java.net.Socket createSocket()>-><java.net.Socket: void <init>()>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.io.PrintStream: void print(java.lang.String)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.ArrayList: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setDispatchOptionsRequest(boolean)>
<java.io.FilterInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.URLPermission: void <init>(java.lang.String,java.lang.String)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.stream.SliceOps$SliceTask: java.util.stream.AbstractTask makeChild(java.util.Spliterator)>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>
<org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction: java.lang.Void run()>-><org.apache.catalina.connector.Response: void flushBuffer()>
<org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration: org.springframework.data.redis.core.RedisTemplate redisTemplate(org.springframework.data.redis.connection.RedisConnectionFactory)>-><org.springframework.data.redis.core.RedisTemplate: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setBeanFactoryPostProcessor(org.springframework.beans.factory.config.BeanFactoryPostProcessor)>
<org.springframework.boot.info.GitProperties: java.util.Properties processEntries(java.util.Properties)>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: void <init>()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void registerJsr310(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.datetime.standard.DateTimeFormatterRegistrar: void <init>()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.util.Set entrySet()>-><org.springframework.http.HttpHeaders: java.util.Set entrySet()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.data.redis.connection.RedisSentinelConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration master(java.lang.String)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: java.util.List getInterceptors()>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.javaboy.vhr.model.Employee: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.text.ChoiceFormat: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration: org.springframework.boot.autoconfigure.context.MessageSourceProperties messageSourceProperties()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>
<org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases: java.util.Iterator iterator()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<sun.security.util.HostnameChecker: void match(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactory(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder: org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder dataSource(javax.sql.DataSource)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>-><com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.core.JsonFactory getFactory()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.SocketException: void <init>(java.lang.String)>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap)>-><java.lang.Object: void <init>()>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: void <init>(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void init()>-><org.apache.tomcat.jni.LibraryNotFoundError: java.lang.String getLibraryNames()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mustache.MustacheProperties getMustachePropertiesInstance()>-><org.springframework.boot.autoconfigure.mustache.MustacheProperties: void setPrefix(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.atomic.AtomicLong: long get()>
<org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource: void <init>(java.util.List)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: void <init>()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveCache: int getMaxConnections()>
<io.lettuce.core.TimeoutOptions: io.lettuce.core.TimeoutOptions enabled()>-><io.lettuce.core.TimeoutOptions$Builder: io.lettuce.core.TimeoutOptions$Builder connectionTimeout()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Collections$2: int characteristics()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties: void <init>()>-><com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$StatViewServlet: void <init>()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.WildcardPathElement: void <init>(int,char)>
<java.net.HttpConnectSocketImpl$1: java.lang.Void run()>-><java.net.HttpConnectSocketImpl: java.lang.reflect.Field access$000()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<org.apache.catalina.connector.Response: java.io.PrintWriter getWriter()>-><org.apache.catalina.connector.OutputBuffer: void checkConverter()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List replaceVendorLocations(java.util.List,org.springframework.boot.jdbc.DatabaseDriver)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.util.stream.Node: java.util.stream.Node truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$FixedNodeBuilder: java.util.stream.Node build()>
<sun.security.util.HostnameChecker: void matchDNS(java.lang.String,java.security.cert.X509Certificate)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisClusterConfiguration getClusterConfiguration()>-><org.springframework.data.redis.connection.RedisPassword: org.springframework.data.redis.connection.RedisPassword of(java.lang.String)>
<org.springframework.data.redis.cache.DefaultCacheStatisticsCollector: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List resolveLocations(java.util.List)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.stream.SpinedBuffer: void forEach(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.ReduceOps$2ReducingSink: void begin(long)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.CorsRegistry: java.util.Map getCorsConfigurations()>-><java.util.ArrayList: int size()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.lang.Object[] getInterceptors(org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.context.LifecycleProperties getLifecyclePropertiesInstance()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor: void <init>(java.lang.String,org.springframework.security.access.method.MethodSecurityMetadataSource,java.lang.String)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.HttpURLConnection$TunnelState tunnelState()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>
<org.springframework.security.config.web.server.ServerHttpSecurity$ExceptionHandlingSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>-><org.springframework.security.config.web.server.ServerHttpSecurity$ExceptionHandlingSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.MemFuncPtg: java.lang.String toString()>
<java.util.Spliterator: boolean hasCharacteristics(int)>-><java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$ErrorPageCustomizer errorPageCustomizer(org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>-><org.springframework.boot.jdbc.DataSourceBuilder: org.springframework.boot.jdbc.DataSourceBuilder driverClassName(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy: void <init>(java.lang.String,org.springframework.security.web.RedirectStrategy)>-><org.springframework.security.web.util.UrlUtils: boolean isValidRedirectUrl(java.lang.String)>
<org.springframework.jmx.export.annotation.AnnotationMBeanExporter: void <init>()>-><org.springframework.jmx.export.MBeanExporter: void setNamingStrategy(org.springframework.jmx.export.naming.ObjectNamingStrategy)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: long estimateSize()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>-><java.net.InetSocketAddress: int checkPort(int)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder applyProperties(org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration$LettuceClientConfigurationBuilder)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration: org.springframework.boot.autoconfigure.http.HttpMessageConverters messageConverters(org.springframework.beans.factory.ObjectProvider)>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.web.filter.OncePerRequestFilter: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes: java.util.stream.Node emptyNode(java.util.stream.StreamShape)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: void <init>(org.apache.catalina.connector.ResponseFacade,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.postgresql.PostgreSQLDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.ss.formula.ptg.AttrPtg: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.http.KeepAliveCleanerEntry: void <init>(sun.net.www.http.KeepAliveStream,sun.net.www.http.HttpClient)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.saphana.SAPHANADatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>
<org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.MessageHeader: void setIfNotSet(java.lang.String,java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void forEach(java.util.function.Consumer)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration: java.lang.Object createDataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,java.lang.Class)>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.security.config.annotation.rsocket.RSocketSecurity: void <init>()>-><java.util.ArrayList: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractCollection: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.AnonymousAuthenticationFilter: void afterPropertiesSet()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int indexOf(java.lang.String,int)>
<java.net.Proxy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.security.web.reactive.result.method.annotation.CurrentSecurityContextArgumentResolver: void <init>(org.springframework.core.ReactiveAdapterRegistry)>-><org.springframework.expression.spel.standard.SpelExpressionParser: void <init>()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.security.web.header.Header: int hashCode()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.ProgressSource: void updateProgress(long,long)>-><sun.net.ProgressSource: boolean connected()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><sun.net.www.protocol.http.HttpURLConnection$6: java.lang.Object run()>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<reactor.util.function.Tuple4: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.javaboy.vhr.model.Department: int hashCode()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: boolean access$300(sun.net.www.protocol.http.HttpURLConnection,java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractSpinedBuffer: long count()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.net.URL: int getDefaultPort()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.HttpConnectSocketImpl: java.net.InetAddress getInetAddress()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.security.access.expression.SecurityExpressionHandler getSecurityExpressionHandler()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<sun.net.NetworkClient$1: java.lang.Void run()>-><java.lang.Integer: int intValue()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void <init>(java.util.Spliterator,long,long)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: long estimateSize()>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer mark()>
<java.util.stream.SliceOps: long calcSize(long,long,long)>-><java.lang.Math: long max(long,long)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Boolean: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.time.Duration: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnectionFromDriver(java.lang.String,java.lang.String)>-><java.util.Hashtable: void putAll(java.util.Map)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.net.Socket: java.io.InputStream getInputStream()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$LocationResolver: java.util.List replaceVendorLocations(java.util.List,org.springframework.boot.jdbc.DatabaseDriver)>-><java.util.Collection: java.util.stream.Stream stream()>
<java.util.Calendar: java.util.TimeZone getTimeZone()>-><java.util.SimpleTimeZone: java.lang.Object clone()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.net.SocketInputStream: int read(byte[],int,int)>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: void setMessageConverters(java.util.List)>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.util.stream.Nodes$LongArrayNode: void forEach(java.util.function.LongConsumer)>-><java.util.stream.ReduceOps$8ReducingSink: void accept(long)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.crypto.PermissionsEnumerator: java.lang.Object nextElement()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setEncoding(java.nio.charset.Charset)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.apache.catalina.connector.Response: java.io.PrintWriter getWriter()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo parseUrl(java.lang.String)>-><java.lang.String: int indexOf(int)>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String quote(java.lang.String,int,int)>-><java.lang.String: java.lang.String substring(int,int)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean: void <init>(java.lang.String,org.springframework.boot.web.servlet.ServletRegistrationBean[])>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void setName(java.lang.String)>
<org.springframework.security.access.vote.AbstractAccessDecisionManager: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder keepAlive(java.time.Duration)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><java.util.Optional: java.lang.Object get()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.UncalcedRecord: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setMessageSource(org.springframework.context.MessageSource)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration: org.springframework.security.config.annotation.web.builders.HttpSecurity httpSecurity()>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity anonymous(org.springframework.security.config.Customizer)>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeEmbeddedOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,org.springframework.boot.autoconfigure.r2dbc.EmbeddedDatabaseConnection)>-><org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties: java.lang.String getPassword()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.String toString()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.mongo.MongoProperties getMongoPropertiesInstance()>-><org.springframework.boot.autoconfigure.mongo.MongoProperties: void setUri(java.lang.String)>
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity requestCache(org.springframework.security.config.Customizer)>-><org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: void <init>()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<io.netty.util.internal.DefaultPriorityQueue: void bubbleDown(int,io.netty.util.internal.PriorityQueueNode)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint createDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$ConcNode: java.util.Spliterator spliterator()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: org.springframework.security.authentication.ReactiveAuthenticationManager authenticationManager()>-><org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void setPasswordEncoder(org.springframework.security.crypto.password.PasswordEncoder)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.net.URI: java.lang.String getScheme()>
<org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <init>(org.springframework.data.redis.serializer.RedisSerializer)>-><java.lang.Object: void <init>()>
<java.util.stream.AbstractPipeline: void copyIntoWithCancel(java.util.stream.Sink,java.util.Spliterator)>-><java.util.stream.SliceOps$1$1: void begin(long)>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: void <init>()>-><java.util.ArrayList: void <init>()>
<org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingException: void <init>(java.util.List)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.database.sqlserver.SQLServerDatabaseType: boolean handlesJDBCUrl(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.ConcurrentHashMap$KeySpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: void <init>(java.util.List)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<java.io.InputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: java.util.List getReturnValueHandlers()>-><org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void addReturnValueHandlers(java.util.List)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getAuth(java.lang.String,java.net.URL)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: void setTunnelState(sun.net.www.protocol.http.HttpURLConnection$TunnelState)>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<reactor.util.function.Tuple3: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createLogoutRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createLogoutRequestMatcher(java.lang.String)>
<org.springframework.data.redis.serializer.RedisSerializerToSerializationPairAdapter: void <init>(org.springframework.data.redis.serializer.RedisSerializer)>-><org.springframework.data.redis.serializer.DefaultRedisElementReader: void <init>(org.springframework.data.redis.serializer.RedisSerializer)>
<sun.net.www.http.HttpClient: java.lang.String getProxyHostUsed()>-><java.net.InetSocketAddress: java.lang.String getHostString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.ReactiveJwtDecoder jwtDecoder()>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Collection)>-><java.util.AbstractList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<javax.servlet.GenericServlet: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.HeaderParser headerParser()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.Spliterators$LongArraySpliterator: int characteristics()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.RegexPathElement: java.util.List getVariableNames()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: org.springframework.data.redis.core.ReactiveStringRedisTemplate reactiveStringRedisTemplate(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory)>
<org.flywaydb.core.internal.database.oracle.OracleDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$AbstractConcNode: int getChildCount()>
<javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: int hashCode()>
<org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource: void <init>(org.springframework.security.access.prepost.PrePostInvocationAttributeFactory)>-><org.springframework.security.access.method.AbstractMethodSecurityMetadataSource: void <init>()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><io.lettuce.core.cluster.ClusterTopologyRefreshOptions: io.lettuce.core.cluster.ClusterTopologyRefreshOptions$Builder builder()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.lang.Float: java.lang.String toString()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: org.springframework.boot.info.BuildProperties buildProperties()>-><org.springframework.boot.info.BuildProperties: void <init>(java.util.Properties)>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.config.annotation.PathMatchConfigurer getPathMatchConfigurer()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.WebProperties,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void <init>()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel getSentinel()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<org.springframework.boot.info.BuildProperties: void coerceDate(java.util.Properties,java.lang.String)>-><java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler methodSecurityExpressionHandler()>-><org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler: void <init>()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doTruncate(java.util.stream.Node)>-><java.util.stream.Nodes$EmptyNode: long count()>
<sun.net.util.IPAddressUtil: boolean isIPv6LiteralAddress(java.lang.String)>-><sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>
<org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void removeVector(sun.net.www.http.KeepAliveKey)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.saphana.SAPHANADatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>
<java.util.EnumMap$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.flywaydb.core.internal.jdbc.DriverDataSource: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.flywaydb.core.api.configuration.Configuration,java.util.Properties,java.util.Map)>-><org.flywaydb.core.internal.database.firebird.FirebirdDatabaseType: void setDefaultConnectionProps(java.lang.String,java.util.Properties,java.lang.ClassLoader)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.security.config.web.server.ServerHttpSecurity: void <init>()>-><org.springframework.security.config.web.server.ServerHttpSecurity$CorsSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity,org.springframework.security.config.web.server.ServerHttpSecurity$1)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.LinkedList$LLSpliterator: int characteristics()>
<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.apache.tomcat.jni.Library: void <init>()>-><java.io.File: java.lang.String getAbsolutePath()>
<java.net.HttpConnectSocketImpl: java.net.Socket privilegedDoTunnel(java.lang.String,int)>-><java.net.HttpConnectSocketImpl$2: void <init>(java.net.HttpConnectSocketImpl,java.lang.String,int)>
<org.springframework.data.redis.core.DefaultReactiveHashOperations: void <init>(org.springframework.data.redis.core.ReactiveRedisTemplate,org.springframework.data.redis.serializer.RedisSerializationContext)>-><java.lang.Object: void <init>()>
<org.springframework.aop.support.AbstractGenericPointcutAdvisor: java.lang.String toString()>-><org.springframework.aop.support.AbstractGenericPointcutAdvisor: org.aopalliance.aop.Advice getAdvice()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxException: void <init>(java.lang.String,java.lang.Exception)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: java.io.PrintWriter getWriter()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<sun.security.util.HostnameChecker: void match(java.lang.String,java.security.cert.X509Certificate)>-><sun.security.util.HostnameChecker: boolean isIpAddress(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfPrimitive spliterator()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.JavaType refineSerializationType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void addDefaultHttpMessageConverters(java.util.List)>-><org.springframework.http.converter.json.Jackson2ObjectMapperBuilder: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder xml()>
<org.springframework.data.redis.core.DefaultReactiveStreamOperations$1: void <init>(org.springframework.data.redis.core.DefaultReactiveStreamOperations,org.springframework.data.redis.hash.HashMapper,org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.data.redis.core.StreamObjectMapper: void <init>(org.springframework.data.redis.hash.HashMapper)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.Spliterator spliterator()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$EmptyNode$OfDouble: java.util.Spliterator spliterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object postProcess(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void flush(boolean)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: java.util.List getHeaderWriters()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$CacheControlConfig: org.springframework.security.web.header.writers.CacheControlHeadersWriter access$1800(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$CacheControlConfig)>
<sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>-><sun.net.www.http.HttpClient: int getDefaultPort(java.lang.String)>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder: java.net.URL access$400(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <init>(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: boolean isCustomized()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.flywaydb.core.internal.database.derby.DerbyDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)>-><org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: void configureAsyncSupport(org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer)>
<org.springframework.security.web.util.matcher.OrRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.tomcat.util.buf.CharChunk: void allocate(int,int)>-><org.apache.tomcat.util.buf.AbstractChunk: void setLimit(int)>
<javax.net.ssl.SSLSocketFactory$1: java.lang.String run()>-><java.lang.String: int length()>
<org.springframework.boot.info.GitProperties: java.util.Properties processEntries(java.util.Properties)>-><org.springframework.boot.info.GitProperties: void coercePropertyToEpoch(java.util.Properties,java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: org.springframework.web.filter.CharacterEncodingFilter characterEncodingFilter()>-><org.springframework.boot.web.servlet.server.Encoding: boolean shouldForce(org.springframework.boot.web.servlet.server.Encoding$Type)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Thread: java.lang.Thread currentThread()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setContinueOnError(boolean)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.AbstractList: int indexOf(java.lang.Object)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.core.io.support.ResourcePropertiesPersister: void loadFromXml(java.util.Properties,java.io.InputStream)>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>-><java.util.SimpleTimeZone: int getOffset(long)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: java.lang.String getOrDeducePassword(org.springframework.boot.autoconfigure.security.SecurityProperties$User,org.springframework.security.crypto.password.PasswordEncoder)>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void info(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String)>-><sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,long)>
<org.flywaydb.core.internal.jdbc.DriverDataSource: java.sql.Connection getConnection()>-><org.flywaydb.core.internal.jdbc.DriverDataSource: java.lang.String getPassword()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDispatcherServlet(org.springframework.web.servlet.DispatcherServlet)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.security.ProtectionDomain$2: boolean getStaticPermissionsField(java.security.ProtectionDomain)>
<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator: java.lang.Object generateId(java.lang.Object)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<javax.security.auth.SubjectDomainCombiner$3: java.lang.Object run()>-><javax.security.auth.SubjectDomainCombiner$3: java.security.PermissionCollection run()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>-><java.lang.Throwable: java.lang.String toString()>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider getProvider(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.net.URI: void removeDots(char[],int[])>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void registerJavaDate(org.springframework.boot.autoconfigure.web.format.DateTimeFormatters)>-><org.springframework.format.datetime.DateFormatterRegistrar: void registerFormatters(org.springframework.format.FormatterRegistry)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.Throwable: java.lang.String toString()>
<org.springframework.security.core.userdetails.MapReactiveUserDetailsService: void <init>(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.CachingConnectionFactory rabbitConnectionFactory(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.amqp.rabbit.connection.CachingConnectionFactory: void <init>(com.rabbitmq.client.ConnectionFactory)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: long estimateSize()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>
<java.time.Duration: java.time.Duration ofDays(long)>-><java.lang.Math: long multiplyExact(long,long)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: int cpr(java.util.Comparator,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>-><sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2: javax.management.MBeanServer getMBeanServer()>-><org.springframework.jmx.support.WebSphereMBeanServerFactoryBean: javax.management.MBeanServer getObject()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Object run()>
<sun.net.www.MessageHeader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.FnGroupCountRecord: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void setPathPrefixes(java.util.Map)>-><java.util.Collections: java.util.Map emptyMap()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determineUsername()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determineDriverClassName()>
<org.springframework.web.servlet.handler.AbstractHandlerMapping: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.catalina.connector.Response: void setCharacterEncoding(java.lang.String)>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><java.io.PrintStream: void write(byte[],int,int)>
<org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedTomcat: org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory tomcatReactiveWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory: java.util.Collection getTomcatProtocolHandlerCustomizers()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void setRootViewName(java.lang.String)>-><org.springframework.web.servlet.handler.AbstractHandlerMapping: void setOrder(int)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: java.lang.String trim()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>-><org.apache.catalina.connector.ClientAbortException: void <init>(java.lang.Throwable)>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Node$OfPrimitive: java.util.stream.Node getChild(int)>
<javax.net.ssl.SSLSocketFactory$1: java.lang.String run()>-><java.lang.String: java.lang.String trim()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>
<org.springframework.data.redis.core.script.DefaultReactiveScriptExecutor: void <init>(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory,org.springframework.data.redis.serializer.RedisSerializationContext)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.javaboy.vhr.config.SecurityConfig$1: java.lang.Object postProcess(java.lang.Object)>-><org.javaboy.vhr.config.SecurityConfig$1: org.springframework.security.web.access.intercept.FilterSecurityInterceptor postProcess(org.springframework.security.web.access.intercept.FilterSecurityInterceptor)>
<org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.javaboy.vhr.model.Nation: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void closeServer()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.data.redis.connection.RedisStandaloneConfiguration: void <init>()>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: void <init>()>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><org.flywaydb.core.internal.database.sybasease.SybaseASEJConnectDatabaseType: java.lang.String getName()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void configureProperties(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isOutOfOrder()>
<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>-><org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isPrimary()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo parseUrl(java.lang.String)>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo: void <init>(java.net.URI,boolean,java.lang.String,java.lang.String)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$ArrayNode: void forEach(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: java.lang.String getOrDeducePassword(org.springframework.boot.autoconfigure.security.SecurityProperties$User,org.springframework.security.crypto.password.PasswordEncoder)>-><org.apache.commons.logging.LogAdapter$Log4jLog: void info(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisClusterConfiguration getClusterConfiguration()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: java.lang.String getUsername()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: org.springframework.web.servlet.config.annotation.InterceptorRegistration addInterceptor(org.springframework.web.servlet.HandlerInterceptor)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: long estimateSize()>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>-><java.util.Spliterators$LongArraySpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setServerHttpSecurity(org.springframework.security.config.web.server.ServerHttpSecurity)>
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: void <init>()>-><org.springframework.security.core.authority.AuthorityUtils: java.util.List createAuthorityList(java.lang.String[])>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce$Cluster$Refresh: java.time.Duration getPeriod()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.nio.HeapByteBuffer: byte get()>
<java.text.AttributeEntry: int hashCode()>-><org.javaboy.vhr.model.Politicsstatus: int hashCode()>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder: org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder dataSource(javax.sql.DataSource)>-><org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: void <init>(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder,javax.sql.DataSource,org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$1)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.flywaydb.core.internal.database.DatabaseTypeRegister: org.flywaydb.core.internal.database.base.DatabaseType getDatabaseTypeForUrl(java.lang.String)>-><java.util.ArrayList: int size()>
<java.util.stream.Nodes$InternalNodeSpliterator: java.util.stream.Node findNextLeafNode(java.util.Deque)>-><java.util.stream.Nodes$AbstractConcNode: long count()>
<org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>-><org.springframework.http.InvalidMediaTypeException: void <init>(org.springframework.util.InvalidMimeTypeException)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.messaging.handler.AbstractMessageCondition: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.context.WebSessionServerSecurityContextRepository: void <init>()>-><java.lang.Object: void <init>()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.security.web.header.Header: int hashCode()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.flywaydb.core.internal.database.sqlserver.SQLServerDatabaseType: java.lang.String getDriverClass(java.lang.String,java.lang.ClassLoader)>-><org.flywaydb.core.internal.logging.javautil.JavaUtilLog: void warn(java.lang.String)>
<org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver: void <init>(org.springframework.core.ReactiveAdapterRegistry)>-><org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverSupport: void <init>(org.springframework.core.ReactiveAdapterRegistry)>
<sun.net.www.http.HttpClient: void logFinest(java.lang.String)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.collections.ConcurrentCache: java.lang.Object get(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.amqp.RabbitProperties getRabbitPropertiesInstance()>-><org.springframework.boot.autoconfigure.amqp.RabbitProperties: void <init>()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>-><java.util.Spliterators$IntArraySpliterator: boolean tryAdvance(java.lang.Object)>
<java.io.PrintStream: boolean checkError()>-><sun.net.www.http.ChunkedOutputStream: boolean checkError()>
<java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext string()>-><org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext fromSerializer(org.springframework.data.redis.serializer.RedisSerializer)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.EnumMap: int entryHashCode(int)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>
<sun.security.util.HostnameChecker: void matchIP(java.lang.String,java.security.cert.X509Certificate)>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: long estimateSize()>-><java.util.Spliterators$DoubleArraySpliterator: long estimateSize()>
<java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator spliterator()>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator$OfLong spliterator()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Streams$AbstractStreamBuilderImpl: long estimateSize()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setRequestContextFilter(org.springframework.web.filter.RequestContextFilter)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: boolean isTrustedSite(java.net.URL)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <init>(boolean,java.util.Collection)>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: java.util.List getDefaultConverters()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.WindowProtectRecord: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory: void <init>()>-><org.springframework.boot.web.servlet.server.DocumentRoot: void <init>(org.apache.commons.logging.Log)>
<sun.net.NetworkClient: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setOpaque(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setReactiveStringRedisTemplate(org.springframework.data.redis.core.ReactiveStringRedisTemplate)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$RangeIntSpliterator: long estimateSize()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader mapToMessageHeader(java.util.Map)>-><sun.net.www.MessageHeader: void prepend(java.lang.String,java.lang.String)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.stream.Nodes$DoubleArrayNode: void forEach(java.util.function.DoubleConsumer)>-><java.util.stream.Nodes$DoubleFixedNodeBuilder: void accept(double)>
<org.springframework.boot.availability.ApplicationAvailabilityBean: void <init>()>-><java.lang.Object: void <init>()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.net.www.protocol.http.HttpURLConnection$5: java.lang.Object run()>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter: void setRolePrefix(java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.security.MessageDigest: byte[] digest()>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite: void addFormatters(org.springframework.format.FormatterRegistry)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object putValue(java.lang.Object,java.lang.Object)>-><java.lang.ref.Reference: java.lang.Object get()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$EmptyNode$OfLong: java.util.Spliterator spliterator()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: boolean hasAtLeastOneLocation(org.springframework.core.io.ResourceLoader,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.FilterInputStream: long skip(long)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.web.client.RestTemplate: void <init>()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties getWebMvcPropertiesInstance()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: void setPublishRequestHandledEvents(boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.InputStream: void reset()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.web.client.RestTemplate: void <init>()>-><org.springframework.http.converter.json.GsonHttpMessageConverter: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.SliceOps$1: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>
<org.apache.catalina.connector.Response: boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.http.InvalidMediaTypeException: void <init>(java.lang.String,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setRequestMethod(java.lang.String)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController basicErrorController(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.beans.factory.ObjectProvider)>
<org.springframework.http.converter.feed.RssChannelHttpMessageConverter: void <init>()>-><org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter: void <init>(org.springframework.http.MediaType)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setSqlSessionTemplate(org.mybatis.spring.SqlSessionTemplate)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>-><java.util.stream.Streams$RangeIntSpliterator: int characteristics()>
<java.io.DataInputStream: char readChar()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Politicsstatus: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisClusterConfiguration getClusterConfiguration()>-><org.springframework.data.redis.connection.RedisClusterConfiguration: void setPassword(org.springframework.data.redis.connection.RedisPassword)>
<java.net.HttpConnectSocketImpl$2: void <init>(java.net.HttpConnectSocketImpl,java.lang.String,int)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.String getBeanName(java.lang.Class,java.lang.String[])>-><java.util.ArrayList: java.lang.Object get(int)>
<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain,java.security.DomainCombiner,java.security.AccessControlContext,java.security.AccessControlContext,java.security.Permission[])>-><javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.HttpConnectSocketImpl: int getPort()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: javax.sql.DataSource configureDataSource(org.flywaydb.core.api.configuration.FluentConfiguration,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.boot.autoconfigure.jdbc.DataSourceProperties,javax.sql.DataSource,javax.sql.DataSource)>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>-><sun.net.www.http.HttpClient: void closeServer()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Socket: void connect(java.net.SocketAddress)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.header.writers.StaticHeadersWriter: java.lang.String toString()>
<java.io.DataInputStream: short readShort()>-><sun.net.www.MeteredStream: int read()>
<org.springframework.web.servlet.HttpServletBean: void <init>()>-><javax.servlet.http.HttpServlet: void <init>()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder taskDecorator(org.springframework.core.task.TaskDecorator)>-><org.springframework.boot.task.TaskExecutorBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.Boolean,java.time.Duration,java.lang.String,org.springframework.core.task.TaskDecorator,java.util.Set)>
<org.apache.catalina.connector.OutputBuffer: void write(java.lang.String)>-><org.apache.catalina.connector.OutputBuffer: void write(java.lang.String,int,int)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder authenticationManagerBuilder(org.springframework.security.config.annotation.ObjectPostProcessor,org.springframework.context.ApplicationContext)>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration$DefaultPasswordEncoderAuthenticationManagerBuilder: void <init>(org.springframework.security.config.annotation.ObjectPostProcessor,org.springframework.security.crypto.password.PasswordEncoder)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SecurityWebFilterChainImpl: void <init>()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: java.lang.String toString()>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource methodMetadataSource(org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>-><org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource: void <init>(org.springframework.security.access.prepost.PrePostInvocationAttributeFactory)>
<java.util.stream.SliceOps$1: java.util.Spliterator opEvaluateParallelLazy(java.util.stream.PipelineHelper,java.util.Spliterator)>-><java.util.stream.Nodes$SpinedNodeBuilder: java.util.Spliterator spliterator()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<java.net.URI: java.lang.String normalize(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>-><java.nio.HeapByteBuffer: java.nio.ByteBuffer slice()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(java.nio.CharBuffer,java.nio.ByteBuffer)>-><java.nio.ByteBuffer: byte[] array()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.http.HttpClient: void openServer()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.HttpClient: void finished()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.MessageHeader: void <init>()>-><sun.net.www.MessageHeader: void grow()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: java.util.Iterator multiValueIterator(java.lang.String)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Node$OfPrimitive: java.util.stream.Node getChild(int)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.ibatis.parsing.XNode: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: javax.net.ssl.KeyManager[] configureKeyManagers()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: org.springframework.boot.task.TaskExecutorBuilder taskExecutorBuilder(org.springframework.boot.autoconfigure.task.TaskExecutionProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder awaitTermination(boolean)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactory(org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder)>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration: java.lang.String[] getMappingResources()>
<java.util.stream.Node$OfLong: java.util.stream.Node$OfLong truncate(long,long,java.util.function.IntFunction)>-><java.util.stream.Nodes$LongFixedNodeBuilder: void end()>
<org.springframework.boot.task.TaskSchedulerBuilder: void <init>(java.lang.Integer,java.lang.Boolean,java.time.Duration,java.lang.String,java.util.Set)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>
<java.util.stream.Node$OfDouble: java.util.stream.Node$OfDouble truncate(long,long,java.util.function.IntFunction)>-><java.util.Spliterators$EmptySpliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.javaboy.vhr.model.Department: int hashCode()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Spliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory: void destroy()>-><org.springframework.amqp.rabbit.connection.ThreadChannelConnectionFactory$ConnectionWrapper: void forceClose()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: byte[] getKeySpec(java.lang.String)>-><java.util.Base64$Decoder: byte[] decode(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration: org.springframework.cache.support.NoOpCacheManager cacheManager()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getLogoutRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createLogoutRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Nodes$IntArrayNode: long count()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder$Builder: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean build()>-><org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: void setJpaVendorAdapter(org.springframework.orm.jpa.JpaVendorAdapter)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.tomcat.util.buf.C2BConverter: void convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)>-><java.nio.HeapCharBuffer: java.nio.CharBuffer put(char)>
<java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void forEach(java.util.function.Consumer,long)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.security.core.userdetails.User: java.util.SortedSet sortAuthorities(java.util.Collection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.Proxy$Type type()>
<org.springframework.http.converter.feed.AtomFeedHttpMessageConverter: void <init>()>-><org.springframework.http.converter.feed.AbstractWireFeedHttpMessageConverter: void <init>(org.springframework.http.MediaType)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object getValue(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.boot.autoconfigure.web.format.DateTimeFormatters: java.time.format.DateTimeFormatter formatter(java.lang.String)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<java.util.Spliterator: boolean hasCharacteristics(int)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: int characteristics()>
<sun.net.www.protocol.https.DelegateHttpsURLConnection: void dispose()>-><java.lang.Object: void finalize()>
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getLogoutRequestMatcher(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration: org.springframework.data.redis.cache.RedisCacheManager cacheManager(org.springframework.boot.autoconfigure.cache.CacheProperties,org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.data.redis.connection.RedisConnectionFactory,org.springframework.core.io.ResourceLoader)>-><org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder: org.springframework.data.redis.cache.RedisCacheManager$RedisCacheManagerBuilder enableStatistics()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void remove(java.lang.String)>
<java.util.LinkedList$ListItr: void add(java.lang.Object)>-><java.util.LinkedList: void linkBefore(java.lang.Object,java.util.LinkedList$Node)>
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getDescription(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.io.FilterInputStream: long skip(long)>-><sun.net.www.MeteredStream: long skip(long)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.apache.commons.logging.LogAdapter$JavaUtilLog: void debug(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$ValueSpliterator: java.util.Spliterator trySplit()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.Collections$2: void forEachRemaining(java.util.function.Consumer)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<com.rabbitmq.client.impl.VariableLinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.Operators$EmptySubscription: boolean isEmpty()>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.String: int indexOf(int)>
<org.javaboy.vhr.utils.POIUtils: org.springframework.http.ResponseEntity employee2Excel(java.util.List)>-><org.javaboy.vhr.model.Employee: java.lang.String getEngageForm()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.javaboy.vhr.VhrApplication: void main(java.lang.String[])>-><synthetic.method.HttpSessionImpl: void <init>()>
<sun.net.www.MeteredStream: int read()>-><java.io.PushbackInputStream: int read()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><sun.net.www.protocol.http.HttpURLConnection$9: java.lang.Object run()>
<org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitConnectionFactoryCreator: org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(org.springframework.boot.autoconfigure.amqp.RabbitProperties,org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean: void setResourceLoader(org.springframework.core.io.ResourceLoader)>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties getDataSourcePropertiesInstance()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: void setData(java.util.List)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: org.springframework.web.filter.CharacterEncodingFilter characterEncodingFilter()>-><org.springframework.boot.web.servlet.server.Encoding: java.nio.charset.Charset getCharset()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.util.ArrayList: void <init>()>
<org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Integer extractKeyHash(java.lang.String)>-><java.lang.String: int hashCode()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<org.springframework.security.config.annotation.AlreadyBuiltException: void <init>(java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>
<java.util.Objects: int hashCode(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><org.javaboy.vhr.model.Department: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: void flushBuffer()>-><org.apache.catalina.connector.OutputBuffer: void flush()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setWebMvcConfigurer(org.springframework.web.servlet.config.annotation.WebMvcConfigurer)>
<sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String,java.lang.String)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: java.util.List createSentinels(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel)>-><org.springframework.data.redis.connection.RedisNode: void <init>(java.lang.String,int)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.DSFRecord: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.IndexRecord: java.lang.String toString()>
<java.io.FilterInputStream: void reset()>-><java.io.ByteArrayInputStream: void reset()>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Streams$AbstractStreamBuilderImpl: java.util.Spliterator trySplit()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: void <init>()>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo parseUrl(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: java.util.Properties loadFrom(org.springframework.core.io.Resource,java.lang.String,java.nio.charset.Charset)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Properties$LineReader: int readLine()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator: java.util.Spliterator trySplit()>-><java.util.IdentityHashMap$EntrySpliterator: java.util.Spliterator trySplit()>
<org.springframework.web.cors.UrlBasedCorsConfigurationSource: void <init>()>-><org.springframework.web.cors.UrlBasedCorsConfigurationSource: void <init>(org.springframework.web.util.pattern.PathPatternParser)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.MeteredStream: int available()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath: java.lang.String getServletUrlMapping()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: boolean containsValue(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.String: boolean endsWith(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.stream.StreamSpliterators$SliceSpliterator: int characteristics()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: int characteristics()>
<java.io.FilterInputStream: int read(byte[])>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: void add(java.lang.Object)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: void <init>()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><javax.security.auth.SubjectDomainCombiner$WeakKeyValueMap: java.lang.Object getValue(java.lang.Object)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.boot.task.TaskExecutorBuilder: org.springframework.boot.task.TaskExecutorBuilder maxPoolSize(int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.springframework.transaction.reactive.TransactionalOperator getTransactionalOperator()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getCnonce()>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>
<java.util.stream.Nodes$InternalNodeSpliterator: boolean initTryAdvance()>-><java.util.stream.Nodes$ConcNode$OfDouble: java.util.Spliterator spliterator()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientRegistrationRepositoryConfiguration: org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository clientRegistrationRepository(org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties)>-><java.util.HashMap: java.util.Collection values()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$InternalNodeSpliterator: long estimateSize()>-><java.util.stream.Node: java.util.stream.Node getChild(int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.apache.tomcat.util.buf.StringCache$CharEntry: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.PlainSocketImpl: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.SecurityContextConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.web.util.pattern.InternalPathPatternParser: org.springframework.web.util.pattern.PathElement createPathElement()>-><org.springframework.web.util.pattern.LiteralPathElement: void <init>(int,char[],boolean,char)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.javaboy.vhr.VhrApplication: void main(java.lang.String[])>-><synthetic.method.ServletRequestImpl: void <init>()>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: org.springframework.boot.jdbc.DataSourceBuilder initializeDataSourceBuilder()>-><org.springframework.boot.jdbc.DataSourceBuilder: org.springframework.boot.jdbc.DataSourceBuilder type(java.lang.Class)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.Character: char toUpperCase(char)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler methodSecurityExpressionHandler()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.stream.Nodes$ConcNode: java.lang.String toString()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration: void checkLocationExists(javax.sql.DataSource,org.springframework.boot.autoconfigure.flyway.FlywayProperties,org.springframework.core.io.ResourceLoader)>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: boolean isCheckLocation()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<java.util.Spliterators$EmptySpliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>-><java.util.Spliterators$EmptySpliterator: boolean tryAdvance(java.lang.Object)>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.SliceOps$1$1: void begin(long)>-><java.util.stream.Nodes$DoubleSpinedNodeBuilder: void begin(long)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><sun.reflect.Reflection: java.lang.Class getCallerClass()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: java.lang.String getPath()>
<org.springframework.boot.info.GitProperties: void coercePropertyToEpoch(java.util.Properties,java.lang.String)>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: void <init>()>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentSecurityPolicyConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer,org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$1)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>-><java.net.SocketException: void <init>(java.lang.String)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$ArrayBuffer$OfRef: void accept(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.javaboy.vhr.model.Hr: int hashCode()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.Math: int min(int,int)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisStandaloneConfiguration getStandaloneConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration$ConnectionInfo: int getPort()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URI: java.lang.String getScheme()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.context.annotation.MBeanExportConfiguration: void setupDomain(org.springframework.jmx.export.annotation.AnnotationMBeanExporter,org.springframework.core.annotation.AnnotationAttributes)>-><org.springframework.jmx.export.annotation.AnnotationMBeanExporter: void setDefaultDomain(java.lang.String)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: void setDefaultErrorViewResolver(org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: void add(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.Position: boolean equals(java.lang.Object)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.util.IPAddressUtil: boolean isIPv4LiteralAddress(java.lang.String)>-><sun.net.util.IPAddressUtil: byte[] textToNumericFormatV4(java.lang.String)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider getProvider(java.lang.String,org.springframework.core.env.Environment,java.lang.ClassLoader,org.springframework.core.io.ResourceLoader)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyProperties getSaml2RelyingPartyPropertiesInstance()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.header.writers.XXssProtectionHeaderWriter: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.flyway.FlywayProperties getFlywayPropertiesInstance()>-><org.springframework.boot.autoconfigure.flyway.FlywayProperties: void setOracleSqlplus(java.lang.Boolean)>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.access.AccessDeniedHandler createDefaultDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.LinkedHashMap: java.util.Collection values()>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder key(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: void <init>(org.springframework.http.MediaType[])>-><org.springframework.util.Assert: void noNullElements(java.lang.Object[],java.lang.String)>
<org.springframework.data.redis.serializer.RedisSerializationContext: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder newSerializationContext(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>-><org.springframework.data.redis.serializer.DefaultRedisSerializationContext$DefaultRedisSerializationContextBuilder: org.springframework.data.redis.serializer.RedisSerializationContext$RedisSerializationContextBuilder key(org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair)>
<org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: org.springframework.data.redis.connection.RedisSentinelConfiguration getSentinelConfig()>-><org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration: java.util.List createSentinels(org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.HttpClient: void setDoNotRetry(boolean)>
<org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder roles(java.lang.String[])>-><org.springframework.security.core.userdetails.User$UserBuilder: org.springframework.security.core.userdetails.User$UserBuilder authorities(java.util.Collection)>
<org.springframework.http.InvalidMediaTypeException: void <init>(org.springframework.util.InvalidMimeTypeException)>-><java.lang.Throwable: java.lang.String getMessage()>
<sun.net.www.MeteredStream: void close()>-><java.io.BufferedInputStream: void close()>
<java.util.concurrent.ConcurrentSkipListMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<org.springframework.http.converter.FormHttpMessageConverter: void setPartConverters(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.MeteredStream: void close()>
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.access.AccessDeniedHandler createDefaultDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.AccessDeniedHandlerImpl: void <init>()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.jar.Manifest$FastInputStream: void fill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><java.lang.String: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer: org.springframework.web.accept.ContentNegotiationManager buildContentNegotiationManager()>-><org.springframework.web.accept.ContentNegotiationManagerFactoryBean: org.springframework.web.accept.ContentNegotiationManager build()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.springframework.security.web.csrf.CsrfFilter$DefaultRequiresCsrfMatcher: java.lang.String toString()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration: void <init>()>
<java.util.Collections$SetFromMap: boolean isEmpty()>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object lazyBean(java.lang.Class)>-><org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>
<org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.String getKey()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.util.zip.ZipFile$ZipFileInputStream: int read(byte[],int,int)>
<org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determinePassword()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceProperties: java.lang.String determineDriverClassName()>
<org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration: org.springframework.boot.autoconfigure.flyway.FlywaySchemaManagementProvider flywayDefaultDdlModeProvider(org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.flyway.FlywaySchemaManagementProvider: void <init>(java.lang.Iterable)>
<sun.net.www.HeaderParser: sun.net.www.HeaderParser subsequence(int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer: org.springframework.security.web.util.matcher.RequestMatcher notMatchingMediaType(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.http.MediaType)>-><org.springframework.web.accept.HeaderContentNegotiationStrategy: void <init>()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.javaboy.vhr.model.Nation: boolean equals(java.lang.Object)>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.javaboy.vhr.VhrApplication: org.springframework.boot.autoconfigure.web.ResourceProperties getResourcePropertiesInstance()>
<org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration: io.lettuce.core.ClientOptions$Builder initializeClientOptionsBuilder()>-><org.springframework.boot.autoconfigure.data.redis.RedisProperties: org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster getCluster()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientRegistrationRepositoryConfiguration: org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository clientRegistrationRepository(org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties)>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter: java.util.Map getClientRegistrations(org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties)>
<org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean dispatcherServletRegistration(org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties: org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Servlet getServlet()>
<java.util.LinkedHashMap$LinkedEntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.web.server.ServerHttpSecurity$HeaderSpec: void <init>(org.springframework.security.config.web.server.ServerHttpSecurity)>-><org.springframework.security.web.server.header.FeaturePolicyServerHttpHeadersWriter: void <init>()>
<org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor securityMethodInterceptor(org.springframework.security.access.method.AbstractMethodSecurityMetadataSource,org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>-><org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice: void setExpressionHandler(org.springframework.security.access.expression.method.MethodSecurityExpressionHandler)>
<org.apache.tomcat.jni.Library: void <init>()>-><org.flywaydb.core.internal.sqlscript.FlywaySqlScriptException: java.lang.String getMessage()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <init>(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders,org.springframework.context.ApplicationContext,java.util.Optional,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.boot.web.client.RestTemplateBuilder: java.util.Set copiedSetOf(java.lang.Object[])>-><org.springframework.boot.web.client.RestTemplateBuilder: java.util.Set copiedSetOf(java.util.Collection)>
<com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties$StatViewServlet: void <init>()>-><java.lang.Object: void <init>()>
<java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$UnorderedSliceSpliterator$OfRef: void accept(java.lang.Object)>
<sun.net.www.ParseUtil: void appendFragment(java.lang.StringBuffer,java.lang.String)>-><sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.stream.Nodes$InternalNodeSpliterator: java.util.Spliterator trySplit()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.javaboy.vhr.model.Position: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><java.net.NetPermission: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.amqp.RabbitProperties$Address: java.lang.String parseUsernameAndPassword(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<java.util.PropertyPermissionCollection: boolean implies(java.security.Permission)>-><java.security.Permission: java.lang.String getName()>
<org.springframework.web.util.pattern.PathPattern: void <init>(java.lang.String,org.springframework.web.util.pattern.PathPatternParser,org.springframework.web.util.pattern.PathElement)>-><org.springframework.web.util.pattern.LiteralPathElement: int getNormalizedLength()>
<org.flywaydb.core.internal.util.ClassUtils: java.lang.String getStaticFieldValue(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void addInitParameter(java.lang.String,java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<java.util.stream.SliceOps$SliceTask: java.util.stream.Node doLeaf()>-><java.util.stream.AbstractPipeline: java.util.stream.Sink wrapAndCopyInto(java.util.stream.Sink,java.util.Spliterator)>
<org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder jwtDecoderByPublicKeyValue()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties$Jwt: java.lang.String getJwsAlgorithm()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.Hr: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.LinkedHashMap: void <init>()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration: void <init>()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><sun.net.www.http.HttpClient: boolean isCachedConnection()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>
<io.lettuce.core.cluster.ClusterClientOptions$Builder: io.lettuce.core.ClientOptions$Builder socketOptions(io.lettuce.core.SocketOptions)>-><io.lettuce.core.cluster.ClusterClientOptions$Builder: io.lettuce.core.cluster.ClusterClientOptions$Builder socketOptions(io.lettuce.core.SocketOptions)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: boolean isPresent()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>-><java.util.stream.Nodes$InternalNodeSpliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>
<sun.net.www.MeteredStream: void finalize()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><java.util.AbstractMap: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.web.filter.GenericFilterBean: void afterPropertiesSet()>
<com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.core.filter.FilteringParserDelegate: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<org.springframework.http.client.support.HttpAccessor: void <init>()>-><java.util.ArrayList: void <init>()>
<java.util.Properties$LineReader: int readLine()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$ContentTypeOptionsConfig: void <init>(org.springframework.security.config.annotation.web.configurers.HeadersConfigurer)>-><java.lang.Object: void <init>()>
<org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder: org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder of(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.util.function.Supplier)>-><org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBuilder$ConnectionFactoryOptionsInitializer: io.r2dbc.spi.ConnectionFactoryOptions$Builder initializeOptions(org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties,java.util.function.Supplier)>
<java.util.LinkedList$ListItr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SliceOps$1$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combineJavaxPolicy(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void reorderXmlConvertersToEnd(java.util.List)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: int capacity()>
<org.javaboy.vhr.VhrApplication: void initBean_synthetic()>-><synthetic.method.SingletonFactory: org.apache.ibatis.session.SqlSessionFactory getSqlSessionFactory()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.stream.Nodes$ConcNode$OfInt: void <init>(java.util.stream.Node$OfInt,java.util.stream.Node$OfInt)>-><java.util.stream.Nodes$ConcNode$OfPrimitive: void <init>(java.util.stream.Node$OfPrimitive,java.util.stream.Node$OfPrimitive)>
<javax.security.auth.Subject: java.lang.String toString(boolean)>-><org.apache.poi.hssf.record.HideObjRecord: java.lang.String toString()>
<java.util.stream.Nodes$InternalNodeSpliterator$OfRef: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SpinedBuffer$OfDouble: void forEach(java.util.function.Consumer)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.javaboy.vhr.model.JobLevel: int hashCode()>
