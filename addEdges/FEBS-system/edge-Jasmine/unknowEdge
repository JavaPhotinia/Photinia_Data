<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Constructor)>-><java.lang.invoke.MethodHandleNatives: void init(java.lang.invoke.MemberName,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromArrayType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.GenericArrayType,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.types.ResolvedArrayType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanTrustPermission(java.lang.Class)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.web.servlet.support.ErrorPageFilterConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <clinit>()>-><java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Boolean: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void removeStale()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$SoftValueReference: java.lang.Object keyRef()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.codehaus.jackson.type.JavaType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.SocketImpl: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromGenericType(com.fasterxml.classmate.util.ClassStack,com.fasterxml.classmate.GenericType,com.fasterxml.classmate.TypeBindings)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><javax.security.auth.Subject$SecureSet: int size()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.sql.Timestamp: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(java.lang.String,java.lang.String,javax.management.ObjectName,java.lang.String)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromGenericType(com.fasterxml.classmate.util.ClassStack,com.fasterxml.classmate.GenericType,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<javax.management.MBeanServerDelegate: void sendNotification(javax.management.Notification)>-><javax.management.Notification: void setSequenceNumber(long)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.subst.Token: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void <init>(int,float,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void setTable(org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry[])>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.util.CellRangeAddressBase: int hashCode()>
<org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler: void <init>(org.springframework.http.HttpStatus)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.transaction.jta.JndiJtaConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.AttributedCharacterIterator$Attribute: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.beans.IndexedPropertyDescriptor: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<javax.el.ExpressionFactory: java.lang.String discoverClassName(java.lang.ClassLoader)>-><javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><javax.el.Util: java.lang.ClassLoader getContextClassLoader()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.type.MapType: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.URI: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.LocalTime: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Integer: int hashCode()>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.security.Provider: java.util.Set entrySet()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void init()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.apache.catalina.util.ContextName: java.lang.String getDisplayName()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: void addValueExtractorDescriptorForTypeArgumentLocation(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.List,org.hibernate.validator.internal.metadata.location.TypeArgumentConstraintLocation)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver getResolver()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.MemberKey: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><ch.qos.logback.core.status.StatusBase: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.DigitList: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.TreeMap: java.util.Set entrySet()>
<java.util.Optional: java.util.Optional map(java.util.function.Function)>-><java.util.Optional: java.util.Optional empty()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Thread: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void configure(javax.servlet.ServletRegistration$Dynamic)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Boolean: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Byte: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ListValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.core.JsonLocation: int hashCode()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromVariable(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.classmate.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.reflect.Type[] getBounds()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.HashMap$EntrySet: boolean remove(java.lang.Object)>
<org.springframework.web.servlet.function.RequestPredicates$ParamPredicate: void <init>(java.lang.String,java.util.function.Predicate)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.font.EAttribute: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: boolean isSupportedType(java.util.EventListener)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotation: org.springframework.core.annotation.MergedAnnotation of(java.lang.Class)>-><org.springframework.core.annotation.MergedAnnotation: org.springframework.core.annotation.MergedAnnotation of(java.lang.reflect.AnnotatedElement,java.lang.Class,java.util.Map)>
<java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String safeGetClassName(javax.management.DynamicMBean)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getClassName(javax.management.DynamicMBean)>
<com.fasterxml.classmate.util.ClassStack: com.fasterxml.classmate.util.ClassStack child(java.lang.Class)>-><com.fasterxml.classmate.util.ClassStack: void <init>(com.fasterxml.classmate.util.ClassStack,java.lang.Class)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView: int size()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isQualifier(java.lang.Class)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.jca.ProviderConfig: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: int hashCode()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType buildAnnotatedType(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><java.util.ArrayList: void <init>(int)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.awt.Rectangle: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ContextName: java.lang.String getDisplayName()>-><java.lang.String: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set filterListOfObjectInstances(java.util.Set,javax.management.QueryExp)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.fasterxml.classmate.types.ResolvedObjectType: java.util.List getImplementedInterfaces()>-><java.util.Collections: java.util.List emptyList()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.security.Provider)>-><javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromVariable(java.lang.reflect.TypeVariable,org.codehaus.jackson.map.type.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.reflect.Type[] getBounds()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(java.lang.Object,java.lang.Object[])>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.Extension: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<javax.management.Notification: void <init>(java.lang.String,java.lang.Object,long)>-><java.util.Date: long getTime()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.http.ResponseEntity: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration: void <clinit>()>-><java.lang.Enum: java.lang.String name()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.util.ClassStack: void resolveSelfReferences(com.fasterxml.classmate.ResolvedType)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.text.AttributeEntry: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$SetFromMap: int size()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.core.io.Resource getIndexHtml(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String)>-><sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String,java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.SimpleType: int hashCode()>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.util.Collections$UnmodifiableMap: void clear()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.LocalDateTime: int hashCode()>
<org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree of(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.AutowireCandidateQualifier getQualifier(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl$AbstractTLSContext: void <init>()>-><sun.security.ssl.SSLContextImpl: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: int hashCode()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getClassLevelConstraints(java.lang.Class)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.netty.util.concurrent.PromiseTask: boolean equals(java.lang.Object)>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><sun.text.normalizer.UTF16: boolean isTrailSurrogate(char)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)>-><sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$AndPredicate: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.base.Predicates$NotPredicate: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.calendar.CalendarDate: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.util.LRUTypeCache: com.fasterxml.classmate.ResolvedType find(com.fasterxml.classmate.util.ResolvedTypeKey)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.p6spy.engine.logging.Category: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.SingletonImmutableList: int size()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.xml.namespace.QName: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.AnnotatedType)>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.BooleanNode: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<java.security.KeyPairGeneratorSpi: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserializeUsingCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection,com.fasterxml.jackson.databind.JsonDeserializer)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isTypeVariableAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.Type[] getBounds()>
<com.wuwenze.poi.util.POIUtil: void write(org.apache.poi.xssf.streaming.SXSSFWorkbook,java.io.OutputStream)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void close()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<org.springframework.core.SimpleAliasRegistry: void checkForAliasCircle(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<register-finalize <sun.security.ssl.CipherSuite$PRF: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>-><org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void <init>()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.List loadFactories(java.lang.Class,java.lang.ClassLoader)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.lang.reflect.Parameter: java.lang.annotation.Annotation[] getAnnotations()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.springframework.boot.web.embedded.tomcat.TldSkipPatterns: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><reactor.util.context.Context1: java.lang.Object getKey()>
<org.jboss.logging.Log4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.jboss.logging.Log4jLogger: org.apache.log4j.Level translate(org.jboss.logging.Logger$Level)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.util.unit.DataSize: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><sun.text.normalizer.ReplaceableUCharacterIterator: int getIndex()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.xml.namespace.QName: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerSecurityConfiguration: void <init>()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<org.springframework.core.SimpleAliasRegistry: boolean hasAlias(java.lang.String,java.lang.String)>-><org.springframework.core.SimpleAliasRegistry: boolean hasAlias(java.lang.String,java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName preRegister(javax.management.DynamicMBean,javax.management.MBeanServer,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void throwMBeanRegistrationException(java.lang.Throwable,java.lang.String)>
<org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashSet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.xml.bind.JAXBException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERUniversalString: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLogger: void debug(java.lang.String)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<javax.management.ObjectInstance: void <init>(javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.serializer.SerialContext: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<sun.security.ssl.SSLSessionContextImpl: int getDefaultCacheLimit()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Field,boolean)>-><java.lang.reflect.Field: java.lang.String getName()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundryActuatorAutoConfiguration$IgnoredPathsSecurityConfiguration: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.ArrayList: void <init>(int)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.io.InputStream lambda$newBundle$0(boolean,java.lang.ClassLoader,java.lang.String)>-><java.util.ResourceBundle$RBClassLoader: java.net.URL getResource(java.lang.String)>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean containsKey(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><org.springframework.http.HttpHeaders: java.util.Collection values()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicLongArray: java.lang.String toString()>
<javax.el.Util$CacheKey: void <init>(java.lang.ClassLoader)>-><java.lang.Object: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.core.io.SerializedString: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.EnumMap: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractMap: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decompose(sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,sun.security.ssl.CipherSuite$MacAlg)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><java.util.ArrayList: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Vector$Itr: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<java.util.Collections$SetFromMap: java.util.Spliterator spliterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Spliterator spliterator()>
<java.net.IDN: void <clinit>()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer getConfigurer(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.Class,java.util.Set)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration: void <init>(io.micrometer.core.instrument.MeterRegistry)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableMap: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<org.springframework.security.crypto.password.NoOpPasswordEncoder: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.location.ReturnValueConstraintLocation: java.lang.reflect.Type getTypeForValidatorResolution()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.zip.ZipOutputStream: void writeByte(int)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.Period: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><com.fasterxml.classmate.types.ResolvedInterfaceType: com.fasterxml.classmate.ResolvedType getParentClass()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1BitString: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Object: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromArrayType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.GenericArrayType,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <clinit>()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.hibernate.validator.internal.util.ReflectionHelper: boolean isGetterMethod(java.lang.reflect.Executable)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalLong: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><sun.net.idn.StringPrep$Values: void <init>(sun.net.idn.StringPrep$1)>
<com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.baomidou.dynamic.datasource.spring.boot.autoconfigure.hikari.HikariCpConfig: void <clinit>()>-><java.util.concurrent.TimeUnit$4: long toMillis(long)>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void <init>(java.lang.String)>-><com.sun.jmx.mbeanserver.Repository: void <init>(java.lang.String,boolean)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.AbstractSet: int hashCode()>
<javax.xml.datatype.DatatypeConfigurationException: void printStackTrace0(java.io.PrintWriter)>-><org.aspectj.bridge.AbortException: void printStackTrace(java.io.PrintWriter)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.ImmutableMapKeySet: int size()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><reactor.util.context.Context1: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.awt.geom.Edge: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.lang.Object run(java.security.PrivilegedAction)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(java.util.Map)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void putAll(java.util.Map)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.FieldPosition: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><com.fasterxml.classmate.types.ResolvedInterfaceType: java.util.List getImplementedInterfaces()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: int size()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>
<org.springframework.web.util.HierarchicalUriComponents$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.Collections$SynchronizedMap: void clear()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.awt.AppContext: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: void <init>(java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: java.lang.reflect.Field getAccessible(java.lang.reflect.Field)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.FloatArrayValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.util.HashMap: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilder: java.lang.Class getTargetClass()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedElement$ConstrainedElementKind: void <clinit>()>-><org.hibernate.validator.internal.metadata.raw.ConstrainedElement$ConstrainedElementKind: void <init>(java.lang.String,int)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Properties: void load(java.io.InputStream)>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(java.lang.Object,java.lang.Object[])>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object toOpenValue(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.List getUrlMappings()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<org.aspectj.bridge.MessageWriter: void <init>(java.io.PrintWriter,boolean)>-><java.lang.Object: void <init>()>
<org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: boolean isRegistered(javax.management.ObjectName)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><java.util.ArrayList: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Method: int hashCode()>
<sun.text.normalizer.UCharacter: int getCodePoint(char,char)>-><sun.text.normalizer.UCharacterProperty: int getRawSupplementary(char,char)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.ClassKey: boolean equals(java.lang.Object)>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><java.util.ResourceBundle$RBClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.hibernate.validator.internal.metadata.raw.ConfigurationSource: void <init>(java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.SubList$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.Instant: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.OpaqueUriComponents: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: javax.management.modelmbean.ModelMBeanOperationInfo[] getMBeanOperations(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><org.springframework.boot.actuate.endpoint.AbstractExposableEndpoint: java.util.Collection getOperations()>
<org.hibernate.validator.HibernateValidatorPermission: void <clinit>()>-><org.hibernate.validator.HibernateValidatorPermission: void <init>(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<javax.management.ObjectInstance: void <init>(javax.management.ObjectName,java.lang.String)>-><javax.management.ObjectName: boolean isPattern()>
<org.hibernate.validator.internal.util.TypeHelper$2: void <init>(java.lang.reflect.Type[],java.lang.Class)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.IdentityHashMap: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.SimpleAutowireCandidateResolver: boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><javax.security.auth.Subject$SecureSet: int size()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.collect.ImmutableMap: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.config.ConstructorArgumentValues: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.io.FileInputStream: void <init>(java.io.File)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.WeakHashMap$Entry: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.AbstractSet: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Year: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.operation.ApiOperationReader getApiOperationReader()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<sun.security.ssl.RandomCookie: void <init>(java.security.SecureRandom)>-><java.lang.System: long currentTimeMillis()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.font.GlyphLayout$LayoutEngineKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedRecursiveType: void setReference(com.fasterxml.classmate.ResolvedType)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.http.HttpHeaders: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.wuwenze.poi.pojo.ExcelProperty: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.AttributeValues: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Class: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.SimpleDateFormat: int hashCode()>
<sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm: void <init>(java.lang.String,int,java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.springframework.core.CollectionFactory: java.util.Map createApproximateMap(java.lang.Object,int)>-><java.util.Collections$SynchronizedSortedMap: java.util.Comparator comparator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.String: java.lang.String intern()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(javax.validation.groups.ConvertGroup,javax.validation.groups.ConvertGroup$List)>-><java.util.Collections: java.util.Map emptyMap()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.asm.Handle: java.lang.String toString()>
<org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <clinit>()>-><java.util.HashSet: void <init>(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: int size()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.validation.ObjectError: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean isEmpty()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashSet: boolean add(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<sun.security.ssl.EngineInputRecord: void <clinit>()>-><java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.commons.beanutils.converters.ConverterFacade: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.aspectj.util.FuzzyBoolean$YesFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>-><org.aspectj.util.FuzzyBoolean$YesFuzzyBoolean: void <init>()>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void debug(java.lang.String)>-><io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: boolean isDebugEnabled()>
<javax.management.StandardMBean: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.MXBeanSupport: void register(javax.management.MBeanServer,javax.management.ObjectName)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.io.FileSystemResource: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERVisibleString: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.AllPermission: int hashCode()>
<java.security.Provider: java.lang.Object implMerge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.Provider: boolean checkLegacy(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: int buildHashCode(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.location.CrossParameterConstraintLocation: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.CodeSource: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Year: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.lang.String[] access$100()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<sun.net.idn.StringPrepDataReader: void read(byte[],char[])>-><java.io.DataInputStream: char readChar()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.juli.logging.DirectJDKLog: void fatal(java.lang.Object,java.lang.Throwable)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.springframework.boot.cloud.CloudPlatform: void <clinit>()>-><org.springframework.boot.cloud.CloudPlatform$4: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.pool.HikariPool: boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)>-><com.zaxxer.hikari.util.ConcurrentBag: boolean reserve(com.zaxxer.hikari.util.ConcurrentBag$IConcurrentBagEntry)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.Font: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: void <init>(java.util.Set)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.Set toImmutableSet(java.util.Set)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.DERPrintableString: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(java.lang.String[])>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.p6spy.engine.logging.Category: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Integer: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.map.type.MapLikeType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Proxy$KeyX: int hashCode()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.PropertyUtilsBean: void setMappedProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.IterableValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.aspectj.weaver.patterns.TypePattern: void <clinit>()>-><org.aspectj.weaver.patterns.NoTypePattern: void <init>()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.TreeMap$KeySet: boolean remove(java.lang.Object)>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite$CipherType: void <clinit>()>-><sun.security.ssl.CipherSuite$CipherType: void <init>(java.lang.String,int)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.MXBeanMapping: java.lang.reflect.Type getJavaType()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><org.springframework.beans.factory.support.AbstractBeanFactory: void registerScope(java.lang.String,org.springframework.beans.factory.config.Scope)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.ArrayNode: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: void <init>(javax.management.openmbean.CompositeType,java.lang.String[],java.lang.Object[])>
<org.springframework.boot.actuate.autoconfigure.endpoint.jmx.DefaultEndpointObjectNameFactory: boolean hasMBean(java.lang.String)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.PermissionCollection: java.lang.String toString()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.Level: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.reflect.Field: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: void <init>(java.lang.Class,java.lang.reflect.TypeVariable,java.lang.Integer,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.lang.Object: void <init>()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.lang.String getResourceDescription(java.lang.String,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.RegularEnumSet: boolean remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.JumboEnumSet: int size()>
<java.lang.ThreadGroup: void <init>(java.lang.String)>-><java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Hashtable$KeySet: int size()>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getNewMBeanClassName(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.springframework.core.annotation.TypeMappedAnnotation: java.util.Optional getDefaultValue(java.lang.String,java.lang.Class)>-><org.springframework.core.annotation.AnnotationTypeMapping: org.springframework.core.annotation.AttributeMethods getAttributes()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areReturnValueConstraintsIgnoredFor(java.lang.reflect.Member)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><sun.text.normalizer.UCharacterIterator: sun.text.normalizer.UCharacterIterator getInstance(java.lang.StringBuffer)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>-><java.lang.Object: void <init>()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>
<register-finalize <javax.servlet.SessionTrackingMode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: java.lang.Object getTarget()>-><org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.ResolvableType getResolvableType()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.util.locale.Extension: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: java.lang.Object run(java.security.PrivilegedAction)>-><org.hibernate.validator.internal.util.privilegedactions.LoadClass: java.lang.Object run()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.security.authentication.LockedException: void <init>(java.lang.String)>-><org.springframework.security.authentication.AccountStatusException: void <init>(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.util.MimeType: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ReadOnlyListPropertyValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.support.MethodOverrides: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.StringHelper: java.lang.String decapitalize(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERUniversalString: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<org.apache.http.HttpHost: org.apache.http.HttpHost create(java.lang.String)>-><java.lang.String: int lastIndexOf(java.lang.String)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.springframework.http.HttpHeaders: java.util.Set entrySet()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration: void <init>()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.aspectj.util.FuzzyBoolean$NeverFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>-><org.aspectj.util.FuzzyBoolean$NeverFuzzyBoolean: void <init>()>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.DependencyDescriptor: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromArrayType(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.GenericArrayType,com.fasterxml.jackson.databind.type.TypeBindings)>-><org.hibernate.validator.internal.util.TypeHelper$1: java.lang.reflect.Type getGenericComponentType()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$4: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.Class getContainerType()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.Class access$000(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BinaryNode: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object remove(java.lang.Object)>
<org.hibernate.validator.internal.metadata.location.ParameterConstraintLocation: void <init>(java.lang.reflect.Executable,int)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.cert.X509CRLEntry: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addNewDomMoi(javax.management.DynamicMBean,java.lang.String,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: java.lang.Class getTargetClass()>-><org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class getDependencyType()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.MBeanSupport: void preRegister2(javax.management.MBeanServer,javax.management.ObjectName)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERUTF8String: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.core.MetaConstraints: org.hibernate.validator.internal.metadata.core.MetaConstraint create(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><org.apache.tomcat.util.modeler.FeatureInfo: void setType(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Hashtable: int size()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.RegularImmutableList: int size()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.AnnotationUtils: java.util.Map getAnnotationAttributes(java.lang.annotation.Annotation)>-><org.springframework.core.annotation.AnnotationUtils: org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(java.lang.reflect.AnnotatedElement,java.lang.annotation.Annotation)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.MiscCodec: void writeIterator(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.SerializeWriter,java.util.Iterator)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.apache.logging.log4j.message.ParameterFormatter: void handleErrorInObjectToString(java.lang.Object,java.lang.StringBuilder,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.String methodName()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeAnnotationConstraintsForExecutableParameter(java.lang.reflect.Executable,int,java.lang.reflect.AnnotatedType)>-><java.util.Collections: java.util.Set emptySet()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyRegistrationConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.OAuth2ClientConfiguration: void <init>()>
<com.zaxxer.hikari.HikariConfig: void <clinit>()>-><java.lang.String: char[] toCharArray()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundryActuatorAutoConfiguration: void <init>()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean add(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.openmbean.CompositeType: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean contains(java.lang.Object)>
<org.hibernate.validator.internal.engine.MethodValidationConfiguration: java.util.Set buildConfiguredRuleSet(boolean,boolean,boolean)>-><org.hibernate.validator.internal.metadata.aggregated.rule.ParallelMethodsMustNotDefineGroupConversionForCascadedReturnValue: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<sun.security.ssl.CipherBox: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: int size()>
<com.fasterxml.classmate.TypeResolver: void <init>()>-><com.fasterxml.classmate.util.ResolvedTypeCache: com.fasterxml.classmate.util.ResolvedTypeCache lruCache(int)>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><java.text.ParseException: void <init>(java.lang.String,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Arrays$ArrayList: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(java.lang.String[])>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void scan(java.lang.String[])>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.format.CellNumberStringMod: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.aspectj.bridge.IMessage: void <clinit>()>-><org.aspectj.bridge.IMessage$Kind: void <init>(java.lang.String,int,org.aspectj.bridge.IMessage$1)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.font.Decoration$DecorationImpl: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.compat.JreCompat: boolean isGraalAvailable()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<reactor.core.publisher.FluxOnBackpressureBufferStrategy$BackpressureBufferDropOldestSubscriber: void <init>(reactor.core.CoreSubscriber,int,boolean,java.util.function.Consumer,reactor.core.publisher.BufferOverflowStrategy)>-><reactor.core.publisher.InnerOperator: reactor.util.context.Context currentContext()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.map.type.SimpleType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.xml.namespace.QName: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>-><org.hibernate.validator.internal.metadata.core.ConstraintHelper: java.util.List getConstraintsFromMultiValueConstraint(java.lang.annotation.Annotation)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.StringJoiner: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerOpaqueTokenConfiguration$WebSecurityConfiguration: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class getType(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Short: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.Vector: boolean addAll(java.util.Collection)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.util.unit.DataSize: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>-><com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>
<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>-><java.lang.Thread: java.lang.Thread currentThread()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance()>-><javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableMap: int hashCode()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void throwMBeanRegistrationException(java.lang.Throwable,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<com.zaxxer.hikari.pool.HikariPool: void lambda$softEvictConnections$0(com.zaxxer.hikari.pool.PoolEntry)>-><com.zaxxer.hikari.pool.HikariPool: boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: javax.management.openmbean.OpenDataException openDataException(java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$10: void <init>(java.lang.String,int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.CodeSigner: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.JdkLoggerFactory: void <clinit>()>-><io.micrometer.core.util.internal.logging.JdkLoggerFactory: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<org.springframework.context.support.GenericApplicationContext: void registerAlias(java.lang.String,java.lang.String)>-><org.springframework.core.SimpleAliasRegistry: void registerAlias(java.lang.String,java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.StringHelper: java.lang.String decapitalize(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.StringJoiner: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalDouble: int hashCode()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Year: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><java.lang.Object: java.lang.Class getClass()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FormatCache$MultipartKey: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.aspectj.util.FuzzyBoolean: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.ArrayBlockingQueue: int size()>
<javax.servlet.DispatcherType: void <clinit>()>-><javax.servlet.DispatcherType: void <init>(java.lang.String,int)>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.base.Predicates$NotPredicate: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.io.support.EncodedResource: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$2: void done()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void finishRefresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent: void <init>(org.springframework.boot.web.server.WebServer,org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Short: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Clock$SystemClock: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.lang.reflect.Type,int,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForParameterizedType(java.lang.reflect.AnnotatedParameterizedType,java.lang.reflect.TypeVariable[])>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: java.lang.reflect.Type getType()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><com.p6spy.engine.common.CustomHashedHashSet: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryMBeansImpl(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean hasParameterConstraints(java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType[] buildAnnotatedTypes(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><sun.reflect.annotation.TypeAnnotationParser: sun.reflect.annotation.TypeAnnotation[] parseTypeAnnotations(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void <init>()>-><com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: java.lang.reflect.Field getAccessible(java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: java.lang.Object run(java.security.PrivilegedAction)>
<sun.security.ssl.CipherSuite: void <clinit>()>-><sun.security.ssl.Debug: boolean getBooleanProperty(java.lang.String,boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: java.lang.Object run(java.security.PrivilegedAction)>-><org.hibernate.validator.internal.util.privilegedactions.GetMethod: java.lang.Object run()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.xml.namespace.QName: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.beans.factory.support.RootBeanDefinition getResolvedDecoratedDefinition(org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<sun.security.ssl.SignatureAndHashAlgorithm: void supports(sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm,sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm,java.lang.String,int)>-><java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration: void <init>()>
<org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>-><java.util.StringTokenizer: java.lang.String nextToken()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>-><javax.crypto.JceSecurity: boolean canUseProvider(java.security.Provider)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.poi.xssf.usermodel.XSSFName: int hashCode()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.Hashtable: void <init>(java.util.Map)>-><java.util.Hashtable: void <init>(int,float)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><com.fasterxml.classmate.types.ResolvedArrayType: java.util.List getImplementedInterfaces()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$1: int size()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.location.ConstraintLocation: org.hibernate.validator.internal.metadata.location.ConstraintLocation forField(java.lang.reflect.Field)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.EnumMap$KeySet: boolean contains(java.lang.Object)>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Short: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromParamType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.lang.Object run(java.security.PrivilegedAction)>-><org.hibernate.validator.internal.util.privilegedactions.GetDeclaredConstructors: java.lang.Object run()>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes()>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.Parameter[],int,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetadata(java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable[])>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.client.JdbcClientDetailsService: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.pool.ProxyDatabaseMetaData: java.lang.String toString()>-><com.zaxxer.hikari.pool.ProxyDatabaseMetaData: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object newValueReference(java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$WeakValueReference: void <init>(java.lang.Object,java.lang.Object,int,java.lang.ref.ReferenceQueue)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.TextNode: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Manifest: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<javax.management.MBeanTrustPermission: void validate(java.lang.String,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$EnumMapping: java.lang.Enum fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.alibaba.fastjson.JSONPath: java.lang.Object getArrayItem(java.lang.Object,int)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite: void <clinit>()>-><sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<java.net.IDN: void <clinit>()>-><java.lang.AssertionError: void <init>()>
<java.util.stream.Collectors: void lambda$toMap$58(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.Map,java.lang.Object)>-><java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.AbstractMap$1: boolean isEmpty()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.ExceptionTranslationFilter$DefaultThrowableAnalyzer: java.lang.Throwable lambda$initExtractorMap$0(java.lang.Throwable)>-><javax.servlet.ServletException: java.lang.Throwable getRootCause()>
<org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.ArrayType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>-><com.sun.jmx.mbeanserver.MBeanIntrospector: javax.management.MBeanNotificationInfo[] findNotifications(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.nio.ByteBuffer: java.lang.String toString()>
<org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>-><java.util.Arrays$ArrayList: boolean contains(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.p6spy.engine.common.CustomHashedHashSet: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableList: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap access$000()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>-><java.util.ArrayList: java.util.List subList(int,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.apache.juli.logging.DirectJDKLog: void fatal(java.lang.Object,java.lang.Throwable)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>
<org.hibernate.validator.internal.util.TypeResolutionHelper: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onClose()>-><org.springframework.context.support.AbstractApplicationContext: void onClose()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.HttpHeaders: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: java.lang.reflect.Type getTypeForValidatorResolution()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.MethodParameter: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: boolean subset(java.util.BitSet,java.util.BitSet)>-><java.util.BitSet: void andNot(java.util.BitSet)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider: void <init>(org.springframework.core.SerializableTypeWrapper$TypeProvider,java.lang.reflect.Method,int)>-><java.lang.reflect.Method: java.lang.String getName()>
<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromVariable(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.jackson.databind.type.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.reflect.Type[] getBounds()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.image.ColorModel: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(javax.validation.groups.ConvertGroup,javax.validation.groups.ConvertGroup$List)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><com.google.common.collect.ImmutableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>-><com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,long)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: void addValueExtractorDescriptorForTypeArgumentLocation(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.List,org.hibernate.validator.internal.metadata.location.TypeArgumentConstraintLocation)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: void <init>(java.lang.Class,java.lang.reflect.TypeVariable,java.lang.Integer,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterTypeReader: void <init>()>
<org.hibernate.validator.internal.util.privilegedactions.GetDeclaredConstructors: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void removeClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository getInstantiatorCLR()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: java.lang.String toString()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.MXBeanMapping: javax.management.openmbean.OpenType getOpenType()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.StackTraceElement: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Object: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.base.Absent: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.IntNode: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean,javax.el.ExpressionFactory)>-><org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><net.logstash.logback.encoder.com.lmax.disruptor.Sequence: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areMemberConstraintsIgnoredFor(java.lang.reflect.Member)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.Map toImmutableMap(java.util.Map)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.FieldSerializer: void writeValue(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.reflect.Type unwrapOptional(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><java.lang.String: java.lang.String valueOf(char)>
<org.springframework.security.authentication.AccountExpiredException: void <init>(java.lang.String)>-><org.springframework.security.authentication.AccountStatusException: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<org.springframework.web.servlet.view.ContentNegotiatingViewResolver: void <clinit>()>-><org.springframework.web.servlet.view.ContentNegotiatingViewResolver$1: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.SimpleType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<sun.security.ssl.Debug: void <clinit>()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.DateFormatSymbols: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.ObjectName: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.BitSet: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.stream.Stream lambda$new$0(java.util.List)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream sorted(java.util.Comparator)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.IdentityHashMap$KeySet: int size()>
<org.springframework.context.support.GenericApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><org.springframework.context.support.AbstractApplicationContext: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><java.util.HashMap: boolean isEmpty()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><java.lang.Object: java.lang.Class getClass()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiListingReader: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$2: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: java.lang.String getType(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Byte: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.wuwenze.poi.pojo.ExcelProperty: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: java.lang.Object getMandatoryAttribute(java.lang.String,java.lang.Class)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.StringHelper: boolean startsWithSeveralUpperCaseLetters(java.lang.String)>-><java.lang.String: int length()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.juli.logging.DirectJDKLog: boolean isInfoEnabled()>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><java.io.InputStreamReader: void close()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.text.ParsePosition: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.apache.catalina.valves.ValveBase: java.lang.String getDomainInternal()>-><org.apache.catalina.valves.ValveBase: org.apache.catalina.Container getContainer()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.io.File: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.poi.ss.usermodel.ExcelStyleDateFormatter: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.cert.X509CRLEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1UTCTime: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.util.context.Context1: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.HashMap$Node: int hashCode()>
<org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><javax.management.ObjectName: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.xmlbeans.StringEnumAbstractBase: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.IdentityHashMap: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>-><org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.classic.spi.ClassPackagingData: int hashCode()>
<org.aspectj.weaver.ResolvedType$PointcutGetter: void <init>(org.aspectj.weaver.ResolvedType$1)>-><org.aspectj.weaver.ResolvedType$PointcutGetter: void <init>()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.Collections$UnmodifiableMap: java.util.Collection values()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.awt.font.TransformAttribute: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.lang.Object[] toArray(java.lang.Object[])>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.el.Util$CacheKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Year: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.ProcessEnvironment$StringEntry: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1OctetString: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.audit.listener.AuditListener: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: boolean isEmpty()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.JavaType: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.EventObject: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.lang.String: java.lang.String intern()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.ProcessEnvironment$StringKeySet: int size()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.google.common.collect.JdkBackedImmutableMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cache.CachesEndpointAutoConfiguration: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.WeakHashMap$EntrySet: int size()>
<io.micrometer.core.instrument.binder.system.ProcessorMetrics: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: javax.management.modelmbean.ModelMBeanOperationInfo getMBeanOperation(org.springframework.boot.actuate.endpoint.jmx.JmxOperation)>-><org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: javax.management.MBeanParameterInfo[] getSignature(java.util.List)>
<org.aspectj.weaver.Lint: void <clinit>()>-><org.aspectj.weaver.tools.TraceFactory: org.aspectj.weaver.tools.TraceFactory getTraceFactory()>
<java.io.DataInputStream: int read(byte[])>-><org.bouncycastle.asn1.DefiniteLengthInputStream: int read(byte[],int,int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.GlyphLayout$LayoutEngineKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.BeanConstraintLocation: int hashCode()>-><java.lang.Object: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree createConstraintTree(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl)>-><org.hibernate.validator.internal.engine.constraintvalidation.SimpleConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.util.MimeType: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Predicates$NotPredicate: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(javax.management.DynamicMBean,java.lang.String,javax.management.ObjectName,java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.OptionalLong: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer: void <init>()>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: void <init>()>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><sun.net.idn.Punycode: char digitToBasic(int,boolean)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.io.UrlResource: int hashCode()>
<org.hibernate.validator.internal.metadata.location.ConstraintLocation: org.hibernate.validator.internal.metadata.location.ConstraintLocation forCrossParameter(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.location.CrossParameterConstraintLocation: void <init>(java.lang.reflect.Executable)>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>-><javax.management.RuntimeErrorException: java.lang.Throwable getCause()>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><java.util.Properties: java.util.Enumeration propertyNames()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerApplicationScope(javax.servlet.ServletContext)>
<sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>-><sun.net.util.IPAddressUtil: boolean isIPv6LiteralAddress(java.lang.String)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.ansi.Ansi8BitColor: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DecimalFormat: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Instant: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.location.ConstraintLocation: org.hibernate.validator.internal.metadata.location.ConstraintLocation forCrossParameter(java.lang.reflect.Executable)>
<java.util.AbstractMap: void clear()>-><java.util.Collections$SingletonMap: java.util.Set entrySet()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.apache.http.HttpHost: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.net.Inet4Address: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.math.BigDecimal: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><org.apache.catalina.valves.ValveBase: org.apache.catalina.Container getContainer()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<sun.security.ssl.SignatureAndHashAlgorithm: void <clinit>()>-><java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.provider.PolicyFile$SelfPermission: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<com.zaxxer.hikari.util.DriverDataSource: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.MutablePropertyValues: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.net.idn.StringPrep: void getValues(char,sun.net.idn.StringPrep$Values)>-><sun.net.idn.StringPrep$Values: void reset()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.Iterator iterator()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Field)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Member)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForParameterizedType(java.lang.reflect.AnnotatedParameterizedType,java.lang.reflect.TypeVariable[])>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.HashMap newHashMap(int)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.apache.commons.collections.FastHashMap: java.util.Collection values()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.lang.reflect.Method: int getParameterCount()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.factory.config.DependencyDescriptor: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.Long: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture: java.lang.String toString()>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>-><com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>
<org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointDiscoverer: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper,java.util.Collection,java.util.Collection)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper,java.util.Collection,java.util.Collection)>
<org.springframework.boot.validation.MessageInterpolatorFactory: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.util.WeakHashMap: void clear()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><org.springframework.util.StringUtils: java.lang.String uriDecode(java.lang.String,java.nio.charset.Charset)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object toOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<com.p6spy.engine.spy.option.P6OptionsRepository: java.lang.Object parse(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.BCException: void printStackTrace(java.io.PrintStream)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ObservableValueValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<org.hibernate.validator.internal.engine.constraintvalidation.HibernateConstraintValidatorInitializationContextImpl: void <init>(org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory,javax.validation.ClockProvider,java.time.Duration)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanSupport: java.lang.Object getAttribute(java.lang.String)>-><com.sun.jmx.mbeanserver.StandardMBeanSupport: java.lang.Object getCookie()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Vector$Itr: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.OptionalLongValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SynchronizedMap: java.util.Set entrySet()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.web.method.HandlerMethod: org.springframework.core.MethodParameter[] initMethodParameters()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Integer: int parseInt(java.lang.String)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.EnumMap: java.util.Set entrySet()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: javax.el.ExpressionFactory buildExpressionFactory()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.LocalDate: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.aspectj.weaver.patterns.ModifiersPattern: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.context.support.ServletContextResource: int hashCode()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.web.servlet.view.InternalResourceViewResolver: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<org.springframework.http.ResponseEntity: void <init>(org.springframework.http.HttpStatus)>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap,org.springframework.http.HttpStatus)>
<io.micrometer.core.instrument.composite.CompositeMeterRegistry: void lambda$new$1(io.micrometer.core.instrument.Meter)>-><io.micrometer.core.instrument.composite.CompositeMeterRegistry: void lock(java.util.concurrent.atomic.AtomicBoolean,java.lang.Runnable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><java.lang.Throwable: void printStackTrace()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.sql.Timestamp: boolean equals(java.lang.Object)>
<org.aspectj.weaver.UnresolvedType: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<java.util.stream.Collectors: java.lang.Object lambda$null$44(java.util.function.Supplier,java.lang.Object)>-><java.util.stream.ReduceOps$5ReducingSink: java.lang.Object get()>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><org.springframework.boot.actuate.health.Health$Builder: java.util.Map access$100(org.springframework.boot.actuate.health.Health$Builder)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: void setSecurityMetadataSource(org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource)>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><java.lang.String: int indexOf(int)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.util.FieldInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.apache.commons.collections.FastHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>-><org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableList: int hashCode()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<javax.servlet.SessionTrackingMode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointDiscoverer: org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey createOperationKey(org.springframework.boot.actuate.endpoint.Operation)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.status.StatusBase: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromWildcard(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.WildcardType,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.MapType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.ResponseEntity: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaSetters: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite$KeyExchange: void <init>(java.lang.String,int,java.lang.String,boolean,boolean)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.OrRequestMatcher: void <init>(java.util.List)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationParameterHeadersConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void configure(javax.servlet.ServletRegistration$Dynamic)>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: void <init>(org.springframework.web.context.ConfigurableWebApplicationContext)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.Provider$ServiceKey: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Class getBeanClass()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration: void <init>(org.springframework.beans.factory.BeanFactory)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.openxml4j.opc.PackageRelationship: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<sun.net.idn.StringPrepDataReader: void <init>(java.io.InputStream)>-><java.io.DataInputStream: void <init>(java.io.InputStream)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Throwable)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.MutablePropertyValues: java.lang.String toString()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.ResolvableType: boolean isAssignableFrom(org.springframework.core.ResolvableType)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<org.dom4j.DocumentException: void printStackTrace(java.io.PrintStream)>-><org.aspectj.bridge.AbortException: void printStackTrace(java.io.PrintStream)>
<java.io.DataOutputStream: void write(byte[],int,int)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(byte[],int,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration: void <init>()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><org.apache.catalina.util.LifecycleMBeanBase: java.lang.String getDomain()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Date: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree createConstraintTree(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl)>-><org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>
<org.springframework.aop.framework.CglibAopProxy: org.springframework.cglib.proxy.Callback[] getCallbacks(java.lang.Class)>-><org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: java.lang.Object getTarget()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.SimpleAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Hashtable$Entry: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Vector$Itr: boolean hasNext()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type[] getResolvedInterfaces(java.lang.reflect.Type)>-><java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireBean(java.lang.Object)>-><org.springframework.util.ClassUtils: boolean isCacheSafe(java.lang.Class,java.lang.ClassLoader)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.security.web.session.InvalidSessionAccessDeniedHandler: void <init>(org.springframework.security.web.session.InvalidSessionStrategy)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry$UrlMapping: java.util.Collection getConfigAttrs()>
<org.springframework.boot.web.server.MimeMappings: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<org.springframework.boot.ImageBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.spi.Provider: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: void accept(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: javax.management.openmbean.OpenDataException openDataException(java.lang.String,java.lang.Throwable)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object key()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,org.springframework.http.MediaType[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.io.DataInputStream: int read(byte[])>-><java.io.ByteArrayInputStream: int read(byte[],int,int)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<sun.security.ssl.ProtocolList: void <init>(java.lang.String[])>-><sun.security.ssl.ProtocolList: void <init>(java.util.ArrayList)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getConstructorMetaData(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getMetaData(java.lang.reflect.Executable[])>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.health.Status: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void throwMBeanRegistrationException(java.lang.Throwable,java.lang.String)>-><javax.management.MBeanRegistrationException: void <init>(java.lang.Exception,java.lang.String)>
<com.fasterxml.classmate.util.ResolvedTypeCache: com.fasterxml.classmate.util.ResolvedTypeKey key(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><com.fasterxml.classmate.util.ResolvedTypeKey: void <init>(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.util.Set getSupportedTypes()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashMap$HashIterator: void remove()>
<com.p6spy.engine.common.P6Util: java.util.Map getPropertiesMap(java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Float: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Integer: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.Throwable: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<org.apache.catalina.core.ContainerBase: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: java.util.Collection getServletContextInitializerBeans()>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.invoke.LambdaForm: int hashCode()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<org.aspectj.weaver.ResolvedType$PointcutGetter: void <init>()>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void <init>()>-><java.util.Properties: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.BaseLocale$Key: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.AVA: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.io.InvalidObjectException: void <init>(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void <init>(javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,com.sun.jmx.mbeanserver.Repository)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.base.Predicates$NotPredicate: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void throwMBeanRegistrationException(java.lang.Throwable,java.lang.String)>-><javax.management.RuntimeMBeanException: void <init>(java.lang.RuntimeException,java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.apache.commons.collections.FastHashMap: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$KeySet: int size()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(com.sun.jmx.mbeanserver.MXBeanLookup,java.lang.Object,java.lang.Object[])>-><com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(java.lang.Object,java.lang.Object[])>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.util.DerInputBuffer: int hashCode()>
<org.springframework.http.server.DefaultPathContainer$DefaultSeparator: void <init>(char,java.lang.String)>-><java.lang.String: java.lang.String valueOf(char)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.CodeSource: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>
<org.springframework.validation.beanvalidation.SpringValidatorAdapter: void <init>(javax.validation.Validator)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: void clear()>-><org.apache.commons.collections.FastHashMap: void clear()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableSet: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><org.springframework.security.provisioning.InMemoryUserDetailsManager: void createUser(org.springframework.security.core.userdetails.UserDetails)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.Provider$UString: int hashCode()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: int compareTo(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.aspectj.weaver.patterns.EllipsisTypePattern: void <init>()>-><org.aspectj.weaver.patterns.TypePattern: void <init>(boolean,boolean,org.aspectj.weaver.patterns.TypePatternList)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.MethodType: int hashCode()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: void init(org.springframework.security.config.annotation.SecurityBuilder)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.Collections$EmptySet: boolean contains(java.lang.Object)>
<javax.management.JMX: java.lang.Object createProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class,boolean,boolean)>-><java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BooleanNode: int hashCode()>
<sun.security.ssl.CipherSuite: void <init>(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.poi.xssf.streaming.SXSSFCell: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.DecimalNode: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Sequence: int hashCode()>
<com.wuwenze.poi.factory.ExcelMappingFactory: com.wuwenze.poi.pojo.ExcelMapping loadExcelMappingByClass(java.lang.Class)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: int hashCode()>
<java.net.IDN: java.lang.String toASCII(java.lang.String,int)>-><java.lang.StringBuffer: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.BuddhistCalendar: int hashCode()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.boot.context.properties.PropertyMapper$Source: java.lang.Boolean lambda$as$0()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.font.AttributeValues: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.management.openmbean.CompositeDataSupport: int hashCode()>
<sun.security.ssl.ProtocolList: void <init>(java.util.ArrayList)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType resolve(java.lang.reflect.Type,java.lang.reflect.Type[])>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings emptyBindings()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><io.netty.buffer.SwappedByteBuf: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaultLogoutSuccessHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: org.hibernate.validator.internal.metadata.core.MetaConstraint create(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections: void reverse(java.util.List)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeAnnotationConstraintsForExecutableParameter(java.lang.reflect.Executable,int,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentExecutableParameterLocation: void <init>(java.lang.reflect.Executable,int,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$1)>
<org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.String)>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getInstance(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.String methodName()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.http.HttpStatus getStatus(javax.servlet.http.HttpServletRequest)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryConfiguration: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap: void <clinit>()>-><sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.font.GlyphLayout$LayoutEngineKey: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Double: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void sendNotification(java.lang.String,javax.management.ObjectName)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.MutablePropertyValues: java.lang.String toString()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.ELException: void <init>(java.lang.Throwable)>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: int hashCode()>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><java.lang.StringBuffer: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.MethodOverrides: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.hibernate.validator.internal.metadata.aggregated.rule.OverridingMethodMustNotAlterParameterConstraints: void <init>()>-><org.hibernate.validator.internal.metadata.aggregated.rule.MethodConfigurationRule: void <init>()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Long: java.lang.String toString()>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry: void <init>()>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry$PassthroughMBean: void <init>(org.apache.tomcat.util.modeler.NoDescriptorRegistry$1)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.Collections$UnmodifiableMap: void clear()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.zone.ZoneOffsetTransition: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object key()>-><java.lang.ref.PhantomReference: java.lang.Object get()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.apache.commons.collections.FastHashMap: void <init>(int)>-><java.util.HashMap: void <init>(int)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>-><org.springframework.context.support.ResourceBundleMessageSource: java.util.Map access$100(org.springframework.context.support.ResourceBundleMessageSource)>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getDefaultCipherSuiteList(boolean)>-><sun.security.ssl.SSLContextImpl$TLS11Context: sun.security.ssl.CipherSuiteList getClientDefaultCipherSuiteList()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeAnnotationConstraints(java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentFieldLocation: void <init>(java.lang.reflect.Field,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$1)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$SetFromMap: java.util.stream.Stream stream()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.MBeanOperationInfo: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromVariable(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings withUnboundVariable(java.lang.String)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>
<org.springframework.core.SpringProperties: void <clinit>()>-><java.util.ResourceBundle$RBClassLoader: java.net.URL getResource(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.WeakCache$CacheKey: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.image.ColorModel: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignableToWildcardType(java.lang.Class,java.lang.reflect.WildcardType)>-><com.sun.beans.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: javax.servlet.Registration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: javax.servlet.ServletRegistration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ContextName: java.lang.String getDisplayName()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<springfox.documentation.spring.web.plugins.PathAndParametersEquivalence: void <clinit>()>-><springfox.documentation.spring.web.plugins.ResolvedMethodParameterEquivalence: void <init>()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.asm.ConstantDynamic: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$7: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanInfo: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MXBeanLookup: javax.management.ObjectName mxbeanToObjectName(java.lang.Object)>-><java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType resolve(java.lang.reflect.Type,java.lang.reflect.Type[])>-><com.fasterxml.classmate.ResolvedType: java.lang.Class getErasedType()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(javax.management.DynamicMBean,java.lang.String,javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(java.lang.String,java.lang.String,javax.management.ObjectName,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>
<org.springframework.core.annotation.AnnotationUtils: org.springframework.core.annotation.AnnotationAttributes lambda$getAnnotationAttributes$0(org.springframework.core.annotation.MergedAnnotation)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.lang.Class getType()>
<java.util.stream.Collectors: void lambda$toMap$58(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.Map,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Float: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><java.util.Collections: java.util.List emptyList()>
<org.springframework.web.util.pattern.PathPattern: void <clinit>()>-><java.util.Comparator: java.util.Comparator nullsLast(java.util.Comparator)>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void trace(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <clinit>()>-><java.util.ArrayList: void <init>()>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.Spliterators$1Adapter: boolean hasNext()>-><java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ErrorPageSupport: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void createWebServer()>-><org.springframework.web.context.support.GenericWebApplicationContext: javax.servlet.ServletContext getServletContext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.Font: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.binder.logging.LogbackMetrics: void <clinit>()>-><java.lang.ThreadLocal: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.util.ClassStack: com.fasterxml.classmate.util.ClassStack child(java.lang.Class)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$1: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><reactor.util.context.ContextN: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.Period: java.lang.String toString()>
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.http.HttpHost: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>-><sun.security.jca.ProviderList$1: java.security.Provider$Service getService(java.lang.String,java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.FontLineMetrics: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void putAll(java.util.Map)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.DERIA5String: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Locale: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<sun.reflect.annotation.AnnotatedTypeFactory: sun.reflect.annotation.TypeAnnotation$LocationInfo addNesting(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo)>-><java.lang.Class: int getModifiers()>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.calendar.Era: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.EngineWriter: void <init>()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter$TimingContext: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><sun.security.ssl.CipherSuite: boolean isAvailable()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: void <init>(java.lang.Class,java.lang.reflect.TypeVariable)>-><java.lang.Object: void <init>()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.property.field.FieldProvider getFieldProvider()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.locale.provider.RuleBasedBreakIterator: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<javax.el.Util$CacheValue: javax.el.ExpressionFactory getExpressionFactory()>-><java.lang.ref.Reference: java.lang.Object get()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.commons.beanutils.MethodUtils$MethodDescriptor: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamField: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.subst.Token: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.NamedObject: void <init>(javax.management.ObjectName,javax.management.DynamicMBean)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.core.ResolvableType getReturnTypeForFactoryMethod(org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager: void <init>(javax.validation.ConstraintValidatorFactory,org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext)>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isArray(java.lang.reflect.Type)>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<org.springframework.http.client.reactive.JettyResourceFactory: void afterPropertiesSet()>-><org.eclipse.jetty.util.thread.QueuedThreadPool: void setName(java.lang.String)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void refresh()>-><org.springframework.context.support.AbstractApplicationContext: void refresh()>
<javax.management.NotificationBroadcasterSupport: void sendNotification(javax.management.Notification)>-><javax.management.NotificationBroadcasterSupport$1: void execute(java.lang.Runnable)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.Rectangle: java.lang.String toString()>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><sun.text.normalizer.UCharacter: int getCodePoint(char,char)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$NestedTypeArgumentLocation: void <init>(org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.TypeVariable,java.lang.reflect.Type,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$1)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Introspector: void testComplianceMXBeanInterface(java.lang.Class)>-><com.sun.jmx.mbeanserver.MXBeanIntrospector: com.sun.jmx.mbeanserver.MXBeanIntrospector getInstance()>
<java.util.PropertyResourceBundle: void <init>(java.io.Reader)>-><java.util.ResourceBundle: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.JSONPath: java.lang.Object getPropertyValue(java.lang.Object,java.lang.String,boolean)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.awt.SunHints$Key: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedType: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.Class,java.util.Set)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,org.hibernate.validator.internal.metadata.raw.ConstrainedElement$ConstrainedElementKind,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.HashSet newHashSet(int)>-><org.hibernate.validator.internal.util.CollectionHelper: int getInitialCapacityFromExpectedSize(int)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanSupport: java.lang.Object getAttribute(java.lang.String)>-><com.sun.jmx.mbeanserver.PerInterface: java.lang.Object getAttribute(java.lang.Object,java.lang.String,java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int)>-><java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Enumerated: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><com.google.common.collect.ImmutableList: java.lang.Object set(int,java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StringBuffer: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaFrom: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.String,java.lang.Throwable)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<org.aspectj.bridge.MessageWriter: void <init>(java.io.PrintWriter,boolean)>-><java.io.PrintWriter: void <init>(java.io.OutputStream)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaSetters: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.lang.Class: java.lang.Object newInstance()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Integer: java.lang.String toString()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>
<javax.management.MBeanTrustPermission: void <init>(java.lang.String,java.lang.String)>-><javax.management.MBeanTrustPermission: void validate(java.lang.String,java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isQualifier(java.lang.Class)>-><java.util.HashSet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.TabularType: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration$OAuth2ClientWebMvcSecurityConfiguration: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><sun.net.idn.StringPrep: char getCodePointValue(int)>
<com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.stream.Collectors: java.lang.Object lambda$null$44(java.util.function.Supplier,java.lang.Object)>-><java.util.stream.ReduceOps$2ReducingSink: java.lang.Object get()>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,boolean)>-><java.lang.Object: void <init>()>
<com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType create(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>-><com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.Hashtable: void clear()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Predicates$AndPredicate: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><java.lang.Class: java.lang.String getSimpleName()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.GeneralName: int hashCode()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><javax.management.ObjectInstance: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractMap: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.convert.TypeDescriptor: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><com.google.common.collect.ImmutableCollection: boolean addAll(java.util.Collection)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.x509.GeneralName: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<sun.security.ssl.SSLSessionImpl: void <init>()>-><sun.security.ssl.SSLSessionImpl: void <init>(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection,sun.security.ssl.SessionId,java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.baomidou.dynamic.datasource.DynamicDataSourceCreator: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>-><java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<org.springframework.security.access.vote.AffirmativeBased: void <init>(java.util.List)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: void <init>(java.util.List)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<io.micrometer.core.instrument.binder.jvm.JvmGcMetrics: void <clinit>()>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.Class)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: java.lang.Object getTarget()>-><java.util.Collections: java.util.List emptyList()>
<sun.security.ssl.CipherSuite$KeyExchange: boolean isAvailable()>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.GlyphLayout$LayoutEngineKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.Class getContainerType()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.springframework.security.web.savedrequest.DefaultSavedRequest: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.core.Constants: void lambda$getValues$0(java.lang.String,java.util.Set,java.lang.String,java.lang.Object)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.ResponseEntity: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<org.springframework.boot.SpringApplication: int getExitCodeFromExitCodeGeneratorException(java.lang.Throwable)>-><javax.management.ReflectionException: java.lang.Throwable getCause()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.GregorianCalendar: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void debug(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<javax.management.Notification: void <clinit>()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.RuntimeBeanReference: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Package: int hashCode()>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.ArrayDeque$DeqSpliterator: int characteristics()>
<org.springframework.web.util.HierarchicalUriComponents$Type$10: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.http.HttpHeaders: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates: void <init>(java.security.Provider)>-><java.security.Provider: void <init>(java.lang.String,double,java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int,org.springframework.boot.cloud.CloudPlatform$1)>-><org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.LambdaForm$Name: int hashCode()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Field,boolean)>-><java.lang.invoke.MethodHandleNatives: void init(java.lang.invoke.MemberName,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.OffsetDateTime: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.Period: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.Class internalBoxedType(java.lang.Class)>-><java.lang.Object: java.lang.Class getClass()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.IntNode: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$FilterSegement: java.lang.Object eval(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><javax.el.Util$CacheKey: void <init>(java.lang.ClassLoader)>
<javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>-><java.lang.StringBuilder: void <init>()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><javax.management.openmbean.CompositeType: javax.management.openmbean.OpenType getType(java.lang.String)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.security.ssl.SSLSessionContextImpl: void <init>()>-><sun.security.ssl.SSLSessionContextImpl: int getDefaultCacheLimit()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<org.springframework.security.web.session.InvalidSessionAccessDeniedHandler: void <init>(org.springframework.security.web.session.InvalidSessionStrategy)>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.util.HashSet: boolean isEmpty()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<com.p6spy.engine.spy.P6ModuleManager: void loadDriversExplicitly(com.p6spy.engine.spy.P6SpyLoadableOptions)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><io.netty.util.concurrent.PromiseTask: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.AVA: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireBean(java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: void <init>(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Absent: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.modeler.Registry: void disableRegistry()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.type.MapType: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: void addManagedBean(org.apache.tomcat.util.modeler.ManagedBean)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.naming.NamingException: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.Object getDefaultValue(java.lang.Class,java.lang.String)>-><org.springframework.core.annotation.MergedAnnotation: org.springframework.core.annotation.MergedAnnotation of(java.lang.Class)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collection: java.util.stream.Stream stream()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.util.List,java.util.Set,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,org.hibernate.validator.internal.metadata.raw.ConstrainedElement$ConstrainedElementKind,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Period: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.Class getContainerType(java.lang.reflect.AnnotatedParameterizedType,java.lang.Class)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.Class getErasedReferenceType(java.lang.reflect.Type)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.reflect.Type[] getBounds()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedWildcardTypeImpl: void <init>(java.lang.reflect.WildcardType,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] getLowerBounds()>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int compareTo(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.util.DerValue: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.aspectj.bridge.MessageUtil$5: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.Clock$SystemClock: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<java.util.Collections$SingletonMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.UnsupportedOperationException: void <init>()>
<org.springframework.security.core.userdetails.memory.UserAttribute: boolean isValid()>-><java.util.Vector: int size()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><sun.text.normalizer.VersionInfo: int compareTo(sun.text.normalizer.VersionInfo)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void removeStale()>-><java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetadata(java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable[])>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.openxml4j.opc.PackageRelationship: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.wuwenze.poi.pojo.ExcelProperty: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.UUID: int hashCode()>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: void <clinit>()>-><org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: boolean determineAvailabilityOfResourceBundleControl()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.TypeVariable getExtractedTypeParameter(java.lang.reflect.AnnotatedParameterizedType,java.lang.Class)>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.springframework.core.annotation.TypeMappedAnnotation: java.util.Optional getDefaultValue(java.lang.String,java.lang.Class)>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.reflect.AnnotatedType getAnnotatedReturnType()>-><java.lang.reflect.Executable: java.lang.reflect.AnnotatedType getAnnotatedReturnType0(java.lang.reflect.Type)>
<sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.DefaultOperationReader: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.validation.FieldError: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.sql.Timestamp: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>-><java.util.concurrent.FutureTask: void run()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.text.ParsePosition: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.JumboEnumSet: int size()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.FilterRegistrationBean: javax.servlet.Filter getFilter()>
<java.util.BitSet: void trimToSize()>-><java.util.Arrays: long[] copyOf(long[],int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: void clear()>-><org.apache.commons.collections.FastHashMap: void clear()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Constructor)>-><java.lang.AssertionError: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean)>-><sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<java.time.format.DateTimeTextProvider$LocaleStore: java.util.Iterator getTextIterator(java.time.format.TextStyle)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: java.lang.String lambda$afterPropertiesSet$0()>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: java.lang.Class getSecureObjectClass()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.poi.xssf.usermodel.XSSFFont: java.lang.String toString()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><org.springframework.context.support.AbstractResourceBasedMessageSource: java.lang.String getDefaultEncoding()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.Font: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.InetSocketAddress: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$3: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><sun.security.ssl.CipherSuiteList: void <init>(java.util.Collection)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<sun.reflect.annotation.TypeAnnotationParser: java.util.Map mapTypeAnnotations(sun.reflect.annotation.TypeAnnotation[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Throwable: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.sun.beans.WildcardTypeImpl: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: void <init>()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.AnnotationAttributes: void <init>(java.lang.Class,boolean)>-><java.lang.Class: java.lang.String getName()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$Values: int size()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireBean(java.lang.Object)>-><java.lang.Class: java.lang.String getName()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getClassLevelConstraints(java.lang.Class)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.HashSet newHashSet()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><javax.net.ssl.SSLEngine: java.lang.String getPeerHost()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.codehaus.jackson.map.type.ClassKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.BinaryNode: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Type: java.lang.String toString()>
<org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter build()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>-><java.security.Provider: java.lang.String getName()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.ParameterizedType parameterizeClassCapture(java.lang.Class,java.util.Map)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.ParameterizedType parameterizedType(java.lang.Class,java.lang.reflect.Type[])>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<sun.security.ssl.SSLSessionImpl: void <init>(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection,sun.security.ssl.SessionId,java.lang.String,int)>-><javax.net.ssl.ExtendedSSLSession: void <init>()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration: void <init>()>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.AnnotatedParameterizedType getValueExtractorDefinition(java.lang.Class)>-><java.util.ArrayList: int size()>
<java.util.BitSet: void trimToSize()>-><java.util.BitSet: void checkInvariants()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.ClassKey: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.HashMap$EntrySet: boolean contains(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromParamType(java.lang.reflect.ParameterizedType,org.codehaus.jackson.map.type.TypeBindings)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void <init>()>-><java.util.Hashtable: void <init>(int)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.ConstructorArgumentValues: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.springframework.beans.factory.InjectionPoint: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><org.springframework.core.MethodParameter: java.lang.annotation.Annotation getParameterAnnotation(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<javax.management.StandardMBean: void postDeregister()>-><com.sun.jmx.mbeanserver.StandardMBeanSupport: void unregister()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.IterableValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><javax.el.Util$CacheValue: javax.el.ExpressionFactory getExpressionFactory()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: void expunge()>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(java.lang.Object,java.lang.Object[])>-><com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object[] fromOpenParameters(java.lang.Object[])>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.Hashtable: java.util.Collection values()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.info.ProjectInfoProperties)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><io.netty.buffer.AbstractByteBuf: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getMetaData(java.lang.reflect.Executable[])>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>
<com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType getParentClass()>-><com.fasterxml.classmate.types.ResolvedRecursiveType: com.fasterxml.classmate.ResolvedType getSelfReferencedType()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractMap$SimpleEntry: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Character$Subset: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.ArrayList: boolean isEmpty()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$1: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: int hashCode()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.FileSystemResource: int hashCode()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setAccessDecisionManager(org.springframework.security.access.AccessDecisionManager)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><sun.security.ssl.SecureKey: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean hasParameterConstraints(java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.health.Status: void <init>(java.lang.String)>-><org.springframework.boot.actuate.health.Status: void <init>(java.lang.String,java.lang.String)>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.reflect.Type[] getBounds()>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parseAsISO8601(java.lang.String,java.text.ParsePosition)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.font.GlyphLayout$LayoutEngineKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.Vector: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler getDefaultAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.AccessDeniedHandlerImpl: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SetFromMap: int size()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.http.HttpStatus getStatus(javax.servlet.http.HttpServletRequest)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$EmptyMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.aspectj.weaver.patterns.ThrowsPattern: void <clinit>()>-><org.aspectj.weaver.patterns.ThrowsPattern: void <init>(org.aspectj.weaver.patterns.TypePatternList,org.aspectj.weaver.patterns.TypePatternList)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.ThreadGroup: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.cglib.core.MethodInfo: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsAutoConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: java.lang.Object _throwWrapped(java.lang.Exception,java.lang.String,java.lang.Object)>-><javax.management.ReflectionException: java.lang.Throwable getCause()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.access.expression.AbstractSecurityExpressionHandler: void setPermissionEvaluator(org.springframework.security.access.PermissionEvaluator)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isWildcardTypeAssignable(java.lang.reflect.WildcardType,java.lang.reflect.Type)>-><com.sun.beans.WildcardTypeImpl: java.lang.reflect.Type[] getLowerBounds()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.poi.ss.format.CellFormatPart: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.AnnotatedType getAnnotatedGenericComponentType()>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.Type getComponentType()>
<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanTrustPermission(java.lang.Class)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$1: void <init>(java.lang.Class)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Hashtable$Enumerator: java.lang.Object nextElement()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.EnumMap: void clear()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.path.PathImpl: void <init>(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Long: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<org.hibernate.validator.internal.util.ReflectionHelper: boolean isGetterMethod(java.lang.reflect.Executable)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$8: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<org.springframework.security.core.userdetails.User$UserBuilder: java.lang.String lambda$roles$1(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: int hashCode()>
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>-><java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.Collections: java.util.Set emptySet()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.util.Properties: void load(java.io.InputStream)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.lang.ProcessEnvironment$StringKeySet: boolean isEmpty()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation,java.util.List,java.lang.reflect.Type)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.util.Set getGroups()>
<org.springframework.web.cors.CorsConfiguration: void <clinit>()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<org.hibernate.validator.internal.engine.ValidatorImpl: void <init>(javax.validation.ConstraintValidatorFactory,org.hibernate.validator.internal.metadata.BeanMetaDataManager,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager,org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator,org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext getConstraintValidatorInitializationContext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getNewMBeanClassName(java.lang.Object)>-><javax.management.NotCompliantMBeanException: void <init>(java.lang.String)>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.reactive.ReactiveManagementContextAutoConfiguration: void <init>()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.ParsePosition: int hashCode()>
<java.util.zip.ZipOutputStream: void writeShort(int)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(int)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.SubList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.RenderingHints$Key: int hashCode()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.tomcat.util.ExceptionUtils: java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)>
<org.springframework.web.method.HandlerMethod: org.springframework.core.MethodParameter[] initMethodParameters()>-><org.springframework.web.method.HandlerMethod$HandlerMethodParameter: void <init>(org.springframework.web.method.HandlerMethod,int)>
<sun.security.util.Cache: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.commons.collections.FastHashMap: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Arrays$ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer: void <init>()>-><org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.ASN1Boolean: java.lang.String toString()>
<javax.management.ObjectName: java.util.Hashtable getKeyPropertyList()>-><java.util.Hashtable: void <init>(java.util.Map)>
<org.apache.catalina.core.StandardContext: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.poi.ss.util.CellRangeAddressBase: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: int hashCode()>
<sun.reflect.annotation.TypeAnnotationParser: java.util.Map mapTypeAnnotations(sun.reflect.annotation.TypeAnnotation[])>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: java.lang.Class annotationType()>
<sun.security.ssl.CipherSuite: void <init>(java.lang.String,int)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.math.BigDecimal: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<sun.security.jca.ProviderList: java.security.Provider getProvider(java.lang.String)>-><sun.security.jca.ProviderConfig: java.security.Provider getProvider()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Throwable)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Hashtable$EntrySet: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration: void <init>()>
<javax.management.Notification: void <init>(java.lang.String,java.lang.Object,long)>-><java.util.Date: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.Object: java.lang.Class getClass()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerOpaqueTokenConfiguration$OpaqueTokenIntrospectionClientConfiguration: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.Duration: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>-><org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: java.lang.String wrapExpression(java.lang.String)>
<com.alibaba.fastjson.JSONObject: void clear()>-><javax.management.openmbean.TabularDataSupport: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.sql.Date: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: int spread(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.RegularImmutableMap$KeySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForParameterizedType(java.lang.reflect.AnnotatedParameterizedType,java.lang.reflect.TypeVariable[])>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.LocalTime: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1BitString: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.LinkedHashMap$LinkedKeySet: boolean remove(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><javax.management.ObjectInstance: void <init>(javax.management.ObjectName,java.lang.String)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.DigitList: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: void clear()>-><org.springframework.util.LinkedMultiValueMap: void clear()>
<org.springframework.boot.actuate.trace.http.HttpExchangeTracer: java.lang.Long lambda$sendingResponse$0(org.springframework.boot.actuate.trace.http.HttpTrace)>-><java.lang.Long: java.lang.Long valueOf(long)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.aop.framework.CglibAopProxy: void doValidateClass(java.lang.Class,java.lang.ClassLoader,java.util.Set)>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.subst.Node: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.MutablePropertyValues: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: boolean isRegistered(javax.management.ObjectName)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void rethrow(java.lang.Throwable)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$Values: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.DoubleNode: int hashCode()>
<sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation[] filter(sun.reflect.annotation.TypeAnnotation[])>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.EnumMap$1: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.security.auth.Subject$SecureSet: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Boolean: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object remove(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: void expunge()>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.util.ArrayList: void <init>(int)>
<com.alibaba.fastjson.parser.deserializer.FieldDeserializer: void setValue(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: void clear()>
<java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>-><com.google.common.collect.ImmutableMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<com.github.xiaoymin.knife4j.spring.model.MarkdownFiles: void <clinit>()>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.MapValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<com.alibaba.fastjson.JSONPath: java.lang.Object getPropertyValue(java.lang.Object,java.lang.String,boolean)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.SocketImpl: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERGeneralString: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.util.logging.LogRecord: void setParameters(java.lang.Object[])>
<javax.management.MBeanServerDelegate: void <init>()>-><javax.management.MBeanServerDelegate: long getStamp()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Locale: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.modelmbean.DescriptorSupport: int hashCode()>
<sun.security.ssl.EngineWriter: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <init>(java.lang.String,int,java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer removeConfigurer(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>-><sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.security.Provider$Service,java.lang.Class)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ResolvedTypeKey: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <clinit>()>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<sun.security.ssl.CipherBox: void <clinit>()>-><sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>-><java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Character$Subset: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromParamType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.classmate.TypeBindings)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.springframework.web.context.support.GenericWebApplicationContext: void setServletContext(javax.servlet.ServletContext)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.context.annotation.AnnotatedBeanDefinitionReader: org.springframework.core.env.Environment getOrCreateEnvironment(org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.context.support.AbstractApplicationContext: org.springframework.core.env.Environment getEnvironment()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.springframework.context.support.AbstractApplicationContext: long getStartupDate()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.commons.collections.FastHashMap$CollectionView: int hashCode()>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings withUnboundVariable(java.lang.String)>-><java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.OptionalLong: java.lang.String toString()>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$SingleValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.reflect.TypeVariable access$300(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<sun.security.ssl.CipherSuite: void <init>(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.xssf.streaming.SXSSFRow: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.aggregated.rule.ParallelMethodsMustNotDefineParameterConstraints: void <init>()>-><org.hibernate.validator.internal.metadata.aggregated.rule.MethodConfigurationRule: void <init>()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.util.LifecycleBase: void init()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.web.servlet.function.RouterFunctions$DefaultRouterFunction: void <init>(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)>-><org.springframework.web.servlet.function.RouterFunctions$AbstractRouterFunction: void <init>(org.springframework.web.servlet.function.RouterFunctions$1)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.font.AttributeValues: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl: java.lang.ClassLoader deduceClassLoader(org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader getBeanClassLoader()>
<com.sun.jmx.mbeanserver.MXBeanLookup: com.sun.jmx.mbeanserver.MXBeanLookup lookupFor(javax.management.MBeanServerConnection)>-><com.sun.jmx.mbeanserver.MXBeanLookup: void <init>(javax.management.MBeanServerConnection)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.system.DiskSpaceHealthIndicator: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><java.util.Collection: java.util.stream.Stream stream()>
<sun.security.ssl.SSLSessionImpl: void <init>(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection,sun.security.ssl.SessionId,java.lang.String,int)>-><java.io.PrintStream: void println(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Long: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.aspectj.weaver.ResolvedPointcutDefinition: void <init>(org.aspectj.weaver.UnresolvedType,int,java.lang.String,org.aspectj.weaver.UnresolvedType[],org.aspectj.weaver.patterns.Pointcut)>-><org.aspectj.weaver.ResolvedPointcutDefinition: void <init>(org.aspectj.weaver.UnresolvedType,int,java.lang.String,org.aspectj.weaver.UnresolvedType[],org.aspectj.weaver.UnresolvedType,org.aspectj.weaver.patterns.Pointcut)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getMetaData(java.lang.reflect.Executable[])>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.HashSet newHashSet()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><java.util.LinkedHashMap: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind,boolean,java.lang.String)>-><java.lang.Object: void <init>()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><reactor.util.context.ContextN: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.ImmutableMap: java.util.Collection values()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.logging.log4j.spi.Provider: int hashCode()>
<com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.DigitList: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<org.springframework.core.type.classreading.SimpleMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.springframework.context.support.GenericApplicationContext: java.lang.ClassLoader getClassLoader()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type resolveTypeVariables(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.Class getErasedReferenceType(java.lang.reflect.Type)>
<javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>-><sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.security.Provider$Service,java.lang.Class)>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean hasParameterConstraints(java.util.List)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: boolean isConstrained()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<org.springframework.validation.beanvalidation.SpringValidatorAdapter: void <clinit>()>-><java.util.HashSet: void <init>(int)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.slf4j.event.Level: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry: void <init>()>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry$NoJmxMBeanServer: void <init>(org.apache.tomcat.util.modeler.NoDescriptorRegistry$1)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.http.Outcome: void <clinit>()>-><org.springframework.boot.actuate.metrics.http.Outcome: void <init>(java.lang.String,int)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
<com.sun.jmx.mbeanserver.MBeanSupport: void postRegister(java.lang.Boolean)>-><org.apache.catalina.util.LifecycleMBeanBase: void postRegister(java.lang.Boolean)>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder customizers(java.util.Collection)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.actuate.health.Status: void <init>(java.lang.String,java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree of(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration: void <init>()>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.CodeSource: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Primitive: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.WeakCacheKey: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<sun.text.normalizer.NormalizerImpl: void <clinit>()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Predicates$NotPredicate: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.util.EnumSet)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment[] newArray(int)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.authentication.ProviderManager: void <init>(java.util.List,org.springframework.security.authentication.AuthenticationManager)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: boolean removeReference(javax.management.ObjectName,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: int hashCode()>
<reactor.core.scheduler.Schedulers: void <clinit>()>-><java.lang.Integer: int intValue()>
<org.apache.http.HttpHost: org.apache.http.HttpHost create(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.sun.jmx.mbeanserver.NamedObject: void <init>(javax.management.ObjectName,javax.management.DynamicMBean)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$addValueExtractorDescriptorForWrappedValue$0(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: boolean isUnwrapByDefault()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$EntrySet: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.CompositeDataSupport: int hashCode()>
<org.apache.catalina.core.ApplicationContextFacade: void <init>(org.apache.catalina.core.ApplicationContext)>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.http.ResponseEntity: void <init>(java.lang.Object,org.springframework.http.HttpStatus)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.aspectj.weaver.Shadow: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: void <init>(java.lang.String,int,boolean)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForParameterizedType(java.lang.reflect.AnnotatedParameterizedType,java.lang.reflect.TypeVariable[])>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForAnnotatedType(java.lang.reflect.AnnotatedType)>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.util.TreeMap: void clear()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><reactor.util.context.Context1: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Class getContainerClass(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.util.TypeVariables: boolean isAnnotatedObject(java.lang.reflect.TypeVariable)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext registerWithRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.SecurityManager: void checkPermission(java.security.Permission,java.lang.Object)>-><java.security.AccessControlContext: void checkPermission(java.security.Permission)>
<org.apache.catalina.util.ContextName: java.lang.String getDisplayName()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<java.lang.invoke.MemberName: void <init>(byte,java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.EnumMap: java.util.Collection values()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Package: int hashCode()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: java.lang.Object run(java.security.PrivilegedAction)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.MapValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Object: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getClassName(javax.management.DynamicMBean)>-><com.sun.jmx.mbeanserver.MBeanSupport: java.lang.String getClassName()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<io.micrometer.core.instrument.composite.CompositeMeterRegistry: void lock(java.util.concurrent.atomic.AtomicBoolean,java.lang.Runnable)>-><java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: java.util.SortedMap makeMap(java.lang.String[],java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableMap: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: char charAt(int)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<springfox.documentation.spring.web.readers.parameter.ParameterNameReader: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<javax.management.MBeanServerInvocationHandler: void <clinit>()>-><java.util.WeakHashMap: void <init>()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.xml.bind.JAXBException: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory: void <init>(java.lang.ClassLoader)>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<io.prometheus.client.CollectorRegistry: void <clinit>()>-><io.prometheus.client.CollectorRegistry: void <init>(boolean)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.lang.Object[])>-><java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>
<org.aspectj.weaver.World: void <clinit>()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList: int size()>
<org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: java.lang.String getType(java.lang.Class)>-><org.springframework.boot.actuate.endpoint.jmx.JacksonJmxOperationResponseMapper: java.lang.Class mapResponseType(java.lang.Class)>
<org.hibernate.validator.internal.metadata.location.CrossParameterConstraintLocation: int hashCode()>-><java.lang.reflect.Method: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.Class internalBoxedType(java.lang.Class)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.google.common.collect.ImmutableMapEntrySet: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.Provider$UString: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Locale: java.lang.String toString()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.String getPropertyName(java.lang.reflect.Member)>-><java.lang.String: int length()>
<org.aspectj.weaver.patterns.AnnotationTypePattern: void <clinit>()>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: void <init>()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: java.lang.reflect.Field getAccessible(java.lang.reflect.Field)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<javax.management.NotificationBroadcasterSupport$1: void execute(java.lang.Runnable)>-><javax.management.NotificationBroadcasterSupport$SendNotifJob: void run()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.MBeanAttributeInfo: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: java.lang.Object run(java.security.PrivilegedAction)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<org.apache.http.util.TextUtils: boolean containsBlanks(java.lang.CharSequence)>-><java.lang.String: char charAt(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(java.lang.Class[])>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void refresh()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.wuwenze.poi.pojo.ExcelMapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext registerWithRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getFieldMetaData(java.lang.Class)>-><org.hibernate.validator.internal.util.privilegedactions.GetDeclaredFields: org.hibernate.validator.internal.util.privilegedactions.GetDeclaredFields action(java.lang.Class)>
<org.springframework.web.util.pattern.PathPattern: void <clinit>()>-><org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer parsePath(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><org.apache.catalina.core.StandardPipeline: org.apache.catalina.Valve[] getValves()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>-><javax.management.MBeanInfo: javax.management.MBeanAttributeInfo[] getAttributes()>
<java.util.Optional: java.util.Optional map(java.util.function.Function)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<org.springframework.boot.SpringApplication: int getExitCodeFromExitCodeGeneratorException(java.lang.Throwable)>-><javax.management.MBeanException: java.lang.Throwable getCause()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode getValueExtractionPath(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isEmptyBounds(java.lang.reflect.Type[])>-><java.lang.Object: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.aggregated.rule.MethodConfigurationRule: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.http.HttpHeaders: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.reflect.AnnotatedType getAnnotatedType()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object,java.lang.Throwable)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.http.HttpHeaders: java.lang.Object remove(java.lang.Object)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><java.util.concurrent.atomic.AtomicBoolean: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.font.TransformAttribute: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: java.lang.Object run(java.security.PrivilegedAction)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.util.CollectionUtils: void lambda$unmodifiableMultiValueMap$0(java.util.Map,java.lang.Object,java.util.List)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void removeStale()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$WeakValueReference: int keyHash()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERIA5String: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<sun.security.ssl.EngineOutputRecord: int recordSize(byte)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>-><java.security.KeyPairGenerator$Delegate: void <init>(sun.security.jca.GetInstance$Instance,java.util.Iterator,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.URL: java.lang.String toString()>
<sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>-><java.lang.String: boolean endsWith(java.lang.String)>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.ObjectNode: int hashCode()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><com.fasterxml.classmate.types.ResolvedArrayType: com.fasterxml.classmate.ResolvedType getParentClass()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.event.Level: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Hashtable: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ShortArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeAnnotationConstraints(java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Float: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.http.HttpHost: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.MBeanIntrospector: java.lang.Object invokeM(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object)>-><java.lang.Throwable: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.Util: void handleThrowable(java.lang.Throwable)>
<org.springframework.core.SimpleAliasRegistry: boolean hasAlias(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><org.springframework.web.client.RestTemplate: org.springframework.web.util.DefaultUriBuilderFactory initUriTemplateHandler()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.aop.framework.CglibAopProxy: void doValidateClass(java.lang.Class,java.lang.ClassLoader,java.util.Set)>-><java.lang.Class: java.lang.Class getSuperclass()>
<sun.security.ssl.SignatureAndHashAlgorithm: void supports(sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm,sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm,java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><sun.net.idn.StringPrep: java.lang.StringBuffer normalize(java.lang.StringBuffer)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.Duration: int hashCode()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanInstantiator: void <clinit>()>-><com.sun.jmx.mbeanserver.Util: java.util.Map newMap()>
<org.springframework.security.web.util.ThrowableAnalyzer: java.lang.Throwable lambda$static$0(java.lang.Throwable)>-><javax.management.RuntimeErrorException: java.lang.Throwable getCause()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.util.ObjectIdentifier: int hashCode()>
<org.hibernate.validator.internal.util.StringHelper: java.lang.String decapitalize(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.memory.UserAttribute: void setAuthoritiesAsString(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.NullNode: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.DecimalFormatSymbols: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<sun.security.ssl.SSLSessionContextImpl: int getDefaultCacheLimit()>-><java.lang.Integer: int intValue()>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>-><java.util.stream.Collectors$CollectorImpl: java.util.function.BiConsumer accumulator()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.aspectj.weaver.tools.DefaultTraceFactory: org.aspectj.weaver.tools.Trace getTrace(java.lang.Class)>-><org.aspectj.weaver.tools.DefaultTrace: void <init>(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.CodeSigner: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.font.FontLineMetrics: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.AnnotatedType getAnnotatedGenericComponentType()>-><sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation$LocationInfo pushArray()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<sun.security.ssl.MAC: void <clinit>()>-><sun.security.ssl.MAC: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Float: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.XSSFFont: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.type.SimpleType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.AttributeEntry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><java.io.PrintStream: void println(java.lang.String)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isExtensionExposed(java.lang.Object)>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isHealthEndpointExtension(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.xssf.usermodel.XSSFName: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.util.concurrent.AbstractFuture: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type getRawType()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.ImmutableSet: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.SpringfoxWebMvcConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.jboss.logging.JDKLogger: java.util.logging.Level translate(org.jboss.logging.Logger$Level)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: void <init>(java.util.Set)>-><java.lang.Object: void <init>()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postRegister(javax.management.ObjectName,javax.management.DynamicMBean,boolean,boolean)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.p6spy.engine.logging.Category: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>-><java.lang.reflect.Field: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.lang.reflect.Type,java.lang.Object)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.security.KeyPairGenerator$Delegate: void <init>(sun.security.jca.GetInstance$Instance,java.util.Iterator,java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onRefresh()>-><org.springframework.context.ApplicationContextException: void <init>(java.lang.String,java.lang.Throwable)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: void <init>()>-><com.sun.jmx.mbeanserver.Util: java.util.Map newMap()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: int size()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromVariable(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.classmate.TypeBindings)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String getName()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataInvocationHandler: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.Provider: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.util.stream.Streams$ConcatSpliterator: int characteristics()>-><java.util.ArrayDeque$DeqSpliterator: int characteristics()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><java.io.BufferedReader: void <init>(java.io.Reader)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map normalize(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.AbstractCollection: boolean add(java.lang.Object)>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.HashSet: void <init>()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Vector: java.lang.Object set(int,java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.FileSystemResource: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<org.aspectj.bridge.MessageUtil$3: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Optional: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap: java.lang.Object get(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanConstructorInfo: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanTrustPermission(java.lang.Class)>-><java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.OptionalLong: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool: boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)>-><com.zaxxer.hikari.pool.PoolEntry: void markEvicted()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type boxedType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.Class internalBoxedType(java.lang.Class)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.type.ClassKey: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Set lambda$toSet$4(java.util.Set,java.util.Set)>-><java.util.TreeSet: boolean addAll(java.util.Collection)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: int hashCode()>
<org.springframework.ui.ModelMap: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<sun.security.ssl.ProtocolVersion: void <clinit>()>-><sun.security.ssl.ProtocolVersion: void <init>(int,java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.context.annotation.MBeanExportConfiguration: void <init>()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.net.SocketImpl: java.lang.String toString()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>-><java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.security.Provider: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.jar.Attributes: java.util.Set entrySet()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$SynchronizedMap: boolean isEmpty()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areMemberConstraintsIgnoredFor(java.lang.reflect.Member)>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.boot.actuate.endpoint.jmx.EndpointMBean: java.util.Map getOperations(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><org.springframework.boot.actuate.endpoint.AbstractExposableEndpoint: java.util.Collection getOperations()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider: void <init>(org.springframework.core.SerializableTypeWrapper$TypeProvider,java.lang.reflect.Method,int)>-><java.lang.Object: void <init>()>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><org.apache.catalina.core.ApplicationSessionCookieConfig: void <init>(org.apache.catalina.core.StandardContext)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.ArrayList: void <init>(int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.el.ExpressionFactory$CacheKey: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void <init>(java.util.EventListener)>-><org.springframework.boot.web.servlet.ServletListenerRegistrationBean: boolean isSupportedType(java.util.EventListener)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.ObjectName: java.lang.String toString()>
<sun.security.ssl.SSLAlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.AlgorithmParameters)>-><sun.security.util.DisabledAlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.AlgorithmParameters)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<sun.security.ssl.ProtocolVersion: void <clinit>()>-><sun.security.ssl.SunJSSE: boolean isFIPS()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundryActuatorAutoConfiguration: void <init>()>
<springfox.documentation.spring.web.scanners.ApiListingReferenceScanner: void <init>()>-><java.lang.Object: void <init>()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<javax.management.MBeanServerInvocationHandler: void <init>(javax.management.MBeanServerConnection,javax.management.ObjectName,boolean)>-><java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.ss.format.CellFormat: int hashCode()>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext registerWithRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: boolean canUseOpenInfo(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$1: java.lang.reflect.Type getGenericComponentType()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.Provider$ServiceKey: int hashCode()>
<org.springframework.security.oauth2.provider.endpoint.TokenKeyEndpoint: void <init>(org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>-><java.util.concurrent.locks.ReentrantLock: void <init>()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.io.StringWriter: void close()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$1: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decompose(sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,sun.security.ssl.CipherSuite$MacAlg)>-><sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decomposes(sun.security.ssl.CipherSuite$MacAlg,sun.security.ssl.CipherSuite$BulkCipher)>
<io.micrometer.prometheus.PrometheusMeterRegistry: void onMeterRemoved(io.micrometer.core.instrument.Meter)>-><io.micrometer.prometheus.PrometheusMeterRegistry: java.util.List tagValues(io.micrometer.core.instrument.Meter$Id)>
<org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void determineValueExtractorDefinitions(java.util.List,java.lang.Class)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.Class getClassFromType(java.lang.reflect.Type)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.awt.Font: boolean equals(java.lang.Object)>
<javax.servlet.DispatcherType: javax.servlet.DispatcherType valueOf(java.lang.String)>-><java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
<sun.security.jca.ProviderConfig: void <init>(java.security.Provider)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean isFilterMatch(java.lang.Class,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointDiscoverer: boolean isEndpointExposed(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><javax.el.Util$CacheKey: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Collections: java.util.List emptyList()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isTypeVariableAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.IdentityHashMap: java.util.Collection values()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void add(org.springframework.security.config.annotation.SecurityConfigurer)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: java.util.Set toValueExtractorClasses(java.util.Set)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry$UrlMapping: org.springframework.security.web.util.matcher.RequestMatcher getRequestMatcher()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.springframework.http.HttpHeaders: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.JavaType refineDeserializationType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.type.MapLikeType withKeyType(com.fasterxml.jackson.databind.JavaType)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.jar.Attributes: java.util.Collection values()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.MBeanInfo: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.TreeMap$EntrySet: int size()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><java.util.Collections: java.util.Set emptySet()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.asm.Type: java.lang.String toString()>
<java.net.IDN: void <clinit>()>-><java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.awt.Font: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><com.google.common.collect.RegularImmutableMap$Values: java.lang.Object get(int)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.ss.util.CellRangeAddressBase: boolean equals(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Executable,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.IdentityHashMap$EntrySet: java.lang.Object[] toArray(java.lang.Object[])>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: java.lang.String getDescription(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><org.springframework.boot.actuate.endpoint.AbstractExposableEndpoint: org.springframework.boot.actuate.endpoint.EndpointId getEndpointId()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><javax.management.openmbean.TabularDataSupport: java.util.Collection values()>
<org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration: void <init>()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.collect.FluentIterable: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalDouble: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration$ReactiveTraceFilterConfiguration: void <init>()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _resolveSuperClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.aspectj.bridge.IMessageHandler: void <clinit>()>-><java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object get(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: void putAll(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: void putAll(java.util.Map)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.apache.logging.log4j.message.MessageFormatMessage: void <clinit>()>-><org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.status.StatusLogger getLogger()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MXBeanLookup: void addReference(javax.management.ObjectName,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><java.util.SimpleTimeZone: int hashCode()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromParamType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.classmate.TypeBindings)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.poi.openxml4j.opc.PackagePartName: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.util.LinkedMultiValueMap: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.ClassKey: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.reflect.AnnotatedType getAnnotatedReturnType0(java.lang.reflect.Type)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>-><javax.crypto.JceSecurity: java.lang.Exception getVerificationResult(java.security.Provider)>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.security.AccessControlContext$1: void <init>(java.security.AccessControlContext,sun.security.util.Debug,java.security.ProtectionDomain)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><java.lang.String: java.lang.String trim()>
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String lambda$encode$2(java.nio.charset.Charset,java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)>-><org.springframework.web.util.HierarchicalUriComponents: java.lang.String encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)>
<org.apache.catalina.core.StandardContext: void <init>()>-><org.apache.catalina.util.ErrorPageSupport: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.http.pool.RouteSpecificPool: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashSet: int size()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: void <init>(java.util.Map)>-><java.util.HashMap: int size()>
<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>-><java.util.TimeZone: void setID(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>-><org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object,java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<org.apache.catalina.util.ErrorPageSupport: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Instant: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Field)>-><java.lang.invoke.MemberName: void <init>(java.lang.reflect.Field,boolean)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void throwMBeanRegistrationException(java.lang.Throwable,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ObjectInstance: int hashCode()>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.MapKeyExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ObjectArrayValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.ChoiceFormat: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$IdentityMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.Map)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: void <init>(java.util.Set)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void initMaps(java.lang.Class,com.sun.jmx.mbeanserver.MBeanIntrospector)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.boot.web.context.WebServerInitializedEvent: java.lang.Object getSource()>-><org.springframework.boot.web.context.WebServerInitializedEvent: org.springframework.boot.web.server.WebServer getSource()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Vector$Itr: java.lang.Object next()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getKey()>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.springframework.security.core.userdetails.memory.UserAttribute: void setAuthoritiesAsString(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.apache.catalina.core.StandardContext: void <init>()>-><javax.management.NotificationBroadcasterSupport: void <init>()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.util.Collections$UnmodifiableCollection: java.util.Spliterator spliterator()>-><java.util.concurrent.LinkedBlockingQueue: java.util.Spliterator spliterator()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.util.LRUTypeCache: void put(com.fasterxml.classmate.util.ResolvedTypeKey,com.fasterxml.classmate.ResolvedType)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.MiscCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.springframework.context.annotation.ClassPathBeanDefinitionScanner: org.springframework.core.env.Environment getOrCreateEnvironment(org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.context.support.AbstractApplicationContext: org.springframework.core.env.Environment getEnvironment()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromGenericType(com.fasterxml.classmate.util.ClassStack,com.fasterxml.classmate.GenericType,com.fasterxml.classmate.TypeBindings)>
<javax.management.JMX: java.lang.Object createProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class,boolean,boolean)>-><javax.management.MBeanServerInvocationHandler: void <init>(javax.management.MBeanServerConnection,javax.management.ObjectName,boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERUniversalString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: java.lang.reflect.Field getAccessible(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: void <init>(java.lang.Class,java.lang.reflect.TypeVariable,java.lang.Integer,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNamesImpl(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$WeakKeyReference: void <init>(java.lang.Object,int,java.lang.ref.ReferenceQueue)>-><java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Introspector: javax.management.DynamicMBean makeDynamicMBean(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.catalina.core.StandardContext: void <init>()>-><org.apache.catalina.core.ContainerBase: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.GlyphLayout$SDCache$SDKey: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: java.lang.String getPoolName()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.support.EncodedResource: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><com.google.common.collect.ImmutableMapEntrySet: int size()>
<org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.aop.framework.CglibAopProxy: org.springframework.cglib.proxy.Callback[] getCallbacks(java.lang.Class)>-><java.lang.Class: java.lang.reflect.Method[] getMethods()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock writeLock()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromVariable(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.classmate.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String getName()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.util.LinkedMultiValueMap: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><com.sun.jmx.mbeanserver.NamedObject: javax.management.DynamicMBean getObject()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap: void <init>(java.util.Map)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Byte: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.aspectj.weaver.patterns.AnyAnnotationTypePattern: void <init>()>-><org.aspectj.weaver.patterns.AnnotationTypePattern: void <init>()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.lang.StringBuilder: void <init>()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.JumboEnumSet: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: int hashCode()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.FieldPosition: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object remove(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.LifecycleException: void <init>()>
<springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiListingScanner getApiListingScanner()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: int size()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$UnmodifiableList: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: int buildHashCode(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.context.annotation.AnnotationConfigUtils: java.util.Set registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.context.support.AbstractApplicationContext: boolean containsBeanDefinition(java.lang.String)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><javax.management.ObjectInstance: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer getConfigurer(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getResolvedSuperclass(java.lang.reflect.Type)>-><java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.BeanMetadataAttributeAccessor: java.lang.Object getAttribute(java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.HashMap: java.util.Set entrySet()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$EntrySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.OptionalLong: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.Collection: java.util.stream.Stream stream()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.ObjectName: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.AbstractCollection: boolean isEmpty()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.LegacyHealthEndpointAdaptersConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void putAll(java.util.Map)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: java.lang.Object run(java.security.PrivilegedAction)>-><org.hibernate.validator.internal.util.privilegedactions.GetClassLoader: java.lang.Object run()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Vector: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer: org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey createOperationKey(org.springframework.boot.actuate.endpoint.Operation)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERUTF8String: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.beans.factory.config.BeanDefinitionHolder: boolean matchesName(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.net.URL: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.util.DerInputBuffer: int hashCode()>
<sun.security.ssl.JsseJce: void <clinit>()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.hibernate.validator.internal.engine.MethodValidationConfiguration: void <init>(boolean,boolean,boolean)>-><org.hibernate.validator.internal.engine.MethodValidationConfiguration: java.util.Set buildConfiguredRuleSet(boolean,boolean,boolean)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.provider.PolicyFile$SelfPermission: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<sun.security.ssl.SSLSessionImpl: void <init>(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection,sun.security.ssl.SessionId,java.lang.String,int)>-><java.util.Hashtable: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.AVA: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.UUID: int hashCode()>
<java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.x509.Extension: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.openmbean.TabularType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.Font: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>
<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType,int,float)>-><java.util.LinkedHashMap: void <init>(int,float)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.aggregated.rule.ParallelMethodsMustNotDefineGroupConversionForCascadedReturnValue: void <init>()>-><org.hibernate.validator.internal.metadata.aggregated.rule.MethodConfigurationRule: void <init>()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.lang.NullPointerException: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.Message: void <init>(java.lang.String,org.aspectj.bridge.IMessage$Kind,java.lang.Throwable,org.aspectj.bridge.ISourceLocation)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.security.Provider: java.lang.Object implComputeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<org.hibernate.validator.internal.metadata.core.ConstraintHelper: void assertValidationAppliesToParameterSetUpCorrectly(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap)>-><java.lang.Object: void <init>()>
<java.io.DataInputStream: int read(byte[])>-><java.util.jar.JarInputStream: int read(byte[],int,int)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$ResourceChainCustomizerConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$11: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><org.hibernate.validator.internal.util.TypeVariables: java.lang.reflect.TypeVariable getActualTypeParameter(java.lang.reflect.TypeVariable)>
<javax.el.ExpressionFactory$CacheKey: void <init>(java.lang.ClassLoader)>-><java.lang.Object: int hashCode()>
<sun.security.ssl.SSLEngineImpl: void <init>(sun.security.ssl.SSLContextImpl)>-><java.util.Collections: java.util.List emptyList()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.net.Inet6Address: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.MapKeyExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.MapKeyExtractor: void <init>()>
<com.sun.jmx.mbeanserver.MBeanSupport: void postDeregister()>-><org.apache.catalina.util.LifecycleMBeanBase: void postDeregister()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getNewMBeanClassName(java.lang.Object)>-><java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Field)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType buildAnnotatedType(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><sun.reflect.annotation.TypeAnnotation: sun.reflect.annotation.TypeAnnotation$TypeAnnotationTargetInfo getTargetInfo()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<com.fasterxml.jackson.module.paramnames.ParameterExtractor: void <init>()>-><java.lang.Object: void <init>()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Byte: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><java.util.Collections: java.util.Map emptyMap()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: boolean isSupportedType(java.util.EventListener)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.aspectj.weaver.patterns.AnyTypePattern: void <init>()>-><org.aspectj.weaver.patterns.TypePattern: void <init>(boolean,boolean,org.aspectj.weaver.patterns.TypePatternList)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.session.InvalidSessionStrategy getInvalidSessionStrategy(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.springframework.security.web.server.header.CacheControlServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter build()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.awt.image.ColorModel: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.raw.BeanConfiguration: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.Class,java.util.Set,java.util.List,org.hibernate.validator.spi.group.DefaultGroupSequenceProvider)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.HashSet newHashSet(java.util.Collection)>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: javax.el.ExpressionFactory buildExpressionFactory()>-><javax.el.ELManager: javax.el.ExpressionFactory getExpressionFactory()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration: void <init>()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areClassLevelConstraintsIgnoredFor(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.String: int length()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.annotation.Annotation getFactoryMethodAnnotation(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class)>
<org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer: void afterPropertiesSet()>-><org.springframework.ui.freemarker.FreeMarkerConfigurationFactory: freemarker.template.Configuration createConfiguration()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$UnmodifiableMap: java.util.Collection values()>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.DERGeneralString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Predicates$AndPredicate: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><com.p6spy.engine.common.CustomHashedHashSet: boolean remove(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><org.springframework.web.client.RestTemplate$HeadersExtractor: void <init>(org.springframework.web.client.RestTemplate$1)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object remove(java.lang.Object)>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: void <init>(org.hibernate.validator.internal.metadata.core.ConstraintHelper,org.hibernate.validator.internal.util.ExecutableHelper,org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator,java.util.List,org.hibernate.validator.internal.engine.MethodValidationConfiguration)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration: void <init>(java.util.Map,org.springframework.beans.factory.ObjectProvider)>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.security.AccessControlContext: void checkPermission2(java.security.Permission)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.HashMap$Node: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Double: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Proxy$Key1: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: org.hibernate.validator.internal.metadata.core.MetaConstraint create(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.ArrayList: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$4: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void prepareRefresh()>-><org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: void clearCache()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object get(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.util.unit.DataSize: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean _hasNullKey(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: boolean containsKey(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Member)>-><java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Field,boolean)>-><java.lang.AssertionError: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<reactor.util.Loggers$ConsoleLogger: void error(java.lang.String,java.lang.Throwable)>-><java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>
<java.util.stream.Collectors: java.lang.Object lambda$null$44(java.util.function.Supplier,java.lang.Object)>-><java.util.stream.ForEachOps$ForEachOp$OfInt: java.lang.Object get()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.lang.String lambda$processMap$0(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: boolean determineAvailabilityOfResourceBundleControl()>-><org.jboss.logging.Logger: void info(java.lang.Object)>
<org.apache.commons.collections.FastHashMap: void <init>(int,float)>-><java.util.HashMap: void <init>()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.OAuth2ClientConfiguration$OAuth2ClientContextConfiguration: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashMap$EntrySet: int size()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.Class getErasedReferenceType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isReferenceType(java.lang.reflect.Type)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.xml.bind.JAXBException: java.lang.String toString()>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decompose(sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,sun.security.ssl.CipherSuite$MacAlg)>-><sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decomposes(sun.security.ssl.CipherSuite$KeyExchange)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.TabularDataSupport: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.ImmutableDescriptor: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<java.security.KeyPairGenerator$Delegate: void <init>(sun.security.jca.GetInstance$Instance,java.util.Iterator,java.lang.String)>-><java.security.KeyPairGenerator: sun.security.util.Debug access$100()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void setAllowCredentials(java.lang.Boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: void <init>(org.hibernate.validator.internal.metadata.core.ConstraintHelper,org.hibernate.validator.internal.util.ExecutableHelper,org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator,java.util.List,org.hibernate.validator.internal.engine.MethodValidationConfiguration)>-><java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.xmlbeans.StringEnumAbstractBase: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: int size()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.beans.factory.support.RootBeanDefinition getResolvedDecoratedDefinition(org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String)>
<com.sun.jmx.mbeanserver.MBeanSupport: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>-><javax.management.StandardMBean: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(java.lang.String,java.lang.String,javax.management.ObjectName,java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><org.apache.commons.collections.FastHashMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.DecimalNode: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.awt.SunHints$Key: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.ObjectStreamClass$WeakClassKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<javax.net.ssl.SSLEngine: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext registerWithRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<javax.management.MBeanTrustPermission: void <init>(java.lang.String,java.lang.String)>-><java.security.BasicPermission: void <init>(java.lang.String,java.lang.String)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: javax.management.modelmbean.ModelMBeanOperationInfo[] getMBeanOperations(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.apache.tomcat.util.modeler.Registry: void <init>()>-><java.util.Hashtable: void <init>()>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.Set toImmutableSet(java.util.Set)>-><java.util.Collections$EmptySet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.IdentityHashMap$KeySet: int size()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Method,boolean)>-><java.lang.reflect.Method: int getModifiers()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: int rehash()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object key()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator$AggregateResourceBundle: void <clinit>()>-><org.hibernate.validator.resourceloading.PlatformResourceBundleLocator$AggregateResourceBundleControl: void <init>(org.hibernate.validator.resourceloading.PlatformResourceBundleLocator$1)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.springframework.http.ReadOnlyHttpHeaders: java.util.Set entrySet()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.LinkedHashMap$LinkedEntrySet: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function)>-><java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.stream.Collector)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$1: int getOrder(java.lang.Object)>-><org.springframework.core.OrderComparator: int getOrder(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Character: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getClassName(javax.management.DynamicMBean)>-><org.springframework.boot.actuate.endpoint.jmx.EndpointMBean: javax.management.MBeanInfo getMBeanInfo()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.CloudFoundrySecurityInterceptor: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><org.apache.tomcat.util.modeler.AttributeInfo: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Vector: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int compareTo(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.SimpleType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.ArrayList: java.lang.Object get(int)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.location.ParameterConstraintLocation: java.lang.reflect.Type getTypeForValidatorResolution()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.apache.commons.beanutils.PropertyUtilsBean: void setIndexedProperty(java.lang.Object,java.lang.String,int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>
<org.springframework.boot.actuate.web.trace.reactive.HttpTraceWebFilter: void <clinit>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.Font: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<sun.security.ssl.JsseJce: java.security.SecureRandom getSecureRandom()>-><java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.List toImmutableList(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.EnumMap$1: int hashCode()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.util.Set getComposingConstraintImpls()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>-><org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.poi.ss.usermodel.ExcelStyleDateFormatter: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Character$Subset: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<javax.xml.datatype.FactoryFinder: java.lang.String which(java.lang.Class)>-><java.util.ResourceBundle$RBClassLoader: java.net.URL getResource(java.lang.String)>
<com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.reflect.Type[] getBounds()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.core.MetaConstraints: org.hibernate.validator.internal.metadata.core.MetaConstraint create(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<javax.management.ObjectInstance: void <init>(javax.management.ObjectName,java.lang.String)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException)>
<javax.el.Util: java.lang.ClassLoader getContextClassLoader()>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<register-finalize <org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object get(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <clinit>()>-><org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes: void <init>(java.lang.String[])>
<io.netty.util.internal.NativeLibraryLoader: void load(java.lang.String,java.lang.ClassLoader)>-><java.util.ResourceBundle$RBClassLoader: java.net.URL getResource(java.lang.String)>
<org.springframework.web.servlet.handler.HandlerMappingIntrospector: java.util.List initFallback(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.AutowireCapableBeanFactory getAutowireCapableBeanFactory()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentExecutableParameterLocation: void <init>(java.lang.reflect.Executable,int,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$1)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentExecutableParameterLocation: void <init>(java.lang.reflect.Executable,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.String,java.lang.Throwable)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.RenderingHints$Key: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifiers(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation[])>-><org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>
<sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>-><sun.security.ssl.Debug: boolean isOn(java.lang.String)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.springframework.security.web.util.ThrowableAnalyzer: java.lang.Throwable lambda$static$0(java.lang.Throwable)>-><javax.management.RuntimeMBeanException: java.lang.Throwable getCause()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1UTCTime: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><java.text.ParseException: void <init>(java.lang.String,int)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.springframework.web.util.UriComponentsBuilder: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.hibernate.validator.internal.engine.MethodValidationConfiguration: java.util.Set buildConfiguredRuleSet(boolean,boolean,boolean)>-><org.hibernate.validator.internal.metadata.aggregated.rule.ReturnValueMayOnlyBeMarkedOnceAsCascadedPerHierarchyLine: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><java.util.HashSet: void <init>()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.springframework.boot.actuate.health.HealthComponent: void <init>()>-><java.lang.Object: void <init>()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void addClassIfExists(java.util.List,java.lang.String)>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Vector: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.LinkedHashMap: void clear()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void <init>(int,float,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry[] newArray(int)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type resolveTypeVariables(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameter(java.lang.reflect.Type[])>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.ZoneId: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><reactor.util.context.ContextN: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)>-><java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.www.BasicAuthenticationFilter: void setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><javax.management.openmbean.TabularDataSupport: java.util.Collection values()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.util.Optional getExtractedType(java.lang.reflect.AnnotatedParameterizedType)>-><java.util.Optional: java.util.Optional of(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromVariable(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.classmate.TypeBindings)>
<reactor.core.scheduler.Schedulers$1: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.LinkedHashMap$LinkedKeySet: int size()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsAutoConfiguration: void <init>(org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<javax.net.ssl.SNIHostName: void checkHostName()>-><java.lang.String: boolean isEmpty()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.ApplicationSessionCookieConfig: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<org.hibernate.validator.internal.metadata.raw.BeanConfiguration: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.Class,java.util.Set,java.util.List,org.hibernate.validator.spi.group.DefaultGroupSequenceProvider)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.HashMap$Node: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignableToWildcardType(java.lang.Class,java.lang.reflect.WildcardType)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<java.lang.invoke.MemberName: void <init>(byte,java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.FontLineMetrics: int hashCode()>
<com.sun.jmx.mbeanserver.Introspector: void checkCompliance(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(java.lang.Class[])>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void register(java.lang.Class[])>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.google.common.base.Predicates$NotPredicate: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><java.util.HashSet: boolean isEmpty()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><javax.security.auth.Subject$SecureSet: boolean add(java.lang.Object)>
<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String,org.springframework.expression.ParserContext)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>-><java.lang.String: int length()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void throwMBeanRegistrationException(java.lang.Throwable,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.lang.Object,int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.boot.actuate.metrics.http.Outcome: void <init>(java.lang.String,int)>-><java.lang.Enum: java.lang.String name()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.beans.IndexedPropertyDescriptor: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.alibaba.fastjson.JSONObject: int hashCode()>
<org.aspectj.bridge.MessageUtil$11: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>-><sun.security.jca.ProviderList$ServiceList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>-><java.util.HashSet: boolean isEmpty()>
<org.aspectj.bridge.IMessage$Kind: void <init>(java.lang.String,int)>-><java.lang.Object: void <init>()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(javax.management.ObjectName)>-><javax.management.ObjectName: boolean isPropertyListPattern()>
<org.aspectj.weaver.UnresolvedType: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.LinkedHashSet: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.RegistrationBean: boolean isEnabled()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.util.DerValue: java.lang.String toString()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void doAcquireShared(int)>-><java.util.concurrent.Semaphore$FairSync: int tryAcquireShared(int)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: void seal()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.ImmutableMapValues: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>-><sun.security.jca.GetInstance: java.util.List getServices(java.lang.String,java.lang.String)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: boolean containsKey(java.lang.String)>-><java.util.TreeMap: boolean containsKey(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: int hashCode()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERT61String: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Vector$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void putAll(java.util.Map)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanInstantiator: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.EnumMap$EntryIterator$Entry: int hashCode()>
<org.aspectj.bridge.MessageUtil$9: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.geom.Point2D: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.RDN: int hashCode()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><org.springframework.core.annotation.AbstractMergedAnnotation: java.lang.annotation.Annotation synthesize()>
<org.codehaus.jackson.io.NumberInput: void <clinit>()>-><java.lang.String: java.lang.String valueOf(long)>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><org.springframework.boot.actuate.health.Health$Builder: org.springframework.boot.actuate.health.Status access$000(org.springframework.boot.actuate.health.Health$Builder)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: void <init>(javax.validation.MessageInterpolator,javax.validation.TraversableResolver,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,javax.validation.ClockProvider,java.time.Duration,org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory,boolean,boolean,java.lang.Object)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: void <init>(javax.validation.MessageInterpolator,javax.validation.TraversableResolver,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,javax.validation.ClockProvider,java.time.Duration,org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory,boolean,boolean,java.lang.Object,org.hibernate.validator.internal.engine.constraintvalidation.HibernateConstraintValidatorInitializationContextImpl)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: int size()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.zaxxer.hikari.pool.ProxyConnection: void closeStatements()>-><com.zaxxer.hikari.util.FastList: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.aspectj.util.FuzzyBoolean: void <clinit>()>-><org.aspectj.util.FuzzyBoolean$NoFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.lang.ProcessEnvironment$StringKeySet: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<org.springframework.core.io.VfsUtils: void <clinit>()>-><java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><org.springframework.util.MimeType: java.lang.String getSubtype()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.Set toImmutableSet(java.util.Set)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.Util: java.lang.Object cast(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.ConstraintLocation: org.hibernate.validator.internal.metadata.location.ConstraintLocation forClass(java.lang.Class)>-><org.hibernate.validator.internal.metadata.location.BeanConstraintLocation: void <init>(java.lang.Class)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerWebApplicationScopes()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.support.MethodOverrides: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.poi.xssf.usermodel.XSSFFont: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>-><java.lang.StringBuilder: void <init>()>
<org.apache.http.HttpHost: org.apache.http.HttpHost create(java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<org.springframework.boot.actuate.context.ShutdownEndpoint: void <clinit>()>-><java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext$1: void unregistered()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.xmlbeans.StringEnumAbstractBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.util.MimeType: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Absent: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String getName()>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><org.apache.tomcat.util.modeler.AttributeInfo: void setWriteable(boolean)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.cglib.core.WeakCacheKey: int hashCode()>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.String: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractCollection: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.wuwenze.poi.pojo.ExcelMapping: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><org.springframework.security.core.userdetails.memory.UserAttribute: void setPassword(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.Streams$ConcatSpliterator: void <init>(java.util.Spliterator,java.util.Spliterator)>-><java.util.ArrayDeque$DeqSpliterator: long estimateSize()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.String methodName()>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DigitList: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.MBeanParameterInfo: int hashCode()>
<sun.security.ssl.JsseJce$EcAvailability: void <clinit>()>-><sun.security.ssl.JsseJce: javax.crypto.KeyAgreement getKeyAgreement(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Locale: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>-><java.util.ArrayList: boolean isEmpty()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromVariable(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.ResolvedType findBoundType(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.String)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<javax.management.ObjectName: javax.management.ObjectName getInstance(javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String getSerializedNameString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: void <init>(org.hibernate.validator.internal.metadata.core.ConstraintHelper,org.hibernate.validator.internal.util.ExecutableHelper,org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator,java.util.List,org.hibernate.validator.internal.engine.MethodValidationConfiguration)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: void <init>(org.hibernate.validator.internal.metadata.core.ConstraintHelper,org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.String,java.lang.Throwable)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaultLogoutSuccessHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler: void <init>(org.springframework.http.HttpStatus)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: void <init>(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.TypeAnnotationParser: java.util.Map mapTypeAnnotations(sun.reflect.annotation.TypeAnnotation[])>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.ObjectName: java.lang.String toString()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.config.DependencyDescriptor$1: boolean fallbackMatchAllowed()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Character: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.PerInterface: java.lang.Object getAttribute(java.lang.Object,java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.math.BigInteger: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Predicates$NotPredicate: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><com.google.common.collect.ImmutableMap: java.util.Collection values()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.jca.ProviderConfig: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory getDefaultFactory()>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decompose(sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,sun.security.ssl.CipherSuite$MacAlg)>-><sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decomposes(sun.security.ssl.CipherSuite$BulkCipher)>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: void <clinit>()>-><org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void restore()>-><java.util.HashMap: void forEach(java.util.function.BiConsumer)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.UrlResource: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.SubList$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<sun.security.ssl.InputRecord: void <init>()>-><sun.security.ssl.InputRecord: void setHelloVersion(sun.security.ssl.ProtocolVersion)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Float: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.LinkedList: java.lang.Object get(int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.ZoneId: java.lang.String toString()>
<org.apache.catalina.core.StandardPipeline: org.apache.catalina.Valve[] getValves()>-><org.apache.catalina.valves.ValveBase: org.apache.catalina.Valve getNext()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.Object getDefaultValue(java.lang.annotation.Annotation,java.lang.String)>-><org.springframework.core.annotation.AnnotationUtils: java.lang.Object getDefaultValue(java.lang.Class,java.lang.String)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: boolean matchKeys(javax.management.ObjectName)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)>-><java.security.KeyFactory: void <init>(java.security.KeyFactorySpi,java.security.Provider,java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERPrintableString: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSON: java.lang.String toString()>
<org.springframework.aop.config.AopConfigUtils: void forceAutoProxyCreatorToUseClassProxying(org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.context.support.AbstractApplicationContext: boolean containsBeanDefinition(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.Inet4Address: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<javax.management.MBeanTrustPermission: void validate(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$EmptyList: java.lang.Object[] toArray(java.lang.Object[])>
<org.aspectj.weaver.ResolvedType$FieldGetter: void <init>(org.aspectj.weaver.ResolvedType$1)>-><org.aspectj.weaver.ResolvedType$FieldGetter: void <init>()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Attributes: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<java.security.KeyPairGenerator$Delegate: void <init>(sun.security.jca.GetInstance$Instance,java.util.Iterator,java.lang.String)>-><java.security.KeyPairGenerator: boolean access$000()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<java.net.IDN: boolean isRootLabel(java.lang.String)>-><java.net.IDN: boolean isLabelSeparator(char)>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.TextNode: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Set: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: int hashCode()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$RequestMappingInfoHandlerMappingDescriptionProvider: void <init>(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<sun.security.ssl.MAC: void <init>()>-><sun.security.ssl.Authenticator: void <init>()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriberRegistrar: java.util.Map getContextAttributes()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletResponse getResponse()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object toOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$1: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer removeConfigurer(java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<javax.management.MBeanServerDelegate: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>-><io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><org.springframework.boot.web.servlet.support.ErrorPageFilter: void addClassIfPresent(java.util.Collection,java.lang.String)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: void addOverrideAttributes(java.util.Map,java.lang.reflect.Method,javax.validation.OverridesAttribute[])>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Null: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: void <init>(java.lang.reflect.Type,javax.management.openmbean.ArrayType,java.lang.Class,com.sun.jmx.mbeanserver.MXBeanMapping)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.OffsetTime: java.lang.String toString()>
<javax.management.JMX: java.lang.Object createProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class,boolean,boolean)>-><com.sun.jmx.mbeanserver.Introspector: void testComplianceMXBeanInterface(java.lang.Class)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void scan(java.lang.String[])>-><org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<io.micrometer.prometheus.PrometheusMeterRegistry: java.util.List tagValues(io.micrometer.core.instrument.Meter$Id)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.Debug: boolean isOn(java.lang.String)>
<org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.security.Provider: java.lang.Object implComputeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointDiscoverer: org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey createOperationKey(org.springframework.boot.actuate.endpoint.Operation)>-><org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointDiscoverer: org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey createOperationKey(org.springframework.boot.actuate.endpoint.jmx.JmxOperation)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: void <init>(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.SubList$1: boolean hasNext()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: void <init>(java.lang.Class,java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: int buildHashCode(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.DERGeneralString: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$EntrySet: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Calendar: java.lang.String toString()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree createConstraintTree(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.util.Set getComposingConstraintImpls()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.util.ClassUtils: java.lang.Class[] toClassArray(java.util.Collection)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: boolean lambda$getRuntimeCompliantValueExtractors$3(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.Class getContainerType()>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: java.lang.Object getAttribute(java.lang.String)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.TypeVariable getExtractedTypeParameter()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerWebApplicationScopes()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.LocalDate: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromArrayType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.GenericArrayType,com.fasterxml.classmate.TypeBindings)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.reflect.Type getGenericComponentType()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.WeakHashMap: boolean isEmpty()>
<java.util.stream.Streams$ConcatSpliterator: long estimateSize()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.JdkLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>-><java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.security.Provider: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.util.List,java.util.Set,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.Set toImmutableSet(java.util.Set)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.awt.geom.Curve: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<io.micrometer.prometheus.PrometheusMeterRegistry: java.util.List tagValues(io.micrometer.core.instrument.Meter$Id)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.poi.xssf.streaming.SXSSFRow: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.catalina.LifecycleState: boolean isAvailable()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.calendar.Era: java.lang.String toString()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline getPipeline()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.InstanceAlreadyExistsException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.AbstractCollection: java.lang.String toString()>
<org.aspectj.bridge.IMessageHandler: void <clinit>()>-><org.aspectj.bridge.MessageWriter: void <init>(java.io.PrintWriter,boolean)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isCloudFoundryHealthEndpointExtension(java.lang.Object)>-><org.springframework.core.annotation.MergedAnnotations: org.springframework.core.annotation.MergedAnnotations from(java.lang.reflect.AnnotatedElement)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.aspectj.bridge.IMessage$Kind$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.core.SimpleAliasRegistry: void checkForAliasCircle(java.lang.String,java.lang.String)>-><org.springframework.core.SimpleAliasRegistry: boolean hasAlias(java.lang.String,java.lang.String)>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>-><java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.String: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areClassLevelConstraintsIgnoredFor(java.lang.Class)>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areAllConstraintAnnotationsIgnoredFor(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedValues: int size()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.ZonedDateTime: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.poi.ss.format.CellNumberStringMod: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: java.lang.Object getTarget()>-><java.util.Collections: java.util.Set emptySet()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.Hashtable$KeySet: boolean contains(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.csrf.CsrfFilter: void setRequireCsrfProtectionMatcher(org.springframework.security.web.util.matcher.RequestMatcher)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.StringJoiner: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.apache.http.util.TextUtils: boolean containsBlanks(java.lang.CharSequence)>-><java.lang.String: int length()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object,java.lang.Object)>-><org.apache.tomcat.util.modeler.Registry: void <init>()>
<org.aspectj.weaver.UnresolvedType$TypeKind: void <clinit>()>-><org.aspectj.weaver.UnresolvedType$TypeKind: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.OffsetDateTime: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.net.InetAddress: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.invoke.MemberName: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean remove(java.lang.Object)>
<sun.text.normalizer.ReplaceableUCharacterIterator: int getText(char[],int)>-><sun.text.normalizer.ReplaceableString: int length()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Constructor: int hashCode()>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.util.Hashtable: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.font.AttributeValues: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetadata(java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable[])>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForParameterizedType(java.lang.reflect.AnnotatedParameterizedType,java.lang.reflect.TypeVariable[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Year: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MXBeanLookup: javax.management.ObjectName mxbeanToObjectName(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.EnumMap$EntrySet: int size()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void finishRefresh()>-><org.springframework.context.support.AbstractApplicationContext: void finishRefresh()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getFieldMetaData(java.lang.Class)>-><java.lang.reflect.Field: int getModifiers()>
<org.springframework.web.filter.ForwardedHeaderFilter: void <clinit>()>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.Point: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.nio.charset.Charset: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: void add(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.PermissionCollection: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jms.artemis.ArtemisConnectionFactoryConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.Instant: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher: void <init>(java.util.Set)>-><org.springframework.boot.security.servlet.ApplicationContextRequestMatcher: void <init>(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalLong: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.stream.Collectors: void lambda$toMap$58(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.Map,java.lang.Object)>-><java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ObjectInstance: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><java.lang.String: int length()>
<org.jboss.logging.Log4j2Logger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.apache.logging.log4j.spi.AbstractLogger: boolean isEnabled(org.apache.logging.log4j.Level)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] initTable()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifiers(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(java.lang.Object,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedMap: boolean containsKey(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean containsKey(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getServletName()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>-><org.slf4j.helpers.SubstituteLogger: java.lang.String getName()>
<java.util.Collections$UnmodifiableMap: void clear()>-><java.lang.UnsupportedOperationException: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isHealthEndpointExtension(java.lang.Object)>-><java.util.Optional: java.util.Optional map(java.util.function.Function)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><javax.management.RuntimeErrorException: java.lang.Throwable getCause()>
<org.springframework.boot.validation.MessageInterpolatorFactory: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.MapValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.MapValueExtractor: void <init>()>
<org.hibernate.validator.internal.util.TypeVariables: boolean isInternal(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.util.TypeVariables: boolean isArrayElement(java.lang.reflect.TypeVariable)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>
<de.codecentric.boot.admin.client.registration.ServletApplicationFactory: void <init>(de.codecentric.boot.admin.client.config.InstanceProperties,org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties,org.springframework.boot.autoconfigure.web.ServerProperties,javax.servlet.ServletContext,org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints,org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties,de.codecentric.boot.admin.client.registration.metadata.MetadataContributor,org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath)>-><de.codecentric.boot.admin.client.registration.DefaultApplicationFactory: void <init>(de.codecentric.boot.admin.client.config.InstanceProperties,org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties,org.springframework.boot.autoconfigure.web.ServerProperties,org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints,org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties,de.codecentric.boot.admin.client.registration.metadata.MetadataContributor)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean add(javax.management.ObjectName,java.lang.ClassLoader)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.el.Util$CacheKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.ObjectIdentifier: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<org.springframework.boot.actuate.endpoint.jmx.EndpointMBean: java.util.Map getOperations(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><java.util.Collections$UnmodifiableCollection: void forEach(java.util.function.Consumer)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind)>-><org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind,boolean)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.springframework.http.HttpHeaders: java.lang.Object get(java.lang.Object)>
<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>-><java.lang.SecurityException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoDefaultConfiguration: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.Class boxedType(java.lang.Class)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.Class internalBoxedType(java.lang.Class)>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.ref.WeakReference makeReference(java.lang.Object,java.lang.ref.ReferenceQueue)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$1: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.MonthDay: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><com.google.common.collect.RegularImmutableMap$KeySet: int size()>
<springfox.documentation.spring.web.paths.PathMappingDecorator: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.security.web.access.AccessDeniedHandlerImpl: void <init>()>
<javax.el.ExpressionFactory$CacheValue: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String toString()>
<org.aspectj.weaver.World: void <clinit>()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>
<org.hibernate.validator.internal.metadata.aggregated.rule.VoidMethodsMustNotBeReturnValueConstrained: void <init>()>-><org.hibernate.validator.internal.metadata.aggregated.rule.MethodConfigurationRule: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node untreeify(java.util.concurrent.ConcurrentHashMap$Node)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes()>-><java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: org.springframework.boot.actuate.endpoint.ExposableEndpoint getFilterEndpoint(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointDiscoverer: org.springframework.boot.actuate.endpoint.ExposableEndpoint createEndpoint(java.lang.Object,org.springframework.boot.actuate.endpoint.EndpointId,boolean,java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.ProcessEnvironment$StringValues: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.Class getContainerType(java.lang.reflect.AnnotatedParameterizedType,java.lang.Class)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.joran.spi.ElementSelector: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Date: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.ArrayType: int hashCode()>
<java.util.Collections$SetFromMap: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap: void clear()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.AbstractMap$1: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.Collections$UnmodifiableCollection$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.mbeanserver.Util: boolean wildmatch(java.lang.String,java.lang.String)>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(java.lang.String,java.lang.String,javax.management.ObjectName,java.lang.String)>
<javax.management.MBeanTrustPermission: void <init>(java.lang.String)>-><javax.management.MBeanTrustPermission: void <init>(java.lang.String,java.lang.String)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.TreeMap$EntrySet: boolean contains(java.lang.Object)>
<org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: void <init>(org.springframework.web.context.ConfigurableWebApplicationContext)>-><org.springframework.web.context.support.ServletContextAwareProcessor: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<java.net.IDN: int searchDots(java.lang.String,int)>-><java.lang.String: char charAt(int)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: void <init>(java.lang.reflect.ParameterizedType,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator)>-><org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.RenderingHints$Key: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.MBeanConstructorInfo: int hashCode()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.aspectj.weaver.Member: void <clinit>()>-><org.aspectj.weaver.MemberKind: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: int compareTo(java.lang.Object)>
<register-finalize <sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.context.support.ServletContextResource: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.OptionalLong: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.EnumMap$EntrySet: boolean contains(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.MethodParameter: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Introspector: javax.management.DynamicMBean makeDynamicMBean(java.lang.Object)>-><com.sun.jmx.mbeanserver.MXBeanSupport: void <init>(java.lang.Object,java.lang.Class)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<sun.security.ssl.InputRecord: void <clinit>()>-><sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String)>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Method,boolean)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.slf4j.helpers.SubstituteLogger: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.TreeMap$Values: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.MemberName: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.CodeSource: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.apache.commons.collections.FastHashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.Point: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.http.ResponseEntity: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.HttpHeaders: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory getDefaultFactory()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<org.apache.logging.log4j.message.MessageFormatMessage: void <init>(java.lang.String,java.lang.Object[])>-><org.apache.logging.log4j.message.MessageFormatMessage: void <init>(java.util.Locale,java.lang.String,java.lang.Object[])>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.RegistrationBean: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.reflect.Field: int getModifiers()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getFieldMetaData(java.lang.Class)>-><java.lang.reflect.Modifier: boolean isStatic(int)>
<com.fasterxml.jackson.module.paramnames.PackageVersion: void <clinit>()>-><com.fasterxml.jackson.core.util.VersionUtil: com.fasterxml.jackson.core.Version parseVersion(java.lang.String,java.lang.String,java.lang.String)>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.base.Absent: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><javax.management.openmbean.OpenDataException: void <init>(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: java.util.Set toValueExtractorClasses(java.util.Set)>-><java.util.stream.Collectors: java.util.stream.Collector toSet()>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><com.alibaba.fastjson.JSONObject: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SetFromMap: int hashCode()>
<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType)>-><javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType,int,float)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><java.util.Hashtable$Enumerator: java.lang.Object nextElement()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.reflect.Field: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMeterBinderProvidersConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.OptionalValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.OptionalValueExtractor: void <init>()>
<com.baomidou.dynamic.datasource.DynamicDataSourceClassResolver: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.Parsed: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.SimpleTimeZone: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<sun.security.ssl.SignatureAndHashAlgorithm: java.lang.String[] getAlgorithmNames(java.util.Collection)>-><java.util.ArrayList: int size()>
<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.Provider: java.lang.Object implMerge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromParamType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.classmate.TypeBindings)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean lambda$assertNoDuplicateOperations$3(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><sun.reflect.annotation.TypeAnnotation: sun.reflect.annotation.TypeAnnotation$LocationInfo getLocationInfo()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.io.InvalidObjectException: void <init>(java.lang.String)>
<org.springframework.web.method.HandlerMethod$HandlerMethodParameter: void <init>(org.springframework.web.method.HandlerMethod,int)>-><org.springframework.web.method.HandlerMethod: java.lang.reflect.Method access$000(org.springframework.web.method.HandlerMethod)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.OffsetTime: int hashCode()>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.WeakCache$CacheValue: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaFrom: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><sun.reflect.misc.MethodUtil: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.catalina.valves.ValveBase: void startInternal()>-><org.apache.catalina.util.LifecycleBase: void setState(org.apache.catalina.LifecycleState)>
<sun.security.ssl.ProtocolList: java.util.ArrayList convert(java.lang.String[])>-><java.util.ArrayList: void <init>(int)>
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String lambda$encodeTemplate$1(java.nio.charset.Charset,java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents: java.lang.String encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONPObject: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeAnnotationConstraints(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.reflect.AnnotatedType getAnnotatedType()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder,org.springframework.boot.actuate.health.Health$1)>-><org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaSetters: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.p6spy.engine.spy.option.P6OptionsRepository$DelayedOptionChange: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<org.springframework.aop.framework.CglibAopProxy: boolean implementsInterface(java.lang.reflect.Method,java.util.Set)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><javax.management.ObjectInstance: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerObject(java.lang.String,java.lang.Object,javax.management.ObjectName)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder nonCascading()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.misc.Signal: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>
<sun.security.ssl.ProtocolList: void <init>(java.util.ArrayList)>-><java.util.ArrayList: int size()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><sun.net.idn.StringPrepDataReader: byte[] getUnicodeVersion()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>
<sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation$LocationInfo pushInner()>-><sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation$LocationInfo pushLocation(byte,short)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.ParsePosition: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><org.aspectj.weaver.tools.TraceFactory: boolean getBoolean(java.lang.String,boolean)>
<org.apache.catalina.core.ApplicationContext: void populateSessionTrackingModes()>-><java.util.RegularEnumSet: boolean add(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: boolean isEmpty()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaSetters: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><javax.management.openmbean.CompositeDataSupport: boolean containsKey(java.lang.String)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.MBeanInfo: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Method: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.csrf.CsrfLogoutHandler: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object resolveMultipleBeans(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>-><java.util.concurrent.CopyOnWriteArrayList: void sort(java.util.Comparator)>
<sun.security.ssl.JsseJce: boolean isEcAvailable()>-><sun.security.ssl.JsseJce$EcAvailability: boolean access$000()>
<register-finalize <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.PropertyPermission: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.validation.FieldError: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Proxy$Key1: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Hashtable$ValueCollection: int size()>
<java.security.AccessControlContext: void checkPermission2(java.security.Permission)>-><java.lang.Object: java.lang.Class getClass()>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.reflect.GenericDeclaration getGenericDeclaration()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>
<com.sun.jmx.mbeanserver.MBeanSupport: void postDeregister()>-><com.sun.jmx.mbeanserver.StandardMBeanSupport: void unregister()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.PropertyValue: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: int buildHashCode(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthEndpointReactiveWebExtensionConfiguration: void <init>()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean remove(javax.management.ObjectName,java.lang.ClassLoader)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<register-finalize <org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.DERPrintableString: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<javax.management.ObjectInstance: void <init>(javax.management.ObjectName,java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.Object: java.lang.Class getClass()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Parameter: int hashCode()>
<javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.AbstractList$Itr: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.http.client.support.InterceptingHttpAccessor: void setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)>-><org.springframework.http.client.support.HttpAccessor: void setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.geom.Rectangle2D: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap$1: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<org.aspectj.weaver.UnresolvedType: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forSignature(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: void setValue(java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>
<sun.reflect.annotation.TypeAnnotationParser: java.util.Map mapTypeAnnotations(sun.reflect.annotation.TypeAnnotation[])>-><sun.reflect.annotation.AnnotationType: java.lang.annotation.RetentionPolicy retention()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.io.ObjectStreamField: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: int size()>
<org.hibernate.validator.internal.engine.valueextraction.ReadOnlyMapPropertyKeyExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: int hashCode()>
<com.sun.jmx.mbeanserver.Introspector: javax.management.NotCompliantMBeanException throwException(java.lang.Class,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><com.sun.jmx.mbeanserver.NamedObject: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<sun.security.ssl.SSLSessionContextImpl$1: void <init>(sun.security.ssl.SSLSessionContextImpl)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsRegistrarConfiguration: void <init>(io.micrometer.core.instrument.MeterRegistry,java.util.Collection,java.util.Map)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromGenericType(com.fasterxml.classmate.util.ClassStack,com.fasterxml.classmate.GenericType,com.fasterxml.classmate.TypeBindings)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.Collections: java.util.Set singleton(java.lang.Object)>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><java.security.AccessController: java.security.AccessControlContext getContext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.TabularType: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.io.File: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Vector: java.util.Iterator iterator()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<sun.security.ssl.ProtocolList: void <init>(java.util.ArrayList)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.wuwenze.poi.pojo.ExcelMapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Field,boolean)>-><java.lang.invoke.MemberName: boolean isResolved()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: void <init>(java.lang.reflect.Field)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.FastList: boolean add(java.lang.Object)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<javax.el.Util$CacheKey: void <init>(java.lang.ClassLoader)>-><java.lang.Object: void <init>()>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.netty.util.concurrent.PromiseTask: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map normalize(java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.MessageFormat: int hashCode()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.springframework.core.task.SimpleAsyncTaskExecutor: void <init>(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.poi.xssf.streaming.SXSSFRow: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><java.net.IDN: boolean isAllASCII(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.Inet4Address: int hashCode()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: java.lang.Object run(java.security.PrivilegedAction)>-><org.hibernate.validator.internal.util.privilegedactions.GetDeclaredField: java.lang.Object run()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<org.springframework.security.web.access.DelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><org.springframework.util.Assert: void notEmpty(java.util.Map,java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Currency: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$EmptyList: int size()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.ZonedDateTime: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.LongArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.LongArrayValueExtractor: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<org.springframework.web.client.RestTemplate: void <init>(org.springframework.http.client.ClientHttpRequestFactory)>-><org.springframework.http.client.support.InterceptingHttpAccessor: void setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraints(java.lang.reflect.Member,java.lang.annotation.ElementType)>-><java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.reflect.Method: java.lang.String toString()>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decomposes(sun.security.ssl.CipherSuite$BulkCipher)>-><java.util.HashSet: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Enum: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.Provider$UString: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.Instant: int hashCode()>
<org.aspectj.weaver.ResolvedType$FieldGetter: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.catalina.core.StandardContextValve: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<org.aspectj.weaver.patterns.TypePattern: void <clinit>()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder annotatedObject(java.lang.reflect.Type,boolean,java.util.Map,java.util.Map)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Boolean: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1ApplicationSpecific: int hashCode()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.beans.factory.support.RootBeanDefinition getResolvedDecoratedDefinition(org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.beans.factory.support.RootBeanDefinition: org.springframework.beans.factory.config.BeanDefinitionHolder getDecoratedDefinition()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.Collections$UnmodifiableMap: void clear()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$Values: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander getModelAttributeParameterExpander()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.MethodParameter: int hashCode()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><io.netty.util.concurrent.PromiseTask: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.lang.System: long currentTimeMillis()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.MethodParameter: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void init()>-><org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$EnumMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$EnumMapping: java.lang.Enum fromNonNullOpenValue(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.commons.beanutils.converters.ConverterFacade: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundrySecurityService$1: void <init>()>-><org.springframework.core.ParameterizedTypeReference: void <init>()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><org.springframework.web.util.HierarchicalUriComponents: void verifyUriComponent(java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)>
<org.hibernate.validator.internal.engine.constraintvalidation.HibernateConstraintValidatorInitializationContextImpl: int createHashCode()>-><java.lang.System: int identityHashCode(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<java.net.IDN: void <clinit>()>-><java.io.PushbackInputStream: void close()>
<sun.awt.DebugSettings: java.lang.String toString()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.Point: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<org.springframework.core.SimpleAliasRegistry: boolean hasAlias(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.SimpleType: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaProxy: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SingletonList: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.convert.TypeDescriptor: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: java.lang.reflect.AnnotatedType getAnnotatedType()>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.springframework.http.HttpHeaders: java.lang.Object get(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration: void <init>()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.util.Assert: void isTrue(boolean,java.util.function.Supplier)>
<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String access$000(java.lang.String,java.lang.Object[])>-><com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaFrom: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>
<sun.reflect.annotation.TypeAnnotationParser: java.util.Map mapTypeAnnotations(sun.reflect.annotation.TypeAnnotation[])>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.Introspector: javax.management.DynamicMBean makeDynamicMBean(java.lang.Object)>-><com.sun.jmx.mbeanserver.Introspector: java.lang.Class getMXBeanInterface(java.lang.Class)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType[] buildAnnotatedTypes(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><sun.reflect.annotation.TypeAnnotation$TypeAnnotationTargetInfo: sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget getTarget()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.ResolvableType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerApplicationScope(javax.servlet.ServletContext)>-><org.springframework.web.context.support.ServletContextScope: void <init>(javax.servlet.ServletContext)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void addClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository getInstantiatorCLR()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder nonCascading()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerOpaqueTokenConfiguration$OpaqueTokenIntrospectionClientConfiguration: void <init>()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager createDefaultAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.access.vote.AffirmativeBased: void <init>(java.util.List)>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.google.common.collect.ImmutableMap: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Type: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: boolean isJavaFxInClasspath()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><org.apache.catalina.core.ApplicationContext: void populateSessionTrackingModes()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String getAttribute()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.BaseLocale: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.method.ControllerAdviceBean: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>-><java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.Object invokeM2(com.sun.jmx.mbeanserver.ConvertingMethod,java.lang.Object,java.lang.Object[],java.lang.Object)>-><com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(com.sun.jmx.mbeanserver.MXBeanLookup,java.lang.Object,java.lang.Object[])>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.ssl.SecureKey: int hashCode()>
<io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.context.support.AbstractApplicationContext: boolean isTypeMatch(java.lang.String,org.springframework.core.ResolvableType)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.HashSet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellFill: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext makeResourceContextFor(java.lang.Object,javax.management.ObjectName)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.text.normalizer.UCharacter: int getCodePoint(char,char)>-><sun.text.normalizer.UTF16: boolean isTrailSurrogate(char)>
<com.alibaba.fastjson.JSONObject: void clear()>-><com.alibaba.fastjson.JSONObject: void clear()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$Values: int size()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.nio.ByteBuffer: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<java.util.zip.ZipOutputStream: void writeInt(long)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object castToJavaBean(java.util.Map,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: boolean lambda$getRuntimeCompliantValueExtractors$3(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Vector: int size()>
<org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>-><org.apache.catalina.core.ContainerBase: java.lang.String getName()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.DataFormatReaders: void <init>(java.util.Collection)>-><java.util.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])>
<sun.security.util.MemoryCache: void <init>(boolean,int,int)>-><sun.security.util.Cache: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.base.CharMatcher: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractSet: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.MutablePropertyValues: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map normalize(java.util.Map)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.Class getErasedReferenceType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>
<org.jboss.logging.Slf4jLocationAwareLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.AbstractQueue: boolean addAll(java.util.Collection)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$Values: java.util.Iterator iterator()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.NoOpReactiveSessionConfiguration: void <init>()>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><org.aspectj.weaver.tools.TraceFactory: boolean getBoolean(java.lang.String,boolean)>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void removeStale()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$WeakKeyReference: int keyHash()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.SingletonImmutableList: int size()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><java.lang.Class: java.lang.Class getComponentType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.MapKeyExtractor: void <init>()>-><java.lang.Object: void <init>()>
<sun.security.ssl.JsseJce: java.security.AlgorithmParameters getAlgorithmParameters(java.lang.String)>-><java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)>
<javax.management.openmbean.ArrayType: boolean isAssignableFrom(javax.management.openmbean.OpenType)>-><javax.management.openmbean.OpenType: boolean isAssignableFrom(javax.management.openmbean.OpenType)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.io.ClassPathResource: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: javax.validation.metadata.ValidateUnwrappedValue getValueUnwrapping()>
<java.util.stream.Streams$ConcatSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: java.util.Spliterator trySplit()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.HttpHeaders: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Locale: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Introspector: javax.management.DynamicMBean makeDynamicMBean(java.lang.Object)>-><com.sun.jmx.mbeanserver.StandardMBeanSupport: void <init>(java.lang.Object,java.lang.Class)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.Class getContainerType()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.awt.geom.Curve: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.SimpleDateFormat: int hashCode()>
<com.fasterxml.classmate.types.ResolvedObjectType: java.util.List getImplementedInterfaces()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ResolvedTypeKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings: org.springframework.boot.web.server.MimeMappings unmodifiableMappings(org.springframework.boot.web.server.MimeMappings)>-><org.springframework.boot.web.server.MimeMappings: void <init>(org.springframework.boot.web.server.MimeMappings,boolean)>
<javax.management.openmbean.CompositeDataSupport: boolean containsKey(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.aspectj.weaver.World: void <clinit>()>-><java.io.PrintStream: void println(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.util.BitSet: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.AVA: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>
<java.lang.reflect.Parameter: java.lang.annotation.Annotation[] getAnnotations()>-><java.lang.reflect.Parameter: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.factory.config.BeanExpressionContext: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: int rehash()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry[] newArray(int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.OptionalInt: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: int hashCode()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><com.google.common.collect.RegularImmutableMap$KeySet: boolean contains(java.lang.Object)>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void addClassIfPresent(java.util.Collection,java.lang.String)>-><org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int compareTo(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: void <init>()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.RDN: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: void <init>(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.WeakHashMap$KeySet: int size()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.YearMonth: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void createWebServer()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.ServletContextInitializer getSelfInitializer()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: int hashCode()>
<org.aspectj.weaver.tools.TraceFactory: boolean getBoolean(java.lang.String,boolean)>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameter(java.lang.reflect.Type[])>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy()>
<com.fasterxml.classmate.TypeResolver: void <init>(com.fasterxml.classmate.util.ResolvedTypeCache)>-><java.lang.Object: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.lang.String lambda$processMap$0(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$1Adapter: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.validation.BindException: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.LocalDate: int hashCode()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite: void <clinit>()>-><java.util.HashMap: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$StringEntrySet: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<org.springframework.boot.actuate.health.Status: void <clinit>()>-><org.springframework.boot.actuate.health.Status: void <init>(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.poi.openxml4j.opc.PackagePart: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map normalize(java.util.Map)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.util.LifecycleBase: void stop()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(int,int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.IdentityHashMap: boolean isEmpty()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Vector: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.font.AttributeValues: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.zip.ZipEntry: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.math.BigInteger: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Enum: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.Permission: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedRecursiveType: void setReference(com.fasterxml.classmate.ResolvedType)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger wrapLogger(org.slf4j.Logger)>-><io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void <init>(org.slf4j.spi.LocationAwareLogger)>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><java.lang.StringBuilder: void <init>()>
<sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.BeanConfiguration: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.Class,java.util.Set,java.util.List,org.hibernate.validator.spi.group.DefaultGroupSequenceProvider)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.ProxyLeakTask: void <clinit>()>-><com.zaxxer.hikari.pool.ProxyLeakTask$1: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$1: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>-><com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.management.ObjectName: boolean isPropertyValuePattern(java.lang.String)>-><javax.management.ObjectName$Property: java.lang.String getKeyString(java.lang.String)>
<com.alibaba.fastjson.JSONObject: java.util.Set entrySet()>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.Year: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areCrossParameterConstraintsIgnoredFor(java.lang.reflect.Member)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.util.TreeMap: java.util.Set keySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer: void parseArray(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.util.Collection)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$6: void <init>()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>()>
<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.privilegedactions.GetDeclaredFields: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Field,boolean)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.LegacyHealthEndpointCompatibilityConfiguration$LegacyReactiveHealthEndpointCompatibilityConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<javax.management.MBeanParameterInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>-><javax.management.MBeanParameterInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,javax.management.Descriptor)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><java.lang.Object: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.SimpleType: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.MBeanNotificationInfo: int hashCode()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><javax.management.ObjectName: boolean isPattern()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>
<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: int length()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areCrossParameterConstraintsIgnoredFor(java.lang.reflect.Member)>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areMemberConstraintsIgnoredFor(java.lang.reflect.Member)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<java.util.Vector: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: java.lang.Object _throwWrapped(java.lang.Exception,java.lang.String,java.lang.Object)>-><javax.management.RuntimeMBeanException: java.lang.Throwable getCause()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: javax.el.ExpressionFactory buildExpressionFactory()>-><org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: java.lang.Object run(java.security.PrivilegedAction)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeSet: int size()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.Class: java.lang.Object newInstance()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(javax.validation.groups.ConvertGroup,javax.validation.groups.ConvertGroup$List)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Hashtable: java.util.Set entrySet()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.TreeMap$EntrySet: boolean remove(java.lang.Object)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.HashSet: java.util.Iterator iterator()>
<java.net.IDN: void <clinit>()>-><sun.net.idn.StringPrep: void <init>(java.io.InputStream)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.Collections: java.util.List emptyList()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.AbstractMap: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.type.ReferenceType withContentTypeHandler(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.regex.Pattern: java.lang.String toString()>
<org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration: void <init>(org.springframework.core.env.Environment)>-><org.springframework.web.context.support.StandardServletEnvironment: void <init>()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set filterListOfObjectInstances(java.util.Set,javax.management.QueryExp)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Absent: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent: void <init>(org.springframework.boot.web.server.WebServer,org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext)>-><org.springframework.boot.web.context.WebServerInitializedEvent: void <init>(org.springframework.boot.web.server.WebServer)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Period: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.validation.BindException: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<org.apache.catalina.valves.ValveBase: void initInternal()>-><org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log getLogger()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.aspectj.weaver.ResolvedPointcutDefinition: void <init>(org.aspectj.weaver.UnresolvedType,int,java.lang.String,org.aspectj.weaver.UnresolvedType[],org.aspectj.weaver.UnresolvedType,org.aspectj.weaver.patterns.Pointcut)>-><org.aspectj.weaver.ResolvedMemberImpl: void <init>(org.aspectj.weaver.MemberKind,org.aspectj.weaver.UnresolvedType,int,org.aspectj.weaver.UnresolvedType,java.lang.String,org.aspectj.weaver.UnresolvedType[])>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.Provider$UString: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><javax.security.auth.Subject$SecureSet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.servlet.HandlerInterceptor)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.validation.ObjectError: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.LinkedHashMap: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$ServletConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Character$Subset: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<reactor.core.scheduler.ParallelScheduler: void <clinit>()>-><java.util.concurrent.atomic.AtomicLong: void <init>()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><com.google.common.collect.ImmutableCollection: boolean remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$ExternalData: int hashCode()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.util.List,java.util.Set,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.dom4j.DocumentException: void printStackTrace(java.io.PrintStream)>-><org.aspectj.weaver.BCException: void printStackTrace(java.io.PrintStream)>
<sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String,java.lang.String)>-><sun.security.ssl.Debug: boolean isOn(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName preRegister(javax.management.DynamicMBean,javax.management.MBeanServer,javax.management.ObjectName)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.TruePointcut: java.lang.String toString()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.io.InputStream lambda$newBundle$0(boolean,java.lang.ClassLoader,java.lang.String)>-><java.util.ResourceBundle$RBClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.x509.Extension: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<sun.security.ssl.CipherSuite: void <clinit>()>-><sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,boolean)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.google.common.collect.ImmutableMap: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>-><java.lang.Object: void <init>()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.AbstractMergedAnnotation: java.util.Optional getDefaultValue(java.lang.String)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.util.Optional getDefaultValue(java.lang.String,java.lang.Class)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.xssf.streaming.SXSSFRow: int hashCode()>
<sun.security.ssl.EngineOutputRecord: int recordSize(byte)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: java.lang.reflect.Type getType()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getResource(javax.management.DynamicMBean)>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void beforeInit()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.ImmutableMapEntrySet: int hashCode()>
<java.io.DataInputStream: int read(byte[])>-><java.io.SequenceInputStream: int read(byte[],int,int)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireBean(java.lang.Object)>-><org.springframework.beans.factory.support.AbstractBeanFactory: void initBeanWrapper(org.springframework.beans.BeanWrapper)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.CollectionType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object remove(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>
<org.springframework.web.util.HierarchicalUriComponents$Type$7: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.context.event.AbstractApplicationEventMulticaster: java.util.Collection getApplicationListeners(org.springframework.context.ApplicationEvent,org.springframework.core.ResolvableType)>-><org.springframework.boot.web.context.WebServerInitializedEvent: java.lang.Object getSource()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.collect.SingletonImmutableList: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.security.ssl.SignatureAndHashAlgorithm: void <clinit>()>-><java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.UUID: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.OptionalValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<springfox.documentation.spring.web.DescriptionResolver: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object toOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: int hashCode()>
<org.aspectj.bridge.MessageUtil$6: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromArrayType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.GenericArrayType,com.fasterxml.classmate.TypeBindings)>-><org.hibernate.validator.internal.util.TypeHelper$1: java.lang.reflect.Type getGenericComponentType()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><org.springframework.http.HttpMethod: org.springframework.http.HttpMethod resolve(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.http.ReadOnlyHttpHeaders: java.util.Set entrySet()>
<org.springframework.boot.validation.MessageInterpolatorFactory: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.XSSFName: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<ch.qos.logback.core.util.ContextUtil: void addProperties(java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.ChoiceFormat: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.google.common.base.Absent: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>-><org.hibernate.validator.internal.util.Contracts: void assertNotNull(java.lang.Object,java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.Class getErasedReferenceType(java.lang.reflect.Type)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>-><java.security.Security: java.security.Provider getProvider(java.lang.String)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><org.springframework.util.StringUtils: java.lang.String arrayToCommaDelimitedString(java.lang.Object[])>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.wuwenze.poi.pojo.ExcelProperty: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Optional: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariables: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$StringEntry: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeAnnotationConstraints(java.lang.reflect.Executable,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>
<sun.net.idn.StringPrep: char getCodePointValue(int)>-><sun.text.normalizer.CharTrie: char getCodePointValue(int)>
<sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>-><java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.context.annotation.ClassPathBeanDefinitionScanner: boolean checkCandidate(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.Period: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromVariable(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.jackson.databind.type.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.reflect.Type[] getBounds()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void lambda$new$0(org.springframework.security.core.userdetails.UserDetails)>-><org.springframework.security.authentication.DisabledException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.Font: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.Collections$EmptySet: boolean contains(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MXBeanLookup: void setLookup(com.sun.jmx.mbeanserver.MXBeanLookup)>-><java.lang.ThreadLocal: void set(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.springframework.http.HttpHeaders: java.util.Collection values()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><javax.management.ObjectName: boolean isDomainPattern()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isArray(java.lang.reflect.Type)>-><java.lang.Class: boolean isArray()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.ResolvableType: boolean hasUnresolvableGenerics()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String toString()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree createConstraintTree(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<org.hibernate.validator.internal.engine.ValidationContext$ValidatorScopedContext: void <init>(org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.CharArrayValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean contains(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration: void <init>()>
<sun.security.ssl.SSLSessionContextImpl: int getDefaultCacheLimit()>-><java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1TaggedObject: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERBMPString: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getFieldMetaData(java.lang.Class)>-><java.lang.reflect.Field: boolean isSynthetic()>
<org.springframework.web.servlet.view.ContentNegotiatingViewResolver$1: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.Map)>-><java.util.HashSet: void <init>(java.util.Collection)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<sun.security.ssl.ProtocolList: java.util.ArrayList convert(java.lang.String[])>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.imageio.ImageTypeSpecifier$Interleaved: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: int hashCode()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Object: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterNameReader: void <init>()>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryMBeansImpl(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.awt.Color: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.HashMap$KeySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DecimalStyle: java.lang.String toString()>
<org.apache.catalina.LifecycleException: void <init>(java.lang.String)>-><java.lang.Exception: void <init>(java.lang.String)>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLContextImpl$AbstractTLSContext: void <clinit>()>-><sun.security.ssl.SunJSSE: boolean isFIPS()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<sun.net.idn.StringPrep: sun.text.normalizer.VersionInfo getVersionInfo(byte[])>-><sun.text.normalizer.VersionInfo: sun.text.normalizer.VersionInfo getInstance(int,int,int,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.type.CollectionType: java.lang.String toString()>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void putAll(java.util.Map)>-><java.util.HashMap: java.util.Set entrySet()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeUseConstraints(java.lang.reflect.Member,java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.Type)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.context.ShutdownEndpointAutoConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.AllPermission: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.http.ResponseEntity: void <init>(org.springframework.http.HttpStatus)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.Period: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$KeySet: int size()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.usermodel.ExcelStyleDateFormatter: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<java.security.KeyPairGenerator: void <init>(java.lang.String)>-><java.security.KeyPairGeneratorSpi: void <init>()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromVariable(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.classmate.TypeBindings)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.Type[] getBounds()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.core.ResolvableType: org.springframework.core.ResolvableType resolveVariable(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Field: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.font.Decoration$DecorationImpl: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.Instant: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERVideotexString: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: int hashCode()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<java.util.BitSet: java.lang.Object clone()>-><java.lang.InternalError: void <init>(java.lang.Throwable)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.EnumMap$KeySet: int size()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERNumericString: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postRegister(javax.management.ObjectName,javax.management.DynamicMBean,boolean,boolean)>-><javax.management.RuntimeMBeanException: void <init>(java.lang.RuntimeException,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.util.CellRangeAddressBase: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.awt.AppContext: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.SubList: int size()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.sql.Time: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree createConstraintTree(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.reflect.Type getValidatedValueType()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.ResolvableType: java.lang.String toString()>
<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.Debug: void println(java.lang.String)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder getCascadingMetaData(java.lang.reflect.Type,java.lang.reflect.AnnotatedElement,java.util.Map)>
<org.apache.http.HttpHost: org.apache.http.HttpHost create(java.lang.String)>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setAutowireCandidateResolver(org.springframework.beans.factory.support.AutowireCandidateResolver)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.commons.beanutils.MethodUtils$MethodDescriptor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<com.fasterxml.classmate.util.ResolvedTypeKey: void <init>(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Object: void <init>()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><io.netty.util.internal.RecyclableArrayList: boolean add(java.lang.Object)>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType[] buildAnnotatedTypes(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><java.util.ArrayList: int size()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<sun.security.ssl.SSLContextImpl: void <clinit>()>-><sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object toOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.DERUTF8String: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><org.hibernate.validator.internal.util.TypeVariables: boolean isInternal(java.lang.reflect.TypeVariable)>
<org.springframework.core.MethodParameter: java.lang.annotation.Annotation getParameterAnnotation(java.lang.Class)>-><org.springframework.core.MethodParameter: java.lang.annotation.Annotation[] getParameterAnnotations()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.AbstractList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.collect.SingletonImmutableList: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.calendar.CalendarDate: int hashCode()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.commons.beanutils.converters.ConverterFacade: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.memory.UserAttribute: void setAuthoritiesAsString(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<sun.security.ssl.CipherSuite$BulkCipher: boolean isUnlimited(int,java.lang.String)>-><javax.crypto.Cipher: int getMaxAllowedKeyLength(java.lang.String)>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.util.logging.Logger: void log(java.util.logging.LogRecord)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.WeakHashMap$Entry: int hashCode()>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.aspectj.weaver.tools.AbstractTrace: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>-><sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.util.EventListener getListener()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanTrustPermission(java.lang.Class)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>
<javax.net.ssl.SNIHostName: void <init>(java.lang.String)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean isEmpty()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Method,boolean)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SynchronizedSet: int hashCode()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FormatCache$MultipartKey: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.reflect.ParameterizedType,com.alibaba.fastjson.parser.ParserConfig)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.ObjectName: java.lang.String getCanonicalKeyPropertyListString()>
<sun.security.ssl.SSLSessionContextImpl: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.StringBuffer: java.lang.String toString()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.util.List,java.util.Set,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><org.hibernate.validator.internal.util.ReflectionHelper: boolean isGetterMethod(java.lang.reflect.Executable)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$UnmodifiableCollection: int size()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.ThreadGroup: java.lang.String toString()>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.validation.ObjectError: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.poi.ss.util.CellRangeAddressBase: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: void destroyInternal()>-><org.apache.catalina.util.LifecycleMBeanBase: void unregister(javax.management.ObjectName)>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.property.bean.AccessorsProvider getAccessorsProvider()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType resolve(java.lang.reflect.Type,java.lang.reflect.Type[])>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<javax.net.ssl.SNIHostName: void <init>(java.lang.String)>-><javax.net.ssl.SNIServerName: void <init>(int,byte[])>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.ImmutableList: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: com.fasterxml.classmate.ResolvedType getParentClass()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.p6spy.engine.logging.Category: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext$1: void done()>
<java.security.Provider: java.lang.Object implComputeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.Provider: boolean checkLegacy(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><javax.management.openmbean.TabularType: boolean isValue(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.temporal.WeekFields: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.p6spy.engine.spy.option.P6OptionsRepository$DelayedOptionChange: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<org.springframework.beans.factory.config.BeanDefinitionHolder: boolean matchesName(java.lang.String)>-><org.springframework.beans.factory.BeanFactoryUtils: java.lang.String transformedBeanName(java.lang.String)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.hibernate.validator.internal.engine.valueextraction.SetPropertyValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.DERUniversalString: int hashCode()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type$9: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.util.DerValue: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><java.text.ChoiceFormat: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull()>-><org.springframework.boot.context.properties.PropertyMapper$Source: void <init>(java.util.function.Supplier,java.util.function.Predicate)>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Executable,int)>-><java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String getCanonicalName()>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><sun.text.normalizer.UCharacter: int getDirection(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.web.ResourceProperties)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetadata(java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable[])>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<sun.security.ssl.SSLContextImpl$AbstractTLSContext: void <clinit>()>-><sun.security.ssl.ProtocolList: void <init>(java.lang.String[])>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(java.lang.String[])>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void refresh()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.net.IDN: void <clinit>()>-><java.io.FileInputStream: void close()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicLongArray: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeySet: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isHealthEndpointExtension(java.lang.Object)>-><java.lang.Boolean: boolean booleanValue()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type extractConstraintValidatorTypeArgumentType(java.lang.Class,int)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.web.util.HierarchicalUriComponents$Type$6: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.aspectj.weaver.World: void <clinit>()>-><java.lang.Throwable: void printStackTrace()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><springfox.documentation.spring.web.plugins.DefaultConfiguration: void <init>(springfox.documentation.spi.service.contexts.Defaults,com.fasterxml.classmate.TypeResolver,javax.servlet.ServletContext)>
<org.aspectj.weaver.RuntimeVersion: void <init>(java.lang.String,int,java.lang.String[])>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.TreeMap$KeySet: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.security.Provider: java.lang.Object remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areParameterConstraintsIgnoredFor(java.lang.reflect.Member,int)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ObjectArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Currency: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Class getDeclaringClass(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.reflect.GenericDeclaration getGenericDeclaration()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackagePartName: int hashCode()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromVariable(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.jackson.databind.type.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String getName()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.security.Provider: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.PathSanitizer: void <init>()>
<sun.security.ssl.Debug: boolean isOn(java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<org.hibernate.validator.internal.engine.constraintvalidation.SimpleConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.hibernate.validator.internal.util.ExecutableHelper: void <init>(org.hibernate.validator.internal.util.TypeResolutionHelper)>-><org.hibernate.validator.internal.util.TypeResolutionHelper: com.fasterxml.classmate.TypeResolver getTypeResolver()>
<org.springframework.aop.framework.CglibAopProxy: void doValidateClass(java.lang.Class,java.lang.ClassLoader,java.util.Set)>-><java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptySet: int size()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.SubList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.LongNode: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.JumboEnumSet: boolean isEmpty()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<org.springframework.security.web.savedrequest.SavedRequestAwareWrapper: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.imageio.ImageTypeSpecifier: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.http.pool.RouteSpecificPool: java.lang.String toString()>
<sun.security.ssl.SSLSessionImpl: void <clinit>()>-><sun.security.ssl.SSLSessionImpl: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.io.File: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.text.ChoiceFormat: int hashCode()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: void <init>(java.lang.reflect.Field)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.String getPropertyName(java.lang.reflect.Member)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.AttributeEntry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.LambdaForm$Name: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher[])>-><org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Collection)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.AnnotationConfigUtils: org.springframework.beans.factory.support.DefaultListableBeanFactory unwrapDefaultListableBeanFactory(org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory getDefaultListableBeanFactory()>
<java.util.logging.Handler: void reportError(java.lang.String,java.lang.Exception,int)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><javax.management.openmbean.SimpleType: boolean isValue(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: boolean removeReference(javax.management.ObjectName,java.lang.Object)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><javax.management.RuntimeErrorException: void <init>(java.lang.Error,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void sendNotification(java.lang.String,javax.management.ObjectName)>-><javax.management.MBeanServerNotification: void <init>(java.lang.String,java.lang.Object,long,javax.management.ObjectName)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.LocalDateTime: int hashCode()>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,int,boolean)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERExternal: int hashCode()>
<com.fasterxml.classmate.ResolvedType: java.util.List getTypeParameters()>-><com.fasterxml.classmate.TypeBindings: java.util.List getTypeParameters()>
<register-finalize <org.springframework.boot.autoconfigure.http.HttpProperties$Encoding$Type: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><javax.security.auth.Subject$SecureSet: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.JSONObject: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation$LocationInfo pushTypeArg(short)>-><sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation$LocationInfo pushLocation(byte,short)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.format.DecimalStyle: int hashCode()>
<org.springframework.boot.actuate.health.Health$Builder: void <init>(org.springframework.boot.actuate.health.Status)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$EmptyMap: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.Type getComponentType()>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: java.lang.reflect.Type getType()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<javax.el.Util: java.lang.ClassLoader getContextClassLoader()>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<org.jboss.logging.Log4j2Logger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.apache.logging.log4j.message.AbstractMessageFactory: org.apache.logging.log4j.message.Message newMessage(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void start()>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellFill: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<com.alibaba.fastjson.util.TypeUtils: java.util.Collection createCollection(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$1: boolean hasNext()>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><org.apache.tomcat.util.modeler.ManagedBean: void addAttribute(org.apache.tomcat.util.modeler.AttributeInfo)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<org.springframework.web.util.HierarchicalUriComponents$Type$8: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanOperationInfo: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Long: long parseLong(java.lang.String)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsManager: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.jar.Attributes: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void <init>(java.lang.String)>-><com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>
<java.util.Collections$SynchronizedMap: void clear()>-><javax.management.openmbean.TabularDataSupport: void clear()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.BinaryNode: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<javax.el.Util$CacheValue: void <init>()>-><java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isQualifier(java.lang.Class)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource: void <clinit>()>-><java.util.Collections: java.util.List emptyList()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><java.io.BufferedReader: java.lang.String readLine()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.lang.reflect.Method: java.lang.reflect.AnnotatedType getAnnotatedReturnType()>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: void refresh()>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map normalize(java.util.Map)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer apply(org.springframework.security.config.annotation.SecurityConfigurer)>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void add(org.springframework.security.config.annotation.SecurityConfigurer)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><org.springframework.http.server.DefaultPathContainer$DefaultSeparator: void <init>(char,java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object)>
<javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$4: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.ss.format.CellFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.OptionalDouble: java.lang.String toString()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.springframework.web.util.HierarchicalUriComponents$Type$4: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.Set asSet(java.lang.Object[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.UnresolvedPermission: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.MethodParameter: java.lang.annotation.Annotation[] getMethodAnnotations()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.util.context.ContextN: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.IdentityHashMap: void clear()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.expression.TypedValue: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<java.util.Comparators$NullComparator: void <init>(boolean,java.util.Comparator)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.Year: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<javax.net.ssl.SNIHostName: void <init>(java.lang.String)>-><javax.net.ssl.SNIHostName: void checkHostName()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiDocumentationScanner getApiDocumentationScanner()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration: void <init>()>
<com.fasterxml.classmate.util.ClassStack: void resolveSelfReferences(com.fasterxml.classmate.ResolvedType)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.zaxxer.hikari.pool.ProxyConnection: void closeStatements()>-><com.zaxxer.hikari.pool.ProxyLeakTask: void cancel()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void sendNotification(java.lang.String,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.util.List,java.util.Set,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><java.util.Collections$EmptyList: int size()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: boolean determineAvailabilityOfResourceBundleControl()>-><org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: java.lang.Object run(java.security.PrivilegedAction)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.nio.ByteBuffer: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Optional: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.springframework.boot.actuate.metrics.AutoTimer: io.micrometer.core.instrument.Timer$Builder lambda$builder$1(java.lang.String)>-><io.micrometer.core.instrument.Timer: io.micrometer.core.instrument.Timer$Builder builder(java.lang.String)>
<com.zaxxer.hikari.pool.ProxyLeakTask$1: void <init>()>-><com.zaxxer.hikari.pool.ProxyLeakTask: void <init>(com.zaxxer.hikari.pool.ProxyLeakTask$1)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Parameter: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Boolean: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.juli.logging.DirectJDKLog: boolean isTraceEnabled()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.DerValue: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.MonthDay: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ReadOnlySetPropertyValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: int hashCode()>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.util.LinkedHashMap: void clear()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardPipeline: void <init>(org.apache.catalina.Container)>-><org.apache.catalina.util.LifecycleBase: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.beans.factory.BeanFactory getBeanFactory()>
<org.dom4j.io.SAXHelper: org.xml.sax.XMLReader createXMLReaderViaJAXP(boolean,boolean)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.x509.AVA: int hashCode()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.locale.Extension: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor access$500(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><java.beans.PropertyEditorSupport: void setValue(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<org.springframework.context.support.StaticMessageSource: void <init>()>-><java.util.HashMap: void <init>()>
<sun.net.idn.StringPrep$StringPrepTrieImpl: void <init>(sun.net.idn.StringPrep$1)>-><sun.net.idn.StringPrep$StringPrepTrieImpl: void <init>()>
<sun.security.ssl.Debug: boolean isOn(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.Vector: boolean addAll(java.util.Collection)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.Util: java.lang.Object cast(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.StringBuilder: int length()>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.catalina.util.LifecycleBase: org.apache.catalina.LifecycleState getState()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor,org.springframework.beans.factory.support.AutowireCandidateResolver)>-><org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>
<org.springframework.context.support.AbstractApplicationContext: void initMessageSource()>-><org.springframework.context.support.AbstractMessageSource: void setParentMessageSource(org.springframework.context.MessageSource)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.OptionalDouble: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.FilePermission: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.io.ObjectStreamClass$FieldReflectorKey: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: int hashCode()>
<sun.security.ssl.JsseJce: java.security.SecureRandom getSecureRandom()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.lang.Object: java.lang.Class getClass()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: int hashCode()>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType[] buildAnnotatedTypes(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><java.util.ArrayList: void <init>(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>
<sun.security.ssl.Authenticator: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.misc.Signal: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: int hashCode()>
<com.alibaba.fastjson.serializer.MiscCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: boolean isRegistered(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>
<sun.security.ssl.SSLSessionImpl: void <init>(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection,sun.security.ssl.SessionId,java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.lang.Object,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(javax.validation.groups.ConvertGroup,javax.validation.groups.ConvertGroup$List)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isHealthEndpointExtension(java.lang.Object)>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void <init>(javax.servlet.Servlet,java.lang.String[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Integer: java.lang.String toString()>
<org.aspectj.weaver.WeaverMessages: void <clinit>()>-><java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.OptionalDoubleValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.OptionalDoubleValueExtractor: void <init>()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><java.util.stream.Collectors: java.util.stream.Collector toSet()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Executable,int)>-><java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.apache.catalina.core.StandardPipeline: org.apache.catalina.Valve[] getValves()>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.hibernate.validator.internal.engine.valueextraction.LongArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.reactive.WebFluxMetricsAutoConfiguration: void <init>(org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties)>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.font.Decoration$DecorationImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap$EntryIterator$Entry: int hashCode()>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: void <init>(org.hibernate.validator.internal.metadata.core.ConstraintHelper,org.hibernate.validator.internal.util.ExecutableHelper,org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator,java.util.List,org.hibernate.validator.internal.engine.MethodValidationConfiguration)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.ArrayList newArrayList()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String toString()>
<org.springframework.context.support.AbstractApplicationContext: void refresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onRefresh()>
<org.hibernate.validator.internal.engine.ValidationContext$ValidatorScopedContext: void <init>(org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: org.hibernate.validator.internal.util.ExecutableParameterNameProvider getParameterNameProvider()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.awt.AppContext: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableMap: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>-><javax.management.RuntimeErrorException: java.lang.Throwable getCause()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.config.ConstructorArgumentValues: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: void <init>(java.lang.Object,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry,java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable: java.util.Set entrySet()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: void <init>(org.springframework.boot.web.servlet.ServletContextInitializerBeans$1)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.plugins.DocumentationPluginsManager: void <init>()>
<sun.security.ssl.JsseJce: java.security.Signature getSignature(java.lang.String)>-><java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.wuwenze.poi.pojo.ExcelMapping: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions getAnnotationProcessingOptionsFromNonDefaultProviders()>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions getAnnotationProcessingOptions()>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$UnmodifiableMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<java.io.DataOutputStream: void writeShort(int)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(int)>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.util.List,java.util.Set,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.List toImmutableList(java.util.List)>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.SocketPermission: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ShortArrayValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<reactor.core.scheduler.Schedulers: void <clinit>()>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.management.openmbean.TabularType: javax.management.openmbean.CompositeType getRowType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$NotPredicate: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Date: java.lang.String toString()>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: void setResourceLoader(org.springframework.core.io.ResourceLoader)>-><org.springframework.context.support.GenericApplicationContext: java.lang.ClassLoader getClassLoader()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.IdentityHashMap$EntrySet: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.wuwenze.poi.pojo.ExcelMapping: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.EnumMap$1: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.AbstractCollection: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean isExtensionExposed(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$ExtensionBean)>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isExtensionExposed(java.lang.Object)>
<org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanSupport: void registerFailed()>-><com.sun.jmx.mbeanserver.MXBeanSupport: void unregister()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String safeGetClassName(javax.management.DynamicMBean)>
<sun.security.ssl.ProtocolVersion: sun.security.ssl.ProtocolVersion valueOf(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object key()>-><java.lang.ref.SoftReference: java.lang.Object get()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.util.FieldInfo: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Hashtable$EntrySet: boolean remove(java.lang.Object)>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.RenderingHints$Key: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.io.FileInputStream: void <init>(java.io.File)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>
<org.springframework.context.support.StaticApplicationContext: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.StaticMessageSource: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isWildcardTypeAssignable(java.lang.reflect.WildcardType,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void <init>(java.lang.String)>-><com.zaxxer.hikari.HikariConfig: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.nio.ByteBuffer: java.lang.String toString()>
<javax.management.ObjectName: java.lang.String getCanonicalKeyPropertyListString()>-><java.lang.String: int length()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<java.lang.reflect.Parameter: java.lang.reflect.AnnotatedType getAnnotatedType()>-><java.lang.reflect.Executable: java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.DerValue: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><javax.management.MBeanServerFactory: java.util.ArrayList findMBeanServer(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Proxy$KeyX: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Set: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry: javax.management.MBeanServer getMBeanServer()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<org.jboss.logging.JBossLogManagerLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.jboss.logging.JBossLogManagerLogger: java.util.logging.Level translate(org.jboss.logging.Logger$Level)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object castToJavaBean(java.util.Map,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.ObjectInstance: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areReturnValueConstraintsIgnoredFor(java.lang.reflect.Member)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignableToWildcardType(java.lang.Class,java.lang.reflect.WildcardType)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.font.TransformAttribute: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.net.URI: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1ApplicationSpecific: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.LocalDate: java.lang.String toString()>
<org.aspectj.weaver.patterns.TypePattern: void <clinit>()>-><org.aspectj.weaver.patterns.AnyTypePattern: void <init>()>
<com.sun.jmx.remote.util.ClassLogger: void finest(java.lang.String,java.lang.Throwable)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.util.ArrayList: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$JdkDynamicAutoProxyConfiguration: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.ResourceBundle$CacheKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object toOpenValue(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: void refresh()>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void prepareRefresh()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.OffsetTime: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireBean(java.lang.Object)>
<org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean containsKey(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.ss.format.CellNumberStringMod: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: int size()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.AnnotatedParameterizedType getValueExtractorDefinition(java.lang.Class)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type[] getResolvedInterfaces(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.Contracts: void assertNotNull(java.lang.Object,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Hashtable: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Field)>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.Collections$SingletonSet: boolean contains(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<javax.crypto.KeyAgreement: void <init>(java.security.Provider$Service,java.util.Iterator,java.lang.String)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties: java.lang.String lambda$setPath$0(java.io.File)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Hashtable$Entry: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.ImmutableMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext: void <clinit>()>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext$1: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanTrustPermission(java.lang.Class)>-><javax.management.MBeanTrustPermission: void <init>(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType getParentClass()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices: void <init>(java.lang.String,org.springframework.security.core.userdetails.UserDetailsService)>-><org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices: void <init>(java.lang.String,org.springframework.security.core.userdetails.UserDetailsService)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><java.lang.Object: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.ParsePosition: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap: java.util.Set entrySet()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.OffsetDateTime: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.validation.FieldError: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.BitSet: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.Rectangle: java.lang.String toString()>
<sun.security.ssl.EphemeralKeyManager$EphemeralKeyPair: void <init>(java.security.KeyPair)>-><java.lang.System: long currentTimeMillis()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.awt.Color: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.AttributeEntry: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.xml.sax.SAXException: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifiers(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation[])>-><org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isQualifier(java.lang.Class)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getMethodMetaData(java.lang.Class)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<java.io.DataInputStream: int read(byte[])>-><java.io.ObjectInputStream$BlockDataInputStream: int read(byte[],int,int)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$9: void <init>(java.lang.String,int)>
<org.springframework.core.annotation.OrderUtils: java.lang.Integer getPriority(java.lang.Class)>-><org.springframework.core.annotation.AbstractMergedAnnotation: java.util.Optional getValue(java.lang.String,java.lang.Class)>
<com.alibaba.fastjson.JSONObject: void clear()>-><com.google.common.collect.ImmutableMap: void clear()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><java.io.BufferedReader: void close()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.math.BigDecimal: int hashCode()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.LocalDate: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void setDefaultRolePrefix(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanSupport: void unregister()>-><com.sun.jmx.mbeanserver.MXBeanLookup: boolean removeReference(javax.management.ObjectName,java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getClassLevelConstraints(java.lang.Class)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map normalize(java.util.Map)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.jboss.logging.Slf4jLocationAwareLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.jboss.logging.Slf4jLocationAwareLogger: int translate(org.jboss.logging.Logger$Level)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.misc.Signal: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void rethrow(java.lang.Throwable)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<ch.qos.logback.core.joran.action.AbstractEventEvaluatorAction: void end(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: boolean removeReference(javax.management.ObjectName,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object remove(java.lang.Object)>
<register-finalize <com.zaxxer.hikari.util.UtilityElf: java.util.concurrent.ThreadPoolExecutor createThreadPoolExecutor(int,java.lang.String,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings withUnboundVariable(java.lang.String)>-><com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>
<org.springframework.security.core.userdetails.memory.UserAttribute: void setAuthoritiesAsString(java.util.List)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<java.util.stream.Streams$ConcatSpliterator: void <init>(java.util.Spliterator,java.util.Spliterator)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.poi.ss.util.CellRangeAddressBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$2: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void addOperations(org.springframework.util.MultiValueMap,org.springframework.boot.actuate.endpoint.EndpointId,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointDiscoverer: org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey createOperationKey(org.springframework.boot.actuate.endpoint.Operation)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<java.io.DataInputStream: int read(byte[])>-><java.io.FilterInputStream: int read(byte[],int,int)>
<org.springframework.boot.actuate.metrics.web.servlet.WebMvcTags: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.springframework.security.crypto.password.LdapShaPasswordEncoder: void <clinit>()>-><java.lang.String: java.lang.String toLowerCase()>
<com.alibaba.fastjson.serializer.ObjectArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.reflect.Type[] getBounds()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.UUID: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.springframework.security.web.util.OnCommittedResponseWrapper: javax.servlet.ServletOutputStream getOutputStream()>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void <init>(org.springframework.security.web.util.OnCommittedResponseWrapper,javax.servlet.ServletOutputStream)>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><java.lang.String: int length()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getConstructorMetaData(java.lang.Class)>-><org.hibernate.validator.internal.util.privilegedactions.GetDeclaredConstructors: org.hibernate.validator.internal.util.privilegedactions.GetDeclaredConstructors action(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.BitSet: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Vector: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<sun.security.ssl.EngineOutputRecord: int recordSize(byte)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.oauth2.common.exceptions.UnapprovedClientAuthenticationException: void <init>(java.lang.String)>-><org.springframework.security.authentication.InsufficientAuthenticationException: void <init>(java.lang.String)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$SingletonSet: int size()>
<register-finalize <org.hibernate.validator.internal.metadata.raw.ConstrainedElement$ConstrainedElementKind: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<register-finalize <org.hibernate.validator.internal.metadata.raw.ConfigurationSource: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.hibernate.validator.internal.engine.ValidationContext$ValidatorScopedContext: void <init>(org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: boolean isTraversableResolverResultCacheEnabled()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getValue()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Hashtable$EntrySet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanSupport: void postDeregister()>-><com.sun.jmx.mbeanserver.MXBeanSupport: void unregister()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap$EntryIterator$Entry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.xml.namespace.QName: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean addAll(java.util.Collection)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: void <init>(org.springframework.boot.autoconfigure.orm.jpa.JpaProperties)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object,java.lang.Throwable)>
<javax.el.ExpressionFactory$CacheValue: java.lang.Class getFactoryClass()>-><java.lang.ref.Reference: java.lang.Object get()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void configure(javax.servlet.ServletRegistration$Dynamic)>-><org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>
<sun.security.ssl.CipherSuite: void <clinit>()>-><sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><org.springframework.security.core.userdetails.memory.UserAttribute: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.String: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.XSSFFont: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void <init>()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><javax.management.openmbean.ArrayType: boolean isValue(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.DelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.StringHelper: java.lang.String decapitalize(java.lang.String)>-><java.lang.String: boolean isEmpty()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.util.ClassStack: com.fasterxml.classmate.util.ClassStack find(java.lang.Class)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<sun.security.ssl.ProtocolVersion: void <init>(int,java.lang.String)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<sun.security.ssl.SSLEngineImpl: void <init>(sun.security.ssl.SSLContextImpl,java.lang.String,int)>-><javax.net.ssl.SSLEngine: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.stream.ReferencePipeline: void forEachWithCancel(java.util.Spliterator,java.util.stream.Sink)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decomposes(sun.security.ssl.CipherSuite$KeyExchange)>-><java.util.HashSet: void <init>()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.http.HttpStatus getStatus(javax.servlet.http.HttpServletRequest)>-><org.springframework.http.HttpStatus: org.springframework.http.HttpStatus valueOf(int)>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(java.lang.Object,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.MethodParameter: java.lang.reflect.Method getMethod()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.poi.ss.format.CellFormatPart: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Object: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.DecimalNode: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType resolve(java.lang.reflect.Type,java.lang.reflect.Type[])>-><com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.TypeBindings getTypeBindings()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.FieldInfo: boolean getArgument(java.lang.reflect.Type[],java.lang.reflect.TypeVariable[],java.lang.reflect.Type[])>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<register-finalize <sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.p6spy.engine.logging.Category: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.ZonedDateTime: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariables: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Introspector: javax.management.DynamicMBean makeDynamicMBean(java.lang.Object)>-><javax.management.NotCompliantMBeanException: void <init>(java.lang.String)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation,java.util.List,java.lang.reflect.Type)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Predicates$AndPredicate: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType resolve(java.lang.reflect.Type,java.lang.reflect.Type[])>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.Class: java.lang.String getSimpleName()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.netty.buffer.SwappedByteBuf: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<org.springframework.http.client.support.HttpAccessor: void setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>
<org.springframework.boot.actuate.endpoint.jmx.JacksonJmxOperationResponseMapper: java.lang.Class mapResponseType(java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.misc.Signal: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration: void <init>()>
<org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher: void <init>(java.util.Set,org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$1)>-><org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher: void <init>(java.util.Set)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Optional: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.RegularEnumSet: boolean isEmpty()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findClassLevelConstraints(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.core.io.ClassPathResource: int hashCode()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet: boolean add(java.lang.Object)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: boolean wildmatch(java.lang.String,java.lang.String,int,int,int,int)>-><java.lang.String: char charAt(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>
<sun.security.ssl.SSLAlgorithmConstraints: void <clinit>()>-><sun.security.ssl.SSLAlgorithmDecomposer: void <init>(boolean)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType$MethodGetterIncludingItds: void <init>(org.aspectj.weaver.ResolvedType$1)>-><org.aspectj.weaver.ResolvedType$MethodGetterIncludingItds: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: void <init>(javax.validation.MessageInterpolator,javax.validation.TraversableResolver,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,javax.validation.ClockProvider,java.time.Duration,org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory,boolean,boolean,java.lang.Object,org.hibernate.validator.internal.engine.constraintvalidation.HibernateConstraintValidatorInitializationContextImpl)>-><java.lang.Object: void <init>()>
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)>-><sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _resolveSuperClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.poi.xssf.usermodel.XSSFFont: java.lang.String toString()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.apache.juli.logging.DirectJDKLog: void fatal(java.lang.Object,java.lang.Throwable)>-><org.apache.juli.logging.DirectJDKLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<org.aspectj.weaver.patterns.ModifiersPattern: void <clinit>()>-><java.util.HashMap: void <init>()>
<org.springframework.http.server.reactive.JettyHeadersAdapter: void <init>(org.eclipse.jetty.http.HttpFields)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.Provider$UString: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: boolean subset(java.util.BitSet,java.util.BitSet)>-><java.util.BitSet: boolean isEmpty()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type getRawType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Locale: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.EnumDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiModelReader getApiModelReader()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><java.lang.StringBuffer: char charAt(int)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.p6spy.engine.logging.Category: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.reflect.GenericDeclaration getGenericDeclaration()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><reactor.util.context.Context1: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: int hashCode()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><sun.net.idn.Punycode: int adaptBias(int,int,boolean)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int hashCode()>
<com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer: void parseArray(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.util.Collection)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String getName()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.config.DependencyDescriptor: int hashCode()>
<de.codecentric.boot.admin.client.registration.ApplicationRegistrator: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Object: java.lang.Class getClass()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration: void <init>()>
<org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$DifferentManagementContextConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.autoconfigure.web.ManagementContextFactory)>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>()>
<java.util.BitSet: java.lang.Object clone()>-><java.util.BitSet: void checkInvariants()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><java.util.HashSet: boolean isEmpty()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForAnnotatedType(java.lang.reflect.AnnotatedType)>-><java.util.Collections: java.util.Map emptyMap()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: int hashCode()>
<org.apache.catalina.util.LifecycleMBeanBase: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.awt.Color: int hashCode()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<org.aspectj.weaver.ResolvedPointcutDefinition: void <clinit>()>-><org.aspectj.weaver.ResolvedPointcutDefinition: void <init>(org.aspectj.weaver.UnresolvedType,int,java.lang.String,org.aspectj.weaver.UnresolvedType[],org.aspectj.weaver.patterns.Pointcut)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.Font: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.validation.ObjectError: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><java.util.Collections$SetFromMap: boolean contains(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.method.OAuth2MethodSecurityConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void removeClassLoader(javax.management.ObjectName)>-><java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Character: int hashCode()>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellFill: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><sun.security.ssl.CipherSuite: void <init>(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERGeneralString: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: void <init>()>-><java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Hashtable$Enumerator: boolean hasMoreElements()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERGraphicString: int hashCode()>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType buildAnnotatedType(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><sun.reflect.annotation.TypeAnnotationParser: sun.reflect.annotation.TypeAnnotation[] parseTypeAnnotations(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class)>
<org.springframework.core.annotation.TypeMappedAnnotation: java.util.Optional getDefaultValue(java.lang.String,java.lang.Class)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.lang.Object adapt(java.lang.reflect.Method,java.lang.Object,java.lang.Class)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.jar.Attributes: java.util.Set entrySet()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.hibernate.validator.internal.engine.ValidationContext$ValidatorScopedContext: void <init>(org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: javax.validation.ClockProvider getClockProvider()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.alibaba.fastjson.serializer.SerialContext: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.List loadFactories(java.lang.Class,java.lang.ClassLoader)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><org.apache.commons.collections.FastHashMap: java.util.Collection values()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerObject(java.lang.String,java.lang.Object,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Introspector: javax.management.DynamicMBean makeDynamicMBean(java.lang.Object)>
<com.fasterxml.classmate.TypeBindings: void <clinit>()>-><com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.openxml4j.opc.PackageRelationship: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.JumboEnumSet: boolean add(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.TreeMap$KeySet: boolean contains(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><java.lang.String: char[] toCharArray()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.String: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.sql.Time: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Thread$WeakClassKey: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.core.ResolvableType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.joran.spi.ElementSelector: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.security.Provider: java.lang.Object get(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: java.util.Spliterator trySplit()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegate: void <clinit>()>-><java.net.URLClassLoader: void <init>(java.net.URL[])>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.session.InvalidSessionAccessDeniedHandler: void <init>(org.springframework.security.web.session.InvalidSessionStrategy)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areReturnValueConstraintsIgnoredFor(java.lang.reflect.Member)>-><java.lang.Boolean: boolean booleanValue()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.util.ObjectIdentifier: int hashCode()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory getDefaultFactory()>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.MapDeserializer: java.util.Map createMap(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Character: int hashCode()>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.PropertyName: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Period: java.lang.String toString()>
<org.aspectj.weaver.patterns.Bindings: void <clinit>()>-><org.aspectj.weaver.patterns.Bindings: void <init>(int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowAliasOverriding()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isAllowBeanDefinitionOverriding()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Spliterators$1Adapter: boolean hasNext()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.Clock$SystemClock: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: int hashCode()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>
<java.net.IDN: java.lang.String toASCII(java.lang.String,int)>-><java.lang.StringBuffer: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$EnumMapping: java.lang.Enum fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Class: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromParamType(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.jackson.databind.type.TypeBindings)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.JSONArray: int hashCode()>
<com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ThreadFactory lambda$initializeHouseKeepingExecutorService$3()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.ProcessEnvironment$ExternalData: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.ImmutableMap: int hashCode()>
<javax.management.NotificationBroadcasterSupport$SendNotifJob: void run()>-><javax.management.NotificationBroadcasterSupport: void handleNotification(javax.management.NotificationListener,javax.management.Notification,java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.jar.Attributes: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.beans.factory.support.RootBeanDefinition getResolvedDecoratedDefinition(org.springframework.beans.factory.support.RootBeanDefinition)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.mbeanserver.Util: boolean wildmatch(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.core.annotation.TypeMappedAnnotation: java.lang.Object extractFromMap(java.lang.reflect.Method,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<sun.security.ssl.SSLAlgorithmConstraints: void <init>(java.security.AlgorithmConstraints)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.StackTraceElement: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.validation.ObjectError: java.lang.String toString()>
<org.springframework.core.annotation.TypeMappedAnnotation: java.util.Optional getDefaultValue(java.lang.String,java.lang.Class)>-><java.util.Optional: java.util.Optional empty()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.font.Decoration$DecorationImpl: int hashCode()>
<java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$EmptyMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.springframework.http.ReadOnlyHttpHeaders: java.util.Collection values()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<sun.security.ssl.Debug: boolean getBooleanProperty(java.lang.String,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List getImplementedInterfaces()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.util.BitSet: int cardinality()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areCrossParameterConstraintsIgnoredFor(java.lang.reflect.Member)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.metadata.aggregated.rule.MethodConfigurationRule: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.AbstractMap: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.Color: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(javax.management.ObjectName)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Hashtable$Entry: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.DERNumericString: java.lang.String toString()>
<sun.net.idn.StringPrepDataReader: void <init>(java.io.InputStream)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.util.DerValue: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.StdDateFormat: void setTimeZone(java.util.TimeZone)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<com.p6spy.engine.spy.P6ModuleManager: void <init>()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Character$Subset: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Attributes$Name: int hashCode()>
<org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log getLogger()>-><org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.security.web.access.DelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.poi.ss.format.CellNumberFormatter$Special: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: javax.management.modelmbean.ModelMBeanOperationInfo[] getMBeanOperations(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><java.util.stream.ReferencePipeline: java.lang.Object[] toArray(java.util.function.IntFunction)>
<com.sun.jmx.mbeanserver.MBeanIntrospector: java.lang.Object invokeM(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object)>-><javax.management.ReflectionException: void <init>(java.lang.Exception,java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellBorder: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerSecurityConfiguration: void <init>()>-><io.micrometer.shaded.org.pcollections.ConsPStack: void <init>()>
<org.springframework.core.annotation.AnnotationUtils: org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(java.lang.reflect.AnnotatedElement,java.lang.annotation.Annotation,boolean,boolean)>-><org.springframework.core.annotation.MergedAnnotation: org.springframework.core.annotation.MergedAnnotation from(java.lang.Object,java.lang.annotation.Annotation)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Null: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.ParameterizedType getParameterizedType()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.access.expression.AbstractSecurityExpressionHandler: void setRoleHierarchy(org.springframework.security.access.hierarchicalroles.RoleHierarchy)>
<org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl: java.lang.ClassLoader deduceClassLoader(org.springframework.core.io.ResourceLoader,org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.context.support.GenericApplicationContext: java.lang.ClassLoader getClassLoader()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: java.lang.String wrapExpression(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1GeneralizedTime: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><java.util.TreeSet: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><sun.security.ssl.SecureKey: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.ResolvedType[] typeParameterArray()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><org.apache.tomcat.util.modeler.FeatureInfo: void setName(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<javax.el.ExpressionFactory$2: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><javax.management.openmbean.CompositeDataSupport: java.lang.Object get(java.lang.String)>
<org.aspectj.bridge.context.CompilationAndWeavingContext: void <clinit>()>-><java.util.HashMap: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.util.locale.BaseLocale$Key: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.zone.ZoneRules: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.ZoneOffset: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.validation.FieldError: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.alibaba.fastjson.JSONObject: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.MBeanNotificationInfo: int hashCode()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.EnumMap: void clear()>
<org.jboss.logging.Log4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>
<net.logstash.logback.appender.AbstractLogstashTcpSocketAppender$TcpSendingEventHandler: void onEvent(net.logstash.logback.appender.AsyncDisruptorAppender$LogEvent,long,boolean)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <clinit>()>-><org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <init>(java.lang.String,int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: java.util.Set toValueExtractorClasses(java.util.Set)>-><java.util.Collection: java.util.stream.Stream stream()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: int hashCode()>
<javax.management.openmbean.TabularDataSupport: void put(javax.management.openmbean.CompositeData)>-><javax.management.openmbean.TabularDataSupport: javax.management.openmbean.CompositeData internalPut(javax.management.openmbean.CompositeData)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder: void <init>(com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<reactor.util.Loggers$Slf4JLogger: void error(java.lang.String,java.lang.Throwable)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Class getRawClass(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.core.io.InputStreamResource: void <init>(java.io.InputStream,java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void <init>(java.lang.String,boolean)>-><java.lang.String: int length()>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap)>-><java.lang.Object: java.lang.Class getClass()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.ZonedDateTime: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: int hashCode()>
<com.sun.jmx.remote.util.ClassLogger: boolean finestOn()>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.env.PropertySource: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.ThreadGroup: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.raw.ConfigurationSource: void <clinit>()>-><org.hibernate.validator.internal.metadata.raw.ConfigurationSource: void <init>(java.lang.String,int,int)>
<javax.net.ssl.ExtendedSSLSession: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.EnumMap$EntrySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(java.lang.String,java.lang.String,javax.management.ObjectName,java.lang.String)>-><javax.management.MBeanPermission: void <init>(java.lang.String,java.lang.String,javax.management.ObjectName,java.lang.String)>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableCollection: boolean add(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>
<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<sun.security.ssl.SSLSessionImpl: void <init>(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection,sun.security.ssl.SessionId,java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.baomidou.dynamic.datasource.DynamicDataSourceCreator: void <clinit>()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Enum: java.lang.String toString()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.DERBMPString: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><javax.management.openmbean.TabularDataSupport: boolean containsKey(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.Color: java.lang.String toString()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapType withKeyValueHandler(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>-><org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$EnumMapping: java.lang.Enum fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.jmx.mbeanserver.NamedObject: int hashCode()>
<org.aspectj.weaver.tools.AbstractTrace: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areMemberConstraintsIgnoredFor(java.lang.reflect.Member)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.apache.http.HttpHost: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerOpaqueTokenConfiguration: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<reactor.core.scheduler.ParallelScheduler: void <clinit>()>-><java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.map.type.MapLikeType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<sun.security.ssl.Debug: boolean getBooleanProperty(java.lang.String,boolean)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.DigitList: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.management.HeapDumpWebEndpointAutoConfiguration: void <init>()>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><java.lang.Class: boolean isInterface()>
<javax.management.QueryEval: javax.management.MBeanServer getMBeanServer()>-><java.lang.ThreadLocal: java.lang.Object get()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.font.EAttribute: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Thread: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.ImmutableList: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractList$Itr: boolean hasNext()>
<sun.security.ssl.SignatureAndHashAlgorithm: void supports(sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm,sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm,java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind,boolean)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.security.Provider$UString: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$Values: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.MessageDigest: java.lang.String toString()>
<com.sun.jmx.mbeanserver.NamedObject: void <init>(javax.management.ObjectName,javax.management.DynamicMBean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.tomcat.util.modeler.Registry: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$7: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void <init>(java.lang.String,boolean)>-><java.util.HashMap: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<com.fasterxml.classmate.util.ClassStack: void resolveSelfReferences(com.fasterxml.classmate.ResolvedType)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><com.google.common.collect.RegularImmutableList: java.lang.Object get(int)>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>-><java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Object: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1GeneralizedTime: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.HashMap$Node: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Absent: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.poi.openxml4j.opc.PackageRelationship: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.text.FieldPosition: java.lang.String toString()>
<org.apache.catalina.core.StandardContext: void <init>()>-><org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.management.openmbean.TabularDataSupport: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Integer: java.lang.String toString()>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
<org.aspectj.bridge.context.CompilationAndWeavingContext: void <clinit>()>-><org.aspectj.bridge.context.CompilationAndWeavingContext$DefaultFormatter: void <init>(org.aspectj.bridge.context.CompilationAndWeavingContext$1)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.location.CrossParameterConstraintLocation: void <init>(java.lang.reflect.Executable)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERIA5String: int hashCode()>
<com.zaxxer.hikari.HikariDataSource: void <init>()>-><com.zaxxer.hikari.HikariConfig: void <init>()>
<sun.security.ssl.SSLSessionImpl: void <init>(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection,sun.security.ssl.SessionId,java.lang.String,int)>-><sun.security.ssl.SignatureAndHashAlgorithm: java.lang.String[] getAlgorithmNames(java.util.Collection)>
<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.x509.RDN: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ThreadFactory lambda$initializeHouseKeepingExecutorService$3()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap: java.lang.Object get(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType[] buildAnnotatedTypes(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><sun.reflect.annotation.TypeAnnotation: sun.reflect.annotation.TypeAnnotation$TypeAnnotationTargetInfo getTargetInfo()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.aspectj.weaver.AdviceKind: void <init>(java.lang.String,int,int,boolean,boolean)>-><org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.String: int length()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.FieldPosition: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: int hashCode()>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Member)>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.MethodParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.naming.NamingException: java.lang.String toString()>
<org.aspectj.weaver.patterns.WithinCodeAnnotationPointcut: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: boolean isEnclosingKind()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set filterListOfObjectInstances(java.util.Set,javax.management.QueryExp)>-><javax.management.ObjectInstance: javax.management.ObjectName getObjectName()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.crypto.CryptoPermission: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.net.URL: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.google.common.collect.ImmutableMap: boolean isEmpty()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Date: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void handleErrorInObjectToString(java.lang.Object,java.lang.StringBuilder,java.lang.Throwable)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Character: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray(java.lang.Object[])>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.p6spy.engine.logging.Category: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.sql.Timestamp: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.lang.Throwable: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.WeakCache$CacheValue: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardPipeline: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: int hashCode()>
<sun.security.ssl.SSLSessionImpl: void <init>(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection,sun.security.ssl.SessionId,java.lang.String,int)>-><sun.security.ssl.Debug: boolean getBooleanProperty(java.lang.String,boolean)>
<reactor.core.scheduler.Schedulers: void <clinit>()>-><java.util.LinkedHashMap: void <init>(int)>
<org.aspectj.bridge.IMessage$Kind: void <clinit>()>-><org.aspectj.bridge.IMessage$Kind$1: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.net.IDN: boolean startsWithACEPrefix(java.lang.StringBuffer)>-><java.lang.StringBuffer: int length()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Optional: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: int rehash()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry newHashEntry(java.lang.Object,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.util.DerValue: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object value()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object dereferenceValue(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><com.alibaba.fastjson.JSONArray: boolean addAll(java.util.Collection)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DecimalFormatSymbols: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: int indexOf(int,int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><javax.management.openmbean.CompositeType: boolean isValue(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: boolean isDebugEnabled()>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.web.servlet.view.InternalResourceViewResolver: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.String getPropertyName(java.lang.reflect.Member)>-><java.lang.reflect.Field: java.lang.String getName()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.apache.commons.collections.FastHashMap: void <init>(java.util.Map)>-><java.util.HashMap: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.security.ssl.ProtocolList: void <init>(java.util.ArrayList)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.format.DecimalStyle: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.Class getErasedReferenceType(java.lang.reflect.Type)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<org.apache.commons.collections.FastHashMap: void clear()>-><java.util.HashMap: void clear()>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><sun.net.idn.StringPrep$Values: void <init>(sun.net.idn.StringPrep$1)>
<org.springframework.security.core.userdetails.memory.UserAttribute: void setAuthoritiesAsString(java.util.List)>-><java.util.ArrayList: void <init>(int)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType[] buildAnnotatedTypes(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.aspectj.bridge.ISourceLocation: void <clinit>()>-><java.io.File: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.streaming.SXSSFRow: int hashCode()>
<org.springframework.http.HttpStatus$Series: void <init>(java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Predicates$AndPredicate: int hashCode()>
<org.aspectj.weaver.patterns.TypePattern: void <clinit>()>-><org.aspectj.weaver.patterns.TypePattern$MatchKind: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.invoke.MethodType: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getMetaData(java.lang.reflect.Executable[])>-><java.lang.reflect.Modifier: boolean isStatic(int)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.ZonedDateTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.mbeanserver.MBeanSupport: java.lang.Object getAttribute(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: boolean isRegistered(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>
<org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String getMimeType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.nio.ByteBuffer: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.security.web.FilterInvocation: void lambda$static$0(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<sun.security.ssl.CipherSuite$KeyExchange: void <clinit>()>-><sun.security.ssl.CipherSuite$KeyExchange: void <init>(java.lang.String,int,java.lang.String,boolean,boolean)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object newValueReference(java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$SoftValueReference: void <init>(java.lang.Object,java.lang.Object,int,java.lang.ref.ReferenceQueue)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$SingleValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.Integer access$400(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<org.apache.catalina.core.ContainerBase: void <init>()>-><java.util.HashMap: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void setUseEquals(boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.SubList$1: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1GeneralizedTime: int hashCode()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><java.util.HashMap: void <init>(int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<org.aspectj.weaver.Shadow$Kind: void <init>(java.lang.String,int,boolean)>-><org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Method: int hashCode()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void <init>(java.util.EventListener)>-><org.springframework.boot.web.servlet.RegistrationBean: void <init>()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$5: void <init>()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.tomcat.jni.SSL: void <clinit>()>-><org.apache.tomcat.jni.SSL: int version()>
<javax.management.StandardMBean: void postRegister(java.lang.Boolean)>-><com.sun.jmx.mbeanserver.StandardMBeanSupport: void unregister()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.google.common.collect.ImmutableMap: java.lang.Object remove(java.lang.Object)>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.DERUniversalString: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.catalina.util.LifecycleBase: void start()>
<sun.security.ssl.SSLAlgorithmDecomposer$1: void <clinit>()>-><sun.security.ssl.CipherSuite$KeyExchange: sun.security.ssl.CipherSuite$KeyExchange[] values()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<javax.management.Notification: void <init>(java.lang.String,java.lang.Object,long)>-><java.util.EventObject: void <init>(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: boolean matchKeys(javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String getKeyProperty(java.lang.String)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardPipeline: org.apache.catalina.Valve[] getValves()>-><java.util.ArrayList: void <init>()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.schema.TypeNameExtractor: void <init>(com.fasterxml.classmate.TypeResolver,org.springframework.plugin.core.PluginRegistry,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<com.sun.jmx.mbeanserver.MXBeanSupport: void register(javax.management.MBeanServer,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.MBeanSupport: java.lang.Object getResource()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.Set toImmutableSet(java.util.Set)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERIA5String: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>-><javax.management.InstanceNotFoundException: void <init>(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Long: java.lang.String toString()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Field,boolean)>-><java.lang.invoke.MemberName: boolean isStatic()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapValues: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.MethodOverrides: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object key()>-><java.lang.ref.Reference: java.lang.Object get()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedWildcardTypeImpl: void <init>(java.lang.reflect.WildcardType,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: void <init>(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postRegister(javax.management.ObjectName,javax.management.DynamicMBean,boolean,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><org.springframework.util.MimeType: java.lang.String getType()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.ObjectName: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<org.springframework.boot.web.embedded.tomcat.TldSkipPatterns: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.UUID: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<javax.management.ObjectName: boolean isPropertyValuePattern(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.security.ssl.CipherBox: void <clinit>()>-><sun.security.ssl.CipherBox: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Instant: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.EnumMap$KeySet: int size()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.Util: java.lang.ClassLoader getContextClassLoader()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.awt.SunHints$Key: java.lang.String toString()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>-><org.springframework.boot.web.servlet.FilterRegistrationBean: javax.servlet.Filter getFilter()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.poi.xssf.usermodel.XSSFFont: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: void addReference(javax.management.ObjectName,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$UnmodifiableMap: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.OptionalDouble: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMap: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Double: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<com.alibaba.fastjson.serializer.ObjectArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.util.TypeHelper$1: java.lang.reflect.Type getGenericComponentType()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<org.springframework.http.server.PathContainer$Options: org.springframework.http.server.PathContainer$Options create(char,boolean)>-><org.springframework.http.server.PathContainer$Options: void <init>(char,boolean)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.ParameterizedType parameterizedType(java.lang.Class,java.lang.reflect.Type[])>-><org.hibernate.validator.internal.util.TypeHelper$2: void <init>(java.lang.reflect.Type[],java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.reflect.WeakCache$CacheKey: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Streams$ConcatSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.Class getErasedReferenceType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.Contracts: void assertTrue(boolean,java.lang.String,java.lang.Object[])>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: int hashCode()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void <init>()>-><java.lang.Object: void <init>()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ListPropertyValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><java.lang.StringBuffer: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FormatCache$MultipartKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><org.springframework.web.util.UriComponents: java.lang.String expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)>
<org.springframework.cglib.proxy.NoOpGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation$LocationInfo pushLocation(byte,short)>-><sun.reflect.annotation.TypeAnnotation$LocationInfo$Location: void <init>(byte,short)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.aspectj.weaver.patterns.ModifiersPattern: void <clinit>()>-><org.aspectj.weaver.patterns.ModifiersPattern: void <init>(int,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Predicates$NotPredicate: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.OptionalDouble: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: java.lang.String wrapExpression(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.net.IDN: boolean isRootLabel(java.lang.String)>-><java.lang.String: int length()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.aspectj.weaver.SourceContextImpl$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents$Type$5: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Hashtable: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void <init>(java.util.EventListener)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<org.springframework.core.annotation.OrderUtils: java.lang.Integer getPriority(java.lang.Class)>-><org.springframework.core.annotation.MergedAnnotations: org.springframework.core.annotation.MergedAnnotations from(java.lang.reflect.AnnotatedElement,org.springframework.core.annotation.MergedAnnotations$SearchStrategy)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.ObjectName: java.lang.String getCanonicalKeyPropertyListString()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.MethodParameter: java.lang.String toString()>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: java.lang.Object getTarget()>-><org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: java.lang.Class getTargetClass()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><java.util.HashSet: boolean remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.URI: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.util.MimeType: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.UUID: java.lang.String toString()>
<java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)>-><java.util.Collections$SynchronizedSortedMap: void <init>(java.util.SortedMap)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Class getContainerClass(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.util.TypeVariables: boolean isArrayElement(java.lang.reflect.TypeVariable)>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void lambda$new$0(org.springframework.security.core.userdetails.UserDetails)>-><org.springframework.security.authentication.AccountExpiredException: void <init>(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ReadOnlyListPropertyValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ReadOnlyListPropertyValueExtractor: void <init>()>
<java.security.KeyPairGenerator$Delegate: void <init>(sun.security.jca.GetInstance$Instance,java.util.Iterator,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.awt.SunHints$Key: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><org.springframework.util.LinkedMultiValueMap: java.util.Collection values()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.classmate.util.ResolvedTypeKey: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<java.security.KeyManagementException: void <init>(java.lang.String)>-><java.security.KeyException: void <init>(java.lang.String)>
<org.springframework.security.web.reactive.result.view.CsrfRequestDataValueProcessor: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void removeStale()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$SoftKeyReference: java.lang.Object keyRef()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<sun.security.provider.PolicyFile: java.lang.String[][] getPrincipalInfo(sun.security.provider.PolicyParser$PrincipalEntry,java.security.Principal[])>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: javax.servlet.FilterRegistration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.FilterRegistrationBean: javax.servlet.Filter getFilter()>
<com.fasterxml.classmate.util.ClassStack: void resolveSelfReferences(com.fasterxml.classmate.ResolvedType)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.POJONode: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.LocalDateTime: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.validation.ObjectError: int hashCode()>
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)>-><java.security.SecureRandom: void <init>(java.security.SecureRandomSpi,java.security.Provider,java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void init()>-><org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<org.hibernate.validator.internal.engine.valueextraction.IterableValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.IterableValueExtractor: void <init>()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean fallbackMatchAllowed()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getDefaultGroupSequence(java.lang.Class)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<sun.security.ssl.CipherSuite$PRF: void <clinit>()>-><sun.security.ssl.CipherSuite$PRF: void <init>(java.lang.String,int,java.lang.String,int,int)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.util.MimeType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.MemberKey: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.Hashtable: void clear()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableSet: int hashCode()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundrySecurityService: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundrySecurityService$1: void <init>()>
<com.alibaba.fastjson.util.FieldInfo: boolean getArgument(java.lang.reflect.Type[],java.lang.reflect.TypeVariable[],java.lang.reflect.Type[])>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<sun.security.ssl.Debug: void <clinit>()>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.UUID: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.lang.ProcessEnvironment$StringKeySet: boolean remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: int hashCode()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<sun.security.ssl.JsseJce: java.security.KeyFactory getKeyFactory(java.lang.String)>-><java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<sun.security.ssl.SSLEngineImpl: void <init>(sun.security.ssl.SSLContextImpl,java.lang.String,int)>-><sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementChildContextConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Vector$Itr: boolean hasNext()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FormatCache$MultipartKey: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.text.FieldPosition: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><java.lang.Object: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.util.MimeType: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<org.springframework.security.web.csrf.CsrfFilter: void setAccessDeniedHandler(org.springframework.security.web.access.AccessDeniedHandler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.lang.Thread: java.lang.Thread currentThread()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<sun.security.ssl.ProtocolList: java.util.ArrayList convert(java.lang.String[])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postRegister(javax.management.ObjectName,javax.management.DynamicMBean,boolean,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.IdentityHashMap$KeySet: boolean remove(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$EmptyMap: int hashCode()>
<springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><springfox.documentation.spring.web.DescriptionResolver: void <init>(org.springframework.core.env.Environment)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: int hashCode()>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.ResolvedType findBoundType(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.alibaba.fastjson.util.FieldInfo: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.CodeSigner: int hashCode()>
<sun.security.ssl.JsseJce: void <clinit>()>-><sun.security.ssl.JsseJce$1: void <init>()>
<java.util.Collections: void swap(java.util.List,int,int)>-><org.springframework.core.io.buffer.LimitedDataBufferList: java.lang.Object set(int,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointDiscoverer: java.lang.String lambda$createOperationKey$0(org.springframework.boot.actuate.endpoint.jmx.JmxOperation)>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration: void <init>()>
<sun.net.idn.StringPrep$StringPrepTrieImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.JSONScanner: boolean scanISO8601DateIfMatch(boolean)>-><java.util.SimpleTimeZone: int getRawOffset()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: void addValueExtractorDescriptorForTypeArgumentLocation(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.List,org.hibernate.validator.internal.metadata.location.TypeArgumentConstraintLocation)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getMaximallySpecificAndContainerElementCompliantValueExtractor(java.lang.Class,java.lang.reflect.TypeVariable)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.x509.RDN: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.io.File: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotatedTypeFactory: sun.reflect.annotation.TypeAnnotation$LocationInfo addNesting(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo)>-><sun.reflect.annotation.AnnotatedTypeFactory: sun.reflect.annotation.TypeAnnotation$LocationInfo addNesting(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo)>
<springfox.documentation.spring.web.paths.QueryStringUriTemplateDecorator: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.classmate.types.ResolvedArrayType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType)>-><com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERT61String: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.ClassKey: int hashCode()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: void <init>(java.lang.Class,java.lang.reflect.TypeVariable)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.MonthDay: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLEngineImpl: void <init>(sun.security.ssl.SSLContextImpl)>-><javax.net.ssl.SSLEngine: void <init>()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$2: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$SynchronizedSet: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.EnumMap$1: java.lang.String toString()>
<sun.reflect.annotation.TypeAnnotation: java.util.List filter(sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><sun.reflect.annotation.TypeAnnotation$TypeAnnotationTargetInfo: sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget getTarget()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackagePart: java.lang.String toString()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.io.PrintStream: void println(java.lang.String)>
<org.aspectj.bridge.context.CompilationAndWeavingContext: void <clinit>()>-><java.util.Stack: void <init>()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext$1: void <init>()>-><java.lang.Object: void <init>()>
<javax.el.Util$PrivilegedGetTccl: void <init>(javax.el.Util$1)>-><javax.el.Util$PrivilegedGetTccl: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: void <init>(java.lang.Class,java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: int buildHashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<org.apache.catalina.core.ContainerBase: java.lang.String getDomainInternal()>-><org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>
<com.fasterxml.classmate.types.ResolvedRecursiveType: void setReference(com.fasterxml.classmate.ResolvedType)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.MessageDigest: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.Parameter[],int,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder getCascadingMetaData(java.lang.reflect.Type,java.lang.reflect.AnnotatedElement,java.util.Map)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.font.Decoration$DecorationImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.type.JavaType: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<org.springframework.core.annotation.OrderUtils: java.lang.Integer getPriority(java.lang.Class)>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.aspectj.weaver.Iterators$ResolvedTypeArrayIterator: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.AbstractList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityConfigurerAdapter: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><sun.text.normalizer.UCharacterIterator: int nextCodePoint()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.LinkedHashMap$LinkedEntrySet: boolean remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Introspector: void checkCompliance(java.lang.Class)>-><com.sun.jmx.mbeanserver.Introspector: java.lang.Class getStandardMBeanInterface(java.lang.Class)>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getComponentType(java.lang.reflect.Type)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.text.DigitList: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.codehaus.jackson.map.type.SimpleType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Object[])>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.HttpHeaders: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.ObjectInstance: int hashCode()>
<sun.security.ssl.JsseJce: void <clinit>()>-><sun.security.ssl.JsseJce$SunCertificates: void <init>(java.security.Provider)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.www.BasicAuthenticationFilter: void setRememberMeServices(org.springframework.security.web.authentication.RememberMeServices)>
<org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.util.EnumSet)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeAnnotationConstraintsForExecutableParameter(java.lang.reflect.Executable,int,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>-><javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: sun.reflect.annotation.TypeAnnotation[] getTypeAnnotations()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.beans.factory.support.RootBeanDefinition getResolvedDecoratedDefinition(org.springframework.beans.factory.support.RootBeanDefinition)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceEndpointAutoConfiguration: void <init>()>
<sun.text.normalizer.UCharacterIterator: sun.text.normalizer.UCharacterIterator getInstance(java.lang.StringBuffer)>-><sun.text.normalizer.ReplaceableUCharacterIterator: void <init>(java.lang.StringBuffer)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.beans.IndexedPropertyDescriptor: int hashCode()>
<org.springframework.boot.context.properties.PropertyMapper: void <clinit>()>-><org.springframework.boot.context.properties.PropertyMapper: void <init>(org.springframework.boot.context.properties.PropertyMapper,org.springframework.boot.context.properties.PropertyMapper$SourceOperator)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.locale.BaseLocale$Key: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.awt.Point: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap$KeySet: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getMethodMetaData(java.lang.Class)>-><org.hibernate.validator.internal.util.privilegedactions.GetDeclaredMethods: org.hibernate.validator.internal.util.privilegedactions.GetDeclaredMethods action(java.lang.Class)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void addClassLoader(javax.management.ObjectName,java.lang.ClassLoader)>-><com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean add(javax.management.ObjectName,java.lang.ClassLoader)>
<springfox.documentation.spring.web.readers.operation.OperationDeprecatedReader: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.Util: boolean wildmatch(java.lang.String,java.lang.String)>-><com.sun.jmx.mbeanserver.Util: boolean wildmatch(java.lang.String,java.lang.String,int,int,int,int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.calendar.Era: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.Color: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Double: java.lang.String toString()>
<sun.security.ssl.CipherSuite$CipherType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.xmlbeans.StringEnumAbstractBase: java.lang.String toString()>
<sun.security.ssl.CipherSuite$KeyExchange: void <init>(java.lang.String,int,java.lang.String,boolean,boolean)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.aspectj.weaver.patterns.ExactTypePattern: void <clinit>()>-><java.util.HashMap: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>
<java.util.Collections$EmptyMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.UnsupportedOperationException: void <init>()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setAutowireCandidateResolver(org.springframework.beans.factory.support.AutowireCandidateResolver)>-><org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean remove(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaSetters: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilder: java.lang.Class getTargetClass()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.Provider$Service: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.EmbeddedDataSourceConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Executable,int)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.ExpressionFactory$CacheValue: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<javax.el.ELManager: javax.el.ExpressionFactory getExpressionFactory()>-><javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>
<java.io.DataInputStream: int read(byte[])>-><java.io.PushbackInputStream: int read(byte[],int,int)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>
<org.hibernate.validator.internal.engine.constraintvalidation.HibernateConstraintValidatorInitializationContextImpl: void <init>(org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory,javax.validation.ClockProvider,java.time.Duration)>-><org.hibernate.validator.internal.engine.constraintvalidation.HibernateConstraintValidatorInitializationContextImpl: int createHashCode()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultUserInfoRestTemplateFactory: org.springframework.security.oauth2.client.OAuth2RestTemplate getUserInfoRestTemplate()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.jca.ProviderConfig: int hashCode()>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<org.aspectj.bridge.context.CompilationAndWeavingContext: void <clinit>()>-><java.lang.ThreadLocal: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: boolean casTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node,java.util.concurrent.ConcurrentHashMap$Node)>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decomposes(sun.security.ssl.CipherSuite$KeyExchange)>-><java.lang.Enum: int ordinal()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <clinit>()>-><io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.springframework.web.client.RestTemplate: void validateConverters(java.util.List)>-><org.springframework.util.Assert: void noNullElements(java.util.Collection,java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<sun.security.ssl.JsseJce$1: void <init>()>-><java.lang.Object: void <init>()>
<sun.text.normalizer.UCharacterIterator: java.lang.String getText()>-><sun.text.normalizer.UCharacterIterator: int getText(char[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><ch.qos.logback.core.subst.Token: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.xml.namespace.QName: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: int rehash()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object value()>
<javax.management.InstanceNotFoundException: void <init>(java.lang.String)>-><javax.management.OperationsException: void <init>(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.TreeMap: java.util.Collection values()>
<org.springframework.aop.target.EmptyTargetSource: java.lang.String toString()>-><java.lang.Class: java.lang.String getName()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthContributorAutoConfiguration: void <init>()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<sun.text.normalizer.ReplaceableUCharacterIterator: int getText(char[],int)>-><java.lang.Integer: java.lang.String toString(int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.reflect.Proxy$Key2: int hashCode()>
<org.springframework.security.authentication.ProviderManager: void setAuthenticationEventPublisher(org.springframework.security.authentication.AuthenticationEventPublisher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.JapaneseImperialCalendar: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Collections$UnmodifiableSet: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.boot.actuate.health.Health: org.springframework.boot.actuate.health.Health$Builder up()>-><org.springframework.boot.actuate.health.Health: org.springframework.boot.actuate.health.Health$Builder status(org.springframework.boot.actuate.health.Status)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.codehaus.jackson.map.type.CollectionLikeType: boolean equals(java.lang.Object)>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><javax.el.Util$CacheValue: void setExpressionFactory(javax.el.ExpressionFactory)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int access$000(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.util.EnumSet)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void <init>(int,float,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,boolean)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Hashtable$KeySet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.util.Collection values()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.SubList: java.lang.Object get(int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SynchronizedCollection: int size()>
<java.security.Security: void initialize()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><com.google.common.collect.ImmutableMapKeySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireBean(java.lang.Object)>-><org.springframework.beans.BeanWrapperImpl: void <init>(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Character$Subset: java.lang.String toString()>
<org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forPrimitiveType(java.lang.String)>-><org.aspectj.weaver.UnresolvedType: void <init>(java.lang.String)>
<javax.xml.datatype.FactoryFinder: java.lang.String which(java.lang.Class)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator)>-><org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.HashSet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.MonthDay: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1Enumerated: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<java.net.IDN: void <clinit>()>-><java.lang.String: int length()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Null: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.aspectj.weaver.patterns.ExactTypePattern: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.aspectj.util.FuzzyBoolean: void <clinit>()>-><org.aspectj.util.FuzzyBoolean$YesFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.FieldDeserializer: void setValue(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: void putAll(java.util.Map)>
<org.aspectj.weaver.ResolvedType$MethodGetter: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Float: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$1: boolean hasNext()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: java.util.SortedMap makeMap(java.lang.String[],java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.OptionalDoubleValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType$MethodGetter: void <init>(org.aspectj.weaver.ResolvedType$1)>-><org.aspectj.weaver.ResolvedType$MethodGetter: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<org.apache.logging.log4j.message.MessageFormatMessageFactory: org.apache.logging.log4j.message.Message newMessage(java.lang.String,java.lang.Object[])>-><org.apache.logging.log4j.message.MessageFormatMessage: void <init>(java.lang.String,java.lang.Object[])>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.codehaus.jackson.map.type.ArrayType: boolean equals(java.lang.Object)>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>
<org.springframework.util.MimeTypeUtils: org.springframework.util.MimeType parseMimeTypeInternal(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.hateoas.HypermediaHttpMessageConverterConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.validation.FieldError: java.lang.String toString()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.String getPropertyName(java.lang.reflect.Member)>-><org.hibernate.validator.internal.util.StringHelper: java.lang.String decapitalize(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><javax.management.ObjectName: java.lang.String getCanonicalKeyPropertyListString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.font.TransformAttribute: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areCrossParameterConstraintsIgnoredFor(java.lang.reflect.Member)>
<java.sql.SQLException$1: java.lang.Throwable next()>-><javax.management.ReflectionException: java.lang.Throwable getCause()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.AnnotationConfigUtils: java.util.Set registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Comparator getDependencyComparator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Proxy$Key2: int hashCode()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.Float: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<org.springframework.core.SimpleAliasRegistry: void registerAlias(java.lang.String,java.lang.String)>-><org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>
<sun.security.ssl.Debug: boolean isOn(java.lang.String)>-><java.lang.String: int indexOf(java.lang.String,int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.util.concurrent.AbstractFuture: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: void <init>(java.lang.Object,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry,java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object newValueReference(java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object lambda$invokeInitMethods$5(java.lang.Object)>-><org.springframework.security.access.vote.AbstractAccessDecisionManager: void afterPropertiesSet()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.aspectj.weaver.patterns.Pointcut: void <clinit>()>-><org.aspectj.weaver.patterns.Pointcut$State: void <init>(java.lang.String,int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.cert.Certificate: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.font.Decoration$DecorationImpl: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.net.IDN: java.lang.String toASCII(java.lang.String,int)>-><java.lang.String: int length()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.AnnotatedType)>
<com.alibaba.fastjson.serializer.MiscCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.security.Provider)>-><javax.crypto.KeyAgreement: void <init>(javax.crypto.KeyAgreementSpi,java.security.Provider,java.lang.String)>
<java.net.IDN: boolean startsWithACEPrefix(java.lang.StringBuffer)>-><java.net.IDN: char toASCIILower(char)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>-><org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.Integer access$400(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(javax.management.DynamicMBean,java.lang.String,javax.management.ObjectName,java.lang.String)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<sun.text.normalizer.ReplaceableUCharacterIterator: int getText(char[],int)>-><java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
<com.p6spy.engine.common.P6Util: java.util.Map getPropertiesMap(java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><sun.security.ssl.ProtocolList: java.util.Collection collection()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions getAnnotationProcessingOptions()>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$Values: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedRecursiveType: void setReference(com.fasterxml.classmate.ResolvedType)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.google.common.base.Predicates$AndPredicate: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions getAnnotationProcessingOptionsFromNonDefaultProviders()>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.collect.ImmutableMap: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.lang.ProcessEnvironment$StringKeySet: int size()>
<org.aspectj.util.LangUtil$StringChecker: void <clinit>()>-><org.aspectj.util.LangUtil$StringChecker: void <init>(java.lang.String[])>
<org.hibernate.validator.internal.metadata.aggregated.rule.ReturnValueMayOnlyBeMarkedOnceAsCascadedPerHierarchyLine: void <init>()>-><org.hibernate.validator.internal.metadata.aggregated.rule.MethodConfigurationRule: void <init>()>
<org.apache.commons.collections.FastHashMap: void clear()>-><java.util.HashMap: void <init>()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>-><org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellFill: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><com.google.common.collect.ImmutableCollection: boolean addAll(java.util.Collection)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation[] filter(sun.reflect.annotation.TypeAnnotation[])>-><sun.reflect.annotation.TypeAnnotation$LocationInfo: boolean isSameLocationInfo(sun.reflect.annotation.TypeAnnotation$LocationInfo)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerApplicationScope(javax.servlet.ServletContext)>-><org.springframework.beans.factory.support.AbstractBeanFactory: void registerScope(java.lang.String,org.springframework.beans.factory.config.Scope)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.List loadFactories(java.lang.Class,java.lang.ClassLoader)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiDescriptionReader getApiDescriptionReader()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><javax.management.ObjectName: java.lang.String getDomain()>
<com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>-><javax.management.MBeanInfo: java.lang.String getDescription()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.netty.buffer.SwappedByteBuf: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: int hashCode()>
<sun.security.ssl.SSLAlgorithmDecomposer: void <init>(boolean)>-><sun.security.util.AlgorithmDecomposer: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.TreeMap$KeySet: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.GlyphLayout$LayoutEngineKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerObject(java.lang.String,java.lang.Object,javax.management.ObjectName)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.RegularImmutableMap$Values: int size()>
<sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.aspectj.bridge.IMessageHandler$1: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForAnnotatedType(java.lang.reflect.AnnotatedType)>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.security.BasicPermission: int hashCode()>
<register-finalize <org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Option: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: void <init>(javax.servlet.MultipartConfigElement)>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType getParentClass()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>
<sun.security.ssl.CipherSuite: void <clinit>()>-><sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(int,int)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.DERBMPString: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Character: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>-><java.security.Signature$CipherAdapter: void <init>(javax.crypto.Cipher)>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.TreeMap$Entry: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.Point: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: void <init>()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.AnnotatedType getAnnotatedGenericComponentType()>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: sun.reflect.annotation.TypeAnnotation$LocationInfo getLocation()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.MXBeanLookup: java.lang.Object objectNameToMXBean(javax.management.ObjectName,java.lang.Class)>
<java.util.Collections$SynchronizedMap: void clear()>-><org.springframework.core.env.ReadOnlySystemAttributesMap: void clear()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.MutablePropertyValues: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.annotation.Annotation getQualifiedElementAnnotation(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.reflect.AnnotatedElement getQualifiedElement()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<com.alibaba.fastjson.serializer.ReferenceCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.ErrorProperties: org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace getIncludeStacktrace()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$NestedTypeArgumentLocation: void <init>(org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.TypeVariable,java.lang.reflect.Type)>-><java.lang.Object: void <init>()>
<javax.crypto.Cipher: int getMaxAllowedKeyLength(java.lang.String)>-><javax.crypto.CryptoPermission: int getMaxKeySize()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: java.util.List getImplementedInterfaces()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.ProcessEnvironment$StringEntrySet: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerSecurityConfiguration: void <init>()>-><org.springframework.security.oauth2.provider.client.JdbcClientDetailsService: void <init>(javax.sql.DataSource)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableMapEntrySet: int hashCode()>
<sun.security.ssl.Debug: boolean getBooleanProperty(java.lang.String,boolean)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType resolve(com.fasterxml.classmate.TypeBindings,java.lang.reflect.Type)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.SubList$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String substring(int,int)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.netty.buffer.SwappedByteBuf: int hashCode()>
<org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.sql.Timestamp: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Float: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.validation.ObjectError: boolean equals(java.lang.Object)>
<java.net.IDN: java.lang.String toASCII(java.lang.String,int)>-><java.net.IDN: int searchDots(java.lang.String,int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.POJONode: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<reactor.core.scheduler.Schedulers: void <clinit>()>-><java.util.Optional: java.util.Optional map(java.util.function.Function)>
<java.io.DataOutputStream: void writeLong(long)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(byte[],int,int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.wuwenze.poi.pojo.ExcelMapping: java.lang.String toString()>
<org.aspectj.util.FuzzyBoolean$NoFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>-><org.aspectj.util.FuzzyBoolean$NoFuzzyBoolean: void <init>()>
<org.hibernate.validator.internal.engine.MethodValidationConfiguration: void <init>(boolean,boolean,boolean)>-><java.lang.Object: void <init>()>
<sun.security.ssl.JsseJce: void <clinit>()>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.net.ssl.SNIHostName: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration: void <init>(org.springframework.core.env.Environment)>
<sun.security.ssl.SSLEngineImpl: void <clinit>()>-><sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.CodeSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<org.springframework.security.web.access.expression.WebExpressionVoter: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void sendNotification(java.lang.String,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<javax.management.NotificationBroadcasterSupport: void <init>()>-><javax.management.NotificationBroadcasterSupport: void <init>(java.util.concurrent.Executor,javax.management.MBeanNotificationInfo[])>
<org.aspectj.weaver.patterns.Pointcut$State: void <init>(java.lang.String,int)>-><org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: void <init>(org.springframework.boot.web.servlet.ServletContextInitializerBeans$1)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: void <init>()>
<com.fasterxml.classmate.ResolvedType: java.util.List typeParametersFor(java.lang.Class)>-><com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.net.IDN: boolean startsWithACEPrefix(java.lang.StringBuffer)>-><java.lang.String: char charAt(int)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.alibaba.fastjson.JSON: java.lang.String toString()>
<com.baomidou.dynamic.datasource.plugin.DbHealthIndicator: void <clinit>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<javax.management.NotificationBroadcasterSupport: void <clinit>()>-><javax.management.NotificationBroadcasterSupport$1: void <init>()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.MonthDay: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.ObjectName: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContext: void populateSessionTrackingModes()>-><java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.xmlbeans.StringEnumAbstractBase: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.Extension: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SingletonMap: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableMapEntrySet: int hashCode()>
<org.springframework.boot.actuate.metrics.http.Outcome: void <init>(java.lang.String,int)>-><io.micrometer.core.instrument.Tag: io.micrometer.core.instrument.Tag of(java.lang.String,java.lang.String)>
<sun.security.ssl.EngineOutputRecord: void <init>(byte,sun.security.ssl.SSLEngineImpl)>-><sun.security.ssl.OutputRecord: void <init>(byte,int)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<javax.management.QueryEval: void <clinit>()>-><java.lang.InheritableThreadLocal: void <init>()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>-><org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.Object getLast(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.StackTraceElement: java.lang.String toString()>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postRegister(javax.management.ObjectName,javax.management.DynamicMBean,boolean,boolean)>-><com.sun.jmx.mbeanserver.MBeanSupport: void registerFailed()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.AnnotatedType getAnnotatedReturnType0(java.lang.reflect.Type)>-><java.lang.System$2: sun.reflect.ConstantPool getConstantPool(java.lang.Class)>
<org.springframework.web.util.pattern.PatternParseException$PatternMessage: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>-><synthetic.method.SingletonFactory: org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration getAuthorizationServerEndpointsConfiguration()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.util.ClassStack: void resolveSelfReferences(com.fasterxml.classmate.ResolvedType)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: void setReference(com.fasterxml.classmate.ResolvedType)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: int hashCode()>
<org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>-><org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.Class: java.lang.Class getComponentType()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.DoubleNode: int hashCode()>
<sun.text.normalizer.UCharacterIterator: java.lang.String getText()>-><java.lang.String: void <init>(char[])>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.OffsetDateTime: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><com.alibaba.fastjson.JSONObject: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.jar.Attributes$Name: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.core.io.SerializedString: int hashCode()>
<org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest: javax.servlet.http.HttpServletRequest lambda$new$0()>-><javax.servlet.ServletRequestWrapper: javax.servlet.ServletRequest getRequest()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer: void parseArray(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.util.Collection)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><reactor.util.context.Context1: java.lang.Object getKey()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.String: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties: java.lang.String lambda$setPath$0(java.io.File)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.CompositeType: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1UTCTime: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.ReturnValueConstraintLocation: void <init>(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type boxedType(java.lang.reflect.Type)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERUniversalString: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decomposes(sun.security.ssl.CipherSuite$BulkCipher)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: void <init>(org.springframework.boot.web.servlet.ServletContextInitializerBeans$1)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void determineValueExtractorDefinitions(java.util.List,java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.xml.bind.JAXBException: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.JavaType: void <init>(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.core.type.ResolvedType: void <init>()>
<javax.management.openmbean.CompositeDataInvocationHandler: void <init>(javax.management.openmbean.CompositeData)>-><javax.management.openmbean.CompositeDataInvocationHandler: void <init>(javax.management.openmbean.CompositeData,com.sun.jmx.mbeanserver.MXBeanLookup)>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>
<sun.security.ssl.JsseJce: java.security.KeyPairGenerator getKeyPairGenerator(java.lang.String)>-><java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decompose(java.lang.String)>-><sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decompose(sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,sun.security.ssl.CipherSuite$MacAlg)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<sun.security.util.AbstractAlgorithmConstraints: boolean checkAlgorithm(java.lang.String[],java.lang.String,sun.security.util.AlgorithmDecomposer)>-><sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decompose(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.support.AbstractPointcutAdvisor: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceInitializationConfiguration: void <init>()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentReturnValueLocation: void <init>(java.lang.reflect.Executable,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$1)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentReturnValueLocation: void <init>(java.lang.reflect.Executable)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><java.util.Collections: java.util.Set emptySet()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.aop.AopAutoConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.io.InvalidObjectException: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.String methodName()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.base.Predicates$AndPredicate: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellFill: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><org.springframework.util.LinkedMultiValueMap: void add(java.lang.Object,java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.ResolvableType: java.lang.String toString()>
<sun.security.ssl.CipherSuite: boolean isAvailable()>-><sun.security.ssl.CipherSuite$BulkCipher: boolean isAvailable()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: com.fasterxml.classmate.types.ResolvedPrimitiveType voidType()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object[])>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.net.URL: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.DERUTF8String: int hashCode()>
<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.FloatNode: int hashCode()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: void clear()>-><java.util.HashMap: void clear()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ReadOnlyMapPropertyKeyExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.XSSFName: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.imageio.ImageTypeSpecifier: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String getName()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.MethodParameter: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.AnnotationConfigUtils: java.util.Set registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.support.AutowireCandidateResolver getAutowireCandidateResolver()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set filterListOfObjectInstances(java.util.Set,javax.management.QueryExp)>-><java.util.HashSet: void <init>()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: boolean matchKeys(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Util: boolean wildmatch(java.lang.String,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<java.net.IDN: void <clinit>()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$EmptySet: int size()>
<sun.reflect.annotation.TypeAnnotation: java.util.List filter(sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><sun.reflect.annotation.TypeAnnotation: sun.reflect.annotation.TypeAnnotation$TypeAnnotationTargetInfo getTargetInfo()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Short: java.lang.String toString()>
<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>-><org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.math.BigInteger: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.URI: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Float: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.schema.property.bean.AccessorsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.String: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<org.springframework.security.web.savedrequest.SavedRequestAwareWrapper: void <clinit>()>-><java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.aspectj.weaver.JoinPointSignatureIterator: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forSignature(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postRegister(javax.management.ObjectName,javax.management.DynamicMBean,boolean,boolean)>-><com.sun.jmx.mbeanserver.MBeanSupport: void postRegister(java.lang.Boolean)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>-><java.util.ArrayList$SubList: int size()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.AbstractList$Itr: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationTagsReader: void <init>(springfox.documentation.spring.web.readers.operation.DefaultTagsProvider)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] helpTransfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.regex.Pattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(java.lang.Object,java.lang.Object[])>-><sun.reflect.misc.MethodUtil: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.web.filter.ForwardedHeaderFilter: void <clinit>()>-><org.springframework.util.LinkedCaseInsensitiveMap: void <init>(int,java.util.Locale)>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.servlet.function.RequestPredicates$ParamPredicate: void <init>(java.lang.String,java.util.function.Predicate)>-><java.lang.Object: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.alibaba.fastjson.JSONArray: int size()>
<org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: void <init>(javax.validation.MessageInterpolator,javax.validation.TraversableResolver,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,javax.validation.ClockProvider,java.time.Duration,org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory,boolean,boolean,java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.HibernateConstraintValidatorInitializationContextImpl: void <init>(org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory,javax.validation.ClockProvider,java.time.Duration)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.Decoration$DecorationImpl: int hashCode()>
<org.hibernate.validator.internal.metadata.location.BeanConstraintLocation: void <init>(java.lang.Class)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.ParameterizedType parameterizedType(java.lang.Class,java.lang.reflect.Type[])>
<com.sun.jmx.mbeanserver.StandardMBeanIntrospector: java.lang.Object invokeM2(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object)>-><com.sun.jmx.mbeanserver.StandardMBeanIntrospector: java.lang.Object invokeM2(java.lang.reflect.Method,java.lang.Object,java.lang.Object[],java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><java.lang.Class: boolean isArray()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<sun.text.normalizer.UCharacter: void <clinit>()>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.WeakHashMap$KeySet: int size()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.apache.tomcat.util.modeler.ManagedBean: void addAttribute(org.apache.tomcat.util.modeler.AttributeInfo)>-><org.apache.tomcat.util.modeler.FeatureInfo: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<org.springframework.web.client.RestTemplate: void validateConverters(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeAnnotationConstraints(java.lang.reflect.Executable,java.lang.reflect.AnnotatedType)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.XSSFName: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: java.lang.String wrapExpression(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$2: void unregistered()>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void access$100(com.sun.jmx.interceptor.DefaultMBeanServerInterceptor,java.lang.ClassLoader,javax.management.ObjectName)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: boolean isSupportedType(java.util.EventListener)>-><org.springframework.util.ClassUtils: boolean isAssignableValue(java.lang.Class,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AccountStatusException: void <init>(java.lang.String)>-><org.springframework.security.core.AuthenticationException: void <init>(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifiers(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation[])>-><org.springframework.beans.SimpleTypeConverter: void <init>()>
<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType,int,float)>-><java.lang.Object: void <init>()>
<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType,int,float)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.aspectj.weaver.tools.DefaultTraceFactory: org.aspectj.weaver.tools.Trace getTrace(java.lang.Class)>-><org.aspectj.weaver.tools.DefaultTrace: void setTraceEnabled(boolean)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><java.lang.reflect.MalformedParameterizedTypeException: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: void <clinit>()>-><org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Vector: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <clinit>()>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MXBeanLookup: com.sun.jmx.mbeanserver.MXBeanLookup lookupFor(javax.management.MBeanServerConnection)>-><java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<java.lang.reflect.Parameter: java.lang.Class getType()>-><java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Byte: java.lang.String toString()>
<sun.security.ssl.CipherSuite$BulkCipher: void <clinit>()>-><sun.security.ssl.JsseJce: java.security.SecureRandom getSecureRandom()>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>-><com.sun.beans.WildcardTypeImpl: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackageRelationship: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Currency: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.introspect.MemberKey: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void removeStale()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$WeakKeyReference: java.lang.Object keyRef()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object[])>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.spi.group.DefaultGroupSequenceProvider newGroupSequenceProviderClassInstance(java.lang.Class,java.lang.Class)>-><java.lang.reflect.Method: boolean isBridge()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String getName()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>
<springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: void <init>(java.util.concurrent.ThreadFactory,java.lang.String,java.util.concurrent.atomic.AtomicLong,java.lang.Boolean,java.lang.Integer,java.lang.Thread$UncaughtExceptionHandler)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<org.springframework.boot.web.client.ClientHttpRequestFactorySupplier: void <clinit>()>-><java.util.LinkedHashMap: void <init>()>
<register-finalize <sun.security.ssl.CipherSuite$CipherType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.OptionalLong: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Locale: int hashCode()>
<org.apache.catalina.core.ApplicationContextFacade: void <init>(org.apache.catalina.core.ApplicationContext)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.crypto.CryptoPermission: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.Parsed: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.awt.AppContext: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Properties: java.util.Enumeration propertyNames()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher: java.lang.String toString()>
<sun.security.ssl.CipherSuite: void <init>(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.sun.jmx.mbeanserver.NamedObject: int hashCode()>
<java.util.stream.Collectors: java.util.Set lambda$toSet$4(java.util.Set,java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean addAll(java.util.Collection)>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <clinit>()>-><org.springframework.core.Constants: void <init>(java.lang.Class)>
<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><sun.security.ssl.SSLAlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.AlgorithmParameters)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.provider.endpoint.TokenKeyEndpoint: void <init>(org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter)>
<register-finalize <com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ScheduledExecutorService initializeHouseKeepingExecutorService()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.util.TypeVariables: boolean isArrayElement(java.lang.reflect.TypeVariable)>
<springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder: void <init>(com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.AttributeAccessorSupport: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedInterfaceType: java.util.List getImplementedInterfaces()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.sun.jmx.mbeanserver.MXBeanSupport: void unregister()>-><com.sun.jmx.mbeanserver.MBeanSupport: java.lang.Object getResource()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.util.logging.LogRecord: void setLoggerName(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.annotation.DiscoveredServletEndpoint: java.lang.String lambda$new$0(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.lang.ProcessEnvironment$StringKeySet: int size()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.Map)>-><java.util.LinkedHashMap: void <init>(java.util.Map)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$SetFromMap: int size()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$3: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Present: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>-><org.springframework.context.annotation.AnnotatedBeanDefinitionReader: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$EmptySet: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.cert.X509CRLEntry: int hashCode()>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.validation.FieldError: int hashCode()>
<java.util.BitSet: java.lang.Object clone()>-><java.lang.Object: java.lang.Object clone()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.alibaba.fastjson.JSONArray: int size()>
<springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerJwtConfiguration$JwtDecoderConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellBorder: int hashCode()>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int access$600(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.font.AttributeValues: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.type.ReferenceType withContentValueHandler(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void removeStale()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object remove(java.lang.Object)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: void <init>(com.fasterxml.jackson.annotation.JsonCreator$Mode,com.fasterxml.jackson.module.paramnames.ParameterExtractor)>-><com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set filterListOfObjectInstances(java.util.Set,javax.management.QueryExp)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.beans.PropertyDescriptor: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<sun.security.ssl.SSLEngineImpl: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.xml.namespace.QName: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Short: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><java.lang.Enum: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.classic.spi.ClassPackagingData: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.AbstractMap$1: boolean isEmpty()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.JSONObject: java.lang.Object remove(java.lang.Object)>
<org.springframework.security.core.userdetails.memory.UserAttribute: void setAuthoritiesAsString(java.util.List)>-><org.springframework.security.core.userdetails.memory.UserAttribute: void setAuthorities(java.util.List)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.jar.Attributes: java.util.Collection values()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><org.aspectj.weaver.tools.TraceFactory: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.support.MethodOverrides: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder getCascadingMetaData(java.lang.reflect.Type,java.lang.reflect.AnnotatedElement,java.util.Map)>-><java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MXBeanLookup: void addReference(javax.management.ObjectName,java.lang.Object)>-><javax.management.InstanceAlreadyExistsException: void <init>(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.MXBeanMapping: java.lang.reflect.Type getJavaType()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.core.io.FileSystemResource: int hashCode()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>-><sun.security.jca.ProviderList$ServiceList$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERVisibleString: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: boolean isConstrained()>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean isMarkedForCascadingOnAnnotatedObjectOrContainerElements()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><com.google.common.collect.ImmutableMap: java.util.Set entrySet()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areParameterConstraintsIgnoredFor(java.lang.reflect.Member,int)>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl$ExecutableParameterKey: void <init>(org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl,java.lang.reflect.Member,int)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType[] _resolveSuperInterfaces(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.authentication.www.BasicAuthenticationFilter: void <init>(org.springframework.security.authentication.AuthenticationManager,org.springframework.security.web.AuthenticationEntryPoint)>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromGenericType(com.fasterxml.classmate.util.ClassStack,com.fasterxml.classmate.GenericType,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.ResolvedType[] typeParameterArray()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.String typeName(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1BitString: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.misc.Signal: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: boolean hasBeanClass()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.JumboEnumSet: boolean isEmpty()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.util.Optional getExtractedType()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,boolean)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.beans.factory.support.RootBeanDefinition getResolvedDecoratedDefinition(org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERExternal: int hashCode()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.ObjectName: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.StringCharacterIterator: int hashCode()>
<java.util.Collections$SynchronizedMap: void clear()>-><org.springframework.http.HttpHeaders: void clear()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Date: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<javax.el.Util: java.lang.ClassLoader getContextClassLoader()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><java.util.HashSet: boolean isEmpty()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpProperties$Encoding$Type: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void registering(com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext$1: void registering()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellFill: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.ResolvedType getParentClass()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: java.util.Set entrySet()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.lang.Object[])>-><java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>
<com.zaxxer.hikari.pool.ProxyConnection: void closeStatements()>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String getPoolName()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.google.common.collect.ImmutableList: int hashCode()>
<org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>-><java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.boot.actuate.autoconfigure.endpoint.jmx.DefaultEndpointObjectNameFactory: javax.management.ObjectName getObjectName(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><org.springframework.boot.actuate.endpoint.AbstractExposableEndpoint: org.springframework.boot.actuate.endpoint.EndpointId getEndpointId()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$SetFromMap: boolean remove(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean remove(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<org.springframework.context.support.StaticApplicationContext: void <init>()>-><org.springframework.context.support.StaticApplicationContext: void <init>(org.springframework.context.ApplicationContext)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.ZoneId: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager: void <init>(javax.validation.ConstraintValidatorFactory,org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorInitializationContext)>-><java.lang.Object: void <init>()>
<java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.io.StringWriter: java.lang.StringBuffer getBuffer()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: java.lang.String toString()>
<org.springframework.context.support.AbstractApplicationContext: boolean isTypeMatch(java.lang.String,org.springframework.core.ResolvableType)>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Thread: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.asm.Type: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERBMPString: java.lang.String toString()>
<javax.management.openmbean.CompositeDataInvocationHandler: void <init>(javax.management.openmbean.CompositeData,com.sun.jmx.mbeanserver.MXBeanLookup)>-><java.lang.Object: void <init>()>
<org.springframework.boot.logging.LoggerGroups: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: int hashCode()>
<org.springframework.context.support.ResourceBundleMessageSource: java.util.ResourceBundle loadBundle(java.io.Reader)>-><java.util.PropertyResourceBundle: void <init>(java.io.Reader)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void removeClassLoader(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean remove(javax.management.ObjectName,java.lang.ClassLoader)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.Rectangle: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.el.Util$CacheKey: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.http.HttpHeaders: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.security.ssl.ProtocolList: java.util.ArrayList convert(java.lang.String[])>-><sun.security.ssl.ProtocolVersion: sun.security.ssl.ProtocolVersion valueOf(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean containsKey(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator$AggregateResourceBundleControl: void <init>(org.hibernate.validator.resourceloading.PlatformResourceBundleLocator$1)>-><org.hibernate.validator.resourceloading.PlatformResourceBundleLocator$AggregateResourceBundleControl: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.io.ObjectStreamField: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableList: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.lang.ProcessEnvironment$StringEntrySet: int size()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap$EntryIterator$Entry: int hashCode()>
<com.wuwenze.poi.util.POIUtil: void write(org.apache.poi.xssf.streaming.SXSSFWorkbook,java.io.OutputStream)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void flush()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<org.springframework.security.web.server.header.CacheControlServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder header(java.lang.String,java.lang.String[])>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: int hashCode()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.ProtectionDomain: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Integer: int hashCode()>
<javax.management.ObjectInstance: void <init>(javax.management.ObjectName,java.lang.String)>-><javax.management.ObjectName: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$SingletonMap: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><sun.net.idn.Punycode: char asciiCaseMap(char,boolean)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromParamType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.classmate.TypeBindings)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<javax.net.ssl.SSLContextSpi: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.reflect.Type unwrapOptional(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.wuwenze.poi.pojo.ExcelMapping: int hashCode()>
<springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.aspectj.util.FuzzyBoolean$NeverFuzzyBoolean: void <init>()>-><org.aspectj.util.FuzzyBoolean: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><org.springframework.core.env.ReadOnlySystemAttributesMap: void clear()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><java.io.ByteArrayInputStream: void <init>(byte[])>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.MediaTypeReader: void <init>()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.util.Properties: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings: void <clinit>()>-><org.springframework.boot.web.server.MimeMappings: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.net.URI: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.sql.Timestamp: java.lang.String toString()>
<org.apache.catalina.valves.ValveBase: void <init>(boolean)>-><org.apache.catalina.util.LifecycleMBeanBase: void <init>()>
<org.hibernate.validator.internal.util.privilegedactions.SetContextClassLoader: org.hibernate.validator.internal.util.privilegedactions.SetContextClassLoader action(java.lang.ClassLoader)>-><org.hibernate.validator.internal.util.privilegedactions.SetContextClassLoader: void <init>(java.lang.ClassLoader)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getValue()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<javax.crypto.KeyAgreement: void <init>(javax.crypto.KeyAgreementSpi,java.security.Provider,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FormatCache$MultipartKey: int hashCode()>
<org.springframework.web.bind.annotation.RequestMethod: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.types.ResolvedInterfaceType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType[])>
<org.springframework.aop.framework.CglibAopProxy: void doValidateClass(java.lang.Class,java.lang.ClassLoader,java.util.Set)>-><java.lang.reflect.Method: int getModifiers()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.commons.beanutils.MethodUtils$MethodDescriptor: int hashCode()>
<com.sun.jmx.mbeanserver.PerInterface: java.lang.Object getAttribute(java.lang.Object,java.lang.String,java.lang.Object)>-><com.sun.jmx.mbeanserver.MBeanIntrospector: java.lang.Object invokeM(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.asm.Handle: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: void <init>(java.util.concurrent.ExecutorService)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.String: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.SubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.io.File: int hashCode()>
<org.aspectj.bridge.MessageUtil$2: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<org.apache.tomcat.util.modeler.ManagedBean: void addAttribute(org.apache.tomcat.util.modeler.AttributeInfo)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><com.alibaba.fastjson.JSONObject: java.util.Collection values()>
<org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: void <init>(org.springframework.web.context.ConfigurableWebApplicationContext)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.p6spy.engine.logging.Category: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.TreeSet: boolean isEmpty()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1Integer: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1OctetString: int hashCode()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object dereferenceValue(java.lang.Object)>-><java.lang.ref.Reference: java.lang.Object get()>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><sun.net.idn.StringPrep: void getValues(char,sun.net.idn.StringPrep$Values)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><javax.management.ObjectInstance: java.lang.String getClassName()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.lang.Object run(java.security.PrivilegedAction)>-><org.hibernate.validator.internal.util.privilegedactions.GetDeclaredMethods: java.lang.Object run()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Proxy$Key2: int hashCode()>
<java.io.BufferedOutputStream: void flushBuffer()>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(byte[],int,int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.alibaba.fastjson.JSONObject: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.Type getComponentType()>-><org.hibernate.validator.internal.util.TypeHelper$1: java.lang.reflect.Type getGenericComponentType()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Field,boolean)>-><java.lang.Object: java.lang.Class getClass()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.calendar.Era: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.ref.WeakReference makeReference(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: void <init>(java.lang.Object)>
<sun.security.ssl.SignatureAndHashAlgorithm: void supports(sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm,sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm,java.lang.String,int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.github.xiaoymin.knife4j.spring.configuration.Knife4jProperties: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Duration: int hashCode()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.OptionalValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: int hashCode()>
<java.util.Currency$1: java.lang.Void run()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.DecimalFormatSymbols: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableSet: int hashCode()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.LinkedHashMap: void afterNodeInsertion(boolean)>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type resolveTypes(java.util.Map,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.ResolvableType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<org.springframework.beans.factory.InjectionPoint: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><org.springframework.beans.factory.InjectionPoint: org.springframework.core.MethodParameter obtainMethodParameter()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<com.sun.jmx.mbeanserver.Introspector: void checkCompliance(java.lang.Class)>-><com.sun.jmx.mbeanserver.Introspector: java.lang.Class getMXBeanInterface(java.lang.Class)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.apache.http.HttpHost: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.DefaultOperationReader: void <init>()>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<sun.security.ssl.CipherSuite$MacAlg: void <init>(java.lang.String,int,int,int)>-><java.lang.Object: void <init>()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.LifecycleEvent: java.lang.String getType()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void removeClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.reflect.Method: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ThreadFactory lambda$initializeHouseKeepingExecutorService$3()>-><com.zaxxer.hikari.util.UtilityElf$DefaultThreadFactory: void <init>(java.lang.String,boolean)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.io.StringWriter: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><org.apache.catalina.core.ApplicationContextFacade: void <init>(org.apache.catalina.core.ApplicationContext)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.map.type.CollectionLikeType: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.OrderUtils: java.lang.Integer getPriority(java.lang.Class)>-><org.springframework.core.annotation.MissingMergedAnnotation: java.util.Optional getValue(java.lang.String,java.lang.Class)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$RequestMappingInfoHandlerMappingDescriptionProvider: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,org.springframework.http.MediaType[])>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.AbstractCollection: boolean isEmpty()>
<org.aspectj.weaver.patterns.ThisOrTargetAnnotationPointcut: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: boolean neverHasTarget()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(javax.management.DynamicMBean,java.lang.String,javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String safeGetClassName(javax.management.DynamicMBean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Currency: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.IdentityHashMap$KeySet: java.lang.Object[] toArray(java.lang.Object[])>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FormatCache$MultipartKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<sun.util.locale.provider.LocaleServiceProviderPool: java.util.List findProviders(java.util.Locale)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.factory.support.MethodOverrides: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.io.File: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><javax.el.Util$CacheValue: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: int compareTo(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.reflect.GenericDeclaration getGenericDeclaration()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Instant: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$EmbeddedDatabaseConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Byte: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.wuwenze.poi.pojo.ExcelProperty: int hashCode()>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: com.fasterxml.jackson.databind.JavaType findSerializationType(com.fasterxml.jackson.databind.introspect.Annotated,boolean,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withStaticTyping()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.MonthDay: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanNotificationInfo: int hashCode()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusMetricsExportAutoConfiguration$PrometheusScrapeEndpointConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.CodeSource: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.chrono.AbstractChronology: int hashCode()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$SynchronizedCollection: boolean remove(java.lang.Object)>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.util.ArrayList: java.lang.Object get(int)>
<org.hibernate.validator.internal.util.privilegedactions.SetContextClassLoader: org.hibernate.validator.internal.util.privilegedactions.SetContextClassLoader action(java.lang.ClassLoader)>-><org.hibernate.validator.internal.util.Contracts: void assertNotNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.LocalDateTime: java.lang.String toString()>
<org.aspectj.weaver.AdviceKind: void <clinit>()>-><org.aspectj.weaver.AdviceKind: void <init>(java.lang.String,int,int,boolean,boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.ArrayNode: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaProxy: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1TaggedObject: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.JSON: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void <clinit>()>-><java.util.concurrent.TimeUnit$4: long toMillis(long)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getClassLevelConstraints(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findClassLevelConstraints(java.lang.Class)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Enum: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.reflect.Modifier: boolean isFinal(int)>
<org.apache.commons.collections.FastHashMap: void <init>(java.util.Map)>-><java.util.HashMap: void <init>(java.util.Map)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.util.PropertySource$Util: java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.DataFormatReaders: void <init>(java.util.Collection)>-><java.util.ArrayDeque: int size()>
<org.springframework.web.util.NestedServletException: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><java.util.ArrayList: void <init>(int)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.EnumMap: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<register-finalize <org.aspectj.weaver.RuntimeVersion: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.File: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentSkipListMap: void <clinit>()>-><sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>
<org.hibernate.validator.internal.util.privilegedactions.NewInstance: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$EmptyList: boolean isEmpty()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findClassLevelConstraints(java.lang.Class)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.Object invokeM2(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object)>-><com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.Object invokeM2(com.sun.jmx.mbeanserver.ConvertingMethod,java.lang.Object,java.lang.Object[],java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$1Adapter: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.IdentityHashMap$KeySet: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.misc.Signal: int hashCode()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: boolean addAll(java.util.Collection)>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.Map toImmutableMap(java.util.Map)>-><java.util.Collections$EmptyMap: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.imageio.ImageTypeSpecifier$Interleaved: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.wuwenze.poi.factory.ExcelMappingFactory: com.wuwenze.poi.pojo.ExcelMapping loadExcelMappingByClass(java.lang.Class)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Hashtable$KeySet: boolean remove(java.lang.Object)>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String getName()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$EmptyMap: java.util.Set entrySet()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$1: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERUTF8String: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><ch.qos.logback.core.subst.Node: int hashCode()>
<com.sun.jmx.mbeanserver.MBeanIntrospector: java.lang.Object invokeM(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object)>-><com.sun.jmx.mbeanserver.StandardMBeanIntrospector: java.lang.Object invokeM2(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.WeakHashMap$KeySet: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Date: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.poi.ss.util.CellRangeAddressBase: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.validation.FieldError: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.util.List,java.util.Set,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.Map)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<org.springframework.security.crypto.password.NoOpPasswordEncoder: void <clinit>()>-><org.springframework.security.crypto.password.NoOpPasswordEncoder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties: java.lang.String lambda$setPath$0(java.io.File)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.http.ResponseEntity: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.core.JsonLocation: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableMap: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.xml.namespace.QName: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.TreeSet: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.TreeSet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger wrapLogger(org.slf4j.Logger)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><org.springframework.web.servlet.handler.MappedInterceptor: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.XSSFFont: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Hashtable: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaSetters: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>
<org.apache.catalina.core.ApplicationContextFacade: void <init>(org.apache.catalina.core.ApplicationContext)>-><java.util.HashMap: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.springframework.boot.actuate.endpoint.web.annotation.DiscoveredServletEndpoint: java.lang.String lambda$new$0(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.classmate.util.LRUTypeCache$CacheMap: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.HashMap: int size()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.util.TreeSet: boolean isEmpty()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractList: int hashCode()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><javax.management.ObjectInstance: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.JumboEnumSet: boolean remove(java.lang.Object)>
<sun.security.ssl.Debug: void Help()>-><java.io.PrintStream: void println()>
<reactor.core.scheduler.ParallelScheduler: void <clinit>()>-><java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.util.concurrent.DirectExecutor: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicIntegerArray: java.lang.String toString()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<register-finalize <javax.el.ExpressionFactory: java.lang.String getClassNameJreDir()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.hibernate.validator.internal.engine.ValidationContext$ValidatorScopedContext: void <init>(org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: javax.validation.MessageInterpolator getMessageInterpolator()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Throwable)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.AbstractMap$1: boolean contains(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.util.TypeVariableBindings: java.util.Map getTypeVariableBindings(java.lang.Class)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object toOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.lang.ProcessEnvironment$StringKeySet: boolean isEmpty()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.font.AttributeValues: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.cglib.core.Signature: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.MapDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object,java.util.Map)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERT61String: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.beans.WildcardTypeImpl: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><com.google.common.collect.JdkBackedImmutableMap: java.lang.Object get(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromParamType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.reactive.ReactiveManagementChildContextConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusMetricsExportAutoConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetadata(java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable[])>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForArrayType(java.lang.reflect.AnnotatedArrayType)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromParamType(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.jackson.databind.type.TypeBindings)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Throwable: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.poi.ss.format.CellFormat: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: void <init>(java.util.Set)>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<javax.management.MBeanServerDelegate: void sendNotification(javax.management.Notification)>-><javax.management.NotificationBroadcasterSupport: void sendNotification(javax.management.Notification)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.URI: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.util.RawValue: int hashCode()>
<java.net.IDN: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<javax.xml.datatype.FactoryFinder: java.lang.String which(java.lang.Class)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.crypto.CryptoAllPermission: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.SubList: java.util.Iterator iterator()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType buildAnnotatedType(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.text.normalizer.UCharacterIterator: int getText(char[])>-><sun.text.normalizer.ReplaceableUCharacterIterator: int getText(char[],int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.OffsetTime: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<java.lang.invoke.MemberName: void <init>(byte,java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.invoke.MemberName: void init(java.lang.Class,java.lang.String,java.lang.Object,int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String,org.springframework.context.annotation.MBeanExportConfiguration$1)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String)>
<org.springframework.web.context.support.GenericWebApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><org.springframework.context.support.GenericApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.ASN1Integer: java.lang.String toString()>
<java.lang.invoke.MemberName: void <init>(byte,java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Attributes: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void rethrowMaybeMBeanException(java.lang.Throwable)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void rethrow(java.lang.Throwable)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.reflect.Type getGenericComponentType()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.xssf.usermodel.XSSFFont: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<org.apache.catalina.util.LifecycleMBeanBase: void unregister(javax.management.ObjectName)>-><org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.util.CollectionUtils$MultiValueMapAdapter: java.util.Set keySet()>-><java.util.Collections$UnmodifiableMap: java.util.Set keySet()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.CodeSigner: int hashCode()>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>-><java.util.stream.Collectors$CollectorImpl: java.util.Set characteristics()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$4: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Character$Subset: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.Extension: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.util.RawValue: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>-><org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: javax.el.ExpressionFactory buildExpressionFactory()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.GlyphLayout$LayoutEngineKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: int hashCode()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><sun.text.normalizer.UCharacterIterator: sun.text.normalizer.UCharacterIterator getInstance(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.BeanMetadataAttribute: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<org.springframework.boot.actuate.trace.http.HttpExchangeTracer: java.lang.Long lambda$sendingResponse$0(org.springframework.boot.actuate.trace.http.HttpTrace)>-><org.springframework.boot.actuate.trace.http.HttpTrace: java.time.Instant getTimestamp()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanNotificationInfo: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType,int,float)>-><com.sun.jmx.mbeanserver.GetPropertyAction: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: int buildHashCode(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.location.BeanConstraintLocation: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.alibaba.fastjson.util.FieldInfo: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><org.springframework.util.CollectionUtils: org.springframework.util.MultiValueMap unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)>
<org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1Set: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><io.netty.buffer.AbstractByteBuf: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.MutablePropertyValues: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration: void <init>()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.Object getValue(java.lang.annotation.Annotation)>-><org.springframework.core.annotation.AnnotationUtils: java.lang.Object getValue(java.lang.annotation.Annotation,java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.util.Optional getExtractedType(java.lang.reflect.AnnotatedParameterizedType)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration: void <init>()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.asm.Handle: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration: void <init>()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.util.SimpleTimeZone: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.apache.catalina.LifecycleException: void <init>(java.lang.String,java.lang.Throwable)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Vector$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<javax.net.ssl.SSLEngine: void <init>(java.lang.String,int)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$SetFromMap: int size()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int hashCode()>
<java.util.stream.Streams$ConcatSpliterator: java.util.Spliterator trySplit()>-><java.util.ArrayDeque$DeqSpliterator: java.util.Spliterator trySplit()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.JSONObject: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.JSONArray: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.poi.ss.util.CellRangeAddressBase: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.CodeSigner: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<com.sun.jmx.mbeanserver.NamedObject: void <init>(javax.management.ObjectName,javax.management.DynamicMBean)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.TreeSet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.OptionalIntValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.OptionalIntValueExtractor: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.method.ControllerAdviceBean: int hashCode()>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.ASN1Null: java.lang.String toString()>
<org.springframework.core.io.DefaultResourceLoader: java.util.Map getResourceCache(java.lang.Class)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$4: java.lang.String toString()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Collection)>-><java.util.HashMap: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.RenderingHints$Key: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><com.alibaba.fastjson.JSONArray: boolean addAll(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.security.MessageDigest: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>-><sun.net.util.IPAddressUtil: boolean isIPv4LiteralAddress(java.lang.String)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _resolveSuperClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.boot.web.server.MimeMappings: void <clinit>()>-><org.springframework.boot.web.server.MimeMappings: org.springframework.boot.web.server.MimeMappings unmodifiableMappings(org.springframework.boot.web.server.MimeMappings)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FormatCache$MultipartKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.DERExternal: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.sql.Date: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl$AbstractTLSContext: void <init>(sun.security.ssl.SSLContextImpl$1)>-><sun.security.ssl.SSLContextImpl$AbstractTLSContext: void <init>()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList: int size()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<sun.security.ssl.CipherSuite: void <clinit>()>-><sun.security.ssl.CipherSuite: void add(java.lang.String,int)>
<org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>-><org.springframework.web.method.HandlerMethod: java.lang.annotation.Annotation getMethodAnnotation(java.lang.Class)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Predicates$NotPredicate: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.Color: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<java.util.Collection: boolean removeIf(java.util.function.Predicate)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.catalina.util.LifecycleMBeanBase: void unregister(javax.management.ObjectName)>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry: void unregisterComponent(javax.management.ObjectName)>
<sun.security.ssl.CipherSuite: void <clinit>()>-><sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.ParameterizedType parameterizeClassCapture(java.lang.Class,java.util.Map)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.Class getErasedReferenceType(java.lang.reflect.Type)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodType: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.font.TransformAttribute: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.lang.reflect.Field: java.lang.reflect.AnnotatedType getAnnotatedType()>-><sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.Vector: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.lang.ProcessEnvironment$StringEntrySet: int size()>
<com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer: void parseArray(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.util.Collection)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<java.lang.invoke.MemberName: void <init>(byte,java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.MonthDay: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.Provider$Service: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.locale.Extension: java.lang.String toString()>
<org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler: void <init>(javax.xml.namespace.QName)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.geom.Point2D: int hashCode()>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><java.io.File: void <init>(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><javax.el.ELException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: void addReference(javax.management.ObjectName,java.lang.Object)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.Signature: int hashCode()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.web.util.pattern.PathElement: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<org.hibernate.validator.internal.engine.ValidatorImpl: void <init>(javax.validation.ConstraintValidatorFactory,org.hibernate.validator.internal.metadata.BeanMetaDataManager,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager,org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator,org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: javax.validation.TraversableResolver getTraversableResolver()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>-><java.util.stream.Collectors$CollectorImpl: java.util.function.Supplier supplier()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.util.Collection values()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultUserInfoRestTemplateFactory: org.springframework.security.oauth2.client.OAuth2RestTemplate getUserInfoRestTemplate()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$SingleValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.Class access$200(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.EventObject: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>-><java.util.HashMap: boolean isEmpty()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.HashMap: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.reflect.ParameterizedType,com.alibaba.fastjson.parser.ParserConfig)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<java.io.DataOutputStream: void writeByte(int)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariableBindings: java.util.Map getTypeVariableBindings(java.lang.Class)>-><org.hibernate.validator.internal.util.TypeVariableBindings: void collectTypeBindings(java.lang.Class,java.util.Map,java.util.Map)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.reflect.Proxy$Key1: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.function.RouterFunctions$DefaultRouterFunction: void <init>(org.springframework.web.servlet.function.RequestPredicate,org.springframework.web.servlet.function.HandlerFunction)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>-><org.hibernate.validator.internal.metadata.core.ConstraintHelper: boolean isConstraintAnnotation(java.lang.Class)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.ZoneId: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$KeySet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.validation.beanvalidation.SpringValidatorAdapter: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.method.ControllerAdviceBean: int hashCode()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.util.HashMap: void clear()>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><java.lang.Object: void <init>()>
<sun.security.jca.ProviderConfig: void <init>(java.security.Provider)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.HashSet: int size()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<sun.security.ssl.JsseJce: java.security.Signature getSignature(java.lang.String)>-><java.security.Signature: java.security.Signature getInstance(java.lang.String)>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><org.springframework.security.core.userdetails.memory.UserAttribute: java.util.List getAuthorities()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<java.lang.invoke.MemberName: void <init>(byte,java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.jmx.mbeanserver.MXBeanSupport: void register(javax.management.MBeanServer,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.MXBeanLookup: com.sun.jmx.mbeanserver.MXBeanLookup lookupFor(javax.management.MBeanServerConnection)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,int,boolean)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.format.CellFormat: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ObservableValueValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: com.fasterxml.jackson.databind.PropertyName findImplicitParamName(int)>-><java.lang.String: boolean isEmpty()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Thread$WeakClassKey: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.context.support.ServletContextResource: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.UUID: boolean equals(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>-><org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: int hashCode()>
<org.springframework.http.client.OkHttp3ClientHttpResponse: void <init>(okhttp3.Response)>-><org.springframework.http.client.AbstractClientHttpResponse: void <init>()>
<org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object initializeBean(java.lang.Object,java.lang.String)>-><org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object initializeBean(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>
<java.lang.ThreadGroup: void <init>(java.lang.String)>-><java.lang.Thread: java.lang.Thread currentThread()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><com.fasterxml.classmate.ResolvedType: java.util.List typeParametersFor(java.lang.Class)>
<sun.security.ssl.SSLAlgorithmDecomposer$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.math.BigInteger: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$4: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.subst.Node: int hashCode()>
<com.alibaba.fastjson.JSONPath: java.lang.Object getArrayItem(java.lang.Object,int)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String getCanonicalKeyPropertyListString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.RegularEnumSet: boolean isEmpty()>
<java.util.Collections$UnmodifiableCollection: java.util.Spliterator spliterator()>-><java.util.concurrent.ArrayBlockingQueue: java.util.Spliterator spliterator()>
<javax.management.NotificationBroadcasterSupport$SendNotifJob: void <init>(javax.management.NotificationBroadcasterSupport,javax.management.Notification,javax.management.NotificationBroadcasterSupport$ListenerInfo)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$SecurityReactorContextSubscriberRegistrar: java.util.Map getContextAttributes()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: int getOrder(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.io.InputStream lambda$newBundle$0(boolean,java.lang.ClassLoader,java.lang.String)>-><java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: com.fasterxml.jackson.databind.PropertyName findImplicitParamName(int)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: java.lang.String findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.openxml4j.opc.PackageRelationship: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.core.ResolvableType: org.springframework.core.ResolvableType resolveVariable(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation$LocationInfo pushLocation(byte,short)>-><sun.reflect.annotation.TypeAnnotation$LocationInfo: void <init>(int,sun.reflect.annotation.TypeAnnotation$LocationInfo$Location[])>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ArrayElement: void <init>(java.lang.reflect.AnnotatedArrayType)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.AnnotatedType getAnnotatedGenericComponentType()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.lang.String lambda$processMap$0(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.stream.Collectors: java.util.Set lambda$toSet$4(java.util.Set,java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<javax.el.ExpressionFactory$CacheValue: void setFactoryClass(java.lang.Class)>-><java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><com.alibaba.fastjson.JSONObject: void clear()>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariPool: boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)>-><com.zaxxer.hikari.pool.HikariPool: void closeConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.google.common.base.Predicates$AndPredicate: int hashCode()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<java.util.stream.Streams$ConcatSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.apache.logging.log4j.message.ObjectMessage: void <init>(java.lang.Object)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean remove(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<org.apache.catalina.LifecycleEvent: void <init>(org.apache.catalina.Lifecycle,java.lang.String,java.lang.Object)>-><java.util.EventObject: void <init>(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForParameterizedType(java.lang.reflect.AnnotatedParameterizedType,java.lang.reflect.TypeVariable[])>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.awt.RenderingHints$Key: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.RegularEnumSet: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.Font: java.lang.String toString()>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><java.lang.StringBuffer: void <init>(java.lang.String)>
<org.springframework.cglib.proxy.MethodInterceptorGenerator: void generateStatic(org.springframework.cglib.core.CodeEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<org.springframework.util.Assert: void noNullElements(java.util.Collection,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DateFormatSymbols: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.security.Provider: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.MapPropertyKeyExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: int size()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$EmptyMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<java.lang.invoke.MemberName: void <init>(byte,java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.invoke.MethodHandleStatics: java.lang.RuntimeException newIllegalArgumentException(java.lang.String)>
<org.springframework.cglib.core.EmitUtils: void hash_object(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.internal.CustomizerRegistry)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellFill: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanIntrospector: void unwrapInvocationTargetException(java.lang.reflect.InvocationTargetException)>-><javax.management.MBeanException: void <init>(java.lang.Exception,java.lang.String)>
<org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.security.ssl.SSLAlgorithmConstraints: void <clinit>()>-><sun.security.ssl.SSLAlgorithmDecomposer: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<sun.net.idn.StringPrep$Values: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanOperationInfo: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<java.lang.reflect.Parameter: java.lang.Class getType()>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.el.ExpressionFactory$CacheKey: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.context.support.ApplicationListenerDetector: int hashCode()>
<org.springframework.context.annotation.ClassPathBeanDefinitionScanner: boolean checkCandidate(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>-><org.springframework.context.support.AbstractApplicationContext: boolean containsBeanDefinition(java.lang.String)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getNewMBeanClassName(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.jmx.EndpointMBean: javax.management.MBeanInfo getMBeanInfo()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromVariable(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.classmate.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.reflect.Type[] getBounds()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.util.ClassStack: void <init>(java.lang.Class)>
<org.springframework.web.context.request.async.WebAsyncUtils: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.openxml4j.opc.PackagePartName: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Clock$SystemClock: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Optional: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><org.springframework.util.LinkedMultiValueMap: java.util.Collection values()>
<org.springframework.web.util.pattern.PathPatternParser: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>-><java.util.ArrayList$SubList: java.util.List subList(int,int)>
<com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DigitList: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><java.net.IDN: java.lang.StringBuffer toASCIILower(java.lang.StringBuffer)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Null: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: long getTimeToLive(java.lang.String,java.util.Locale)>-><org.springframework.context.support.AbstractResourceBasedMessageSource: long getCacheMillis()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void collectTypeBindings(java.lang.Class,java.util.Map,java.util.Map)>-><java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration$ServletTraceFilterConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.core.SimpleAliasRegistry: void registerAlias(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.ss.usermodel.ExcelStyleDateFormatter: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$EnumMapping: java.lang.Enum fromNonNullOpenValue(java.lang.Object)>-><java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int)>-><sun.security.ssl.CipherSuite: void <init>(java.lang.String,int)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$DataSourcePoolMetadataMetricsConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getConstructorMetaData(java.lang.Class)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void preDeregisterInvoke(javax.management.MBeanRegistration)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void throwMBeanRegistrationException(java.lang.Throwable,java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1UTCTime: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Object: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.QueryStringUriTemplateDecorator: void <init>()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><java.util.Arrays$ArrayList: boolean contains(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.RegularImmutableMap$KeySet: int size()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.AbstractMap$1: int size()>
<javax.servlet.DispatcherType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: org.hibernate.validator.internal.metadata.core.MetaConstraint create(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.core.MetaConstraints: void addValueExtractorDescriptorForTypeArgumentLocation(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.List,org.hibernate.validator.internal.metadata.location.TypeArgumentConstraintLocation)>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.InputRecord: void enableFormatChecks()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.lang.Object run(java.security.PrivilegedAction)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getValue()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: boolean lambda$getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates$4(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$SynchronizedCollection: int size()>
<javax.management.MBeanServerInvocationHandler: void <init>(javax.management.MBeanServerConnection,javax.management.ObjectName,boolean)>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object castToJavaBean(java.util.Map,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer: void <init>()>-><java.util.ArrayList: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.PropertyPermission: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.BasicPermission: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.reflect.Method: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addNewDomMoi(javax.management.DynamicMBean,java.lang.String,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>
<javax.management.openmbean.CompositeDataSupport: void <init>(javax.management.openmbean.CompositeType,java.lang.String[],java.lang.Object[])>-><javax.management.openmbean.CompositeDataSupport: java.util.SortedMap makeMap(java.lang.String[],java.lang.Object[])>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.el.Util$CacheKey: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.HttpHeaders: int hashCode()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setAutowireCandidateResolver(org.springframework.beans.factory.support.AutowireCandidateResolver)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.util.Debug: void println(java.lang.String)>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.springframework.aop.framework.CglibAopProxy: boolean implementsInterface(java.lang.reflect.Method,java.util.Set)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: void merge(org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions)>-><java.util.HashMap: void putAll(java.util.Map)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.security.web.csrf.CsrfFilter: void setRequireCsrfProtectionMatcher(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap$1: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERBMPString: int hashCode()>
<sun.text.normalizer.NormalizerImpl: void <clinit>()>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Vector$Itr: boolean hasNext()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.poi.xssf.usermodel.XSSFName: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: org.springframework.boot.actuate.endpoint.ExposableEndpoint getFilterEndpoint(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointDiscoverer: org.springframework.boot.actuate.endpoint.ExposableEndpoint createEndpoint(java.lang.Object,org.springframework.boot.actuate.endpoint.EndpointId,boolean,java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.alibaba.fastjson.JSONObject: java.util.Set entrySet()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.cglib.core.internal.CustomizerRegistry: void add(org.springframework.cglib.core.KeyFactoryCustomizer)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <init>()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.ProtectionDomain: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Thread: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: int hashCode()>
<org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><sun.security.ssl.Debug: boolean isOn(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.xssf.usermodel.XSSFFont: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Collections$1: boolean hasNext()>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.OptionalDouble: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Present: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.Duration: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object get(java.lang.Object)>
<org.jboss.logging.Log4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.ArrayList newArrayList()>-><java.util.ArrayList: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<sun.security.jca.ProviderList: sun.security.jca.ProviderList newList(java.security.Provider[])>-><sun.security.jca.ProviderList: void <init>(sun.security.jca.ProviderConfig[],boolean)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.freemarker.FreeMarkerNonWebConfiguration: void <init>(org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.NamedObject: void <init>(javax.management.ObjectName,javax.management.DynamicMBean)>-><javax.management.ObjectName: boolean isPattern()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<org.springframework.core.SimpleAliasRegistry: void checkForAliasCircle(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>
<com.alibaba.fastjson.util.FieldInfo: boolean getArgument(java.lang.reflect.Type[],java.lang.reflect.TypeVariable[],java.lang.reflect.Type[])>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<org.aspectj.weaver.UnresolvedType: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forPrimitiveType(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Long: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.juli.logging.DirectJDKLog: boolean isInfoEnabled()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.nio.ByteBuffer: int hashCode()>
<com.sun.jmx.mbeanserver.NamedObject: void <init>(javax.management.ObjectName,javax.management.DynamicMBean)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><org.springframework.boot.actuate.trace.http.Include: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><org.apache.commons.collections.FastHashMap: void clear()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: void <init>(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: void <init>(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: int buildHashCode(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>-><java.lang.Object: int hashCode()>
<org.aspectj.util.FuzzyBoolean$NoFuzzyBoolean: void <init>()>-><org.aspectj.util.FuzzyBoolean: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.wuwenze.poi.pojo.ExcelProperty: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Hashtable: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.sql.Timestamp: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] access$400(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>
<sun.text.normalizer.TrieIterator: boolean checkNullNextTrailIndex()>-><sun.net.idn.StringPrep$StringPrepTrieImpl: int getFoldingOffset(int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.TabularDataSupport: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedTomcat: void <init>()>
<com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.NamedObject: javax.management.DynamicMBean getObject()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<com.sun.jmx.mbeanserver.MXBeanLookup: java.lang.Object objectNameToMXBean(javax.management.ObjectName,java.lang.Class)>-><java.lang.ref.Reference: java.lang.Object get()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.ZoneId: int hashCode()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><reactor.util.context.Context1: java.lang.Object getKey()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<sun.reflect.annotation.TypeAnnotationParser: java.util.Map mapTypeAnnotations(sun.reflect.annotation.TypeAnnotation[])>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(java.util.Map)>-><java.util.HashMap: int size()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><java.util.Hashtable$Enumerator: boolean hasMoreElements()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void assertNoDuplicateOperations(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.util.MultiValueMap)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Locale: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object newKeyReference(java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$WeakKeyReference: void <init>(java.lang.Object,int,java.lang.ref.ReferenceQueue)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<reactor.core.scheduler.Schedulers: void <clinit>()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.LinkedHashMap$LinkedKeySet: int size()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.util.ClassStack: void addSelfReference(com.fasterxml.classmate.types.ResolvedRecursiveType)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void <init>(java.util.EventListener)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.Slf4JLogger: void debug(java.lang.String)>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions getAnnotationProcessingOptionsFromNonDefaultProviders()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><org.springframework.core.type.classreading.CachingMetadataReaderFactory: void setCacheLimit(int)>
<java.util.Hashtable: void <init>(java.util.Map)>-><java.util.Hashtable: void putAll(java.util.Map)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy()>-><org.springframework.security.web.csrf.CsrfAuthenticationStrategy: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.xmlbeans.StringEnumAbstractBase: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.core.ResolvableType getReturnTypeForFactoryMethod(org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.env.PropertySource: int hashCode()>
<org.aspectj.weaver.tools.PointcutPrimitive: void <init>(java.lang.String,int)>-><org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorConfiguration: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <init>()>-><org.slf4j.LoggerFactory: org.slf4j.ILoggerFactory getILoggerFactory()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.OffsetTime: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.aop.framework.JdkDynamicAopProxy: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.TreeMap$KeySet: int size()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.util.LRUTypeCache: com.fasterxml.classmate.ResolvedType find(com.fasterxml.classmate.util.ResolvedTypeKey)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Duration: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><org.springframework.util.StringUtils: java.lang.String uriDecode(java.lang.String,java.nio.charset.Charset)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.text.AttributeEntry: java.lang.String toString()>
<sun.security.ssl.CipherSuite: void <clinit>()>-><sun.security.ssl.SunJSSE: boolean isFIPS()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getResource(javax.management.DynamicMBean)>-><com.sun.jmx.mbeanserver.MBeanSupport: java.lang.Object getResource()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<io.micrometer.prometheus.PrometheusNamingConvention: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.TypeVariable getExtractedTypeParameter(java.lang.reflect.AnnotatedParameterizedType,java.lang.Class)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.util.ArrayList: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <init>(org.springframework.security.web.server.csrf.CsrfWebFilter$1)>-><org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Collections$EmptyEnumeration: java.lang.Object nextElement()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.YearMonth: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.core.publisher.Mono: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<javax.management.MBeanTrustPermission: void validate(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><org.springframework.security.config.annotation.AbstractSecurityBuilder: java.lang.Object build()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.security.Provider: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.JdkLogger: void debug(java.lang.String)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>-><java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.HashMap: boolean isEmpty()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<javax.el.ExpressionFactory: java.lang.String discoverClassName(java.lang.ClassLoader)>-><javax.el.ExpressionFactory: java.lang.String getClassNameJreDir()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.logging.LoggersEndpointAutoConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.DERIA5String: int hashCode()>
<sun.security.ssl.JsseJce$EcAvailability: void <clinit>()>-><sun.security.ssl.JsseJce: java.security.Signature getSignature(java.lang.String)>
<javax.management.MBeanServerDelegate: void sendNotification(javax.management.Notification)>-><javax.management.Notification: long getSequenceNumber()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$Values: int size()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType,int,float)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: void <init>(java.lang.String,java.lang.String)>
<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJavaUncached0(java.lang.String,boolean)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<java.security.Policy$2: java.security.Policy run()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<org.aspectj.weaver.MemberKind: void <init>(java.lang.String,int)>-><org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$EntrySet: int size()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>-><java.lang.String: int indexOf(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.OptionalInt: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<org.springframework.http.HttpStatus$Series: void <clinit>()>-><org.springframework.http.HttpStatus$Series: void <init>(java.lang.String,int,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: void init()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedSortedMap: void <init>(java.util.SortedMap)>-><java.util.Collections$SynchronizedMap: void <init>(java.util.Map)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.ReactiveCloudFoundryActuatorAutoConfiguration: org.springframework.boot.actuate.info.InfoContributor lambda$cloudFoundryInfoEndpointWebExtension$0(org.springframework.boot.info.GitProperties,org.springframework.boot.actuate.info.InfoContributor)>-><org.springframework.boot.actuate.info.GitInfoContributor: void <init>(org.springframework.boot.info.GitProperties,org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.awt.Rectangle: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.lang.Class: java.lang.String getName()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.String methodName()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>(org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$1)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: boolean lambda$getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates$4(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.Class getContainerType()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$1: boolean hasNext()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock writeLock()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.jar.Attributes: java.util.Set entrySet()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: boolean equals(java.lang.Object)>
<javax.el.ExpressionFactory: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decompose(java.lang.String)>-><sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(java.lang.String)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.core.SimpleAliasRegistry: void checkForAliasCircle(java.lang.String,java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ObservableValueValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ObservableValueValueExtractor: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.TreeMap$EntrySet: int size()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.AttributeAccessorSupport: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.pool.ProxyConnection: void closeStatements()>-><com.zaxxer.hikari.pool.PoolEntry: void evict(java.lang.String)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<java.net.IDN: void <clinit>()>-><java.io.ByteArrayInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1UTCTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>-><org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>-><javax.management.MBeanInfo: javax.management.MBeanConstructorInfo[] getConstructors()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: void <init>(org.hibernate.validator.internal.metadata.core.ConstraintHelper,org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions)>-><java.lang.Object: void <init>()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.aspectj.weaver.NameMangler: void <clinit>()>-><java.lang.String: char[] toCharArray()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: boolean subset(java.util.BitSet,java.util.BitSet)>-><java.util.BitSet: java.lang.Object clone()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.io.File: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackagePart: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><reactor.util.context.ContextN: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation,java.util.List,java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree of(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.core.JsonLocation: int hashCode()>
<org.springframework.web.context.support.ServletContextAwareProcessor: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Boolean: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat: void <init>()>
<sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(int,int)>-><java.lang.Integer: java.lang.String toString(int,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Package: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1Boolean: int hashCode()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.util.List,java.util.Set,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean hasParameterConstraints(java.util.List)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.security.CodeSigner: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1UTCTime: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Locale: java.lang.String toString()>
<org.springframework.core.annotation.AnnotationUtils: org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(java.lang.reflect.AnnotatedElement,java.lang.annotation.Annotation,boolean,boolean)>-><org.springframework.core.annotation.TypeMappedAnnotation: org.springframework.core.annotation.MergedAnnotation withNonMergedAttributes()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<org.aspectj.weaver.ResolvedTypeMunger: void <clinit>()>-><org.aspectj.weaver.ResolvedTypeMunger$Kind: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.ThreadGroup: java.lang.String toString()>
<java.util.stream.Streams$ConcatSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<java.util.concurrent.ConcurrentSkipListMap: void <clinit>()>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getDefaultGroupSequence(java.lang.Class)>
<javax.el.Util$CacheValue: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Integer: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.Parameter[],int,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder nonCascading()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.image.ColorModel: int hashCode()>
<org.hibernate.validator.internal.engine.ValidatorImpl: void <init>(javax.validation.ConstraintValidatorFactory,org.hibernate.validator.internal.metadata.BeanMetaDataManager,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager,org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator,org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><java.lang.Object: void <init>()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>-><java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1BitString: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><java.lang.String: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.ResponseMessagesReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.validation.FieldError: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <init>()>
<java.util.zip.GZIPOutputStream: void finish()>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(byte[])>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.MemberName: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.regex.Pattern: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><java.util.AbstractList: java.util.Iterator iterator()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$SynchronizedMap: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.IdentityHashMap$Values: java.lang.Object[] toArray(java.lang.Object[])>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.SubList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Introspector: void testComplianceMXBeanInterface(java.lang.Class)>-><com.sun.jmx.mbeanserver.MXBeanIntrospector: com.sun.jmx.mbeanserver.MBeanAnalyzer getAnalyzer(java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.StringCharacterIterator: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void <init>(org.springframework.core.io.ResourceLoader)>-><org.springframework.core.io.DefaultResourceLoader: java.util.Map getResourceCache(java.lang.Class)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: int hashCode()>
<sun.security.util.MemoryCache: void <init>(boolean,int,int)>-><java.util.LinkedHashMap: void <init>(int,float,boolean)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SynchronizedMap: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>
<java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>-><java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$EntrySet: int size()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.ArrayDeque$DeqSpliterator: long estimateSize()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.MapType: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><io.netty.channel.nio.SelectedSelectionKeySet: boolean contains(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<javax.management.NotificationBroadcasterSupport: void sendNotification(javax.management.Notification)>-><com.sun.jmx.remote.util.ClassLogger: boolean debugOn()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.ResourceBundle$CacheKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.BitSet: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isWildcardTypeAssignable(java.lang.reflect.WildcardType,java.lang.reflect.Type)>-><com.sun.beans.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>
<sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<javax.management.Notification: void <clinit>()>-><com.sun.jmx.mbeanserver.GetPropertyAction: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Character$Subset: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: int hashCode()>
<com.fasterxml.classmate.util.ClassStack: void <init>(com.fasterxml.classmate.util.ClassStack,java.lang.Class)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$UnmodifiableCollection: boolean remove(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.MXBeanMapping: java.lang.Class getOpenClass()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.wuwenze.poi.pojo.ExcelProperty: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<sun.security.ssl.SignatureAndHashAlgorithm: void <clinit>()>-><java.util.TreeMap: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation,java.util.List,java.lang.reflect.Type)>-><java.util.Collections$EmptySet: int size()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.AbstractList: boolean add(java.lang.Object)>
<sun.reflect.annotation.AnnotatedTypeFactory: void <clinit>()>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: void <init>(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areParameterConstraintsIgnoredFor(java.lang.reflect.Member,int)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<com.sun.beans.TypeResolver: java.lang.reflect.Type fixGenericArray(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$1: java.lang.reflect.Type getGenericComponentType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.ObjectInstance: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.SubList$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.netty.util.internal.RecyclableArrayList: boolean add(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void <clinit>()>-><java.util.concurrent.TimeUnit$5: long toMillis(long)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.commons.collections.FastHashMap$CollectionView: int hashCode()>
<org.springframework.security.web.csrf.CsrfAuthenticationStrategy: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.security.ssl.CipherSuite: void <init>(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.lang.String: boolean endsWith(java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Present: java.lang.String toString()>
<com.p6spy.engine.spy.P6ModuleManager: void loadDriversExplicitly(com.p6spy.engine.spy.P6SpyLoadableOptions)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeAnnotationConstraintsForExecutableParameter(java.lang.reflect.Executable,int,java.lang.reflect.AnnotatedType)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><java.util.ArrayList: void <init>(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Collection)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int read(byte[])>-><java.util.zip.ZipFile$ZipFileInputStream: int read(byte[],int,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.Introspector: void checkCompliance(java.lang.Class)>-><java.lang.StringBuilder: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<register-finalize <org.springframework.boot.actuate.metrics.http.Outcome: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.util.LifecycleBase: void stop()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry newHashEntry(java.lang.Object,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry,java.lang.Object)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: void <init>(java.lang.Object,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry,java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$DelegatingHandlerMappingDescriptionProvider: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<org.springframework.context.annotation.ClassPathBeanDefinitionScanner: int scan(java.lang.String[])>-><org.springframework.context.support.AbstractApplicationContext: int getBeanDefinitionCount()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Option: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.RegularImmutableList: int size()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><com.fasterxml.classmate.util.ResolvedTypeKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()>
<java.net.IDN: java.lang.StringBuffer toASCIILower(java.lang.StringBuffer)>-><java.lang.StringBuffer: char charAt(int)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.jni.SSL: java.lang.String versionString()>
<java.util.stream.Streams$ConcatSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: java.lang.reflect.Field getAccessible(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.String getName()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Constructor)>-><java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: void <init>(org.springframework.boot.web.servlet.ServletContextInitializerBeans$1)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: void <init>()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.StackTraceElement: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.reactive.ReactiveOAuth2ClientImportSelector$OAuth2ClientWebFluxSecurityConfiguration: void <init>()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromWellKnownInterface(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType refine(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.NullNode: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.ChoiceFormat: int hashCode()>
<java.lang.reflect.Executable: java.lang.reflect.AnnotatedType getAnnotatedReturnType0(java.lang.reflect.Type)>-><sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><sun.net.idn.StringPrep$StringPrepTrieImpl: sun.text.normalizer.CharTrie access$002(sun.net.idn.StringPrep$StringPrepTrieImpl,sun.text.normalizer.CharTrie)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><java.util.LinkedHashMap: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.TreeSet: java.util.Iterator iterator()>
<de.codecentric.boot.admin.client.registration.BlockingRegistrationClient$1: void <init>()>-><org.springframework.core.ParameterizedTypeReference: void <init>()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><reactor.util.context.Context1: java.lang.Object getValue()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifiers(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation[])>-><org.springframework.core.annotation.AnnotationUtils: java.lang.Object getValue(java.lang.annotation.Annotation)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.csrf.CsrfLogoutHandler: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.util.context.Context1: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.annotation.Annotation getQualifiedElementAnnotation(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class)>-><org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object,java.lang.Throwable)>
<java.util.stream.Collectors: java.util.Set lambda$toSet$4(java.util.Set,java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap)>-><java.lang.String: char[] toCharArray()>
<reactor.core.publisher.InnerOperator: reactor.util.context.Context currentContext()>-><reactor.core.publisher.FluxOnBackpressureBufferStrategy$BackpressureBufferDropOldestSubscriber: reactor.core.CoreSubscriber actual()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler: void <init>(org.springframework.http.HttpStatus)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><org.springframework.security.core.userdetails.memory.UserAttribute: boolean isValid()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.MutablePropertyValues: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getNewMBeanClassName(java.lang.Object)>-><javax.management.MBeanInfo: java.lang.String getClassName()>
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$1: java.lang.Object postProcess(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.font.TransformAttribute: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object)>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.JumboEnumSet: boolean addAll(java.util.Collection)>
<javax.management.NotificationBroadcasterSupport: void sendNotification(javax.management.Notification)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><org.springframework.context.support.ResourceBundleMessageSource: java.util.ResourceBundle loadBundle(java.io.Reader)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.core.annotation.AnnotationUtils: org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(java.lang.reflect.AnnotatedElement,java.lang.annotation.Annotation,boolean,boolean)>-><org.springframework.core.annotation.MergedAnnotation$Adapt: org.springframework.core.annotation.MergedAnnotation$Adapt[] values(boolean,boolean)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.font.EAttribute: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.validation.ObjectError: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: javax.servlet.ServletRegistration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getServletName()>
<java.io.DataOutputStream: void writeInt(int)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(int)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.Collections$SetFromMap: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.expression.TypedValue: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$UnmodifiableMap: boolean isEmpty()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.hibernate.validator.internal.util.TypeHelper$1: java.lang.reflect.Type getGenericComponentType()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<org.springframework.core.SimpleAliasRegistry: void registerAlias(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalDouble: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator getCachingOperationNameGenerator()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Period: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<javax.crypto.Cipher: int getMaxAllowedKeyLength(java.lang.String)>-><javax.crypto.Cipher: javax.crypto.CryptoPermission getConfiguredPermission(java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: java.lang.Object objectNameToMXBean(javax.management.ObjectName,java.lang.Class)>-><javax.management.JMX: java.lang.Object newMXBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Date: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanAttributeInfo: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: com.sun.jmx.mbeanserver.MXBeanLookup lookupNotNull(java.lang.Class)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<org.apache.catalina.util.LifecycleMBeanBase: java.lang.String getDomain()>-><org.apache.catalina.core.ContainerBase: java.lang.String getDomainInternal()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.codehaus.jackson.type.JavaType: int hashCode()>
<org.springframework.core.env.CommandLineArgs: void addOptionArg(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeUseConstraints(java.lang.reflect.Member,java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.Type)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: java.lang.annotation.Annotation[] getAnnotations()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.Map getErrorAttributes(javax.servlet.http.HttpServletRequest,boolean)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$1: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder getCascadingMetaData(java.lang.reflect.Type,java.lang.reflect.AnnotatedElement,java.util.Map)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>
<sun.security.ssl.SSLSessionImpl: void <init>(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection,sun.security.ssl.SessionId,java.lang.String,int)>-><java.lang.System: long currentTimeMillis()>
<javax.management.ObjectName: boolean isPropertyValuePattern(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.AttributeEntry: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.codehaus.jackson.map.type.ClassKey: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.TabularType: int hashCode()>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><sun.security.util.Debug: boolean isOn(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.LocalDateTime: java.lang.String toString()>
<org.springframework.core.annotation.AnnotationUtils: org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(java.lang.reflect.AnnotatedElement,java.lang.annotation.Annotation,boolean,boolean)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.util.Map asMap(java.util.function.Function,org.springframework.core.annotation.MergedAnnotation$Adapt[])>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.AnnotatedType)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$WebSecurityConfiguration: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void setName(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.streaming.SXSSFRow: int hashCode()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><sun.net.idn.StringPrepDataReader: void read(byte[],char[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<com.baomidou.dynamic.datasource.DynamicDataSourceClassResolver: void <init>()>-><java.lang.Object: void <init>()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.FontLineMetrics: int hashCode()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Duration: int hashCode()>
<register-finalize <com.zaxxer.hikari.util.IsolationLevel: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.IdentityHashMap$Values: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><io.netty.util.concurrent.PromiseTask: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.util.Set keySet()>-><javax.management.openmbean.TabularDataSupport: java.util.Set keySet()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Date: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.Class: java.lang.String getName()>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashMap: java.util.Set keySet()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration: void <init>()>
<javax.el.Util: void <clinit>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Field: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><javax.management.ObjectName: boolean isPattern()>
<org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><java.lang.String: java.lang.String substring(int,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<java.util.PropertyResourceBundle: void <init>(java.io.Reader)>-><java.util.Properties: void <init>()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.chrono.AbstractChronology: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.poi.xssf.usermodel.XSSFFont: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.alibaba.fastjson.JSONArray: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.Inet6Address: int hashCode()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.SubList: boolean addAll(java.util.Collection)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>-><javax.crypto.KeyAgreement: void <init>(java.security.Provider$Service,java.util.Iterator,java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.openxml4j.opc.PackagePartName: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getMaximallySpecificAndContainerElementCompliantValueExtractor(java.lang.Class,java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.WeakHashMap$Values: int size()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Method,boolean)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.BooleanNode: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>-><org.apache.catalina.LifecycleEvent: void <init>(org.apache.catalina.Lifecycle,java.lang.String,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<org.aspectj.weaver.MemberImpl: org.aspectj.weaver.MemberImpl method(org.aspectj.weaver.UnresolvedType,int,org.aspectj.weaver.UnresolvedType,java.lang.String,org.aspectj.weaver.UnresolvedType[])>-><java.lang.String: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERT61String: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.aspectj.weaver.reflect.ReflectionWorld: void <clinit>()>-><java.util.HashMap: void <init>()>
<org.springframework.boot.autoconfigure.http.HttpProperties$Encoding$Type: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpProperties$Encoding$Type: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.reflect.GenericDeclaration getGenericDeclaration()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.ZoneOffset: int hashCode()>
<org.springframework.web.util.pattern.RegexPathElement: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<sun.security.ssl.CipherSuite: void <clinit>()>-><sun.security.ssl.CipherSuite$MacAlg: void <init>(java.lang.String,int,int,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.OptionalDouble: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<sun.security.ssl.JsseJce$SunCertificates$1: void <init>(sun.security.ssl.JsseJce$SunCertificates,java.security.Provider)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><com.google.common.collect.ImmutableMap: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<java.util.stream.Collectors: void lambda$toMap$58(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.Map,java.lang.Object)>-><com.google.common.collect.ImmutableMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<com.fasterxml.classmate.TypeBindings: java.util.List getTypeParameters()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><javax.management.ReflectionException: java.lang.Throwable getCause()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.xmlbeans.StringEnumAbstractBase: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.security.core.userdetails.memory.UserAttribute: boolean isValid()>-><java.util.ArrayList: int size()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNamesImpl(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.MXBeanLookup: void <init>(javax.management.MBeanServerConnection)>-><java.lang.Object: void <init>()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$11: void <init>()>
<org.hibernate.validator.internal.engine.MethodValidationConfiguration: java.util.Set buildConfiguredRuleSet(boolean,boolean,boolean)>-><org.hibernate.validator.internal.metadata.aggregated.rule.VoidMethodsMustNotBeReturnValueConstrained: void <init>()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<javax.management.MBeanServerNotification: void <init>(java.lang.String,java.lang.Object,long,javax.management.ObjectName)>-><javax.management.Notification: void <init>(java.lang.String,java.lang.Object,long)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getConstructorMetaData(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.lang.Object run(java.security.PrivilegedAction)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread newThread(java.lang.Runnable)>-><com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread newThread(java.lang.Runnable)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.sql.Time: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.security.CodeSource: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.io.File: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraints(java.lang.reflect.Member,java.lang.annotation.ElementType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration$SpringMvcConfiguration: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>-><java.util.ArrayDeque: java.lang.Object[] toArray()>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <init>(javax.sql.DataSource,org.springframework.boot.autoconfigure.orm.jpa.JpaProperties,org.springframework.beans.factory.config.ConfigurableListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>-><org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><ch.qos.logback.core.joran.spi.ElementSelector: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.composite.CompositeMeterRegistry: void lambda$new$0(io.micrometer.core.instrument.Meter)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.ZonedDateTime: java.lang.String toString()>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int access$500(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<springfox.documentation.spring.web.readers.operation.DefaultTagsProvider: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.EnumMap$KeySet: boolean remove(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<org.aspectj.weaver.patterns.ThisOrTargetAnnotationPointcut: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: boolean neverHasThis()>
<org.hibernate.validator.internal.metadata.location.ReturnValueConstraintLocation: int hashCode()>-><java.lang.reflect.Method: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: int buildHashCode(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void finishRefresh()>-><org.springframework.context.support.AbstractApplicationContext: void publishEvent(org.springframework.context.ApplicationEvent)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.lang.String getDescription()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$SingleValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.endpoint.TokenKeyEndpoint: void <init>(org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter)>-><java.lang.Object: java.lang.Class getClass()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Absent: java.lang.String toString()>
<reactor.core.scheduler.Schedulers: void <clinit>()>-><reactor.util.Loggers: reactor.util.Logger getLogger(java.lang.Class)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerWebApplicationScopes()>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: java.util.Set toValueExtractorClasses(java.util.Set)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.util.LinkedMultiValueMap: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.function.RequestPredicates$ParamPredicate: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.ZoneOffset: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.MethodInfo: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: com.fasterxml.classmate.ResolvedType getParentClass()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<java.util.Hashtable: void <init>(java.util.Map)>-><java.util.Collections$EmptyMap: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,int,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.util.Assert: void noNullElements(java.util.Collection,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>-><javax.management.RuntimeMBeanException: java.lang.Throwable getCause()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties: java.lang.String lambda$setPath$0(java.io.File)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Hashtable: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.AttributedString$AttributedStringIterator: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.security.Provider: void clear()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraints(java.lang.reflect.Member,java.lang.annotation.ElementType)>-><java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<com.p6spy.engine.spy.P6ModuleManager: void <init>()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointDiscoverer: java.lang.String lambda$createOperationKey$0(org.springframework.boot.actuate.endpoint.jmx.JmxOperation)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.security.ssl.CipherSuiteList: void <init>(java.util.Collection)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.sun.jmx.mbeanserver.Repository: void addNewDomMoi(javax.management.DynamicMBean,java.lang.String,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.util.ExecutableHelper: java.lang.annotation.ElementType getElementType(java.lang.reflect.Executable)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.ResourceBundle$CacheKey: int hashCode()>
<org.jboss.logging.Slf4jLocationAwareLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set filterListOfObjectInstances(java.util.Set,javax.management.QueryExp)>-><javax.management.QueryEval: javax.management.MBeanServer getMBeanServer()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SingletonSet: int size()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.annotation.Annotation getFactoryMethodAnnotation(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.reflect.Method getResolvedFactoryMethod()>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Period: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Introspector: void testComplianceMBeanInterface(java.lang.Class)>-><com.sun.jmx.mbeanserver.StandardMBeanIntrospector: com.sun.jmx.mbeanserver.StandardMBeanIntrospector getInstance()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.poi.ss.usermodel.ExcelStyleDateFormatter: int hashCode()>
<org.aspectj.weaver.AjcMemberMaker: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forSignature(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.lang.String lambda$processMap$0(org.springframework.security.web.util.matcher.RequestMatcher)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: java.util.Set toValueExtractorClasses(java.util.Set)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.springframework.security.web.util.ThrowableAnalyzer: java.lang.Throwable lambda$static$0(java.lang.Throwable)>-><javax.management.ReflectionException: java.lang.Throwable getCause()>
<org.aspectj.util.FuzzyBoolean$YesFuzzyBoolean: void <init>()>-><org.aspectj.util.FuzzyBoolean: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerApplicationScope(javax.servlet.ServletContext)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.convert.TypeDescriptor: int hashCode()>
<java.time.format.ZoneName: void <clinit>()>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.URI: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.math.BigInteger: java.lang.String toString()>
<org.aspectj.weaver.patterns.TypePattern$MatchKind: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.GregorianCalendar: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.font.Decoration$DecorationImpl: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>-><java.lang.Class: java.lang.String getName()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.HashSet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.YearMonth: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.format.DecimalStyle: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneRules: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void debug(java.lang.String)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><java.util.ArrayList: void <init>(int)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.net.URL: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapValues: int size()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.pool.HikariProxyStatement: int getUpdateCount()>-><com.p6spy.engine.wrapper.StatementWrapper: int getUpdateCount()>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>-><org.hibernate.validator.internal.metadata.core.ConstraintHelper: boolean isMultiValueConstraint(java.lang.Class)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.TreeMap$Entry: int hashCode()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$UrlHandlerMappingDescriptionProvider: void <init>(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: boolean add(java.lang.Object)>
<sun.reflect.annotation.TypeAnnotationParser: java.util.Map mapTypeAnnotations(sun.reflect.annotation.TypeAnnotation[])>-><java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object dereferenceValue(java.lang.Object)>-><java.lang.ref.PhantomReference: java.lang.Object get()>
<java.util.Collections$SynchronizedMap: java.util.Set entrySet()>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.security.cert.X509CRLEntry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<sun.security.ssl.ProtocolList: void <init>(java.lang.String[])>-><sun.security.ssl.ProtocolList: java.util.ArrayList convert(java.lang.String[])>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<com.alibaba.fastjson.JSONPath: java.lang.Object getPropertyValue(java.lang.Object,java.lang.String,boolean)>-><javax.management.openmbean.TabularDataSupport: int size()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.SubList$1: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Hashtable$KeySet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void removeStale()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$SoftValueReference: int keyHash()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.context.support.StaticApplicationContext: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.GenericApplicationContext: void <init>(org.springframework.context.ApplicationContext)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>-><com.sun.jmx.mbeanserver.MBeanSupport: javax.management.MBeanInfo getMBeanInfo()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.context.annotation.AnnotationConfigUtils: java.util.Set registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: void setAutowireCandidateResolver(org.springframework.beans.factory.support.AutowireCandidateResolver)>
<org.springframework.boot.cloud.CloudPlatform$4: void <init>(java.lang.String,int)>-><org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int,org.springframework.boot.cloud.CloudPlatform$1)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicLongArray: java.lang.String toString()>
<org.springframework.boot.actuate.context.ShutdownEndpoint: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.net.URL: java.io.InputStream openStream()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromArrayType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.GenericArrayType,com.fasterxml.classmate.TypeBindings)>-><java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.BuddhistCalendar: int hashCode()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object lambda$invokeInitMethods$5(java.lang.Object)>-><org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider: void afterPropertiesSet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.SimpleTimeZone: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getClassName(javax.management.DynamicMBean)>-><javax.management.MBeanInfo: java.lang.String getClassName()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.sql.Timestamp: int hashCode()>
<java.util.stream.Collectors: void lambda$toMap$58(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.Map,java.lang.Object)>-><java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellBorder: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(java.lang.reflect.AnnotatedElement)>-><java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<register-finalize <org.springframework.http.HttpStatus$Series: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ReadOnlyMapPropertyKeyExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ReadOnlyMapPropertyKeyExtractor: void <init>()>
<java.security.Policy$2: java.security.Policy run()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.fasterxml.jackson.databind.type.MapLikeType: void <init>(com.fasterxml.jackson.databind.type.TypeBase,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.TypeBase: void <init>(com.fasterxml.jackson.databind.type.TypeBase)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanConstructorInfo: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<sun.text.normalizer.UCharacter: void <clinit>()>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><ch.qos.logback.classic.spi.ClassPackagingData: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.util.TypeKey: int hashCode()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.cglib.proxy.InvocationHandlerGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><reactor.util.context.Context1: java.lang.Object getValue()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: void <init>(java.lang.reflect.ParameterizedType,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: void <init>(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.apache.http.HttpHost: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Long: java.lang.String toString()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerApplicationScope(javax.servlet.ServletContext)>-><java.lang.Class: java.lang.String getName()>
<com.alibaba.fastjson.JSONPath$FilterSegement: java.lang.Object eval(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.http.ResponseEntity: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><org.aspectj.weaver.ResolvedType$PointcutGetter: void <init>(org.aspectj.weaver.ResolvedType$1)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.commons.beanutils.MethodUtils$MethodDescriptor: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object toOpenValue(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$SingletonMap: boolean isEmpty()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(java.lang.Object,java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.ParameterizedType parameterizeClassCapture(java.lang.Class,java.util.Map)>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<com.caucho.hessian.io.ContextSerializerFactory: void initSerializerFiles(java.lang.String,java.util.HashSet,java.util.HashMap,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.ObjectNode: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.security.core.userdetails.memory.UserAttribute: void <init>()>-><java.lang.Object: void <init>()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<javax.el.ExpressionFactory: void <clinit>()>-><javax.el.ExpressionFactory$CacheValue: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<springfox.documentation.spring.web.readers.parameter.ParameterMultiplesReader: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List getImplementedInterfaces()>-><java.util.Collections: java.util.List emptyList()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.collect.FluentIterable: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<javax.management.ObjectName: javax.management.ObjectName getInstance(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Util: javax.management.ObjectName newObjectName(java.lang.String)>
<sun.net.idn.StringPrep: java.lang.StringBuffer normalize(java.lang.StringBuffer)>-><java.lang.StringBuffer: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$StringEntry: int hashCode()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<javax.net.ssl.SNIServerName: void <clinit>()>-><java.lang.String: char[] toCharArray()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.Color: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.ProcessEnvironment$StringEntrySet: int size()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<javax.net.ssl.SNIServerName: void <init>(int,byte[])>-><java.lang.Object: java.lang.Object clone()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<sun.security.ssl.ProtocolVersion: void <clinit>()>-><java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<sun.security.ssl.Debug: boolean getBooleanProperty(java.lang.String,boolean)>-><sun.security.action.GetPropertyAction: void <init>(java.lang.String)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.aop.TruePointcut: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Character: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer: void parseArray(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.util.Collection)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Collections$SetFromMap: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.URL: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>-><org.springframework.security.access.expression.AbstractSecurityExpressionHandler: org.springframework.expression.ExpressionParser getExpressionParser()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>-><java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<sun.security.ssl.SignatureAndHashAlgorithm: java.lang.String[] getAlgorithmNames(java.util.Collection)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<com.alibaba.fastjson.serializer.ReferenceCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<org.hibernate.validator.internal.util.Contracts: void assertTrue(boolean,java.lang.String,java.lang.Object[])>-><java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.awt.RenderingHints$Key: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<register-finalize <org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.reflect.ParameterizedType,com.alibaba.fastjson.parser.ParserConfig)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<sun.reflect.annotation.AnnotatedTypeFactory: sun.reflect.annotation.TypeAnnotation$LocationInfo addNesting(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getOwnerType()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.InetSocketAddress: java.lang.String toString()>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type getRawType()>
<org.springframework.web.servlet.function.RequestPredicates$ParamPredicate: void <init>(java.lang.String,java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.JumboEnumSet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.security.CodeSigner: int hashCode()>
<javax.management.ObjectInstance: void <init>(javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.Point: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.SubList$1: java.lang.Object next()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><java.util.ArrayList: void <init>()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: java.lang.Object performBuild()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.awt.Font: int hashCode()>
<org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer$1: void <init>(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer)>-><java.lang.Object: void <init>()>
<com.fasterxml.classmate.TypeResolver: void <init>()>-><com.fasterxml.classmate.TypeResolver: void <init>(com.fasterxml.classmate.util.ResolvedTypeCache)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void sendNotification(java.lang.String,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.PropertyPermission: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.PropertyValue: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void rethrow(java.lang.Throwable)>-><javax.management.RuntimeErrorException: void <init>(java.lang.Error,java.lang.String)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.jmx.EndpointMBean: java.lang.Object getAttribute(java.lang.String)>-><javax.management.AttributeNotFoundException: void <init>(java.lang.String)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$AndPredicate: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.JavaType: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.weaver.ResolvedPointcutDefinition: void <clinit>()>-><org.aspectj.weaver.patterns.Pointcut: org.aspectj.weaver.patterns.Pointcut makeMatchesNothing(org.aspectj.weaver.patterns.Pointcut$State)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.RegularImmutableMap$Values: int size()>
<org.springframework.web.util.UriComponents: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.aspectj.weaver.tools.TraceFactory: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object initializeBean(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Thread: java.lang.String toString()>
<org.springframework.security.web.authentication.www.BasicAuthenticationConverter: void setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.util.concurrent.DirectExecutor: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.util.Collections$UnmodifiableCollection: int size()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$2: void <init>(com.sun.jmx.interceptor.DefaultMBeanServerInterceptor,java.lang.ClassLoader,javax.management.ObjectName)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Short: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,org.hibernate.validator.internal.metadata.raw.ConstrainedElement$ConstrainedElementKind,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><java.util.Collections: java.util.Set emptySet()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void setIgnoredMediaTypes(java.util.Set)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Hashtable: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.OffsetDateTime: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.apache.commons.logging.Log access$000()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<register-finalize <org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties,org.springframework.beans.factory.ListableBeanFactory,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)>
<org.springframework.security.core.userdetails.memory.UserAttribute: void setAuthoritiesAsString(java.util.List)>-><java.util.ArrayList: int size()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.util.HashMap: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiListingReferenceScanner: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Long: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<sun.security.ssl.JsseJce: java.security.KeyPairGenerator getKeyPairGenerator(java.lang.String)>-><java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>-><java.util.ArrayList: int size()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<java.io.DataInputStream: int read(byte[])>-><java.io.FileInputStream: int read(byte[],int,int)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Arrays$ArrayList: int size()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.Character: java.lang.Character valueOf(char)>
<org.springframework.context.support.ResourceBundleMessageSource: java.util.ResourceBundle loadBundle(java.io.InputStream)>-><java.util.PropertyResourceBundle: void <init>(java.io.InputStream)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><java.lang.StringBuffer: char charAt(int)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder getCascadingMetaData(java.lang.reflect.Type,java.lang.reflect.AnnotatedElement,java.util.Map)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(java.lang.reflect.AnnotatedElement)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.format.DecimalStyle: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.WeakHashMap$KeySet: boolean contains(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.web.context.support.ServletContextResource: int hashCode()>
<springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Hashtable: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.jboss.logging.Logger: java.lang.String getName()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postRegister(javax.management.ObjectName,javax.management.DynamicMBean,boolean,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.RegularEnumSet: boolean add(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERT61String: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: int size()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.lang.Object[])>-><java.util.concurrent.locks.ReentrantLock: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.sql.Date: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.HikariConfig: void <init>(java.util.Properties)>-><com.zaxxer.hikari.util.PropertyElf: void setTargetFromProperties(java.lang.Object,java.util.Properties)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport$LoaderEntry: void <init>(javax.management.ObjectName,java.lang.ClassLoader)>-><java.lang.Object: void <init>()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Long: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areReturnValueConstraintsIgnoredFor(java.lang.reflect.Member)>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areMemberConstraintsIgnoredFor(java.lang.reflect.Member)>
<com.zaxxer.hikari.pool.ProxyConnection: java.sql.Statement trackStatement(java.sql.Statement)>-><com.zaxxer.hikari.util.FastList: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: int hashCode()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.wuwenze.poi.pojo.ExcelMapping: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$2: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: int size()>
<org.apache.http.HttpHost: org.apache.http.HttpHost create(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings emptyBindings()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.core.AttributeAccessorSupport: int hashCode()>
<org.springframework.boot.actuate.health.Health$Builder: void <init>(org.springframework.boot.actuate.health.Status)>-><java.lang.Object: void <init>()>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.temporal.WeekFields: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.calendar.ZoneInfo: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String safeGetClassName(javax.management.DynamicMBean)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
<org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>-><java.util.ArrayList: void <init>(int)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: int hashCode()>
<org.springframework.boot.web.server.MimeMappings: void <clinit>()>-><org.springframework.boot.web.server.MimeMappings: java.lang.String add(java.lang.String,java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean matchesName(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderCheckGetters: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>
<com.sun.jmx.mbeanserver.MBeanInstantiator: void <init>(com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository)>-><java.lang.Object: void <init>()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.stream.MatchOps$4MatchSink: void <init>(java.util.stream.MatchOps$MatchKind,java.util.function.DoublePredicate)>-><java.util.stream.MatchOps$BooleanTerminalSink: void <init>(java.util.stream.MatchOps$MatchKind)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Hashtable: java.util.Collection values()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.io.InputStream lambda$newBundle$0(boolean,java.lang.ClassLoader,java.lang.String)>-><java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer,boolean,int,boolean,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo)>-><java.lang.Object: void <init>()>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><java.text.ParseException: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$TreeBin: boolean removeTreeNode(java.util.concurrent.ConcurrentHashMap$TreeNode)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERUTF8String: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.apache.http.HttpHost: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.font.GlyphLayout$SDCache$SDKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getFactoryMethodName()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(java.lang.String,java.lang.String,javax.management.ObjectName,java.lang.String)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<javax.el.ExpressionFactory: java.lang.String discoverClassName(java.lang.ClassLoader)>-><javax.el.ExpressionFactory: java.lang.String getClassNameSysProp()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: java.lang.String substring(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: java.lang.Object getArrayItem(java.lang.Object,int)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: java.util.Set toValueExtractorClasses(java.util.Set)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.codehaus.jackson.map.type.ArrayType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object lambda$destroy$0()>-><org.springframework.web.filter.GenericFilterBean: void destroy()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<io.micrometer.prometheus.PrometheusMeterRegistry: java.util.List tagValues(io.micrometer.core.instrument.Meter$Id)>-><java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.security.CodeSource: java.net.URL getLocation()>
<com.sun.jmx.mbeanserver.Introspector: void checkCompliance(java.lang.Class)>-><javax.management.NotCompliantMBeanException: void <init>(java.lang.String)>
<org.springframework.core.ResolvableType: org.springframework.core.ResolvableType resolveVariable(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String getName()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>-><org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Map findAutowireCandidates(java.lang.String,java.lang.Class,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean hasQualifier(org.springframework.beans.factory.config.DependencyDescriptor)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Integer: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getFieldMetaData(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.lang.Object run(java.security.PrivilegedAction)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><sun.net.idn.StringPrep: sun.text.normalizer.VersionInfo getVersionInfo(int)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.YearMonth: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><java.lang.Object: void notifyAll()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$EnumMapping: java.lang.Enum fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.poi.ss.util.CellRangeAddressBase: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onRefresh()>-><org.springframework.web.context.support.GenericWebApplicationContext: void onRefresh()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<java.util.ResourceBundle: void setExpirationTime(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>-><org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: long getTimeToLive(java.lang.String,java.util.Locale)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<org.dom4j.io.SAXHelper: org.xml.sax.XMLReader createXMLReaderViaJAXP(boolean,boolean)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.springframework.boot.SpringApplication: int getExitCodeFromExitCodeGeneratorException(java.lang.Throwable)>-><javax.management.RuntimeMBeanException: java.lang.Throwable getCause()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.netty.util.concurrent.PromiseTask: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicIntegerArray: java.lang.String toString()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.HashSet: boolean isEmpty()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>-><java.util.ArrayList: void <init>()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.GlyphLayout$SDCache$SDKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Class getDeclaringClass(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.reflect.GenericDeclaration getGenericDeclaration()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.OrTypePattern: int hashCode()>
<com.sun.jmx.remote.util.ClassLogger: boolean debugOn()>-><com.sun.jmx.remote.util.ClassLogger: boolean finestOn()>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.invoke.MethodType: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.codehaus.jackson.map.type.CollectionLikeType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Field)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.HashSet newHashSet()>
<org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: void <clinit>()>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap$LinkedValues: int size()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: boolean isClassPresent(java.lang.String,boolean)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: java.lang.Object run(java.security.PrivilegedAction)>
<sun.security.ssl.SSLSessionImpl: void <clinit>()>-><sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.context.annotation.AnnotationConfigUtils: java.util.Set registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: void setDependencyComparator(java.util.Comparator)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.util.TypeKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.beans.factory.config.BeanDefinitionHolder: boolean matchesName(java.lang.String)>-><org.springframework.util.ObjectUtils: boolean containsElement(java.lang.Object[],java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>-><com.fasterxml.jackson.databind.JavaType: int hashCode()>
<org.springframework.boot.web.context.WebServerInitializedEvent: void <init>(org.springframework.boot.web.server.WebServer)>-><org.springframework.context.ApplicationEvent: void <init>(java.lang.Object)>
<org.springframework.aop.aspectj.AspectJExpressionPointcut: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.math.BigDecimal: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<java.net.IDN: java.lang.StringBuffer toASCIILower(java.lang.StringBuffer)>-><java.net.IDN: char toASCIILower(char)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><io.netty.util.internal.RecyclableArrayList: boolean addAll(java.util.Collection)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.Double: boolean equals(java.lang.Object)>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.security.AccessControlContext: sun.security.util.Debug getDebug()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration: void <init>(org.springframework.mail.javamail.JavaMailSenderImpl)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decompose(java.lang.String)>-><sun.security.util.AlgorithmDecomposer: java.util.Set decompose(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.collect.ImmutableMap: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.IdentityHashMap$EntrySet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.ResponseMessagesReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.TypeNameExtractor getTypeNameExtractor()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.ZoneOffset: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><java.lang.StringBuffer: int length()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Util: javax.management.ObjectName newObjectName(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration: void <init>()>
<org.apache.catalina.util.LifecycleBase: void init()>-><org.apache.catalina.valves.ValveBase: void initInternal()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object get(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.ref.WeakReference makeReference(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: java.lang.Object _throwWrapped(java.lang.Exception,java.lang.String,java.lang.Object)>-><javax.management.RuntimeErrorException: java.lang.Throwable getCause()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.HikariConfig: void validate()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<sun.security.ssl.SSLSessionImpl: void <init>(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection,sun.security.ssl.SessionId,java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableSet: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.AnnotatedParameterizedType getValueExtractorDefinition(java.lang.Class)>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>-><java.util.stream.Collectors$CollectorImpl: java.util.function.BinaryOperator combiner()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: int hashCode()>
<org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: boolean isConstrained()>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean hasGroupConversionsOnAnnotatedObjectOrContainerElements()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.annotation.DiscoveredServletEndpoint: java.lang.String lambda$new$0(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.engine.MethodValidationConfiguration: java.util.Set buildConfiguredRuleSet(boolean,boolean,boolean)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.Set toImmutableSet(java.util.Set)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.asm.Type: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Package: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><com.google.common.collect.ImmutableMapKeySet: boolean contains(java.lang.Object)>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: void <init>(java.lang.String)>-><org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: void <init>(java.lang.String,java.lang.ClassLoader)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.config.BeanExpressionContext: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(java.lang.reflect.AnnotatedElement)>-><java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.poi.openxml4j.opc.PackagePart: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areClassLevelConstraintsIgnoredFor(java.lang.Class)>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getDescription()>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Collections$SynchronizedSet: int hashCode()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromArrayType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.GenericArrayType,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.ResolvedType: java.lang.Class getErasedType()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$EnumMapping: java.lang.Enum fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$KeySet: int size()>
<java.security.Security: void initialize()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: boolean isConstrained()>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<org.springframework.boot.web.embedded.tomcat.TldSkipPatterns: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap: int hashCode()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$SynchronizedMap: java.util.Set entrySet()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areMemberConstraintsIgnoredFor(java.lang.reflect.Member)>-><java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<io.netty.util.concurrent.ThreadPerTaskExecutor: void execute(java.lang.Runnable)>-><com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread newThread(java.lang.Runnable)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$DataSourceTransactionManagerConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.DERGraphicString: int hashCode()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<sun.security.ssl.SSLContextImpl: java.lang.String[] getAvailableProtocols(sun.security.ssl.ProtocolVersion[])>-><java.util.Collections: java.util.List emptyList()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<sun.security.jca.ProviderList: sun.security.jca.ProviderList newList(java.security.Provider[])>-><sun.security.jca.ProviderConfig: void <init>(java.security.Provider)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.util.MimeType: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.validation.ObjectError: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.aspectj.weaver.patterns.AnnotationTypePattern: void <clinit>()>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.aop.aspectj.AspectJExpressionPointcut: void <clinit>()>-><java.util.HashSet: void <init>()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection _deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<sun.security.ssl.JsseJce: java.security.SecureRandom getSecureRandom()>-><java.security.SecureRandom: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><javax.management.QueryEval: javax.management.MBeanServer getMBeanServer()>
<org.hibernate.validator.internal.util.StringHelper: boolean startsWithSeveralUpperCaseLetters(java.lang.String)>-><java.lang.Character: boolean isUpperCase(char)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><java.lang.Object: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<sun.security.ssl.JsseJce: void <clinit>()>-><sun.security.ssl.SunJSSE: boolean isFIPS()>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.io.PrintStream: void println(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.util.MimeType: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<javax.xml.datatype.DatatypeConfigurationException: void printStackTrace0(java.io.PrintWriter)>-><org.aspectj.weaver.BCException: void printStackTrace(java.io.PrintWriter)>
<org.apache.catalina.util.LifecycleMBeanBase: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<org.springframework.boot.autoconfigure.session.SessionAutoConfiguration$AbstractSessionRepositoryImplementationValidator: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.autoconfigure.session.SessionProperties,java.util.List)>-><org.springframework.context.support.GenericApplicationContext: java.lang.ClassLoader getClassLoader()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.LinkedHashMap: java.util.Collection values()>
<org.springframework.core.SimpleAliasRegistry: boolean hasAlias(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.openxml4j.opc.PackagePartName: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap$LinkedEntrySet: int size()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.expression.TypedValue: int hashCode()>
<org.springframework.boot.autoconfigure.security.oauth2.method.OAuth2MethodSecurityConfiguration: void <init>()>-><org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)>-><java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.security.Provider)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.core.io.DefaultResourceLoader: java.util.Map lambda$getResourceCache$0(java.lang.Class)>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.String)>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.LogFactory getFactory()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><sun.net.idn.StringPrepDataReader: int[] readIndexes(int)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.util.StringUtils: java.lang.String capitalize(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractMap$SimpleEntry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.lang.Object run(java.security.PrivilegedAction)>-><org.hibernate.validator.internal.util.privilegedactions.NewInstance: java.lang.Object run()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.lang.Thread: java.lang.String getName()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeResolutionHelper: void <init>()>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType,int,float)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.security.ssl.EngineOutputRecord: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object lambda$invokeInitMethods$5(java.lang.Object)>-><org.springframework.security.web.authentication.www.BasicAuthenticationFilter: void afterPropertiesSet()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.DERGraphicString: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getResolvedSuperclass(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.Class getErasedReferenceType(java.lang.reflect.Type)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.collect.SingletonImmutableList: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERUTF8String: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Boolean: int hashCode()>
<org.springframework.core.annotation.MergedAnnotationCollectors: void lambda$toAnnotationSet$0(java.util.ArrayList,org.springframework.core.annotation.MergedAnnotation)>-><org.dom4j.tree.BackedList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><com.google.common.collect.RegularImmutableMap$KeySet: int size()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.security.ssl.ProtocolList: void <init>(java.util.ArrayList)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.MethodParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext$1: void done()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.Rectangle: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: int hashCode()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.WeakHashMap: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERGeneralString: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: void <init>(javax.servlet.MultipartConfigElement)>-><java.lang.Object: void <init>()>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><java.util.TreeSet: void <init>()>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String getName()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaultLogoutSuccessHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<java.util.AbstractMap: void clear()>-><java.util.Collections$EmptyMap: java.util.Set entrySet()>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decomposes(sun.security.ssl.CipherSuite$MacAlg,sun.security.ssl.CipherSuite$BulkCipher)>-><java.util.HashSet: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void <init>(java.lang.String,boolean)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.zip.ZipEntry: int hashCode()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.ResolvableType: java.lang.Class resolve()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><org.springframework.security.core.userdetails.User: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.Collection)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: com.sun.jmx.mbeanserver.MXBeanMapping makeMapping(java.lang.reflect.Type,com.sun.jmx.mbeanserver.MXBeanMappingFactory)>-><org.hibernate.validator.internal.util.TypeHelper$1: java.lang.reflect.Type getGenericComponentType()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.core.annotation.SynthesizingMethodParameter: void <init>(java.lang.reflect.Method,int)>-><org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.aspectj.weaver.World: void <clinit>()>-><org.aspectj.weaver.tools.DefaultTraceFactory: org.aspectj.weaver.tools.Trace getTrace(java.lang.Class)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.AbstractCollection: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.context.properties.PropertyMapper$Source: boolean lambda$whenHasText$3(java.lang.Object)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.apache.commons.collections.FastHashMap: java.util.Set entrySet()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean hasQualifier(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isQualifier(java.lang.Class)>
<java.net.URLClassLoader: void close()>-><com.zaxxer.hikari.HikariDataSource: void close()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.DerInputBuffer: int hashCode()>
<javax.management.openmbean.CompositeDataSupport: boolean containsKey(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<java.util.Collections: void swap(java.util.List,int,int)>-><com.alibaba.fastjson.JSONArray: java.lang.Object set(int,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.poi.xssf.streaming.SXSSFCell: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.CollectionLikeType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void preDeregisterInvoke(javax.management.MBeanRegistration)>
<org.hibernate.validator.internal.engine.valueextraction.BooleanArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<java.util.stream.Streams$ConcatSpliterator: int characteristics()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: int characteristics()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$8: void <init>()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.fasterxml.classmate.TypeBindings: boolean hasUnbound(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLAlgorithmConstraints: void <clinit>()>-><sun.security.util.DisabledAlgorithmConstraints: void <init>(java.lang.String,sun.security.util.AlgorithmDecomposer)>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><reactor.util.Loggers$ConsoleLogger: void error(java.lang.String,java.lang.Throwable)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.annotation.AnnotationUtils: java.lang.Object getDefaultValue(java.lang.annotation.Annotation,java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>-><java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.http.ResponseEntity: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.awt.geom.Edge: java.lang.String toString()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><java.util.HashMap: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><sun.text.normalizer.NormalizerImpl: sun.text.normalizer.VersionInfo getUnicodeVersion()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: void <init>(java.lang.reflect.AnnotatedArrayType)>
<com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer: void parseArray(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.util.Collection)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.awt.geom.Edge: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.context.annotation.AnnotatedBeanDefinitionReader: void register(java.lang.Class[])>
<javax.management.NotificationBroadcasterSupport: void sendNotification(javax.management.Notification)>-><com.sun.jmx.remote.util.ClassLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.hibernate.validator.internal.util.StringHelper: java.lang.String decapitalize(java.lang.String)>-><org.hibernate.validator.internal.util.StringHelper: boolean startsWithSeveralUpperCaseLetters(java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.Character: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.IsolationLevel: void <clinit>()>-><com.zaxxer.hikari.util.IsolationLevel: void <init>(java.lang.String,int,int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<org.aspectj.weaver.MemberImpl: org.aspectj.weaver.MemberImpl method(org.aspectj.weaver.UnresolvedType,int,org.aspectj.weaver.UnresolvedType,java.lang.String,org.aspectj.weaver.UnresolvedType[])>-><org.aspectj.weaver.MemberImpl: void <init>(org.aspectj.weaver.MemberKind,org.aspectj.weaver.UnresolvedType,int,org.aspectj.weaver.UnresolvedType,java.lang.String,org.aspectj.weaver.UnresolvedType[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.ZoneOffset: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.framework.JdkDynamicAopProxy: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForAnnotatedType(java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.Class getClassFromType(java.lang.reflect.Type)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><java.lang.Object: void <init>()>
<org.springframework.core.SimpleAliasRegistry: void registerAlias(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.apache.commons.collections.FastHashMap$CollectionView: int size()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Throwable: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: int size()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.Object[] toArray(java.lang.Object[])>
<javax.management.JMX: java.lang.Object newMXBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class)>-><javax.management.JMX: java.lang.Object newMXBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class,boolean)>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.jmx.JmxEndpointExporter: java.lang.String getEndpointDescription(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><org.springframework.boot.actuate.endpoint.AbstractExposableEndpoint: org.springframework.boot.actuate.endpoint.EndpointId getEndpointId()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.AttributedCharacterIterator$Attribute: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.xml.sax.SAXException: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.font.EAttribute: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicLongArray: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object get(java.lang.Object)>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider: void <init>(org.springframework.core.SerializableTypeWrapper$TypeProvider,java.lang.reflect.Method,int)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.util.List,java.util.Set,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.util.jar.Attributes: void clear()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getArrayType(java.lang.reflect.Type)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.DERBMPString: java.lang.String toString()>
<org.springframework.boot.web.context.WebServerInitializedEvent: org.springframework.boot.web.server.WebServer getSource()>-><java.util.EventObject: java.lang.Object getSource()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<com.fasterxml.classmate.ResolvedType: java.util.List typeParametersFor(java.lang.Class)>-><com.fasterxml.classmate.ResolvedType: java.util.List getTypeParameters()>
<java.net.IDN$1: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.Collectors: java.lang.Object lambda$null$44(java.util.function.Supplier,java.lang.Object)>-><java.lang.reflect.WeakCache$Factory: java.lang.Object get()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void removeStale()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$SoftKeyReference: int keyHash()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.boot.ResourceBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.lang.Thread: void dumpStack()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List,org.hibernate.validator.internal.metadata.core.MetaConstraint$1)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.lang.reflect.Parameter: java.lang.reflect.AnnotatedType getAnnotatedType()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<springfox.documentation.spring.web.plugins.PathAndParametersEquivalence: void <init>()>-><com.google.common.base.Equivalence: void <init>()>
<sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(int,int)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.aspectj.weaver.tools.TraceFactory: boolean getBoolean(java.lang.String,boolean)>-><java.lang.Boolean: boolean booleanValue()>
<org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl createComposingConstraintDescriptor(org.hibernate.validator.internal.metadata.core.ConstraintHelper,java.lang.reflect.Member,java.util.Map,int,java.lang.annotation.Annotation,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.wuwenze.poi.pojo.ExcelProperty: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.RegularEnumSet: int size()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellBorder: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: int hashCode()>
<springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.awt.Point: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellBorder: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.google.common.base.Predicates$NotPredicate: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.MethodOverrides: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(java.lang.Object,java.lang.Object[])>-><com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.String methodName()>
<com.alibaba.fastjson.util.FieldInfo: boolean getArgument(java.lang.reflect.Type[],java.lang.reflect.TypeVariable[],java.lang.reflect.Type[])>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: void unregister(javax.management.ObjectName)>-><org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.p6spy.engine.spy.option.P6OptionsRepository$DelayedOptionChange: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1Enumerated: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.UUID: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite: void <init>(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(java.lang.Object,java.lang.Object[])>-><javax.management.MBeanException: void <init>(java.lang.Exception,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Handle: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.util.Collection values()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.HttpHeaders: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Arrays$ArrayList: int size()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.FontLineMetrics: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode: void <clinit>()>-><org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode: void <init>(java.lang.String,int)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Vector$Itr: boolean hasNext()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<sun.awt.DebugSettings: void loadSystemProperties()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.apache.http.HttpHost: org.apache.http.HttpHost create(java.lang.String)>-><org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<reactor.core.scheduler.Schedulers: void <clinit>()>-><reactor.core.scheduler.Schedulers$1: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.poi.ss.format.CellNumberFormatter$Special: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.OptionalLong: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.aspectj.weaver.ResolvedTypeMunger$Kind: void <init>(java.lang.String,int)>-><org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>
<com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>-><javax.management.MBeanInfo: javax.management.Descriptor getDescriptor()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.CodeSigner: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.AbstractMap$1: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: java.util.SortedMap makeMap(java.lang.String[],java.lang.Object[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.TypeVariable getExtractedTypeParameter(java.lang.reflect.AnnotatedParameterizedType,java.lang.Class)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.aspectj.weaver.patterns.ConcreteCflowPointcut: void <clinit>()>-><org.aspectj.weaver.MemberImpl: org.aspectj.weaver.MemberImpl method(org.aspectj.weaver.UnresolvedType,int,org.aspectj.weaver.UnresolvedType,java.lang.String,org.aspectj.weaver.UnresolvedType[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.lang.Object run(java.security.PrivilegedAction)>-><org.hibernate.validator.internal.util.privilegedactions.GetDeclaredFields: java.lang.Object run()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type resolveTypeVariables(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.ParameterizedType parameterizeClass(java.lang.Class,java.util.Map)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.DERPrintableString: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromVariable(java.lang.reflect.TypeVariable,org.codehaus.jackson.map.type.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.reflect.Type[] getBounds()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: int hashCode()>
<com.zaxxer.hikari.pool.PoolEntry: void <clinit>()>-><java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>
<java.util.logging.LogManager$5: java.lang.Object run()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<javax.el.ExpressionFactory: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int access$100(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.spi.group.DefaultGroupSequenceProvider newGroupSequenceProviderClassInstance(java.lang.Class,java.lang.Class)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>-><sun.security.jca.ProviderList$ServiceList$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getMethodMetaData(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.lang.Object run(java.security.PrivilegedAction)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.LinkedHashMap: void afterNodeAccess(java.util.HashMap$Node)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><com.google.common.collect.ImmutableCollection: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: int hashCode()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: void <init>(java.lang.Class,java.lang.reflect.TypeVariable)>-><java.lang.Object: void <init>()>
<java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findClassLevelConstraints(java.lang.Class)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.ArrayList newArrayList()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: int buildHashCode(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.location.ParameterConstraintLocation: int hashCode()>
<sun.security.ssl.SSLAlgorithmConstraints: void <clinit>()>-><sun.security.ssl.SSLAlgorithmConstraints: void <init>(java.security.AlgorithmConstraints)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>
<org.aspectj.weaver.Lint: void <clinit>()>-><org.aspectj.weaver.tools.DefaultTraceFactory: org.aspectj.weaver.tools.Trace getTrace(java.lang.Class)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.alibaba.fastjson.JSONArray: int hashCode()>
<javax.el.ExpressionFactory: java.lang.String discoverClassName(java.lang.ClassLoader)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Class: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<org.springframework.security.web.csrf.CsrfLogoutHandler: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.springframework.http.HttpHeaders: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void <init>()>
<com.google.common.base.CharMatcher$Or: void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)>-><com.google.common.base.CharMatcher: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forPrimitiveType(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.boot.cloud.CloudPlatform: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.SubList$1: boolean hasNext()>
<org.aspectj.bridge.IMessage: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders: java.util.Map access$100(org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: void <init>(java.lang.Class,java.lang.reflect.TypeVariable)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: int hashCode()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: java.util.Collection getServletContextInitializerBeans()>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.hibernate.validator.internal.engine.valueextraction.ListPropertyValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ListPropertyValueExtractor: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.beans.IndexedPropertyDescriptor: int hashCode()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: com.sun.jmx.mbeanserver.MXBeanLookup lookupNotNull(java.lang.Class)>-><java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.http.ReadOnlyHttpHeaders: void clear()>-><java.lang.UnsupportedOperationException: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isArraySupertype(java.lang.Class)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: void <init>()>-><java.lang.ref.ReferenceQueue: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.aspectj.bridge.MessageUtil$10: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.method.HandlerMethod: java.lang.annotation.Annotation getMethodAnnotation(java.lang.Class)>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.annotation.Annotation findMergedAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Object: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.ObjectName: java.lang.String getDomain()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.asm.ConstantDynamic: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.apache.catalina.core.ApplicationContextFacade: void initClassCache()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.util.DerValue: int hashCode()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: javax.servlet.FilterRegistration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: java.lang.String getOrDeduceName(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull()>-><org.springframework.boot.context.properties.PropertyMapper$NullPointerExceptionSafeSupplier: void <init>(java.util.function.Supplier)>
<javax.management.MBeanTrustPermission: void validate(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.String: boolean startsWith(java.lang.String)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Vector: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <clinit>()>-><org.springframework.util.LinkedCaseInsensitiveMap: void <init>(int,java.util.Locale)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: int getOrder(java.lang.Object)>
<org.apache.catalina.core.ApplicationContext: void populateSessionTrackingModes()>-><java.util.JumboEnumSet: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Float: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode getValueExtractionPath(java.util.List)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List,org.hibernate.validator.internal.metadata.core.MetaConstraint$1)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireBean(java.lang.Object)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Class getBeanClass()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><io.micrometer.shaded.org.pcollections.ConsPStack: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.LinkedHashMap$LinkedEntrySet: int size()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: java.util.SortedMap makeMap(java.lang.String[],java.lang.Object[])>-><java.util.TreeMap: void <init>()>
<org.springframework.web.util.HtmlUtils: void <clinit>()>-><org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1Integer: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>
<sun.security.ssl.Debug: void Help()>-><java.io.PrintStream: void println(java.lang.String)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.apache.commons.collections.FastHashMap: java.lang.Object remove(java.lang.Object)>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.sql.Timestamp: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(org.springframework.util.MultiValueMap)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.google.common.collect.ImmutableSet: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.Year: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,int,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.LinkedHashMap: void clear()>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.Map)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.ClassPathResource: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.apache.http.HttpHost: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: int hashCode()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.aspectj.weaver.MemberImpl: int compareTo(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Locale: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>(org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$1)>-><org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$EmptyHandler: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellFill: int hashCode()>
<javax.management.MBeanTrustPermission: void validate(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.Parameter[],int,java.lang.reflect.AnnotatedType)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void addManagedBean(org.apache.tomcat.util.modeler.ManagedBean)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>-><java.security.Provider$Service: java.security.Provider getProvider()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.JumboEnumSet: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.privilegedactions.GetDeclaredField: org.hibernate.validator.internal.util.privilegedactions.GetDeclaredField andMakeAccessible(java.lang.Class,java.lang.String)>-><org.hibernate.validator.internal.util.privilegedactions.GetDeclaredField: void <init>(java.lang.Class,java.lang.String,boolean)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERNumericString: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: boolean isTraceEnabled()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration: void <init>(org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><java.lang.Enum: java.lang.String name()>
<org.hibernate.validator.internal.util.privilegedactions.GetDeclaredConstructors: org.hibernate.validator.internal.util.privilegedactions.GetDeclaredConstructors action(java.lang.Class)>-><org.hibernate.validator.internal.util.privilegedactions.GetDeclaredConstructors: void <init>(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Class: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerSecurityConfiguration: void <init>()>-><synthetic.method.SingletonFactory: org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration getAuthorizationServerEndpointsConfiguration()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementChildContextConfiguration$ServletManagementContextSecurityConfiguration: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void rethrow(java.lang.Throwable)>-><javax.management.RuntimeMBeanException: void <init>(java.lang.RuntimeException,java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: void <init>(int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Throwable)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.security.Permission: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Integer: int parseInt(java.lang.String)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>-><java.util.Collections$SingletonMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.http.server.PathContainer$Options: void <init>(char,boolean)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.asm.Type: int hashCode()>
<org.hibernate.validator.internal.engine.constraintvalidation.SimpleConstraintTree: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.nio.charset.Charset: int hashCode()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FormatCache$MultipartKey: int hashCode()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.jar.Attributes: void clear()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Thread$WeakClassKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.Collectors: java.util.Set lambda$toSet$4(java.util.Set,java.util.Set)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.p6spy.engine.spy.option.P6OptionsRepository$DelayedOptionChange: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.WebExpressionVoter: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.MBeanSupport: java.lang.String getClassName()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.lang.String: int length()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.annotation.AnnotationUtils: java.util.Map getAnnotationAttributes(java.lang.annotation.Annotation)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.location.ConstraintLocation: org.hibernate.validator.internal.metadata.location.ConstraintLocation forParameter(java.lang.reflect.Executable,int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder: void <init>(com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object value()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.slf4j.event.Level: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedField findPropertyMetaData(java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Field)>
<java.io.DataInputStream: int read(byte[])>-><java.util.zip.ZipInputStream: int read(byte[],int,int)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.util.TypeKey: int hashCode()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<sun.security.ssl.SignatureAndHashAlgorithm: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.transaction.support.DefaultTransactionDefinition: void <init>(int)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.wuwenze.poi.pojo.ExcelProperty: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ArrayElement: void <init>(java.lang.reflect.AnnotatedArrayType)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: java.lang.reflect.Type getType()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.stream.Stream lambda$new$0(java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$SingletonList: int size()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getClassName(javax.management.DynamicMBean)>-><com.sun.jmx.mbeanserver.MBeanSupport: javax.management.MBeanInfo getMBeanInfo()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Member)>-><java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapType withContentTypeHandler(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.reflect.Parameter: int hashCode()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree createConstraintTree(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl)>-><java.util.AbstractCollection: boolean isEmpty()>
<org.aspectj.weaver.patterns.TypePatternList: void <clinit>()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$3: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Calendar: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<org.apache.catalina.LifecycleException: void <init>()>-><java.lang.Exception: void <init>()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.Class: java.lang.String getName()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.oauth2.provider.endpoint.TokenKeyEndpoint: void <init>(org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.Set asSet(java.lang.Object[])>-><java.util.HashSet: void <init>(java.util.Collection)>
<java.util.stream.Collectors: java.util.Set lambda$toSet$4(java.util.Set,java.util.Set)>-><java.util.JumboEnumSet: boolean addAll(java.util.Collection)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void addClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><reactor.util.context.Context1: java.lang.String toString()>
<org.hibernate.validator.internal.util.StringHelper: java.lang.String toShortString(java.lang.reflect.ParameterizedType)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><com.fasterxml.classmate.ResolvedType: java.lang.Class getErasedType()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.security.Provider: java.util.Collection values()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.Font: java.lang.String toString()>
<javax.net.ssl.SNIServerName: void <init>(int,byte[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.io.File: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<sun.text.normalizer.UCharacter: int getCodePoint(char,char)>-><sun.text.normalizer.UTF16: boolean isLeadSurrogate(char)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.OptionalLongValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.OptionalLongValueExtractor: void <init>()>
<javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String,java.lang.ClassLoader)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><org.springframework.web.context.support.GenericWebApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void <init>()>-><java.util.HashMap: void <init>()>
<java.security.KeyPairGenerator$Delegate: void <init>(java.security.KeyPairGeneratorSpi,java.lang.String)>-><java.lang.Object: void <init>()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.parser.ParserConfig: com.alibaba.fastjson.parser.deserializer.ObjectDeserializer getDeserializer(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedInterfaceType: java.util.List getImplementedInterfaces()>-><java.util.Collections: java.util.List emptyList()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><reactor.util.Loggers$JdkLogger: void error(java.lang.String,java.lang.Throwable)>
<javax.management.openmbean.CompositeDataSupport: java.util.SortedMap makeMap(java.lang.String[],java.lang.Object[])>-><java.util.TreeMap: boolean containsKey(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void assertNoDuplicateOperations(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean,org.springframework.util.MultiValueMap)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode getValueExtractionPath(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void register(java.lang.Class[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.lang.Object,int)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.util.EventListener,int)>
<sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.AttributeEntry: int hashCode()>
<org.jboss.logging.Log4j2Logger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.apache.logging.log4j.message.MessageFormatMessageFactory: org.apache.logging.log4j.message.Message newMessage(java.lang.String,java.lang.Object[])>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FormatCache$MultipartKey: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.ImmutableMapEntrySet: int size()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<sun.security.ssl.OutputRecord: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.RegularEnumSet: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><springfox.documentation.spring.web.DocumentationCache: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.aop.support.AbstractPointcutAdvisor: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.IdentityHashMap$EntrySet: boolean remove(java.lang.Object)>
<org.aspectj.weaver.patterns.ModifiersPattern: void <clinit>()>-><java.lang.Integer: void <init>(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.http.ResponseEntity: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><reactor.util.context.ContextN: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromParamType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.classmate.TypeBindings)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type getRawType()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERNumericString: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.Instant: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Double: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int)>-><sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractMap: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicIntegerArray: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.ConstructorArgumentValues: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.apache.commons.collections.FastHashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Package: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<sun.text.normalizer.ReplaceableUCharacterIterator: void <init>(java.lang.StringBuffer)>-><sun.text.normalizer.UCharacterIterator: void <init>()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$StringValues: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.NullNode: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Collections$EmptyMap: int hashCode()>
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.JSONPath$FilterSegement: java.lang.Object eval(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.beans.factory.support.AbstractBeanFactory: void addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: javax.el.ExpressionFactory buildExpressionFactory()>-><org.hibernate.validator.internal.util.privilegedactions.GetClassLoader: org.hibernate.validator.internal.util.privilegedactions.GetClassLoader fromContext()>
<java.util.Collections: void swap(java.util.List,int,int)>-><com.google.common.collect.SingletonImmutableList: java.lang.Object get(int)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object[] fromOpenParameters(java.lang.Object[])>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<javax.management.NotificationBroadcasterSupport: void <init>(java.util.concurrent.Executor,javax.management.MBeanNotificationInfo[])>-><java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.p6spy.engine.logging.Category: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>
<org.springframework.web.servlet.handler.MappedInterceptor: void <init>(java.lang.String[],java.lang.String[],org.springframework.web.servlet.HandlerInterceptor)>-><java.lang.Object: void <init>()>
<org.aspectj.bridge.MessageUtil$7: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.YearMonth: int hashCode()>
<org.apache.catalina.core.ApplicationSessionCookieConfig: void <init>(org.apache.catalina.core.StandardContext)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.HashMap$Node: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void rethrow(java.lang.Throwable)>-><java.lang.Throwable: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Character: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistry: void <clinit>()>-><org.springframework.core.OrderComparator: java.util.Comparator withSourceProvider(org.springframework.core.OrderComparator$OrderSourceProvider)>
<com.sun.jmx.mbeanserver.MXBeanLookup: void <init>(javax.management.MBeanServerConnection)>-><com.sun.jmx.mbeanserver.Util: java.util.Map newMap()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.hibernate.validator.internal.engine.constraintvalidation.SimpleConstraintTree: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.oauth2.config.annotation.web.configuration.OAuth2ClientConfiguration$OAuth2ClientContextConfiguration: void <init>()>-><org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Introspector: javax.management.NotCompliantMBeanException throwException(java.lang.Class,java.lang.Throwable)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerObject(java.lang.String,java.lang.Object,javax.management.ObjectName)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Predicates$AndPredicate: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.security.Provider: java.lang.Object get(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.spi.group.DefaultGroupSequenceProvider newGroupSequenceProviderClassInstance(java.lang.Class,java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.lang.Object run(java.security.PrivilegedAction)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
<io.micrometer.core.instrument.binder.system.FileDescriptorMetrics: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(javax.management.ObjectName)>-><javax.management.ObjectName: boolean isPropertyValuePattern()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.AttributeEntry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<javax.management.openmbean.CompositeDataSupport: java.util.SortedMap makeMap(java.lang.String[],java.lang.Object[])>-><java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromVariable(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.awt.geom.Point2D: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.apache.catalina.core.StandardContext: void <init>()>-><org.apache.catalina.core.StandardContextValve: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.ASN1BitString: java.lang.String toString()>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.lang.Class: java.lang.String getName()>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar _getCalendar(java.util.TimeZone)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: void <clinit>()>-><java.lang.ThreadLocal: void <init>()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Instant: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.ResolvableType: org.springframework.core.ResolvableType forClass(java.lang.Class)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.aop.aspectj.AspectJExpressionPointcut: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.LocalTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ReadOnlySetPropertyValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ReadOnlySetPropertyValueExtractor: void <init>()>
<java.net.IDN: boolean startsWithACEPrefix(java.lang.StringBuffer)>-><java.lang.StringBuffer: char charAt(int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromGenericType(com.fasterxml.classmate.util.ClassStack,com.fasterxml.classmate.GenericType,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.TypeBindings getTypeBindings()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.FieldInfo: boolean getArgument(java.lang.reflect.Type[],java.lang.reflect.TypeVariable[],java.lang.reflect.Type[])>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.SubList$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.AbstractList: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$Values: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.x509.Extension: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.MethodOverrides: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Throwable: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getFieldMetaData(java.lang.Class)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.SocketImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.File: boolean equals(java.lang.Object)>
<org.springframework.core.io.InputStreamResource: void <init>(java.io.InputStream)>-><org.springframework.core.io.InputStreamResource: void <init>(java.io.InputStream,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void addOperations(org.springframework.util.MultiValueMap,org.springframework.boot.actuate.endpoint.EndpointId,java.lang.Object,boolean)>-><java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.JSONArray: boolean equals(java.lang.Object)>
<org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.AutowireCapableBeanFactory getAutowireCapableBeanFactory()>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.apache.http.HttpHost: org.apache.http.HttpHost create(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.http.ResponseEntity: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1Integer: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><org.aspectj.weaver.ResolvedType$Missing: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Optional: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.support.NullBean: int hashCode()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.collect.SingletonImmutableList: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager createDefaultAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashSet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.BooleanArrayValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeVariableBindings: void collectTypeBindings(java.lang.Class,java.util.Map,java.util.Map)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.format.CellFormat: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void createWebServer()>-><org.springframework.context.ApplicationContextException: void <init>(java.lang.String,java.lang.Throwable)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.Util: java.util.Map newInsertionOrderMap()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeUseConstraints(java.lang.reflect.Member,java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.Type)>-><java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: java.util.Set toValueExtractorClasses(java.util.Set)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.util.ResolvedTypeCache: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.web.util.UriComponentsBuilder$EncodingHint: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: int hashCode()>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration: void <init>()>
<org.apache.catalina.valves.ValveBase: void initInternal()>-><org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$SoftValueReference: void <init>(java.lang.Object,java.lang.Object,int,java.lang.ref.ReferenceQueue)>-><java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><java.lang.String: int indexOf(int,int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.netty.buffer.SwappedByteBuf: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<org.springframework.boot.cloud.CloudPlatform$1: void <init>(java.lang.String,int)>-><org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int,org.springframework.boot.cloud.CloudPlatform$1)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map normalize(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.ObjectName: java.lang.String getDomain()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.codehaus.jackson.map.type.MapType: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.AbstractMap$1: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><java.io.InputStreamReader: void close()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$SetFromMap: java.lang.Object[] toArray(java.lang.Object[])>
<sun.security.ssl.EngineOutputRecord: int recordSize(byte)>-><java.lang.StringBuilder: void <init>()>
<sun.reflect.annotation.AnnotatedTypeFactory: sun.reflect.annotation.TypeAnnotation$LocationInfo addNesting(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type getOwnerType()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromParamType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.classmate.TypeBindings)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.core.annotation.AnnotationAwareOrderComparator: java.lang.Integer getPriority(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.TypeNameExtractor getTypeNameExtractor()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isCloudFoundryHealthEndpointExtension(java.lang.Object)>-><org.springframework.core.annotation.TypeMappedAnnotations: boolean isPresent(java.lang.Class)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void removeStale()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><java.net.IDN: boolean startsWithACEPrefix(java.lang.StringBuffer)>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Field,boolean)>-><java.lang.invoke.MemberName: byte getReferenceKind()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.alibaba.fastjson.parser.ParseContext: java.lang.String toString()>
<javax.management.Notification: void <clinit>()>-><java.lang.String: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><javax.management.openmbean.TabularDataSupport: java.util.Collection values()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.jsontype.NamedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerTokenServicesConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.springframework.aop.config.AopConfigUtils: void forceAutoProxyCreatorToUseClassProxying(org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.SuspendResumeLock$1: void <init>(boolean)>-><com.zaxxer.hikari.util.SuspendResumeLock: void <init>(boolean,com.zaxxer.hikari.util.SuspendResumeLock$1)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><java.lang.String: java.lang.String substring(int)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><java.lang.Class: boolean isArray()>
<com.alibaba.fastjson.JSONObject: void clear()>-><org.springframework.util.LinkedMultiValueMap: void clear()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.io.File: boolean isFile()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><com.alibaba.fastjson.JSONArray: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.ConcurrentBag: java.util.List lambda$new$0()>-><java.util.ArrayList: void <init>(int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.DERVideotexString: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1Boolean: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.FastList: boolean add(java.lang.Object)>-><java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<org.springframework.context.annotation.AnnotationConfigUtils: org.springframework.beans.factory.config.BeanDefinitionHolder registerPostProcessor(org.springframework.beans.factory.support.BeanDefinitionRegistry,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String)>-><org.springframework.context.support.GenericApplicationContext: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>
<sun.security.ssl.JsseJce$SunCertificates: void <init>(java.security.Provider)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanSupport: void postRegister(java.lang.Boolean)>-><javax.management.StandardMBean: void postRegister(java.lang.Boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.BaseLocale: int hashCode()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><java.lang.System: long currentTimeMillis()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.jmx.mbeanserver.NamedObject: int hashCode()>
<org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm: void <clinit>()>-><org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: java.lang.Class lambda$toValueExtractorClasses$0(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.lang.Object: java.lang.Class getClass()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer parsePath(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: java.util.Set scanCandidateComponents(java.lang.String)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.core.io.Resource[] getResources(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.Signature: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.ss.usermodel.ExcelStyleDateFormatter: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$SynchronizedMap: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getClassLevelConstraints(java.lang.Class)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<sun.security.ssl.JsseJce: java.security.SecureRandom getSecureRandom()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><org.apache.catalina.util.ContextName: java.lang.String getDisplayName()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: java.lang.String lambda$new$0(int)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><java.io.FileInputStream: void close()>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><org.apache.http.util.TextUtils: boolean containsBlanks(java.lang.CharSequence)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.WeakHashMap: void clear()>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<java.lang.invoke.MemberName: void <init>(byte,java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.invoke.MethodHandleNatives: boolean refKindIsField(byte)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.StringHelper: java.lang.String decapitalize(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.Inet6Address: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<javax.management.StandardMBean: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.StandardMBeanSupport: void register(javax.management.MBeanServer,javax.management.ObjectName)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.Parsed: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Locale: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.factory.config.ConstructorArgumentValues: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: int hashCode()>
<org.jboss.logging.Logger: void info(java.lang.Object)>-><org.jboss.logging.Log4j2Logger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areAllConstraintAnnotationsIgnoredFor(java.lang.Class)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.com.lmax.disruptor.Sequence: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object castToJavaBean(java.util.Map,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.TreeMap$Entry: int hashCode()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList access$100(sun.security.ssl.ProtocolList,boolean)>-><sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>
<org.hibernate.validator.internal.engine.valueextraction.ReadOnlyMapPropertyValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<java.net.IDN: int searchDots(java.lang.String,int)>-><java.lang.String: int length()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DecimalFormat: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$Values: int size()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<sun.security.ssl.EngineOutputRecord: void <init>(byte,sun.security.ssl.SSLEngineImpl)>-><sun.security.ssl.EngineOutputRecord: int recordSize(byte)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.text.ParsePosition: java.lang.String toString()>
<org.springframework.validation.beanvalidation.SpringValidatorAdapter: void <init>(javax.validation.Validator)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<register-finalize <com.zaxxer.hikari.util.UtilityElf: java.util.concurrent.ThreadPoolExecutor createThreadPoolExecutor(java.util.concurrent.BlockingQueue,java.lang.String,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.catalina.core.ContainerBase: void <init>()>-><org.apache.catalina.core.StandardPipeline: void <init>(org.apache.catalina.Container)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Short: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isHealthEndpointExtension(java.lang.Object)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Enum: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1ApplicationSpecific: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.FieldPosition: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.ZonedDateTime: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<sun.security.ssl.ProtocolVersion: void <clinit>()>-><java.util.HashSet: void <init>(int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.core.annotation.TypeMappedAnnotation: java.util.Optional getDefaultValue(java.lang.String,java.lang.Class)>-><org.springframework.core.annotation.TypeMappedAnnotation: int getAttributeIndex(java.lang.String,boolean)>
<java.util.concurrent.ConcurrentSkipListMap: void <clinit>()>-><java.lang.Error: void <init>(java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.OptionalInt: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.InetSocketAddress: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object remove(java.lang.Object)>
<java.lang.ThreadGroup: void <init>(java.lang.String)>-><java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>
<sun.security.ssl.SSLContextImpl$TLS11Context: void <clinit>()>-><sun.security.ssl.SunJSSE: boolean isFIPS()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<register-finalize <com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Thread$WeakClassKey: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.calendar.Era: int hashCode()>
<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.AutowireCandidateQualifier getQualifier(java.lang.String)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.SubList: java.util.Iterator iterator()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.spi.group.DefaultGroupSequenceProvider getDefaultGroupSequenceProvider(java.lang.Class)>-><java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<org.jboss.logging.Log4j2Logger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.apache.logging.log4j.simple.SimpleLogger: void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>
<org.springframework.boot.cloud.CloudPlatform$3: void <init>(java.lang.String,int)>-><org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int,org.springframework.boot.cloud.CloudPlatform$1)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory: void <clinit>()>-><java.util.Collections: java.util.Set emptySet()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Method,boolean)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int accept(java.lang.reflect.Method)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>-><java.util.stream.Collectors$CollectorImpl: void <init>(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.Set)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<java.util.LinkedHashMap: void afterNodeInsertion(boolean)>-><org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Field)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.MethodParameter: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.web.servlet.function.ResourceHandlerFunction: void <init>(org.springframework.core.io.Resource)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>-><java.util.LinkedHashSet: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.font.GlyphLayout$SDCache$SDKey: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.IdentityHashMap$KeySet: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.wuwenze.poi.pojo.ExcelMapping: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.geom.Rectangle2D: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ByteArrayValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.IdentityHashMap$EntryIterator$Entry: int hashCode()>
<sun.security.ssl.Debug: void <clinit>()>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Boolean: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.servlet.WebMvcEndpointChildContextConfiguration: void <init>()>
<org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: javax.management.MBeanParameterInfo getMBeanParameter(org.springframework.boot.actuate.endpoint.jmx.JmxOperationParameter)>-><javax.management.MBeanParameterInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<com.zaxxer.hikari.util.SuspendResumeLock: void <init>(boolean,com.zaxxer.hikari.util.SuspendResumeLock$1)>-><com.zaxxer.hikari.util.SuspendResumeLock: void <init>(boolean)>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: void <init>(org.hibernate.validator.internal.metadata.core.ConstraintHelper,org.hibernate.validator.internal.util.ExecutableHelper,org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator,java.util.List,org.hibernate.validator.internal.engine.MethodValidationConfiguration)>-><org.hibernate.validator.internal.metadata.BeanMetaDataManager: org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions getAnnotationProcessingOptionsFromNonDefaultProviders()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.el.ExpressionFactory: void <clinit>()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isTypeVariableAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.reflect.Type[] getBounds()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERUniversalString: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void sendNotification(java.lang.String,javax.management.ObjectName)>-><java.lang.StringBuilder: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration: void <init>()>
<org.springframework.security.web.authentication.www.BasicAuthenticationFilter: void setRememberMeServices(org.springframework.security.web.authentication.RememberMeServices)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postRegister(javax.management.ObjectName,javax.management.DynamicMBean,boolean,boolean)>-><java.util.logging.Logger: void fine(java.lang.String)>
<org.aspectj.weaver.patterns.CflowPointcut: void <clinit>()>-><org.aspectj.weaver.patterns.Pointcut: org.aspectj.weaver.patterns.Pointcut makeMatchesNothing(org.aspectj.weaver.patterns.Pointcut$State)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.lang.Object run(java.security.PrivilegedAction)>-><org.hibernate.validator.internal.util.privilegedactions.GetMethods: java.lang.Object run()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.wuwenze.poi.pojo.ExcelProperty: int hashCode()>
<org.aspectj.weaver.tools.PointcutPrimitive: void <clinit>()>-><org.aspectj.weaver.tools.PointcutPrimitive: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><sun.net.idn.StringPrep$StringPrepTrieImpl: void <init>(sun.net.idn.StringPrep$1)>
<springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <clinit>()>-><springfox.documentation.spring.web.plugins.PathAndParametersEquivalence: void <init>()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.slf4j.event.Level: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.EnumMap$1: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.base.Present: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<java.io.DataOutputStream: void writeChar(int)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(int)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean contains(java.lang.Object)>
<com.zaxxer.hikari.pool.PoolEntry: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Short: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.SubList$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.validation.ObjectError: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<io.micrometer.prometheus.PrometheusMeterRegistry: java.util.List tagValues(io.micrometer.core.instrument.Meter$Id)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType,int,float)>-><javax.management.openmbean.TabularType: java.util.List getIndexNames()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><com.sun.beans.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.TabularDataSupport: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><javax.management.QueryEval: javax.management.MBeanServer getMBeanServer()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><org.aspectj.weaver.ResolvedType$MethodGetterIncludingItds: void <init>(org.aspectj.weaver.ResolvedType$1)>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><sun.net.idn.StringPrep: char getCodePointValue(int)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><java.lang.Class: boolean isInterface()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.ZoneId: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<javax.management.openmbean.CompositeType: boolean isAssignableFrom(javax.management.openmbean.OpenType)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.OptionalDouble: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.calendar.ZoneInfo: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.awt.SunHints$Key: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.lang.Object lambda$null$44(java.util.function.Supplier,java.lang.Object)>-><java.lang.ref.Reference: java.lang.Object get()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.AnnotatedParameterizedType getValueExtractorDefinition(java.lang.Class)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<javax.el.Util$CacheKey: void <init>(java.lang.ClassLoader)>-><java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<sun.text.normalizer.ReplaceableString: void getChars(int,int,char[],int)>-><sun.text.normalizer.Utility: void getChars(java.lang.StringBuffer,int,int,char[],int)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><reactor.util.context.ContextN: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.lang.Object,int)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Filter,int)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(int,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.JdkLogger: void <init>(java.util.logging.Logger)>-><io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Set: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.MethodInfo: int hashCode()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType resolve(java.lang.reflect.Type,java.lang.reflect.Type[])>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromGenericType(com.fasterxml.classmate.util.ClassStack,com.fasterxml.classmate.GenericType,com.fasterxml.classmate.TypeBindings)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.SingletonImmutableList: int size()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)>-><java.security.AlgorithmParameters: void <init>(java.security.AlgorithmParametersSpi,java.security.Provider,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>-><java.util.Collection: java.util.stream.Stream stream()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.ArrayList: int size()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.alibaba.fastjson.JSONObject: java.util.Set entrySet()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><java.util.Collections$EmptyMap: int size()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.DERVisibleString: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>-><io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void debug(java.lang.String)>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.TextNode: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$ValuesView: boolean remove(java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.misc.Signal: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String safeGetClassName(javax.management.DynamicMBean)>-><java.lang.Class: java.lang.String getName()>
<com.sun.jmx.mbeanserver.MXBeanLookup: void addReference(javax.management.ObjectName,java.lang.Object)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.aspectj.weaver.tools.DefaultTrace: void <init>(java.lang.Class)>-><org.aspectj.weaver.tools.AbstractTrace: void <init>(java.lang.Class)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.util.Collections: java.util.Map emptyMap()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getResolvedSuperclass(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type resolveTypeVariables(java.lang.reflect.Type,java.lang.reflect.Type)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.SSLContextImpl: sun.security.ssl.ProtocolList getDefaultProtocolList(boolean)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.DelegatingAccessDeniedHandler: void <init>(java.util.LinkedHashMap,org.springframework.security.web.access.AccessDeniedHandler)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.Util: java.util.SortedMap newSortedMap()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.WeakHashMap$EntrySet: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.sql.Timestamp: int hashCode()>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.jboss.logging.Slf4jLogger: boolean isEnabled(org.jboss.logging.Logger$Level)>
<reactor.util.Loggers$ConsoleLogger: void error(java.lang.String,java.lang.Throwable)>-><java.lang.Thread: java.lang.String getName()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.x509.AVA: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.ZoneOffset: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<com.zaxxer.hikari.metrics.dropwizard.CodahaleHealthChecker: boolean lambda$registerHealthChecks$0(com.zaxxer.hikari.HikariConfig,java.lang.String,com.codahale.metrics.Metric)>-><com.codahale.metrics.MetricRegistry: java.lang.String name(java.lang.String,java.lang.String[])>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.ResolvableType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler getDefaultAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.BitSet: java.lang.String toString()>
<org.hibernate.validator.internal.util.StringHelper: java.lang.String decapitalize(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.commons.collections.FastHashMap: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.lang.reflect.Executable: java.lang.reflect.AnnotatedType getAnnotatedReturnType0(java.lang.reflect.Type)>-><sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType buildAnnotatedType(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.Rectangle: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Boolean: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ListValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ListValueExtractor: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.MBeanInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.http.HttpHeaders: boolean isEmpty()>
<reactor.core.scheduler.Schedulers: void <clinit>()>-><java.util.concurrent.atomic.AtomicReference: void <init>()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><org.springframework.util.ClassUtils: java.util.Set findMethodCandidatesByName(java.lang.Class,java.lang.String)>
<javax.el.Util: java.lang.ClassLoader getContextClassLoader()>-><javax.el.Util$PrivilegedGetTccl: void <init>(javax.el.Util$1)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.validation.FieldError: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: boolean matchKeys(javax.management.ObjectName)>-><javax.management.ObjectName: boolean isPropertyValuePattern(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.management.modelmbean.DescriptorSupport: int hashCode()>
<org.aspectj.util.FuzzyBoolean: void <clinit>()>-><org.aspectj.util.FuzzyBoolean$NeverFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1Sequence: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.EnumMap$Values: int size()>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.jboss.logging.JDKLogger: boolean isEnabled(org.jboss.logging.Logger$Level)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<org.springframework.web.cors.CorsConfiguration: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite: void <clinit>()>-><sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,int,boolean)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.TreeMap: java.util.Set entrySet()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void <init>(java.lang.String,boolean)>-><java.util.HashMap: void <init>(int)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.core.MetaConstraints: org.hibernate.validator.internal.metadata.core.MetaConstraint create(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>-><java.util.ArrayList: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.ss.util.CellRangeAddressBase: int hashCode()>
<org.apache.catalina.core.StandardContext$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object toOpenValue(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamField: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.LocalTime: int hashCode()>
<java.security.KeyPairGenerator$Delegate: void <init>(sun.security.jca.GetInstance$Instance,java.util.Iterator,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.management.NotificationBroadcasterSupport$SendNotifJob: void run()>-><javax.management.NotificationBroadcasterSupport: com.sun.jmx.remote.util.ClassLogger access$000()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$UrlHandlerMappingDescriptionProvider: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.location.ParameterConstraintLocation: void <init>(java.lang.reflect.Executable,int)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type boxedType(java.lang.reflect.Type)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Locale$LocaleKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.DERNumericString: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: sun.reflect.annotation.TypeAnnotation$LocationInfo getLocation()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<register-finalize <org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$SingletonMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$SingleValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor access$500(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Integer: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: int hashCode()>
<sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.AnnotatedTypeFactory: boolean isArray(java.lang.reflect.Type)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <clinit>()>-><java.util.Collections: java.util.Map emptyMap()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<org.aspectj.weaver.tools.TraceFactory: boolean getBoolean(java.lang.String,boolean)>-><java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<javax.management.JMX: java.lang.Object createProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class,boolean,boolean)>-><java.lang.Class: java.lang.Object cast(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: java.lang.Object performBuild()>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<javax.management.MBeanServerFactory: java.lang.String mBeanServerId(javax.management.MBeanServer)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<sun.security.ssl.ProtocolVersion: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.asm.ConstantDynamic: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.awt.geom.Curve: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment segmentFor(int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.validation.BindException: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.CodeSource: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.TypeVariable getExtractedTypeParameter()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromGenericType(com.fasterxml.classmate.util.ClassStack,com.fasterxml.classmate.GenericType,com.fasterxml.classmate.TypeBindings)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.ansi.Ansi8BitColor: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalDouble: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.TextNode: int hashCode()>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: void <init>(org.hibernate.validator.internal.metadata.core.ConstraintHelper,org.hibernate.validator.internal.util.ExecutableHelper,org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator,java.util.List,org.hibernate.validator.internal.engine.MethodValidationConfiguration)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void disableRegistry()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<java.util.Optional: java.util.Optional map(java.util.function.Function)>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.AttributeValues: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType,int,float)>-><java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray(java.lang.Object[])>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.ClassInfo: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.HashMap$KeySet: boolean remove(java.lang.Object)>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Throwable)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromArrayType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.GenericArrayType,com.fasterxml.classmate.TypeBindings)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void addOperations(org.springframework.util.MultiValueMap,org.springframework.boot.actuate.endpoint.EndpointId,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointDiscoverer: org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey createOperationKey(org.springframework.boot.actuate.endpoint.Operation)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.crypto.CryptoAllPermission: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getMethodMetaData(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getMetaData(java.lang.reflect.Executable[])>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.BeanExpressionContext: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.ConstraintLocation: org.hibernate.validator.internal.metadata.location.ConstraintLocation forField(java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: void <init>(java.lang.reflect.Field)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<register-finalize <org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type[] getResolvedInterfaces(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.Class getErasedReferenceType(java.lang.reflect.Type)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>
<org.hibernate.validator.internal.util.ExecutableHelper: void <init>(org.hibernate.validator.internal.util.TypeResolutionHelper)>-><java.lang.Object: void <init>()>
<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.Provider: void check(java.lang.String)>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration: void setAllowedMethods(java.util.List)>
<org.springframework.http.server.PathContainer$Options: void <clinit>()>-><org.springframework.http.server.PathContainer$Options: org.springframework.http.server.PathContainer$Options create(char,boolean)>
<java.io.DataInputStream: int read(byte[])>-><sun.net.httpserver.Request$ReadStream: int read(byte[],int,int)>
<java.io.DataInputStream: int read(byte[])>-><sun.net.httpserver.SSLStreams$InputStream: int read(byte[],int,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.serializer.MiscCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.UUID: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.PropertyValue: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(java.lang.reflect.AnnotatedElement)>-><java.lang.reflect.Parameter: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Present: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.RDN: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.support.EncodedResource: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariableBindings: java.util.Map getTypeVariableBindings(java.lang.Class)>-><java.util.HashMap: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation[] filter(sun.reflect.annotation.TypeAnnotation[])>-><sun.reflect.annotation.TypeAnnotation: sun.reflect.annotation.TypeAnnotation$LocationInfo getLocationInfo()>
<com.sun.jmx.mbeanserver.MBeanSupport: void preRegister2(javax.management.MBeanServer,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.StandardMBeanSupport: void register(javax.management.MBeanServer,javax.management.ObjectName)>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><javax.management.openmbean.TabularDataSupport: int size()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.util.Optional getExtractedType(java.lang.reflect.AnnotatedParameterizedType)>-><java.util.Optional: java.util.Optional empty()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.util.FuzzyBoolean$MaybeFuzzyBoolean: void <init>()>-><org.aspectj.util.FuzzyBoolean: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.AttributeEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.JSONPObject: java.lang.String toString()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void addClassLoader(javax.management.ObjectName,java.lang.ClassLoader)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaSetters: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><javax.management.openmbean.CompositeDataSupport: java.lang.Object get(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.util.HashMap: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.p6spy.engine.logging.Category: java.lang.String toString()>
<org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter: java.util.Map lambda$new$0(javax.servlet.http.HttpServletRequest)>-><java.util.Collections: java.util.Map emptyMap()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.actuate.info.InfoPropertiesInfoContributor: void <clinit>()>-><org.springframework.boot.context.properties.bind.Bindable: org.springframework.boot.context.properties.bind.Bindable mapOf(java.lang.Class,java.lang.Class)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.SubList: int size()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<java.lang.reflect.Executable: java.lang.reflect.AnnotatedType getAnnotatedReturnType0(java.lang.reflect.Type)>-><java.lang.reflect.Executable: byte[] getTypeAnnotationBytes0()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.IdentityHashMap: void clear()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.poi.ss.format.CellFormatPart: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Object: void <init>()>
<sun.security.ssl.EngineInputRecord: void <clinit>()>-><java.lang.Class: boolean desiredAssertionStatus()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.http.HttpStatus: int value()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(com.sun.jmx.mbeanserver.MXBeanLookup,java.lang.Object,java.lang.Object[])>-><com.sun.jmx.mbeanserver.MXBeanLookup: void setLookup(com.sun.jmx.mbeanserver.MXBeanLookup)>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: void addValueExtractorDescriptorForTypeArgumentLocation(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.List,org.hibernate.validator.internal.metadata.location.TypeArgumentConstraintLocation)>-><org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.asm.Handle: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.Font: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.Clock$SystemClock: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource$RequestVariablesExtractorEvaluationContextPostProcessor: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.security.web.access.expression.AbstractVariableEvaluationContextPostProcessor: void <init>()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.ParsePosition: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: java.lang.Object getAttribute(java.lang.String,java.lang.Class)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decomposes(sun.security.ssl.CipherSuite$MacAlg,sun.security.ssl.CipherSuite$BulkCipher)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.lang.Object,int)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.DigitList: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(java.util.Map)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.net.URI: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.PropertyValue: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<javax.management.openmbean.ArrayType: boolean isAssignableFrom(javax.management.openmbean.OpenType)>-><javax.management.openmbean.TabularType: boolean isAssignableFrom(javax.management.openmbean.OpenType)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<sun.awt.DebugSettings: java.lang.String toString()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedField findPropertyMetaData(java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraints(java.lang.reflect.Member,java.lang.annotation.ElementType)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.BasicPermission: int hashCode()>
<java.io.DataInputStream: int read(byte[])>-><java.io.DataInputStream: int read(byte[],int,int)>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.ProtocolList getDefaultProtocolList(boolean)>-><sun.security.ssl.SSLContextImpl$TLS11Context: sun.security.ssl.ProtocolList getClientDefaultProtocolList()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.DecimalFormat: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.alibaba.fastjson.serializer.MiscCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl: java.lang.String[] getAvailableProtocols(sun.security.ssl.ProtocolVersion[])>-><java.util.ArrayList: void <init>(int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.AbstractCollection: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Optional: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.sql.Timestamp: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.Class: java.lang.String getName()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.Class getContainerType()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: boolean add(java.lang.Object)>
<sun.security.ssl.CipherSuite$KeyExchange: boolean isAvailable()>-><sun.security.ssl.JsseJce: boolean isKerberosAvailable()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object toOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$IdentityMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><javax.management.MBeanException: java.lang.Throwable getCause()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><io.netty.buffer.AbstractByteBuf: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.DecimalNode: int hashCode()>
<java.sql.SQLException$1: java.lang.Throwable next()>-><javax.management.RuntimeErrorException: java.lang.Throwable getCause()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.Year: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.String,java.lang.Throwable)>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>
<sun.security.ssl.SSLContextImpl: void <init>()>-><sun.security.ssl.EphemeralKeyManager: void <init>()>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.type.CollectionType withContentValueHandler(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<sun.security.ssl.SignatureAndHashAlgorithm: java.lang.String[] getAlgorithmNames(java.util.Collection)>-><java.util.ArrayList: void <init>()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.Util: java.lang.String message(javax.el.ELContext,java.lang.String,java.lang.Object[])>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.lang.invoke.MethodType: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.codehaus.jackson.map.type.SimpleType: java.lang.String toString()>
<org.aspectj.util.FuzzyBoolean: void <clinit>()>-><org.aspectj.util.FuzzyBoolean$MaybeFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><com.google.common.collect.JdkBackedImmutableMap: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<javax.management.RuntimeMBeanException: void <init>(java.lang.RuntimeException,java.lang.String)>-><javax.management.JMRuntimeException: void <init>(java.lang.String)>
<sun.security.ssl.OutputRecord: void <init>(byte,int)>-><java.io.ByteArrayOutputStream: void <init>(int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ShortArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ShortArrayValueExtractor: void <init>()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getClassLevelConstraints(java.lang.Class)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$3: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.lang.String getResourceDescription(java.lang.String,org.springframework.beans.factory.ListableBeanFactory)>
<org.apache.tomcat.util.modeler.Registry: void disableRegistry()>-><org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Integer: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.ExpressionFactory$CacheValue: void setFactoryClassName(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ImmutableDescriptor: int hashCode()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void collectTypeBindings(java.lang.Class,java.util.Map,java.util.Map)>-><org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.TreeMap: void clear()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.EventObject: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1Set: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log getLogger()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.String)>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Class: java.lang.String getName()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void <init>(org.springframework.security.web.util.OnCommittedResponseWrapper,javax.servlet.ServletOutputStream)>-><javax.servlet.ServletOutputStream: void <init>()>
<org.aspectj.weaver.World: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.streaming.SXSSFRow: boolean equals(java.lang.Object)>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>-><sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.pool.ProxyConnection: void closeStatements()>-><com.zaxxer.hikari.util.FastList: java.lang.Object get(int)>
<org.springframework.http.client.AbstractClientHttpResponse: void <init>()>-><java.lang.Object: void <init>()>
<sun.security.ssl.EngineWriter: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<sun.security.ssl.CipherSuite: java.util.Collection allowedCipherSuites()>-><java.util.HashMap: java.util.Collection values()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.Type getComponentType()>-><java.lang.Class: java.lang.Class getComponentType()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.http.HttpHost: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MXBeanLookup: void addReference(javax.management.ObjectName,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.asm.Handle: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.StackTraceElement: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><java.util.HashSet: void <init>(java.util.Collection)>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>-><java.util.Locale: java.util.Locale getDefault()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.LinkedHashMap$LinkedEntrySet: int size()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.util.HashMap: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractSet: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedType: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.Class,java.util.Set)>-><java.util.Collections: java.util.Set emptySet()>
<org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.ASN1Set: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap$LinkedKeySet: int size()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.AbstractCollection: boolean remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.String: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.HashMap$Node: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isSuperAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType buildAnnotatedType(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$1: java.lang.Object next()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.p6spy.engine.common.CustomHashedHashSet: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>-><sun.security.jca.ProviderList$ServiceList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.springframework.context.support.GenericApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><java.util.concurrent.atomic.AtomicBoolean: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])>-><org.apache.catalina.util.LifecycleBase: boolean getThrowOnFailure()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Vector: java.util.Iterator iterator()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void <init>(java.lang.String)>-><com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void <init>(com.fasterxml.jackson.core.SerializableString)>
<org.aspectj.weaver.World: void <clinit>()>-><org.aspectj.weaver.tools.TraceFactory: org.aspectj.weaver.tools.TraceFactory getTraceFactory()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>-><org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher[])>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean remove(javax.management.ObjectName,java.lang.ClassLoader)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: int hashCode()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.io.PrintWriter: void <init>(java.io.Writer)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.ZoneId: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><ch.qos.logback.core.subst.Node: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>-><java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.openmbean.TabularDataSupport: boolean isEmpty()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Parameter: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<org.springframework.context.support.StaticApplicationContext: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: void registerSingleton(java.lang.String,java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Constructor)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><io.netty.buffer.SwappedByteBuf: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.WeakHashMap$EntrySet: boolean contains(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.context.support.ApplicationListenerDetector: int hashCode()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><java.io.IOException: void <init>(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.util.ClassKey: void <init>(java.lang.Class)>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>-><java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.JapaneseImperialCalendar: int hashCode()>
<java.sql.SQLException$1: java.lang.Throwable next()>-><javax.management.RuntimeMBeanException: java.lang.Throwable getCause()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: int hashCode()>
<org.springframework.core.annotation.AnnotationAttributes: void <init>(java.lang.Class,boolean)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.util.TreeSet: void <init>(java.util.Collection)>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Currency: java.lang.String toString()>
<java.io.DataOutputStream: void flush()>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void flush()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.stream.Collectors: void lambda$toMap$58(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.Map,java.lang.Object)>-><java.util.Collections$EmptyMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder customizers(java.util.Collection)>-><org.springframework.boot.web.client.RestTemplateBuilder: java.util.Set copiedSetOf(java.util.Collection)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Instant: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.BasicPermission: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.util.concurrent.AbstractFuture: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.type.JavaType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Clock$SystemClock: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.util.context.ContextN: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.ZoneId: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$3: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<springfox.documentation.spring.web.readers.parameter.ParameterTypeReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.wuwenze.poi.pojo.ExcelProperty: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: void <init>(org.springframework.http.HttpStatus,java.lang.String)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><io.netty.util.internal.RecyclableArrayList: java.lang.Object set(int,java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.util.EnumSet)>-><java.util.AbstractMap: void <init>()>
<org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter: void <clinit>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.net.SocketPermission: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.EnumMap$Values: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<reactor.core.publisher.BufferOverflowStrategy: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void ignoreDependencyInterface(java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <clinit>()>-><org.springframework.web.bind.annotation.RequestMethod: org.springframework.web.bind.annotation.RequestMethod[] values()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.LocalTime: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: java.util.SortedMap makeMap(java.lang.String[],java.lang.Object[])>-><java.lang.String: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.OffsetTime: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions getAnnotationProcessingOptionsFromNonDefaultProviders()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.regex.Pattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.PropertyName: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.alibaba.fastjson.JSONArray: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.weaver.ResolvedType$MethodGetterIncludingItds: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.Class: java.lang.Class getComponentType()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.beans.WildcardTypeImpl: int hashCode()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void <clinit>()>-><java.util.HashSet: void <init>()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<org.springframework.boot.actuate.health.Health$Builder: org.springframework.boot.actuate.health.Health build()>-><org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder,org.springframework.boot.actuate.health.Health$1)>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>-><java.lang.Object: int hashCode()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.metadata.location.BeanConstraintLocation: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.MXBeanLookup: com.sun.jmx.mbeanserver.MXBeanLookup lookupFor(javax.management.MBeanServerConnection)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.pool.ProxyLeakTask: void <init>(com.zaxxer.hikari.pool.ProxyLeakTask$1)>-><com.zaxxer.hikari.pool.ProxyLeakTask: void <init>()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.AbstractMap$SimpleEntry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.File: int hashCode()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<com.sun.jmx.mbeanserver.Repository: void addNewDomMoi(javax.management.DynamicMBean,java.lang.String,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<java.util.Comparator: java.util.Comparator nullsLast(java.util.Comparator)>-><java.util.Comparators$NullComparator: void <init>(boolean,java.util.Comparator)>
<org.apache.tomcat.util.modeler.Registry: void disableRegistry()>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry: void <init>()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.springframework.security.web.util.matcher.NegatedRequestMatcher: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<sun.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form,int)>-><sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.math.BigInteger: int hashCode()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.ObjectNode: int hashCode()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.aspectj.bridge.IMessage$Kind: void <init>(java.lang.String,int,org.aspectj.bridge.IMessage$1)>-><org.aspectj.bridge.IMessage$Kind: void <init>(java.lang.String,int)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.intercept.FilterSecurityInterceptor: void setObserveOncePerRequest(boolean)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.codehaus.jackson.map.type.ClassKey: java.lang.String toString()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: javax.management.ObjectName mxbeanToObjectName(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.MemberName: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Year: boolean equals(java.lang.Object)>
<reactor.core.scheduler.Schedulers: void <clinit>()>-><java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.beans.PropertyDescriptor: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>
<org.hibernate.validator.HibernateValidatorPermission: void <init>(java.lang.String)>-><java.security.BasicPermission: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.io.ObjectStreamField: java.lang.String toString()>
<java.lang.invoke.MethodHandleNatives: boolean refKindIsMethod(byte)>-><java.lang.invoke.MethodHandleNatives: boolean refKindIsField(byte)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><org.springframework.context.annotation.ClassPathBeanDefinitionScanner: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: java.lang.Class lambda$toValueExtractorClasses$0(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: javax.validation.valueextraction.ValueExtractor getValueExtractor()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<org.springframework.core.MethodParameter: java.lang.annotation.Annotation getParameterAnnotation(java.lang.Class)>-><java.lang.Class: boolean isInstance(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.MethodValidationConfiguration: java.util.Set buildConfiguredRuleSet(boolean,boolean,boolean)>-><org.hibernate.validator.internal.metadata.aggregated.rule.OverridingMethodMustNotAlterParameterConstraints: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><javax.management.RuntimeMBeanException: void <init>(java.lang.RuntimeException,java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaProxy: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilder: java.lang.Class getTargetClass()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLContextImpl$TLS11Context: void <clinit>()>-><sun.security.ssl.ProtocolList: void <init>(java.lang.String[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><javax.el.Util$CacheValue: java.util.concurrent.locks.ReadWriteLock getLock()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<sun.security.ssl.CipherSuite$PRF: void <init>(java.lang.String,int,java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.CollectionType: java.lang.String toString()>
<sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: int hashCode()>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>-><java.util.stream.Collectors$CollectorImpl: java.util.function.Function finisher()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.poi.ss.format.CellFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils$MultiValueMapAdapter: void clear()>-><java.util.Collections$UnmodifiableMap: void clear()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.ExpressionFactory$CacheValue: java.util.concurrent.locks.ReadWriteLock getLock()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.streaming.SXSSFRow: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<javax.el.Util$PrivilegedGetTccl: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer$PathSegment decodeAndParsePathSegment(java.lang.String)>-><java.lang.String: int indexOf(int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.math.BigInteger: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Boolean: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.SingletonImmutableList: int size()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.TreeSet: boolean add(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.alibaba.fastjson.JSONObject: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.openxml4j.opc.PackagePartName: int hashCode()>
<org.springframework.web.servlet.ModelAndView: org.springframework.ui.ModelMap getModelMap()>-><org.springframework.ui.ModelMap: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.beans.PropertyDescriptor: int hashCode()>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry$PassthroughMBean: void <init>(org.apache.tomcat.util.modeler.NoDescriptorRegistry$1)>-><org.apache.tomcat.util.modeler.NoDescriptorRegistry$PassthroughMBean: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.ObjectArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedField findPropertyMetaData(java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Field)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.InjectionPoint: org.springframework.core.MethodParameter getMethodParameter()>
<java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><org.springframework.security.core.userdetails.memory.UserAttributeEditor: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.ParsePosition: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void refresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void stopAndReleaseWebServer()>
<org.apache.http.HttpHost: org.apache.http.HttpHost create(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: void <init>(javax.validation.MessageInterpolator,javax.validation.TraversableResolver,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,javax.validation.ClockProvider,java.time.Duration,org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory,boolean,boolean,java.lang.Object,org.hibernate.validator.internal.engine.ValidatorFactoryImpl$1)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: void <init>(javax.validation.MessageInterpolator,javax.validation.TraversableResolver,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,javax.validation.ClockProvider,java.time.Duration,org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory,boolean,boolean,java.lang.Object)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.TypeVariable getExtractedTypeParameter(java.lang.reflect.AnnotatedParameterizedType,java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: void <init>(java.lang.reflect.AnnotatedArrayType)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean add(javax.management.ObjectName,java.lang.ClassLoader)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><org.springframework.boot.actuate.health.HealthComponent: void <init>()>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decomposes(sun.security.ssl.CipherSuite$KeyExchange)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <clinit>()>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2: void <init>(java.lang.String,int,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.aop.support.AbstractPointcutAdvisor: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.XSSFFont: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String getCanonicalKeyPropertyListString()>
<org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Date: boolean equals(java.lang.Object)>
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>-><sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.security.Provider$Service,java.lang.Class)>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.catalina.core.StandardPipeline: org.apache.catalina.Valve[] getValves()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.MXBeanLookup: javax.management.ObjectName mxbeanToObjectName(java.lang.Object)>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><sun.text.normalizer.ReplaceableUCharacterIterator: int getIndex()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><org.springframework.util.MimeType: java.util.Map getParameters()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.CompositeDataSupport: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void <init>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration: void <init>(io.micrometer.core.instrument.MeterRegistry)>-><io.micrometer.core.instrument.composite.CompositeMeterRegistry: void <init>()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.JavaType refineDeserializationType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Vector: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.PathMappingDecorator: void <init>()>
<org.apache.catalina.core.StandardPipeline: void <init>(org.apache.catalina.Container)>-><org.apache.catalina.core.StandardPipeline: void setContainer(org.apache.catalina.Container)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.apache.juli.logging.DirectJDKLog: boolean isInfoEnabled()>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.jboss.logging.Logger: void info(java.lang.Object)>-><org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.EnumMap$EntrySet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.core.annotation.TypeMappedAnnotations: boolean isDirectlyPresent(java.lang.String)>-><org.springframework.core.annotation.PackagesAnnotationFilter: boolean matches(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Short: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><org.springframework.util.MimeType: boolean isWildcardSubtype()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>-><org.apache.catalina.LifecycleException: void <init>(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.EnumMap$EntrySet: java.lang.Object[] toArray(java.lang.Object[])>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.ParameterizedType parameterizeClassCapture(java.lang.Class,java.util.Map)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.codehaus.jackson.map.type.ClassKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void <init>(java.lang.String,boolean)>-><java.lang.Object: void <init>()>
<org.apache.catalina.core.ContainerBase: void <init>()>-><org.apache.catalina.util.LifecycleMBeanBase: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: int hashCode()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><java.util.Collections$UnmodifiableMap: java.util.Collection values()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: int hashCode()>
<com.alibaba.fastjson.parser.JSONScanner: void setTimeZone(char,char,char)>-><java.util.SimpleTimeZone: int getRawOffset()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: java.util.Set toValueExtractorClasses(java.util.Set)>-><java.util.Collections$SetFromMap: java.util.stream.Stream stream()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<java.util.ResourceBundle: java.util.ResourceBundle findBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>-><org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Arrays$ArrayList: int size()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromVariable(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.classmate.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String getName()>
<org.springframework.ui.ModelMap: org.springframework.ui.ModelMap addAllAttributes(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.apache.catalina.core.StandardPipeline: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.EnumMap$1: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.Class: java.lang.String getName()>
<org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.ObjectStreamClass$FieldReflectorKey: int hashCode()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.Type getComponentType()>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.reflect.Type getGenericComponentType()>
<org.springframework.core.type.classreading.SimpleMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(java.lang.String)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.core.io.Resource getResource(java.lang.String)>
<java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><sun.text.normalizer.UTF16: boolean isLeadSurrogate(char)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode getValueExtractionPath(java.util.List)>-><java.util.ArrayList: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: boolean equals(java.lang.Object)>
<reactor.core.publisher.InnerOperator: reactor.util.context.Context currentContext()>-><reactor.core.publisher.InnerOperator: reactor.util.context.Context currentContext()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Collections$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.LinkedHashMap$LinkedKeySet: boolean contains(java.lang.Object)>
<sun.security.ssl.RandomCookie: void <init>(java.security.SecureRandom)>-><java.lang.Object: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: javax.management.ObjectName mxbeanToObjectName(java.lang.Object)>-><javax.management.openmbean.OpenDataException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.apache.commons.collections.FastHashMap: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.HashSet: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.AnnotatedParameterizedType getValueExtractorDefinition(java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void determineValueExtractorDefinitions(java.util.List,java.lang.Class)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.aspectj.weaver.reflect.ReflectionWorld: void <clinit>()>-><java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.google.common.collect.ImmutableList: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.validation.FieldError: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.URI: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: boolean isFIPSModeActive()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.util.ResolvedTypeCache: com.fasterxml.classmate.util.ResolvedTypeKey key(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>
<org.hibernate.validator.internal.util.ExecutableParameterNameProvider: void <init>(javax.validation.ParameterNameProvider)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.core.io.Resource getIndexHtml(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$NotPredicate: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.HashMap$EntrySet: int size()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Throwable: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractSecurityBuilder: java.lang.Object build()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><net.logstash.logback.encoder.com.lmax.disruptor.Sequence: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<java.net.IDN: boolean isAllASCII(java.lang.String)>-><java.lang.String: int length()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getFieldMetaData(java.lang.Class)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<org.aspectj.weaver.tools.DefaultTraceFactory: org.aspectj.weaver.tools.Trace getTrace(java.lang.Class)>-><org.aspectj.weaver.tools.DefaultTrace: void setPrintStream(java.io.PrintStream)>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: boolean isSupportedType(java.util.EventListener)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areParameterConstraintsIgnoredFor(java.lang.reflect.Member,int)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: org.springframework.security.web.access.expression.AbstractVariableEvaluationContextPostProcessor createPostProcessor(org.springframework.security.web.util.matcher.RequestMatcher)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.FloatNode: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Vector: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERIA5String: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.TreeSet: boolean contains(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String getName()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.hibernate.validator.internal.engine.ValidationContext$ValidatorScopedContext: void <init>(org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: java.time.Duration getTemporalValidationTolerance()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.EnumMap: java.util.Set entrySet()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.Clock$SystemClock: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.text.DigitList: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.lang.ProcessEnvironment$StringKeySet: boolean contains(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.ArrayList newArrayList()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.alibaba.fastjson.JSONPObject: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><org.springframework.boot.actuate.endpoint.jmx.EndpointMBean: java.lang.Object getAttribute(java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraints(java.lang.reflect.Member,java.lang.annotation.ElementType)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.ArrayList newArrayList()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.util.List,java.util.Set,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><java.util.ArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ConstraintType getConstraintType()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean hasParameterConstraints(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
<java.security.Provider: void implPutAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.wuwenze.poi.pojo.ExcelMapping: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.BeanExpressionContext: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getMetaData(java.lang.reflect.Executable[])>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicIntegerArray: java.lang.String toString()>
<com.google.common.base.CharMatcher$Or: void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<sun.security.ssl.SSLContextImpl: java.lang.String[] access$000(sun.security.ssl.ProtocolVersion[])>-><sun.security.ssl.SSLContextImpl: java.lang.String[] getAvailableProtocols(sun.security.ssl.ProtocolVersion[])>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.boot.actuate.endpoint.Sanitizer: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.jar.Attributes: void clear()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireBean(java.lang.Object)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: void setScope(java.lang.String)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isArraySupertype(java.lang.Class)>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Method,boolean)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration$TokenKeyEndpointRegistrar: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,boolean)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.BeanFactory getInternalParentBeanFactory()>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isWildcardTypeAssignable(java.lang.reflect.WildcardType,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<com.fasterxml.classmate.util.LRUTypeCache: com.fasterxml.classmate.ResolvedType find(com.fasterxml.classmate.util.ResolvedTypeKey)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$SynchronizedMap: java.util.Collection values()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<register-finalize <org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.netty.util.concurrent.PromiseTask: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.apache.http.HttpHost: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.LongNode: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>-><org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: int hashCode()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: javax.servlet.Registration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.NullNode: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.openxml4j.opc.PackagePartName: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.core.SimpleAliasRegistry: void registerAlias(java.lang.String,java.lang.String)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean allowAliasOverriding()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.zone.ZoneOffsetTransitionRule: int hashCode()>
<org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>()>-><org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getClassLevelConstraints(java.lang.Class)>-><org.hibernate.validator.internal.metadata.location.ConstraintLocation: org.hibernate.validator.internal.metadata.location.ConstraintLocation forClass(java.lang.Class)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getDefaultCipherSuiteList(boolean)>-><sun.security.ssl.SSLContextImpl$AbstractTLSContext: sun.security.ssl.CipherSuiteList getServerDefaultCipherSuiteList()>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromVariable(java.lang.reflect.TypeVariable,org.codehaus.jackson.map.type.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String getName()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.CacheControlServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder builder()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><java.lang.IndexOutOfBoundsException: void <init>()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areMemberConstraintsIgnoredFor(java.lang.reflect.Member)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.WebExpressionVoter: void setExpressionHandler(org.springframework.security.access.expression.SecurityExpressionHandler)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1TaggedObject: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERGeneralString: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue: void fullyLock()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: void put(javax.management.openmbean.CompositeData)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class getType(java.lang.String)>
<javax.net.ssl.SNIHostName: void <init>(java.lang.String)>-><java.net.IDN: java.lang.String toASCII(java.lang.String,int)>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.util.CellRangeAddressBase: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><java.util.ArrayList: boolean isEmpty()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.Period: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.openxml4j.opc.PackageRelationship: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.OffsetDateTime: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1Null: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.DERUTF8String: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.lang.String getResourceDescription(java.lang.String,org.springframework.beans.factory.ListableBeanFactory)>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.Map loadSpringFactories(java.lang.ClassLoader)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.logging.log4j.message.ParameterFormatter: void handleErrorInObjectToString(java.lang.Object,java.lang.StringBuilder,java.lang.Throwable)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.Object getDefaultValue(java.lang.Class,java.lang.String)>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.Provider: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.Duration: java.lang.String toString()>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,boolean)>-><sun.security.ssl.CipherSuite$BulkCipher: boolean isUnlimited(int,java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapEntrySet: int size()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: void initMessageSource()>-><org.springframework.context.support.AbstractMessageSource: org.springframework.context.MessageSource getParentMessageSource()>
<org.hibernate.validator.internal.engine.valueextraction.SetPropertyValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1ApplicationSpecific: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Package: java.lang.String toString()>
<org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int accept(java.lang.reflect.Method)>-><org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: boolean isStatic()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: void <clinit>()>-><org.springframework.web.util.pattern.PathPatternParser: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<javax.servlet.ServletResponseWrapper: javax.servlet.ServletOutputStream getOutputStream()>-><org.springframework.security.web.util.OnCommittedResponseWrapper: javax.servlet.ServletOutputStream getOutputStream()>
<org.hibernate.validator.internal.engine.ValidatorImpl: void <init>(javax.validation.ConstraintValidatorFactory,org.hibernate.validator.internal.metadata.BeanMetaDataManager,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager,org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator,org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><org.hibernate.validator.internal.engine.ValidationContext$ValidatorScopedContext: void <init>(org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.openxml4j.opc.PackagePartName: int hashCode()>
<org.springframework.beans.factory.InjectionPoint: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>-><java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.RDN: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$EmptyMap: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.AttributeAccessorSupport: int hashCode()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areClassLevelConstraintsIgnoredFor(java.lang.Class)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<javax.el.ExpressionFactory$CacheValue: void <init>()>-><java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.DoubleArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.DoubleArrayValueExtractor: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object get(java.lang.Object)>
<java.util.Optional: java.util.Optional map(java.util.function.Function)>-><java.util.Optional: boolean isPresent()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>
<java.lang.reflect.Field: java.lang.reflect.AnnotatedType getAnnotatedType()>-><sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType buildAnnotatedType(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.EventObject: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.UnresolvedPermission: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: javax.el.ExpressionFactory buildExpressionFactory()>-><org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: boolean canLoadExpressionFactory()>
<com.sun.jmx.mbeanserver.PerInterface: java.lang.Object getAttribute(java.lang.Object,java.lang.String,java.lang.Object)>-><javax.management.AttributeNotFoundException: void <init>(java.lang.String)>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.net.URL: java.lang.String toString()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Date: boolean equals(java.lang.Object)>
<org.jboss.logging.Logger: void info(java.lang.Object)>-><org.jboss.logging.Slf4jLocationAwareLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedField findPropertyMetaData(java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeAnnotationConstraints(java.lang.reflect.Field)>
<org.springframework.security.web.savedrequest.DefaultSavedRequest: java.util.List lambda$addHeader$0(java.lang.String)>-><java.util.ArrayList: void <init>()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.io.FilePermission: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.math.BigDecimal: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<reactor.core.scheduler.ParallelScheduler: void <clinit>()>-><java.util.concurrent.Executors$DelegatedExecutorService: java.util.List shutdownNow()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.util.ClassStack: void addSelfReference(com.fasterxml.classmate.types.ResolvedRecursiveType)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: int hashCode()>
<sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: void <init>(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.boot.autoconfigure.web.ErrorProperties getErrorProperties()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.lang.invoke.MemberName: void <init>(byte,java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.invoke.MemberName: void initResolved(boolean)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.lang.NullPointerException: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.wuwenze.poi.pojo.ExcelProperty: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>
<java.util.Collections$SingletonMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.UnsupportedOperationException: void <init>()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Collections$EmptyEnumeration: boolean hasMoreElements()>
<org.hibernate.validator.internal.util.ExecutableHelper: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.ParameterizedType parameterizeClass(java.lang.Class,java.util.Map)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.ParameterizedType parameterizeClassCapture(java.lang.Class,java.util.Map)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Field)>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<sun.security.ssl.JsseJce: java.security.Signature getSignature(java.lang.String)>-><java.security.NoSuchAlgorithmException: void <init>(java.lang.Throwable)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<sun.security.ssl.SunJSSE: boolean isFIPS()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<sun.security.ssl.SSLContextImpl: java.lang.String[] getAvailableProtocols(sun.security.ssl.ProtocolVersion[])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void <init>(javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,com.sun.jmx.mbeanserver.Repository)>-><com.sun.jmx.mbeanserver.Repository: java.lang.String getDefaultDomain()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.IdentityHashMap$EntrySet: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<sun.security.ssl.CipherSuite: void <init>(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><java.util.LinkedHashSet: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object castToJavaBean(java.util.Map,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.poi.openxml4j.opc.internal.ContentType: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.modelmbean.DescriptorSupport: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.JSONArray: boolean equals(java.lang.Object)>
<java.util.Collections$EmptyMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.UnsupportedOperationException: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onClose()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void stopAndReleaseWebServer()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<org.springframework.web.method.HandlerMethod: org.springframework.core.MethodParameter[] initMethodParameters()>-><java.lang.reflect.Method: int getParameterCount()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext registerWithRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.PathContainer$Options: char separator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.io.ObjectStreamClass: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$StringEntrySet: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Vector$Itr: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.EnumMap: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.ProxyLeakTask: void <init>()>-><java.lang.Object: void <init>()>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType[] buildAnnotatedTypes(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><sun.reflect.annotation.TypeAnnotation$TypeAnnotationTargetInfo: int getCount()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.p6spy.engine.spy.option.P6OptionsRepository$DelayedOptionChange: boolean equals(java.lang.Object)>
<sun.security.ssl.SessionId: void <init>(boolean,java.security.SecureRandom)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.calendar.Era: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl: java.lang.String[] getAvailableProtocols(sun.security.ssl.ProtocolVersion[])>-><java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext makeResourceContextFor(java.lang.Object,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext createClassLoaderContext(java.lang.ClassLoader,javax.management.ObjectName)>
<org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.asm.Label: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundrySecurityInterceptor: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse success()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletListenerRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.util.EventListener,int)>-><org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void <init>(java.util.EventListener)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.ObjectName: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<sun.reflect.annotation.TypeAnnotationParser: java.util.Map mapTypeAnnotations(sun.reflect.annotation.TypeAnnotation[])>-><sun.reflect.annotation.AnnotationType: sun.reflect.annotation.AnnotationType getInstance(java.lang.Class)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation$LocationInfo pushTypeArg(short)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.RenderingHints$Key: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.WeakHashMap: java.util.Set entrySet()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: int hashCode()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><org.springframework.core.io.ClassPathResource: void <init>(java.lang.String,java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.util.calendar.ZoneInfo: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration: void <init>()>
<sun.text.normalizer.NormalizerImpl: void <clinit>()>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.hibernate.validator.internal.engine.valueextraction.IntArrayValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1Set: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Period: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: org.springframework.core.io.Resource getIndexHtml(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Vector: java.util.Iterator iterator()>
<org.springframework.boot.ImageBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.WeakCache$CacheKey: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Double: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.spi.group.DefaultGroupSequenceProvider newGroupSequenceProviderClassInstance(java.lang.Class,java.lang.Class)>-><org.hibernate.validator.internal.util.privilegedactions.GetMethods: org.hibernate.validator.internal.util.privilegedactions.GetMethods action(java.lang.Class)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.springframework.context.annotation.ClassPathBeanDefinitionScanner: boolean checkCandidate(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.config.BeanDefinition getOriginatingBeanDefinition()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.AbstractCollection: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void rethrowMaybeMBeanException(java.lang.Throwable)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Optional: boolean isPresent()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<javax.management.NotificationBroadcasterSupport: void sendNotification(javax.management.Notification)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Constructor: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.naming.NamingException: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.core.io.SerializedString: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><java.util.logging.Logger: void fine(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackagePart: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.font.Decoration$DecorationImpl: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.wuwenze.poi.factory.ExcelMappingFactory: com.wuwenze.poi.pojo.ExcelMapping loadExcelMappingByClass(java.lang.Class)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<org.apache.catalina.valves.ValveBase: void stopInternal()>-><org.apache.catalina.util.LifecycleBase: void setState(org.apache.catalina.LifecycleState)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Boolean: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>-><org.springframework.context.annotation.ClassPathBeanDefinitionScanner: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.AttributedCharacterIterator$Attribute: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.lang.Integer: int intValue()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object dereferenceValue(java.lang.Object)>-><java.lang.ref.SoftReference: java.lang.Object get()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.catalina.util.LifecycleBase: void stop()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<org.springframework.security.web.savedrequest.SavedRequestAwareWrapper: void <clinit>()>-><java.util.Locale: java.util.Locale getDefault()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.annotation.Annotation getFactoryMethodAnnotation(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class)>-><org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.DoubleNode: int hashCode()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void prepareWebApplicationContext(javax.servlet.ServletContext)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.info.EnvironmentInfoContributor: void <clinit>()>-><org.springframework.boot.context.properties.bind.Bindable: org.springframework.boot.context.properties.bind.Bindable mapOf(java.lang.Class,java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<reactor.util.Loggers$Slf4JLogger: void error(java.lang.String,java.lang.Throwable)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.AVA: int hashCode()>
<java.security.Provider: void implPutAll(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int,int,sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,boolean,int,int,sun.security.ssl.CipherSuite$PRF)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.actuate.metrics.web.servlet.WebMvcTags: void <clinit>()>-><io.micrometer.core.instrument.Tag: io.micrometer.core.instrument.Tag of(java.lang.String,java.lang.String)>
<javax.el.ExpressionFactory$1: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator)>-><org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: javax.el.ExpressionFactory buildExpressionFactory()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.LocalTime: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$SoftKeyReference: void <init>(java.lang.Object,int,java.lang.ref.ReferenceQueue)>-><java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignableToWildcardType(java.lang.Class,java.lang.reflect.WildcardType)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.CloudFoundrySecurityInterceptor: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse success()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanSupport: void registerFailed()>-><com.sun.jmx.mbeanserver.StandardMBeanSupport: void unregister()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.AnnotatedParameterizedType getValueExtractorDefinition(java.lang.Class)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$NestedTypeArgumentLocation: void <init>(org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.TypeVariable,java.lang.reflect.Type,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$1)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$NestedTypeArgumentLocation: void <init>(org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.TypeVariable,java.lang.reflect.Type)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.Provider$UString: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Introspector: void checkCompliance(java.lang.Class)>-><java.lang.Throwable: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind,boolean,java.lang.String)>-><org.aspectj.util.LangUtil: boolean isEmpty(java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Introspector: javax.management.NotCompliantMBeanException throwException(java.lang.Class,java.lang.Throwable)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<org.springframework.boot.actuate.autoconfigure.endpoint.ExposeExcludePropertyEndpointFilter: java.lang.String lambda$asSet$0(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.zone.ZoneRules: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<java.lang.reflect.Field: java.lang.reflect.AnnotatedType getAnnotatedType()>-><java.lang.System$2: sun.reflect.ConstantPool getConstantPool(java.lang.Class)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.YearMonth: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.UrlResource: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaSetters: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>
<org.springframework.boot.web.client.ClientHttpRequestFactorySupplier: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.Extension: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set filterListOfObjectInstances(java.util.Set,javax.management.QueryExp)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator$AggregateResourceBundleControl: void <init>()>-><java.util.ResourceBundle$Control: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<springfox.documentation.schema.TypeNameExtractor: void <init>(com.fasterxml.classmate.TypeResolver,org.springframework.plugin.core.PluginRegistry,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.context.annotation.ClassPathBeanDefinitionScanner: int scan(java.lang.String[])>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.Duration: boolean equals(java.lang.Object)>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: void <init>(java.lang.reflect.Field)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Member)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.schema.property.field.FieldProvider: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap: java.util.Set entrySet()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.SubList: java.lang.Object set(int,java.lang.Object)>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><java.lang.StringBuilder: void <init>()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.privilegedactions.NewInstance: org.hibernate.validator.internal.util.privilegedactions.NewInstance action(java.lang.Class,java.lang.String)>-><org.hibernate.validator.internal.util.privilegedactions.NewInstance: void <init>(java.lang.Class,java.lang.String)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: java.lang.String getPolicy()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.ZoneOffset: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<org.aspectj.bridge.AbortException: void <clinit>()>-><java.util.ArrayList: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$UnmodifiableSet: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.TreeSet: boolean remove(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: java.lang.reflect.Field getAccessible(java.lang.reflect.Field)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.zip.ZipEntry: int hashCode()>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.awt.font.TransformAttribute: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.ClassInfo: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.ansi.Ansi8BitColor: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<javax.el.Util: java.lang.ClassLoader getContextClassLoader()>-><java.lang.Thread: java.lang.Thread currentThread()>
<java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.ImmutableMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView: int size()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$EntrySet: int size()>
<org.apache.catalina.valves.ValveBase: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<java.security.KeyPairGenerator$Delegate: void <init>(sun.security.jca.GetInstance$Instance,java.util.Iterator,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.logging.log4j.Level: int hashCode()>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.String typeName(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$1: java.lang.reflect.Type getGenericComponentType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.ProtocolList getDefaultProtocolList(boolean)>-><sun.security.ssl.SSLContextImpl$AbstractTLSContext: sun.security.ssl.ProtocolList getServerDefaultProtocolList()>
<springfox.documentation.spring.web.readers.operation.OperationParameterHeadersConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>-><springfox.documentation.spring.web.readers.operation.AbstractOperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeUseConstraints(java.lang.reflect.Member,java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.Type)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<org.springframework.core.env.ReadOnlySystemAttributesMap: void clear()>-><java.lang.UnsupportedOperationException: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.Year: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type resolveTypes(java.util.Map,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<org.hibernate.validator.internal.engine.valueextraction.ListValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><java.util.ArrayList: void <init>(java.util.Collection)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><ch.qos.logback.classic.spi.ClassPackagingData: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.MessageFormat: int hashCode()>
<org.apache.logging.log4j.message.MessageFormatMessage: void <init>(java.lang.String,java.lang.Object[])>-><java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.RDN: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptyList: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$StringValues: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.sql.Timestamp: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Integer getPriority(java.lang.Object)>-><org.springframework.core.annotation.AnnotationAwareOrderComparator: java.lang.Integer getPriority(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Field)>-><java.util.ArrayList: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Period: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$3: java.lang.String toString()>
<org.springframework.boot.actuate.logging.LogFileWebEndpoint: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.nio.ByteBuffer: int hashCode()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><java.util.Collections$UnmodifiableMap: int size()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.valves.ValveBase: void startInternal()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.ZonedDateTime: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver getResolver()>
<java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void not_equals_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.asm.Label,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.openxml4j.opc.internal.ContentType: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$SingletonSet: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.io.ObjectStreamClass$WeakClassKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.AbstractCollection: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.asm.ConstantDynamic: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.Point: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.xml.sax.SAXException: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.RegularEnumSet: boolean contains(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContext: void populateSessionTrackingModes()>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.IdentityHashMap: java.util.Collection values()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashSet: int size()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<org.springframework.boot.cloud.CloudPlatform$2: void <init>(java.lang.String,int)>-><org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int,org.springframework.boot.cloud.CloudPlatform$1)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Filter,int)>-><org.springframework.boot.web.servlet.FilterRegistrationBean: void <init>(javax.servlet.Filter,org.springframework.boot.web.servlet.ServletRegistrationBean[])>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<org.springframework.security.web.access.expression.AbstractVariableEvaluationContextPostProcessor: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.util.LifecycleMBeanBase: void destroyInternal()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.validation.ObjectError: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.NullPointerException: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.ImmutableMapEntrySet: int size()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager getAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager createDefaultAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ResourceProperties,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ListableBeanFactory)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.Class getClassFromType(java.lang.reflect.Type)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForAnnotatedType(java.lang.reflect.AnnotatedType)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: java.lang.reflect.Type getType()>
<org.springframework.core.ResolvableType: org.springframework.core.ResolvableType resolveVariable(java.lang.reflect.TypeVariable)>-><org.springframework.core.GenericTypeResolver$TypeVariableMapVariableResolver: org.springframework.core.ResolvableType resolveVariable(java.lang.reflect.TypeVariable)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<ch.qos.logback.core.util.OptionHelper: void setSystemProperties(ch.qos.logback.core.spi.ContextAware,java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.Color: boolean equals(java.lang.Object)>
<com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.Contracts: void assertNotNull(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.misc.Signal: int hashCode()>
<java.lang.reflect.Executable: java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes()>-><java.lang.System$2: sun.reflect.ConstantPool getConstantPool(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeSet: java.util.Comparator comparator()>
<com.alibaba.fastjson.parser.deserializer.EnumDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void access$000(com.sun.jmx.interceptor.DefaultMBeanServerInterceptor,java.lang.ClassLoader,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void addClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: boolean determineAvailabilityOfResourceBundleControl()>-><org.hibernate.validator.internal.util.privilegedactions.GetMethod: org.hibernate.validator.internal.util.privilegedactions.GetMethod action(java.lang.Class,java.lang.String)>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.util.ArrayList: java.lang.Object get(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.Provider: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><org.springframework.http.client.support.InterceptingHttpAccessor: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.cert.Certificate: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.usermodel.ExcelStyleDateFormatter: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.poi.xssf.streaming.SXSSFRow: int hashCode()>
<org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>-><java.lang.Class: java.lang.String getName()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: int hashCode()>
<org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.context.support.ApplicationListenerDetector: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: java.util.Set toValueExtractorClasses(java.util.Set)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void sendNotification(java.lang.String,javax.management.ObjectName)>-><javax.management.MBeanServerDelegate: void sendNotification(javax.management.Notification)>
<org.hibernate.validator.internal.metadata.location.ReturnValueConstraintLocation: void <init>(java.lang.reflect.Executable)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapType withContentValueHandler(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.security.Provider: java.util.Collection values()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree lambda$new$0(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl)>-><org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree createConstraintTree(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl)>
<org.springframework.aop.config.AopConfigUtils: org.springframework.beans.factory.config.BeanDefinition registerOrEscalateApcAsRequired(java.lang.Class,org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: void setBeanClassName(java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.AnnotatedParameterizedType getValueExtractorDefinition(java.lang.Class)>-><java.util.ArrayList: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.reflect.TypeVariable access$300(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Collections$1: boolean hasNext()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.WeakHashMap$EntrySet: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>-><java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>-><java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl: org.springframework.core.env.Environment deduceEnvironment(org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.context.support.AbstractApplicationContext: org.springframework.core.env.Environment getEnvironment()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.nio.charset.Charset: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.jmx.JmxEndpointExporter: javax.management.ObjectName register(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>
<org.aspectj.bridge.MessageUtil$4: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.InjectionPoint: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<org.apache.logging.log4j.spi.LoggerRegistry: org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String,org.apache.logging.log4j.message.MessageFactory)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.format.CellNumberStringMod: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<org.hibernate.validator.internal.engine.constraintvalidation.HibernateConstraintValidatorInitializationContextImpl: int createHashCode()>-><java.time.Duration: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$DifferentManagementContextConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.autoconfigure.web.ManagementContextFactory)>
<org.springframework.cglib.proxy.FixedValueGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: int hashCode()>
<com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,java.lang.Object)>-><com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void <init>(java.lang.String)>-><com.fasterxml.jackson.core.io.SerializedString: void <init>(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ObjectArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ObjectArrayValueExtractor: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(java.lang.Class[])>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>()>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.util.Collections$EmptyList: int size()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.calendar.CalendarDate: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.apache.http.HttpHost: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.security.Provider$ServiceKey: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void setMultipartConfig(javax.servlet.MultipartConfigElement)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: javax.servlet.Servlet getServlet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromWildcard(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.WildcardType,com.fasterxml.classmate.TypeBindings)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.mustache.MustacheServletWebConfiguration: void <init>()>
<org.springframework.web.server.adapter.ForwardedHeaderTransformer: void <clinit>()>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.DERT61String: int hashCode()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <init>()>-><org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: javax.el.ExpressionFactory buildExpressionFactory()>
<org.apache.catalina.core.ContainerBase: void <init>()>-><java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.JSON: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean remove(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: int rehash()>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.String applicable(java.lang.reflect.Method[])>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.p6spy.engine.spy.option.P6OptionsRepository$DelayedOptionChange: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.cert.Certificate: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Enumerated: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$EmptySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.http.pool.RouteSpecificPool: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.EnumMap$1: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap$EntryIterator$Entry: int hashCode()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: java.lang.Object run(java.security.PrivilegedAction)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.InetAddress: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int compareTo(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: org.hibernate.validator.internal.metadata.core.MetaConstraint create(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation,java.util.List,java.lang.reflect.Type)>
<javax.management.NotificationBroadcasterSupport: void <init>(java.util.concurrent.Executor,javax.management.MBeanNotificationInfo[])>-><java.lang.Object: void <init>()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.util.BitSet: boolean get(int)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration: void <init>()>
<sun.security.ssl.ProtocolVersion: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<register-finalize <org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getFieldMetaData(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedField findPropertyMetaData(java.lang.reflect.Field)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.PropertyName _findParamName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter,com.fasterxml.jackson.databind.AnnotationIntrospector)>-><com.fasterxml.jackson.module.paramnames.ParameterNamesAnnotationIntrospector: java.lang.String findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.spi.group.DefaultGroupSequenceProvider newGroupSequenceProviderClassInstance(java.lang.Class,java.lang.Class)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: int hashCode()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void doAcquireShared(int)>-><java.util.concurrent.Semaphore$NonfairSync: int tryAcquireShared(int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.xml.namespace.QName: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.jni.SSL: int fipsModeGet()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNamesImpl(javax.management.ObjectName,javax.management.QueryExp)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1Set: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void prepareRefresh()>-><org.springframework.context.support.AbstractApplicationContext: void prepareRefresh()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration$MvcRequestMatcherConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Character: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.IdentityHashMap$KeySet: int size()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.IdentityHashMap$EntrySet: boolean contains(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName preRegister(javax.management.DynamicMBean,javax.management.MBeanServer,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.MBeanSupport: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>
<com.sun.jmx.mbeanserver.MXBeanLookup: javax.management.ObjectName mxbeanToObjectName(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.math.BigDecimal: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean hasParameterConstraints(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.Map getErrorAttributes(javax.servlet.http.HttpServletRequest,boolean)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERBMPString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: boolean isConstrained()>-><java.util.Collections$EmptySet: boolean isEmpty()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.engine.ValidationContext$ValidatorScopedContext: void <init>(org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory getScriptEvaluatorFactory()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(javax.management.DynamicMBean,java.lang.String,javax.management.ObjectName,java.lang.String)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>-><sun.security.jca.GetInstance: java.util.List getServices(java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.Decoration$DecorationImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<org.aspectj.weaver.patterns.CflowPointcut: void <clinit>()>-><org.aspectj.weaver.ResolvedPointcutDefinition: void <init>(org.aspectj.weaver.UnresolvedType,int,java.lang.String,org.aspectj.weaver.UnresolvedType[],org.aspectj.weaver.patterns.Pointcut)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.AbstractMap: void clear()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.core.ResolvableType getReturnTypeForFactoryMethod(org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.ResolvableType: org.springframework.core.ResolvableType forMethodReturnType(java.lang.reflect.Method)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decompose(sun.security.ssl.CipherSuite$KeyExchange,sun.security.ssl.CipherSuite$BulkCipher,sun.security.ssl.CipherSuite$MacAlg)>-><java.util.HashSet: void <init>()>
<org.aspectj.bridge.MessageUtil$8: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.Collectors: void lambda$toMap$58(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.Map,java.lang.Object)>-><java.util.Collections$SingletonMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration: void <init>()>
<org.springframework.security.core.userdetails.User$UserBuilder: java.lang.String lambda$roles$1(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<io.micrometer.core.util.internal.logging.JdkLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLogger: void <init>(java.util.logging.Logger)>
<org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String getName()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.alibaba.fastjson.JSONArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.alibaba.fastjson.serializer.ObjectArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree of(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.constraintvalidation.SimpleConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<com.baomidou.dynamic.datasource.DynamicDataSourceClassResolver: void <clinit>()>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.InetAddress: java.lang.String toString()>
<java.net.IDN: java.lang.String toASCII(java.lang.String,int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Byte: int hashCode()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)>-><sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.util.EnumSet)>-><java.util.JumboEnumSet: boolean contains(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERT61String: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><java.lang.Object: void wait()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.lang.Object lambda$null$44(java.util.function.Supplier,java.lang.Object)>-><java.util.stream.ReduceOps$Box: java.lang.Object get()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.aop.framework.JdkDynamicAopProxy: int hashCode()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Object: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.aop.config.AopConfigUtils: org.springframework.beans.factory.config.BeanDefinition registerOrEscalateApcAsRequired(java.lang.Class,org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><java.net.SocketInputStream: void close()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.codehaus.jackson.map.type.MapLikeType: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedWildcardTypeImpl: void <init>(java.lang.reflect.WildcardType,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<sun.text.normalizer.UCharacterIterator: java.lang.String getText()>-><sun.text.normalizer.ReplaceableUCharacterIterator: int getLength()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.DERNumericString: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>-><java.lang.Thread: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.math.BigInteger: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.management.AttributeNotFoundException: void <init>(java.lang.String)>-><javax.management.OperationsException: void <init>(java.lang.String)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.http.pool.RouteSpecificPool: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.OptionalInt: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.ConstraintLocation: org.hibernate.validator.internal.metadata.location.ConstraintLocation forParameter(java.lang.reflect.Executable,int)>-><org.hibernate.validator.internal.metadata.location.ParameterConstraintLocation: void <init>(java.lang.reflect.Executable,int)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.ConcurrentModificationException: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.net.IDN: java.lang.StringBuffer toASCIILower(java.lang.StringBuffer)>-><java.lang.StringBuffer: void <init>()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<sun.reflect.annotation.TypeAnnotationParser: java.util.Map mapTypeAnnotations(sun.reflect.annotation.TypeAnnotation[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.util.Collection values()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.openxml4j.opc.internal.ContentType: int hashCode()>
<org.codehaus.jackson.io.NumberInput: void <clinit>()>-><java.lang.String: java.lang.String substring(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Vector: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.commons.collections.FastHashMap$CollectionView: int hashCode()>
<sun.security.ssl.SSLContextImpl$TLS11Context: void <init>()>-><sun.security.ssl.SSLContextImpl$AbstractTLSContext: void <init>(sun.security.ssl.SSLContextImpl$1)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.chrono.AbstractChronology: int hashCode()>
<org.aspectj.weaver.ResolvedType$Missing: void <init>()>-><org.aspectj.weaver.ResolvedType: void <init>(java.lang.String,org.aspectj.weaver.World)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.naming.NamingException: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERGraphicString: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLContextImpl$AbstractTLSContext: void <clinit>()>-><sun.security.ssl.SSLContextImpl: java.lang.String[] access$000(sun.security.ssl.ProtocolVersion[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariableBindings: java.util.Map getTypeVariableBindings(java.lang.Class)>-><java.util.Collections: java.util.Map emptyMap()>
<org.springframework.boot.actuate.endpoint.web.reactive.AbstractWebFluxEndpointHandlerMapping: void <clinit>()>-><org.springframework.web.util.pattern.PathPatternParser: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractList$Itr: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.mustache.MustacheReactiveWebConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.alibaba.fastjson.JSON: java.lang.String toString()>
<org.springframework.boot.actuate.health.HealthEndpointSupport: void <clinit>()>-><org.springframework.boot.actuate.health.Health$Builder: org.springframework.boot.actuate.health.Health build()>
<springfox.documentation.spring.web.scanners.ApiDocumentationScanner: void <init>(springfox.documentation.spring.web.scanners.ApiListingReferenceScanner,springfox.documentation.spring.web.scanners.ApiListingScanner)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiListingReferenceScanner getApiListingReferenceScanner()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<sun.security.ssl.Debug: void Help()>-><java.lang.System: void exit(int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$WeakValueReference: void <init>(java.lang.Object,java.lang.Object,int,java.lang.ref.ReferenceQueue)>-><java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.x509.AVA: int hashCode()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.ResolvableType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ReflectionHelper: boolean isGetterMethod(java.lang.reflect.Executable)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.MiscCodec: void writeIterator(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.SerializeWriter,java.util.Iterator)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory: sun.reflect.annotation.TypeAnnotation$LocationInfo addNesting(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: java.lang.reflect.Type getOwnerType()>
<com.sun.jmx.mbeanserver.MXBeanLookup: com.sun.jmx.mbeanserver.MXBeanLookup lookupFor(javax.management.MBeanServerConnection)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void debug(java.lang.String)>-><io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void log(int,java.lang.String)>
<org.springframework.boot.actuate.autoconfigure.endpoint.jmx.DefaultEndpointObjectNameFactory: boolean hasMBean(java.lang.String)>-><java.util.HashSet: boolean isEmpty()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromParamType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.classmate.TypeBindings)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<sun.net.idn.StringPrepDataReader: void read(byte[],char[])>-><java.io.DataInputStream: int read(byte[])>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.ResolvableType: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.provider.RuleBasedBreakIterator: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>-><org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object doBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void beforeConfigure()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.security.cert.Certificate: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<org.aspectj.weaver.patterns.NoTypePattern: void <init>()>-><org.aspectj.weaver.patterns.TypePatternList: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<org.springframework.boot.actuate.trace.http.HttpExchangeTracer: java.lang.Long lambda$sendingResponse$0(org.springframework.boot.actuate.trace.http.HttpTrace)>-><java.time.Instant: long toEpochMilli()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromVariable(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.jackson.databind.type.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String getName()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Absent: boolean equals(java.lang.Object)>
<sun.security.ssl.Debug: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<com.fasterxml.classmate.types.ResolvedInterfaceType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType[])>-><com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: void <clinit>()>-><java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.ParameterConstraintLocation: int hashCode()>-><java.lang.reflect.Method: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.el.Util$CacheKey: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>-><org.apache.juli.logging.DirectJDKLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.util.concurrent.DirectExecutor: java.lang.String toString()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.ExpressionFactory$CacheValue: void setFactoryClass(java.lang.Class)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.TypeVariableBindings: java.util.Map getTypeVariableBindings(java.lang.Class)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.Map toImmutableMap(java.util.Map)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.el.ExpressionFactory$CacheKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><io.netty.buffer.AbstractByteBuf: int hashCode()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.alibaba.fastjson.parser.ParseContext: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanIntrospector: java.lang.Object invokeM(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.web.context.support.WebApplicationContextUtils: void registerEnvironmentBeans(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,javax.servlet.ServletContext)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.SubList$1: boolean hasNext()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentReturnValueLocation: void <init>(java.lang.reflect.Executable)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>-><org.hibernate.validator.internal.metadata.core.ConstraintHelper: boolean isJdkAnnotation(java.lang.Class)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void collectTypeBindings(java.lang.Class,java.util.Map,java.util.Map)>-><java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$EmptySet: int size()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.String getPropertyName(java.lang.reflect.Member)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set filterListOfObjectInstances(java.util.Set,javax.management.QueryExp)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.StackTraceElement: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$AndPredicate: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.ArrayList: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.temporal.WeekFields: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.x509.GeneralName: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SynchronizedSortedMap: java.util.Comparator comparator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.MutablePropertyValues: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ExecutableHelper: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Float: java.lang.String toString()>
<sun.text.normalizer.ReplaceableUCharacterIterator: int getText(char[],int)>-><sun.text.normalizer.ReplaceableString: void getChars(int,int,char[],int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.imageio.ImageTypeSpecifier: int hashCode()>
<com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>-><javax.management.MBeanInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanAttributeInfo[],javax.management.MBeanConstructorInfo[],javax.management.MBeanOperationInfo[],javax.management.MBeanNotificationInfo[],javax.management.Descriptor)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.MonthDay: int hashCode()>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><java.lang.StringBuffer: int length()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type getRawType()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.SubList$1: boolean hasNext()>
<org.aspectj.weaver.World: void <clinit>()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.ASN1UTCTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.URL: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><javax.management.openmbean.TabularDataSupport: boolean containsKey(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void access$100(com.sun.jmx.interceptor.DefaultMBeanServerInterceptor,java.lang.ClassLoader,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void removeClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.commons.beanutils.MethodUtils$MethodDescriptor: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.crypto.CryptoPermission: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.MXBeanLookup: void <init>(javax.management.MBeanServerConnection)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: com.sun.jmx.mbeanserver.WeakIdentityHashMap make()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.springframework.aop.config.AopConfigUtils: void forceAutoProxyCreatorToUseClassProxying(org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues add(java.lang.String,java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.chrono.AbstractChronology: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.JSONObject: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.web.filter.FormContentFilter: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.BitSet: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<com.fasterxml.classmate.util.LRUTypeCache$CacheMap: void <init>(int)>-><java.util.LinkedHashMap: void <init>()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireBean(java.lang.Object)>-><org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ReadOnlyMapPropertyValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ReadOnlyMapPropertyValueExtractor: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromGenericType(com.fasterxml.classmate.util.ClassStack,com.fasterxml.classmate.GenericType,com.fasterxml.classmate.TypeBindings)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void setSuffixPatternMatch(boolean)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationDeprecatedReader: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointDiscoverer: org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey createOperationKey(org.springframework.boot.actuate.endpoint.jmx.JmxOperation)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: void <init>(java.lang.Object,java.util.function.Supplier)>
<com.zaxxer.hikari.HikariConfig: void <init>(java.util.Properties)>-><com.zaxxer.hikari.HikariConfig: void <init>()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderCheckGetters: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.lang.Error: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.imageio.ImageTypeSpecifier$Interleaved: int hashCode()>
<org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager: void lambda$new$0(org.springframework.security.core.userdetails.UserDetails)>-><org.springframework.security.authentication.LockedException: void <init>(java.lang.String)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><javax.management.ObjectInstance: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.LinkedHashMap: java.util.Collection values()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.PerInterface: java.lang.Object getAttribute(java.lang.Object,java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce: java.security.AlgorithmParameters getAlgorithmParameters(java.lang.String)>-><java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.MXBeanMapping: javax.management.openmbean.OpenType getOpenType()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanAttributeInfo: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getResolvedSuperclass(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.Contracts: void assertNotNull(java.lang.Object,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.math.BigDecimal: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.jca.ProviderConfig: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><javax.management.openmbean.TabularDataSupport: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><org.aspectj.util.LangUtil: boolean is15VMOrGreater()>
<javax.el.Util: void <clinit>()>-><javax.el.Util$CacheValue: void <init>()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.wuwenze.poi.pojo.ExcelMapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptyMap: java.util.Set entrySet()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MXBeanLookup: com.sun.jmx.mbeanserver.MXBeanLookup lookupFor(javax.management.MBeanServerConnection)>-><java.lang.ref.Reference: java.lang.Object get()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.method.HandlerMethod: void evaluateResponseStatus()>-><org.springframework.web.method.HandlerMethod: java.lang.Class getBeanType()>
<org.springframework.web.util.pattern.PathPattern: void <clinit>()>-><java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.Provider$UString: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.Rectangle: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.p6spy.engine.spy.option.P6OptionsRepository$DelayedOptionChange: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.expression.TypedValue: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.HashMap: java.util.Collection values()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanTrustPermission(java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.CodeSigner: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.xml.namespace.QName: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.aspectj.bridge.context.CompilationAndWeavingContext$DefaultFormatter: void <init>(org.aspectj.bridge.context.CompilationAndWeavingContext$1)>-><org.aspectj.bridge.context.CompilationAndWeavingContext$DefaultFormatter: void <init>()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void createWebServer()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.WeakCacheKey: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<javax.management.ObjectName: java.lang.String getCanonicalKeyPropertyListString()>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<java.security.AccessControlContext$1: void <init>(java.security.AccessControlContext,sun.security.util.Debug,java.security.ProtectionDomain)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int access$200(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<org.apache.catalina.core.ApplicationContextFacade: void <init>(org.apache.catalina.core.ApplicationContext)>-><org.apache.catalina.core.ApplicationContextFacade: void initClassCache()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.ObjectArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String getName()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.Class getErasedReferenceType(java.lang.reflect.Type)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: int hashCode()>
<org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: javax.management.modelmbean.ModelMBeanOperationInfo getMBeanOperation(org.springframework.boot.actuate.endpoint.jmx.JmxOperation)>-><org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: java.lang.String getType(java.lang.Class)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedMap: void clear()>-><org.springframework.util.LinkedMultiValueMap: void clear()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: void treeifyBin(java.util.concurrent.ConcurrentHashMap$Node[],int)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.AttributeValues: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.IdentityHashMap: java.util.Set entrySet()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.Parameter[],int,java.lang.reflect.AnnotatedType)>-><java.lang.reflect.Parameter: java.lang.reflect.Executable getDeclaringExecutable()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedElement$ConstrainedElementKind: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: java.lang.Object run(java.security.PrivilegedAction)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isExtensionExposed(java.lang.Object)>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isCloudFoundryHealthEndpointExtension(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.AllPermission: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType resolve(java.lang.reflect.Type,java.lang.reflect.Type[])>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType resolve(com.fasterxml.classmate.TypeBindings,java.lang.reflect.Type)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><org.springframework.http.ReadOnlyHttpHeaders: void clear()>
<sun.security.ssl.SignatureAndHashAlgorithm: void supports(sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm,sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm,java.lang.String,int)>-><sun.security.ssl.SignatureAndHashAlgorithm: void <init>(sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm,sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm,java.lang.String,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$EmptyMap: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForParameterizedType(java.lang.reflect.AnnotatedParameterizedType,java.lang.reflect.TypeVariable[])>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.util.BuddhistCalendar: int hashCode()>
<java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: void addReference(javax.management.ObjectName,java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer: void <init>(com.alibaba.fastjson.parser.ParserConfig,java.lang.Class,com.alibaba.fastjson.util.FieldInfo)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><io.netty.util.ResourceLeakDetector$Record: java.lang.String toString()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$DelegatingHandlerMappingDescriptionProvider: void <init>(java.util.List,org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$DelegatingHandlerMappingDescriptionProvider: void <init>(java.util.List)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DecimalFormatSymbols: int hashCode()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Collections$UnmodifiableList: java.lang.Object set(int,java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.JSONObject: boolean equals(java.lang.Object)>
<java.lang.SecurityManager: void checkPermission(java.security.Permission,java.lang.Object)>-><java.lang.SecurityException: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.locale.Extension: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration$TokenKeyEndpointRegistrar: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotatedTypeFactory: sun.reflect.annotation.TypeAnnotation$LocationInfo addNesting(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo)>-><sun.reflect.annotation.AnnotatedTypeFactory: boolean isArray(java.lang.reflect.Type)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.font.EAttribute: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map normalize(java.util.Map)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<org.aspectj.weaver.SourceContextImpl: void <clinit>()>-><org.aspectj.weaver.SourceContextImpl$1: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.ResolvedType: java.lang.Class getErasedType()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.p6spy.engine.spy.option.P6OptionsRepository$DelayedOptionChange: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.IdentityHashMap$KeySet: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.util.concurrent.AbstractFuture: java.lang.String toString()>
<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>-><javax.management.MBeanException: java.lang.Throwable getCause()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><java.util.HashMap: void <init>(int)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.ObjectName: boolean isPattern()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: int hashCode()>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder getCascadingMetaData(java.lang.reflect.Type,java.lang.reflect.AnnotatedElement,java.util.Map)>-><java.lang.reflect.AccessibleObject: boolean isAnnotationPresent(java.lang.Class)>
<org.springframework.context.support.AbstractApplicationContext: void refresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void finishRefresh()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: void destroy()>-><org.springframework.web.filter.GenericFilterBean: void destroy()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: java.lang.Object objectNameToMXBean(javax.management.ObjectName,java.lang.Class)>-><java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.netty.buffer.AbstractByteBuf: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set filterListOfObjectInstances(java.util.Set,javax.management.QueryExp)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.hibernate.validator.spi.scripting.AbstractCachingScriptEvaluatorFactory: void <init>()>-><java.lang.Object: void <init>()>
<sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm: void <clinit>()>-><sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int,int)>
<sun.security.ssl.JsseJce: java.security.Signature getSignature(java.lang.String)>-><java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.ref.WeakReference makeReference(java.lang.Object,java.lang.ref.ReferenceQueue)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.jar.Attributes$Name: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Vector: int hashCode()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.aop.config.AopConfigUtils: org.springframework.beans.factory.config.BeanDefinition registerOrEscalateApcAsRequired(java.lang.Class,org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.context.support.AbstractApplicationContext: boolean containsBeanDefinition(java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(javax.validation.groups.ConvertGroup,javax.validation.groups.ConvertGroup$List)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.Set asSet(java.lang.Object[])>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.p6spy.engine.logging.Category: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.AnnotatedType getAnnotatedGenericComponentType()>
<org.aspectj.weaver.patterns.ThisOrTargetPointcut: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: boolean neverHasTarget()>
<org.springframework.security.oauth2.provider.client.JdbcClientDetailsService: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>
<com.zaxxer.hikari.pool.HikariPool: java.util.concurrent.ThreadFactory lambda$initializeHouseKeepingExecutorService$3()>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><java.lang.Object: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterMultiplesReader: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,java.lang.Object,int)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><org.springframework.http.HttpHeaders: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$EcAvailability: void <clinit>()>-><sun.security.ssl.JsseJce: java.security.KeyFactory getKeyFactory(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory: boolean isArray(java.lang.reflect.Type)>-><java.lang.Class: boolean isArray()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: org.springframework.boot.actuate.endpoint.ExposableEndpoint getFilterEndpoint(org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer: org.springframework.boot.actuate.endpoint.ExposableEndpoint createEndpoint(java.lang.Object,org.springframework.boot.actuate.endpoint.EndpointId,boolean,java.util.Collection)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><org.aspectj.weaver.ResolvedType$FieldGetter: void <init>(org.aspectj.weaver.ResolvedType$1)>
<org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder builder()>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void setTrailingSlashMatch(boolean)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.PermissionCollection: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellFill: int hashCode()>
<io.micrometer.core.util.internal.logging.JdkLogger: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.HashMap$KeySet: boolean contains(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<sun.security.ssl.SSLSessionContextImpl: void <init>()>-><sun.security.util.Cache: sun.security.util.Cache newSoftMemoryCache(int,int)>
<sun.security.ssl.EphemeralKeyManager$EphemeralKeyPair: void <init>(java.security.KeyPair)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: java.util.Collection getServletContextInitializerBeans()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type boxedType(java.lang.reflect.Type)>-><java.lang.Class: boolean isPrimitive()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areAllConstraintAnnotationsIgnoredFor(java.lang.Class)>-><java.lang.Boolean: boolean booleanValue()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.naming.NamingException: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.Collection: java.util.stream.Stream stream()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><java.util.Collections: java.util.Set emptySet()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.imageio.ImageTypeSpecifier$Interleaved: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<io.micrometer.core.instrument.composite.CompositeMeterRegistry: void lock(java.util.concurrent.atomic.AtomicBoolean,java.lang.Runnable)>-><java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<io.micrometer.core.util.internal.logging.JdkLogger: void <init>(java.util.logging.Logger)>-><java.util.logging.Logger: java.lang.String getName()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.LocalDate: int hashCode()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: boolean isConfigured()>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postRegister(javax.management.ObjectName,javax.management.DynamicMBean,boolean,boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Object: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Character: boolean equals(java.lang.Object)>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><java.io.BufferedInputStream: void close()>
<org.dom4j.io.SAXHelper: org.xml.sax.XMLReader createXMLReader(boolean)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.validation.ObjectError: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.http.pool.RouteSpecificPool: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.IntNode: int hashCode()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.RDN: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Long: int hashCode()>
<java.util.Collection: java.util.stream.Stream parallelStream()>-><java.util.concurrent.LinkedBlockingQueue: java.util.Spliterator spliterator()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: java.lang.Object run(java.security.PrivilegedAction)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.logging.LogManager$1: java.util.logging.LogManager run()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.DERVisibleString: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void createWebServer()>-><org.springframework.web.context.support.GenericWebApplicationContext: void initPropertySources()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.font.FontLineMetrics: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Character: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.Point: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$FilterSegement: java.lang.Object eval(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.FieldPosition: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Optional: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.jar.Manifest: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getResource(javax.management.DynamicMBean)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><java.io.BufferedInputStream: void close()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: javax.servlet.Registration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.TruePointcut: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.jar.Attributes: boolean isEmpty()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<java.net.IDN: boolean isAllASCII(java.lang.String)>-><java.lang.String: char charAt(int)>
<com.zaxxer.hikari.pool.ProxyLeakTask: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERIA5String: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<sun.security.ssl.CipherSuite$KeyExchange: void <clinit>()>-><sun.security.ssl.CipherSuite: boolean access$000()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.zone.ZoneOffsetTransitionRule: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration getGenericDeclaration()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.asm.Type: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.p6spy.engine.logging.Category: int hashCode()>
<java.net.IDN: java.lang.String toASCII(java.lang.String,int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.springframework.security.web.csrf.CsrfAuthenticationStrategy: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><java.lang.Object: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.asm.Type: int hashCode()>
<sun.reflect.annotation.AnnotatedTypeFactory: sun.reflect.annotation.TypeAnnotation$LocationInfo addNesting(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo)>-><sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation$LocationInfo pushInner()>
<org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object)>-><org.apache.juli.logging.DirectJDKLog: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.ResolvableType: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getTraceParameter(javax.servlet.http.HttpServletRequest)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.text.normalizer.NormalizerImpl: sun.text.normalizer.VersionInfo getUnicodeVersion()>-><sun.text.normalizer.VersionInfo: sun.text.normalizer.VersionInfo getInstance(int,int,int,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.commons.beanutils.MethodUtils$MethodDescriptor: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type$3: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.ArrayType: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<org.springframework.core.annotation.AnnotationAwareOrderComparator: java.lang.Integer getPriority(java.lang.Object)>-><org.springframework.core.annotation.AnnotationAwareOrderComparator: java.lang.Integer getPriority(java.lang.Object)>
<com.alibaba.fastjson.serializer.ObjectArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.reflect.Type[] getBounds()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String safeGetClassName(javax.management.DynamicMBean)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isHealthEndpointExtension(java.lang.Object)>-><org.springframework.core.annotation.MissingMergedAnnotation: java.util.Optional getValue(java.lang.String,java.lang.Class)>
<org.apache.catalina.core.ApplicationContext: void <init>(org.apache.catalina.core.StandardContext)>-><java.lang.ThreadLocal: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Vector: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<springfox.documentation.spring.web.readers.operation.OperationTagsReader: void <init>(springfox.documentation.spring.web.readers.operation.DefaultTagsProvider)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLContextImpl: java.lang.String[] getAvailableProtocols(sun.security.ssl.ProtocolVersion[])>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Integer: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.EnumMap: java.util.Collection values()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.IntNode: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Character$Subset: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<de.codecentric.boot.admin.client.registration.BlockingRegistrationClient: void <clinit>()>-><de.codecentric.boot.admin.client.registration.BlockingRegistrationClient$1: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.nio.charset.Charset: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getKey()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.Parsed: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.Color: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object remove(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><de.codecentric.boot.admin.client.config.SpringBootAdminClientCloudFoundryAutoConfiguration: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.Permission: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.MethodParameter: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.paths.OperationPathDecorator: void <init>()>-><java.lang.Object: void <init>()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.ResponseEntity: int hashCode()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<sun.net.idn.StringPrepDataReader: void <init>(java.io.InputStream)>-><sun.text.normalizer.ICUBinary: byte[] readHeader(java.io.InputStream,byte[],sun.text.normalizer.ICUBinary$Authenticate)>
<sun.reflect.annotation.TypeAnnotation$LocationInfo: boolean isSameLocationInfo(sun.reflect.annotation.TypeAnnotation$LocationInfo)>-><sun.reflect.annotation.TypeAnnotation$LocationInfo$Location: boolean isSameLocation(sun.reflect.annotation.TypeAnnotation$LocationInfo$Location)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Field)>-><java.lang.reflect.Field: java.lang.Class getType()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.LegacyHealthEndpointCompatibilityConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.util.Collections$SynchronizedMap: void clear()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Primitive: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<javax.management.MBeanRegistrationException: void <init>(java.lang.Exception,java.lang.String)>-><javax.management.MBeanException: void <init>(java.lang.Exception,java.lang.String)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.ClassKey: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void init(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void init(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><org.springframework.aop.scope.ScopedProxyUtils: boolean isScopedTarget(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.map.type.ArrayType: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void determineValueExtractorDefinitions(java.util.List,java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void determineValueExtractorDefinitions(java.util.List,java.lang.Class)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Long: java.lang.Long valueOf(long)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.baomidou.dynamic.datasource.DynamicDataSourceCreator: void <clinit>()>-><org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.font.Decoration$DecorationImpl: java.lang.String toString()>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decomposes(sun.security.ssl.CipherSuite$BulkCipher)>-><sun.security.util.AlgorithmDecomposer: java.util.Set decompose(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.AVA: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: void addValueExtractorDescriptorForTypeArgumentLocation(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.List,org.hibernate.validator.internal.metadata.location.TypeArgumentConstraintLocation)>-><org.hibernate.validator.internal.util.TypeVariables: java.lang.Class getContainerClass(java.lang.reflect.TypeVariable)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<sun.security.ssl.SignatureAndHashAlgorithm: void supports(sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm,sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm,java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.ImmutableMap: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.reflect.ParameterizedType,com.alibaba.fastjson.parser.ParserConfig)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.WeakHashMap$EntrySet: int size()>
<sun.text.normalizer.Utility: void getChars(java.lang.StringBuffer,int,int,char[],int)>-><java.lang.StringBuffer: void getChars(int,int,char[],int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: void <clinit>()>-><java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Set lambda$toSet$4(java.util.Set,java.util.Set)>-><java.util.RegularEnumSet: boolean addAll(java.util.Collection)>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decomposes(sun.security.ssl.CipherSuite$BulkCipher)>-><java.util.HashSet: boolean add(java.lang.Object)>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><javax.net.ssl.SNIServerName: int getType()>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: java.lang.Object getTarget()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>
<sun.security.ssl.SSLContextImpl$AbstractTLSContext: void <clinit>()>-><sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList access$100(sun.security.ssl.ProtocolList,boolean)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.String getPropertyName(java.lang.reflect.Member)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.serializer.SerialContext: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.WeakHashMap$Entry: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: int hashCode()>
<springfox.documentation.spring.web.scanners.ApiListingReferenceScanner: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl: org.springframework.beans.factory.config.ConfigurableListableBeanFactory deduceBeanFactory(org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.reflect.Proxy$KeyX: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.sun.jmx.mbeanserver.NamedObject: javax.management.ObjectName getName()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.AnnotatedType getAnnotatedGenericComponentType()>-><sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<org.hibernate.validator.internal.engine.valueextraction.DoubleArrayValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.config.Scope getRegisteredScope(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.actuate.trace.http.Include: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.crypto.CryptoAllPermission: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)>-><java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>
<org.springframework.boot.context.properties.PropertyMapper$NullPointerExceptionSafeSupplier: void <init>(java.util.function.Supplier)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration getGenericDeclaration()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.netty.buffer.AbstractByteBuf: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.Duration: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<io.netty.util.internal.NativeLibraryLoader: void loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)>-><javax.management.RuntimeMBeanException: java.lang.Throwable getCause()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.codehaus.jackson.map.type.ClassKey: int hashCode()>
<ch.qos.logback.core.util.EnvUtil: boolean isJaninoAvailable()>-><java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.text.ParsePosition: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ImmutableDescriptor: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.reflect.ParameterizedType,com.alibaba.fastjson.parser.ParserConfig)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>-><java.util.concurrent.TimeUnit$6: long toNanos(long)>
<org.springframework.boot.actuate.metrics.http.Outcome: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.lang.Object[])>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,org.springframework.http.MediaType[])>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: boolean isClassPresent(java.lang.String,boolean)>-><org.hibernate.validator.internal.util.privilegedactions.LoadClass: org.hibernate.validator.internal.util.privilegedactions.LoadClass action(java.lang.String,java.lang.ClassLoader,boolean)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: int hashCode()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERGeneralString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<org.springframework.web.servlet.handler.AbstractHandlerMethodMapping: void <clinit>()>-><org.springframework.web.cors.CorsConfiguration: void addAllowedOrigin(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.ArrayList: void sort(java.util.Comparator)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>-><java.util.concurrent.CopyOnWriteArrayList: void add(int,java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.bouncycastle.asn1.ASN1Primitive: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.GlyphLayout$SDCache$SDKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$SynchronizedMap: java.lang.Object remove(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: int hashCode()>
<org.springframework.boot.SpringApplication: int getExitCodeFromExitCodeGeneratorException(java.lang.Throwable)>-><javax.management.RuntimeErrorException: java.lang.Throwable getCause()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean add(javax.management.ObjectName,java.lang.ClassLoader)>-><com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport$LoaderEntry: void <init>(javax.management.ObjectName,java.lang.ClassLoader)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryMBeansImpl(javax.management.ObjectName,javax.management.QueryExp)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><org.springframework.core.OrderComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Class getBeanClass()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce: java.security.KeyFactory getKeyFactory(java.lang.String)>-><java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>
<org.springframework.web.bind.annotation.RequestMethod: void <clinit>()>-><org.springframework.web.bind.annotation.RequestMethod: void <init>(java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<javax.el.ExpressionFactory$CacheKey: void <init>(java.lang.ClassLoader)>-><java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<javax.management.StandardMBean: void postRegister(java.lang.Boolean)>-><java.lang.Boolean: boolean booleanValue()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.IdentityHashMap: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.zone.ZoneRules: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.InetSocketAddress: java.lang.String toString()>
<org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration$ReactiveUserDetailsServiceCondition$ReactiveWebApplicationCondition: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ByteArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1Null: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><java.lang.Error: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERPrintableString: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.util.MimeType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.util.locale.BaseLocale: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Vector: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander: void <init>(springfox.documentation.schema.property.field.FieldProvider,springfox.documentation.schema.property.bean.AccessorsProvider,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.lang.Integer: int intValue()>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,int,boolean)>-><sun.security.ssl.CipherSuite$BulkCipher: boolean isUnlimited(int,java.lang.String)>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.util.logging.Logger: java.lang.String getResourceBundleName()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.DERGeneralString: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashSet: int size()>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.HashMap$EntrySet: int size()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.spi.group.DefaultGroupSequenceProvider newGroupSequenceProviderClassInstance(java.lang.Class,java.lang.Class)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariableBindings: java.util.Map getTypeVariableBindings(java.lang.Class)>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<sun.security.ssl.EphemeralKeyManager: void <init>()>-><sun.security.ssl.EphemeralKeyManager$EphemeralKeyPair: void <init>(java.security.KeyPair,sun.security.ssl.EphemeralKeyManager$1)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<sun.security.ssl.Record: void <clinit>()>-><sun.security.ssl.Debug: boolean getBooleanProperty(java.lang.String,boolean)>
<org.hibernate.validator.internal.metadata.location.ConstraintLocation: org.hibernate.validator.internal.metadata.location.ConstraintLocation forReturnValue(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.location.ReturnValueConstraintLocation: void <init>(java.lang.reflect.Executable)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.SimpleAliasRegistry: boolean hasAlias(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.WeakHashMap$KeySet: boolean remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Absent: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><javax.management.ObjectInstance: int hashCode()>
<sun.text.normalizer.UCharacter: int getCodePoint(char,char)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<javax.management.MBeanServerInvocationHandler: void <init>(javax.management.MBeanServerConnection,javax.management.ObjectName,boolean)>-><java.lang.Object: void <init>()>
<org.apache.catalina.core.StandardContext: void <clinit>()>-><org.apache.catalina.core.StandardContext$1: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<com.sun.jmx.mbeanserver.MXBeanLookup: java.lang.Object objectNameToMXBean(javax.management.ObjectName,java.lang.Class)>-><java.lang.Class: java.lang.Object cast(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: java.lang.String toString()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.LambdaForm: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeAnnotationConstraints(java.lang.reflect.Executable,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentReturnValueLocation: void <init>(java.lang.reflect.Executable,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$1)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashSet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.awt.AppContext: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><org.springframework.util.Assert: void isTrue(boolean,java.util.function.Supplier)>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.List toImmutableList(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void <clinit>()>-><java.util.HashSet: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$SingletonMap: java.util.Collection values()>
<org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<javax.management.openmbean.TabularDataSupport: void clear()>-><java.util.LinkedHashMap: void clear()>
<sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation$LocationInfo pushLocation(byte,short)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.ArrayDeque$DeqSpliterator: java.util.Spliterator trySplit()>
<org.hibernate.validator.internal.util.ReflectionHelper: boolean isGetterMethod(java.lang.reflect.Executable)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.crypto.CryptoAllPermission: int hashCode()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: boolean isConfigured()>-><java.util.ArrayList: boolean isEmpty()>
<com.zaxxer.hikari.HikariDataSource: void <init>()>-><java.util.concurrent.atomic.AtomicBoolean: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: void <init>(java.lang.Object,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry,java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object newKeyReference(java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.springframework.context.ApplicationContextException: void <init>(java.lang.String)>-><org.springframework.beans.FatalBeanException: void <init>(java.lang.String)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanPermission(java.lang.String,java.lang.String,javax.management.ObjectName,java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.zone.ZoneOffsetTransition: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <clinit>()>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings$Mapping: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.couchbase.CouchbaseConfiguration: void <init>(org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties)>
<org.apache.catalina.core.StandardContext: void <init>()>-><org.apache.catalina.core.StandardContext$ContextFilterMaps: void <init>(org.apache.catalina.core.StandardContext$1)>
<sun.security.ssl.SSLAlgorithmConstraints: void <init>(javax.net.ssl.SSLSocket,boolean)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.Log4J2MetricsAutoConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeBindings: boolean isEmpty()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.Type[] getBounds()>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.Set toImmutableSet(java.util.Set)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.poi.ss.format.CellNumberFormatter$Special: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.MapPropertyValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.Clock$SystemClock: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>-><springfox.documentation.spring.web.readers.operation.AbstractOperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Hashtable: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.UnresolvedType: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.poi.ss.format.CellNumberFormatter$Special: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.Provider$ServiceKey: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.DERT61String: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.HashSet: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<javax.servlet.SessionTrackingMode: void <clinit>()>-><javax.servlet.SessionTrackingMode: void <init>(java.lang.String,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<org.springframework.core.SimpleAliasRegistry: void registerAlias(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: com.sun.jmx.mbeanserver.MXBeanLookup lookupNotNull(java.lang.Class)>
<com.zaxxer.hikari.util.IsolationLevel: void <init>(java.lang.String,int,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<javax.management.JMX: java.lang.Object createProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class,boolean,boolean)>-><java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.commons.beanutils.MethodUtils$MethodDescriptor: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<sun.security.ssl.ProtocolList: void <init>(java.util.ArrayList)>-><java.util.Collections: void sort(java.util.List)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.env.PropertySource: int hashCode()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry: void <init>()>-><org.apache.tomcat.util.modeler.Registry: void <init>()>
<com.fasterxml.classmate.types.ResolvedRecursiveType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$9: void <init>()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.OffsetTime: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.logging.LogManager$5: java.lang.Object run()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><org.springframework.http.ReadOnlyHttpHeaders: java.util.Collection values()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.InstanceNotFoundException: void <init>(java.lang.String)>
<org.springframework.aop.config.AopConfigUtils: org.springframework.beans.factory.config.BeanDefinition registerOrEscalateApcAsRequired(java.lang.Class,org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getBeanClassName()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Byte: int hashCode()>
<org.apache.http.util.TextUtils: boolean containsBlanks(java.lang.CharSequence)>-><java.lang.Character: boolean isWhitespace(char)>
<org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.io.FilePermission: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><java.util.Collections: java.util.Set emptySet()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<reactor.core.publisher.FluxOnBackpressureBufferStrategy$BackpressureBufferDropOldestSubscriber: void <init>(reactor.core.CoreSubscriber,int,boolean,java.util.function.Consumer,reactor.core.publisher.BufferOverflowStrategy)>-><java.util.ArrayDeque: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.x509.GeneralName: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <clinit>()>-><java.util.LinkedHashSet: void <init>(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.OffsetTime: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><com.google.common.collect.ImmutableMapKeySet: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.openmbean.ArrayType: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: void clear()>-><com.alibaba.fastjson.JSONObject: void clear()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.type.ClassKey: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.alibaba.fastjson.JSONObject: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.EnumMap$KeySet: int size()>
<org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: boolean subset(java.util.BitSet,java.util.BitSet)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Object: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.URI: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.aop.config.AopConfigUtils: org.springframework.beans.factory.config.BeanDefinition registerOrEscalateApcAsRequired(java.lang.Class,org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>-><org.springframework.context.support.GenericApplicationContext: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.TreeSet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.management.ThreadDumpEndpointAutoConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postRegister(javax.management.ObjectName,javax.management.DynamicMBean,boolean,boolean)>-><java.lang.StringBuilder: void <init>()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><sun.text.normalizer.CharTrie: void <init>(java.io.InputStream,sun.text.normalizer.Trie$DataManipulate)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.AbstractCollection: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Introspector: void checkCompliance(java.lang.Class)>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><javax.management.openmbean.CompositeType: java.util.Set keySet()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<org.springframework.context.support.GenericApplicationContext: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.GenericApplicationContext: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.font.FontLineMetrics: int hashCode()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.FloatArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.FloatArrayValueExtractor: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.OptionalLong: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void lambda$restore$0(java.lang.String,org.springframework.beans.factory.config.Scope)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.actuate.health.Health: org.springframework.boot.actuate.health.Health$Builder status(org.springframework.boot.actuate.health.Status)>-><org.springframework.boot.actuate.health.Health$Builder: void <init>(org.springframework.boot.actuate.health.Status)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>-><java.lang.System: int identityHashCode(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.lang.reflect.Field: java.lang.reflect.AnnotatedType getAnnotatedType()>-><java.lang.reflect.Field: byte[] getTypeAnnotationBytes0()>
<javax.crypto.KeyAgreement: void <clinit>()>-><sun.security.util.Debug: boolean isOn(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.springframework.util.LinkedMultiValueMap: java.util.Collection values()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings emptyBindings()>
<org.springframework.boot.web.client.ClientHttpRequestFactorySupplier: void <clinit>()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>
<register-finalize <org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set filterListOfObjectInstances(java.util.Set,javax.management.QueryExp)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.StdDateFormat: void _format(java.util.TimeZone,java.util.Locale,java.util.Date,java.lang.StringBuffer)>-><java.util.SimpleTimeZone: int getOffset(long)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration: void <init>()>
<register-finalize <sun.security.ssl.CipherSuite$KeyExchange: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.DateFormatSymbols: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Double: int hashCode()>
<org.aspectj.weaver.patterns.EllipsisTypePattern: void <init>()>-><org.aspectj.weaver.patterns.TypePatternList: void <init>()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <init>()>-><java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
<springfox.documentation.spring.web.readers.operation.AbstractOperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions getAnnotationProcessingOptionsFromNonDefaultProviders()>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: void <init>()>
<org.springframework.http.HttpHeaders: java.lang.String lambda$formatHeaders$5(java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.http.HttpHost: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Object: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Double: boolean equals(java.lang.Object)>
<sun.security.ssl.Debug: boolean isOn(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: void afterNodeInsertion(boolean)>-><com.fasterxml.classmate.util.LRUTypeCache$CacheMap: boolean removeEldestEntry(java.util.Map$Entry)>
<org.springframework.core.SimpleAliasRegistry: boolean hasAlias(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<javax.el.ExpressionFactory: void <clinit>()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<javax.net.ssl.SNIServerName: void <init>(int,byte[])>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<java.util.Currency$1: java.lang.Void run()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>-><java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanParameterInfo: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>-><java.util.ArrayList: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,int)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.SubList: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.NullBean: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>
<java.util.PropertyResourceBundle: void <init>(java.io.Reader)>-><java.util.HashMap: void <init>(java.util.Map)>
<org.aspectj.util.TypeSafeEnum: void <init>(java.lang.String,int)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.MXBeanLookup: void <clinit>()>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: com.sun.jmx.mbeanserver.WeakIdentityHashMap make()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.ProcessEnvironment$StringValues: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.HashSet: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.format.CellFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: boolean isRegistered(javax.management.ObjectName)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.io.File: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.util.EnumSet)>-><java.lang.IllegalArgumentException: void <init>()>
<sun.security.ssl.SSLEngineImpl: void <init>(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.font.GlyphLayout$LayoutEngineKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<org.springframework.security.core.userdetails.memory.UserAttribute: void addAuthority(org.springframework.security.core.GrantedAuthority)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hash(int)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean contains(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void putAll(java.util.Map)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Hashtable$Entry: int hashCode()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Member)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.locale.Extension: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.TreeMap$KeySet: int size()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.xmlbeans.StringEnumAbstractBase: int hashCode()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.EngineOutputRecord: void <init>(byte,sun.security.ssl.SSLEngineImpl)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object get(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedList: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Field,boolean)>-><java.lang.reflect.Field: java.lang.Class getType()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: com.sun.jmx.mbeanserver.WeakIdentityHashMap make()>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: void <init>()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Executable,int)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<sun.security.ssl.CipherSuite: void add(java.lang.String,int)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.MapLikeType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.NoTypePattern: int hashCode()>
<sun.security.ssl.EphemeralKeyManager$EphemeralKeyPair: void <init>(java.security.KeyPair,sun.security.ssl.EphemeralKeyManager$1)>-><sun.security.ssl.EphemeralKeyManager$EphemeralKeyPair: void <init>(java.security.KeyPair)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.util.LifecycleBase: void setState(org.apache.catalina.LifecycleState)>-><org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.LocalDateTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Label: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void sendNotification(java.lang.String,javax.management.ObjectName)>-><java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<com.p6spy.engine.common.P6Util: java.lang.String joinNullSafe(java.util.Collection,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.web.context.request.async.WebAsyncManager: void <clinit>()>-><java.lang.Object: void <init>()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[] retrieveDisplayNamesImpl(java.lang.String,java.util.Locale)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.slf4j.event.Level: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory: void <init>(java.lang.ClassLoader)>-><org.hibernate.validator.spi.scripting.AbstractCachingScriptEvaluatorFactory: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Proxy$Key1: int hashCode()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.util.StringUtils: java.lang.String capitalize(java.lang.String)>
<org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$DifferentManagementContextConfiguration: void <init>(org.springframework.context.ApplicationContext,org.springframework.boot.actuate.autoconfigure.web.ManagementContextFactory)>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextFactory: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.MutablePropertyValues: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.atomic.AtomicLongArray: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Hashtable$EntrySet: int size()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: int hashCode()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><java.util.HashMap: java.util.Collection values()>
<javax.management.NotificationBroadcasterSupport: void <clinit>()>-><com.sun.jmx.remote.util.ClassLogger: void <init>(java.lang.String,java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.MethodType: int hashCode()>
<java.net.IDN: void <clinit>()>-><java.net.IDN$1: void <init>()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory: void _deserialze(com.alibaba.fastjson.asm.ClassWriter,com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<sun.security.ssl.CipherSuite$KeyExchange: boolean isAvailable()>-><sun.security.ssl.JsseJce: boolean isEcAvailable()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.concurrent.CopyOnWriteArrayList: void clear()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.sun.beans.TypeResolver: void prepare(java.util.Map,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><com.sun.jmx.mbeanserver.NamedObject: javax.management.ObjectName getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<com.google.common.cache.CacheLoader: com.google.common.util.concurrent.ListenableFuture reload(java.lang.Object,java.lang.Object)>-><springfox.documentation.spring.web.scanners.CachingOperationReader$1: java.lang.Object load(java.lang.Object)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Long: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: void <init>()>-><org.aspectj.weaver.patterns.AnnotationTypePattern: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<com.alibaba.fastjson.parser.deserializer.EnumDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$2: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap: java.util.Comparator comparator()>
<com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>-><java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.MBeanParameterInfo: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.alibaba.fastjson.serializer.SerialContext: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void <init>(org.slf4j.spi.LocationAwareLogger)>-><ch.qos.logback.classic.Logger: java.lang.String getName()>
<java.util.stream.Collectors: java.util.Set lambda$toSet$4(java.util.Set,java.util.Set)>-><com.google.common.collect.ImmutableCollection: boolean addAll(java.util.Collection)>
<org.hibernate.validator.internal.util.StringHelper: boolean startsWithSeveralUpperCaseLetters(java.lang.String)>-><java.lang.String: char charAt(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.StringJoiner: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.aspectj.weaver.patterns.AnyTypePattern: void <init>()>-><org.aspectj.weaver.patterns.TypePatternList: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: void <init>(org.springframework.web.accept.ContentNegotiationStrategy,java.util.Collection)>-><java.util.Collections: java.util.Set emptySet()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><org.springframework.http.HttpHeaders: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.UUID: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: java.lang.Object run(java.security.PrivilegedAction)>-><org.hibernate.validator.internal.util.privilegedactions.SetContextClassLoader: java.lang.Object run()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<register-finalize <javax.servlet.DispatcherType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><javax.management.openmbean.CompositeType: java.util.Set keySet()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>
<org.aspectj.util.LangUtil: void <clinit>()>-><org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>
<org.aspectj.weaver.patterns.WithincodePointcut: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: boolean isEnclosingKind()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType getParentClass()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.HashSet: java.util.Iterator iterator()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: boolean isEmpty()>
<javax.servlet.ServletOutputStream: void <init>()>-><java.io.OutputStream: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><org.springframework.http.server.PathContainer$Options: boolean shouldDecodeAndParseSegments()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><java.lang.StringBuilder: void <init>()>
<sun.text.normalizer.ReplaceableUCharacterIterator: void <init>(java.lang.StringBuffer)>-><java.lang.IllegalArgumentException: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.alibaba.fastjson.JSONArray: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>-><java.util.Collections: java.util.List emptyList()>
<com.sun.jmx.mbeanserver.Introspector: void checkCompliance(java.lang.Class)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: java.lang.String substring(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.util.LifecycleBase: void destroy()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.types.ResolvedArrayType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.ZoneOffset: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Hashtable$EntrySet: int size()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.MXBeanMapping: java.lang.Class getOpenClass()>
<com.sun.jmx.mbeanserver.MBeanIntrospector: java.lang.Object invokeM(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object)>-><com.sun.jmx.mbeanserver.MBeanIntrospector: void unwrapInvocationTargetException(java.lang.reflect.InvocationTargetException)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.alibaba.fastjson.JSONArray: boolean add(java.lang.Object)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: int indexOf(java.lang.String)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isSuperAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getResolvedSuperclass(java.lang.reflect.Type)>
<org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,org.hibernate.validator.internal.metadata.raw.ConstrainedElement$ConstrainedElementKind,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.Set toImmutableSet(java.util.Set)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.StringCharacterIterator: int hashCode()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getDefaultCipherSuiteList(boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.BuddhistCalendar: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.temporal.WeekFields: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.validation.FieldError: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.springframework.security.web.util.ThrowableAnalyzer: java.lang.Throwable lambda$static$0(java.lang.Throwable)>-><javax.management.MBeanException: java.lang.Throwable getCause()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.TreeSet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.OffsetDateTime: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.ResolvableType getResolvableType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.client.MetricsClientHttpRequestInterceptor: void <clinit>()>-><org.springframework.core.NamedThreadLocal: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.MXBeanLookup: java.lang.Object objectNameToMXBean(javax.management.ObjectName,java.lang.Class)>-><java.lang.Class: boolean isInstance(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.DERVisibleString: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.reflect.ParameterizedType,com.alibaba.fastjson.parser.ParserConfig)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<springfox.documentation.spring.web.scanners.ApiDescriptionLookup: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$SetFromMap: boolean isEmpty()>
<org.springframework.security.core.userdetails.User: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.ParameterConstraintLocation: void <init>(java.lang.reflect.Executable,int)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Executable,int)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksEndpointAutoConfiguration: void <init>()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>
<register-finalize <org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse success()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: void <init>(org.springframework.http.HttpStatus)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.DERVideotexString: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.google.common.base.Present: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.logging.LogManager$1: java.util.logging.LogManager run()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.reflect.Type[] getBounds()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.util.LinkedMultiValueMap: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.RegularImmutableList: int size()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.collect.FluentIterable: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.DefaultRequestHandlerCombiner: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.Class: java.lang.Class getComponentType()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.awt.geom.Curve: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.Class)>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.String)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<javax.management.MBeanServerInvocationHandler: void <init>(javax.management.MBeanServerConnection,javax.management.ObjectName,boolean)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType[] buildAnnotatedTypes(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$SetFromMap: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Date: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.codehaus.jackson.map.type.MapLikeType: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.http.ResponseEntity: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,org.hibernate.validator.internal.metadata.raw.ConstrainedElement$ConstrainedElementKind,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.core.ResolvableType getReturnTypeForFactoryMethod(org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class getDependencyType()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<springfox.documentation.schema.property.bean.AccessorsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.InetSocketAddress: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableMap: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger newInstance(java.lang.String)>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.PermissionCollection: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType resolve(java.lang.reflect.Type,java.lang.reflect.Type[])>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String,java.lang.String)>-><sun.security.ssl.Debug: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.InterpretationContext: void addSubstitutionProperties(java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.ObjectStreamClass$FieldReflectorKey: int hashCode()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1: void <init>(java.lang.String,int,java.lang.String)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String,org.springframework.context.annotation.MBeanExportConfiguration$1)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromGenericType(com.fasterxml.classmate.util.ClassStack,com.fasterxml.classmate.GenericType,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpointAutoConfiguration: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.TreeMap$KeySet: boolean isEmpty()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.util.logging.LogManager$RootLogger: void log(java.util.logging.LogRecord)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><reactor.util.context.Context1: java.lang.Object getValue()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.ExpressionFactory: java.lang.String discoverClassName(java.lang.ClassLoader)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerWebApplicationScopes()>-><org.springframework.web.context.support.WebApplicationContextUtils: void registerWebApplicationScopes(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: java.lang.Object run(java.security.PrivilegedAction)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.sql.Date: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.apache.catalina.core.StandardContext$ContextFilterMaps: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isHealthEndpointExtension(java.lang.Object)>-><org.springframework.core.annotation.AbstractMergedAnnotation: java.util.Optional getValue(java.lang.String,java.lang.Class)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: boolean isFilterMatch(java.lang.Class,org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean)>-><org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer: boolean isEndpointExposed(java.lang.Object)>
<org.jboss.logging.Slf4jLocationAwareLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.jboss.logging.Slf4jLocationAwareLogger: boolean isEnabled(org.jboss.logging.Logger$Level)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void <init>(javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,com.sun.jmx.mbeanserver.Repository)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.juli.logging.DirectJDKLog: void trace(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.sql.Time: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Calendar: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameter(java.lang.reflect.Type[])>-><org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.FloatNode: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.HashSet: boolean isEmpty()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void sendNotification(java.lang.String,javax.management.ObjectName)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
<org.springframework.context.support.AbstractApplicationContext: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<sun.net.idn.StringPrepDataReader: int[] readIndexes(int)>-><java.io.DataInputStream: int readInt()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.AnnotatedParameterizedType getValueExtractorDefinition(java.lang.Class)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.ResponseEntity: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERVisibleString: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap: java.lang.Object get(java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><com.fasterxml.classmate.types.ResolvedObjectType: java.util.List getImplementedInterfaces()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.server.EnableChildManagementContextConfiguration: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.jar.Attributes: void clear()>-><java.util.HashMap: void clear()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<sun.security.ssl.Debug: boolean getBooleanProperty(java.lang.String,boolean)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.RegularEnumSet: int size()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><org.springframework.web.client.RestTemplate: void validateConverters(java.util.List)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.util.zip.ZipOutputStream: void writeLong(long)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(int)>
<sun.security.ssl.InputRecord: void <init>()>-><java.io.ByteArrayInputStream: void <init>(byte[])>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.LocalDate: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Field: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><reactor.util.context.Context1: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeUseConstraints(java.lang.reflect.Member,java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.Type)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream flatMap(java.util.function.Function)>
<org.springframework.web.util.UriComponentsBuilder: java.lang.Object lambda$buildInternal$0(java.lang.String)>-><java.util.HashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.HashSet newHashSet(int)>-><java.util.HashSet: void <init>(int)>
<org.springframework.web.servlet.HandlerMapping: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>-><java.lang.String: java.lang.String valueOf(char)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<javax.management.ObjectName: boolean isPropertyValuePattern(java.lang.String)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERUniversalString: java.lang.String toString()>
<org.apache.catalina.util.ContextName: java.lang.String getDisplayName()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void throwMBeanRegistrationException(java.lang.Throwable,java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object key()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.security.Provider: java.util.Set entrySet()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.wuwenze.poi.pojo.ExcelMapping: int hashCode()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<org.springframework.security.web.access.expression.WebExpressionVoter: void <init>()>-><org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler: void <init>()>
<org.springframework.boot.actuate.autoconfigure.endpoint.jmx.DefaultEndpointObjectNameFactory: javax.management.ObjectName getObjectName(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.web.servlet.ModelAndView errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: org.springframework.web.servlet.ModelAndView resolveErrorView(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.http.HttpStatus,java.util.Map)>
<com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer: void parseArray(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.util.Collection)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.LocalDateTime: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.JSONArray: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Character: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl: void <init>()>-><javax.net.ssl.SSLContextSpi: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void stopAndReleaseWebServer()>-><java.lang.IllegalStateException: void <init>(java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.asm.Type: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>-><org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Duration: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: void <init>()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.reactive.CloudFoundrySecurityInterceptor: void <clinit>()>-><reactor.core.publisher.Mono: reactor.core.publisher.Mono just(java.lang.Object)>
<org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter: java.util.Map lambda$new$0(javax.servlet.http.HttpServletRequest)>-><java.util.Collections: java.util.Map emptyMap()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.Duration: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: java.lang.Object getTarget()>-><org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(org.springframework.core.ResolvableType,java.lang.String)>
<com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.String typeName(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.geom.Rectangle2D: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.spi.group.DefaultGroupSequenceProvider getDefaultGroupSequenceProvider(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.spi.group.DefaultGroupSequenceProvider newGroupSequenceProviderClassInstance(java.lang.Class,java.lang.Class)>
<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>-><java.util.TimeZone: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.IdentityHashMap$KeySet: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1BitString: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.asm.Handle: int hashCode()>
<java.util.stream.Collectors: java.lang.Object lambda$null$44(java.util.function.Supplier,java.lang.Object)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: java.lang.Object get()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<javax.management.Notification: void <clinit>()>-><java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: void <init>()>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.HashMap newHashMap()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: void <init>(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<javax.management.MBeanException: void <init>(java.lang.Exception,java.lang.String)>-><javax.management.JMException: void <init>(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.util.TypeHelper$1: java.lang.reflect.Type getGenericComponentType()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$UnmodifiableMap: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: int hashCode()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.util.LinkedMultiValueMap: int hashCode()>
<com.google.common.collect.ImmutableMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.UnsupportedOperationException: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.asm.Handle: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$1: java.lang.Object next()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.core.SimpleAliasRegistry: void registerAlias(java.lang.String,java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.FieldPosition: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.AttributeValues: int hashCode()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: void <init>(javax.management.openmbean.CompositeType,java.lang.String[],java.lang.Object[])>
<org.aspectj.bridge.MessageUtil: void <clinit>()>-><org.aspectj.bridge.MessageUtil$10: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedMap: void putAll(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: void putAll(java.util.Map)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameter(java.lang.reflect.Type[])>-><java.util.HashMap: void putAll(java.util.Map)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.ConstructorArgumentValues: boolean equals(java.lang.Object)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Character: java.lang.Character valueOf(char)>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><org.springframework.security.web.server.csrf.CsrfWebFilter$DefaultRequireCsrfProtectionMatcher: void <init>(org.springframework.security.web.server.csrf.CsrfWebFilter$1)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<sun.net.idn.StringPrep: sun.text.normalizer.VersionInfo getVersionInfo(int)>-><sun.text.normalizer.VersionInfo: sun.text.normalizer.VersionInfo getInstance(int,int,int,int)>
<org.springframework.web.servlet.resource.ResourceUrlEncodingFilter: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.POJONode: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationParameterRequestConditionReader: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.alibaba.fastjson.JSONObject: int hashCode()>
<javax.net.ssl.SNIHostName: void checkHostName()>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Properties: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: int characteristics()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: int characteristics()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Collections$SynchronizedMap: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.format.CellFormat: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Field: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Method,boolean)>-><java.lang.reflect.Method: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>-><ch.qos.logback.classic.Logger: java.lang.String getName()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableList: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLContextImpl$TLS11Context: void <clinit>()>-><sun.security.ssl.SSLContextImpl: java.lang.String[] access$000(sun.security.ssl.ProtocolVersion[])>
<springfox.documentation.schema.property.bean.AccessorsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isSuperAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type[] getResolvedInterfaces(java.lang.reflect.Type)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.zone.ZoneOffsetTransitionRule: int hashCode()>
<javax.management.NotificationBroadcasterSupport$SendNotifJob: void run()>-><com.sun.jmx.remote.util.ClassLogger: void debug(java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellBorder: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Locale$LocaleKey: int hashCode()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.net.IDN: boolean isRootLabel(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.aspectj.weaver.NameMangler: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forSignature(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.ObjectStreamClass$WeakClassKey: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.openxml4j.opc.internal.ContentType: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentExecutableParameterLocation: void <init>(java.lang.reflect.Executable,int)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.poi.xssf.usermodel.XSSFName: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.http.ResponseEntity: java.lang.String toString()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.DERUniversalString: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.aop.TruePointcut: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration: void <init>()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.web.filter.GenericFilterBean: void destroy()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$SetFromMap: java.util.stream.Stream stream()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean remove(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.core.annotation.TypeMappedAnnotation: java.util.Optional getDefaultValue(java.lang.String,java.lang.Class)>-><org.springframework.core.annotation.AttributeMethods: java.lang.reflect.Method get(int)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.springframework.web.client.RestTemplate: void <init>(java.util.List)>-><org.springframework.web.client.DefaultResponseErrorHandler: void <init>()>
<javax.crypto.Cipher$Transform: int supports(java.security.Provider$Service,java.lang.String,java.lang.String)>-><java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<org.apache.catalina.valves.ValveBase: void initInternal()>-><org.apache.catalina.valves.ValveBase: org.apache.catalina.Container getContainer()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int hashCode()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock readLock()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$UnmodifiableMap: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.UUID: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates: void <init>(java.security.Provider)>-><sun.security.ssl.JsseJce$SunCertificates$1: void <init>(sun.security.ssl.JsseJce$SunCertificates,java.security.Provider)>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areReturnValueConstraintsIgnoredFor(java.lang.reflect.Member)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void <clinit>()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.alibaba.fastjson.JSONObject: java.util.Collection values()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.font.GlyphLayout$SDCache$SDKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.alibaba.fastjson.JSONPObject: java.lang.String toString()>
<org.hibernate.validator.internal.util.privilegedactions.GetMethods: org.hibernate.validator.internal.util.privilegedactions.GetMethods action(java.lang.Class)>-><org.hibernate.validator.internal.util.privilegedactions.GetMethods: void <init>(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.font.GlyphLayout$SDCache$SDKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.RegularImmutableMap$Values: int size()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: boolean isDebugEnabled()>
<com.sun.jmx.mbeanserver.MBeanIntrospector: boolean consistent(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<java.util.logging.Handler: void reportError(java.lang.String,java.lang.Exception,int)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation,java.util.List,java.lang.reflect.Type)>-><java.util.Collections$UnmodifiableCollection: int size()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String toString()>
<sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm: void <clinit>()>-><sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm: void <init>(java.lang.String,int,java.lang.String,int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.commons.beanutils.MethodUtils$MethodDescriptor: boolean equals(java.lang.Object)>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.net.IDN: void <clinit>()>-><java.util.zip.GZIPInputStream$1: void close()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.security.AllPermission: int hashCode()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.HttpHeaders: java.lang.Object remove(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: java.lang.Object objectNameToMXBean(javax.management.ObjectName,java.lang.Class)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$2: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Date: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.MessageDigest: java.lang.String toString()>
<javax.management.openmbean.ArrayType: boolean isAssignableFrom(javax.management.openmbean.OpenType)>-><javax.management.openmbean.CompositeType: boolean isAssignableFrom(javax.management.openmbean.OpenType)>
<org.springframework.beans.factory.support.BeanDefinitionReaderUtils: void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.context.support.GenericApplicationContext: void registerAlias(java.lang.String,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$NotPredicate: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.DoubleNode: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$ReactiveConfiguration: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void finishRefresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.server.WebServer startWebServer()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.core.io.UrlResource: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.LifecycleException: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Vector$Itr: java.lang.Object next()>
<reactor.core.scheduler.Schedulers: void <clinit>()>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<sun.text.normalizer.ReplaceableUCharacterIterator: void <init>(java.lang.StringBuffer)>-><sun.text.normalizer.ReplaceableString: void <init>(java.lang.StringBuffer)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<sun.reflect.annotation.TypeAnnotationParser: java.util.Map mapTypeAnnotations(sun.reflect.annotation.TypeAnnotation[])>-><sun.reflect.annotation.TypeAnnotation: java.lang.annotation.Annotation getAnnotation()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.IdentityHashMap$KeySet: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.context.support.StaticMessageSource: void <init>()>-><org.springframework.context.support.AbstractMessageSource: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.springframework.boot.security.servlet.ApplicationContextRequestMatcher: void <init>(java.lang.Class)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation,java.util.List,java.lang.reflect.Type)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: int buildHashCode(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultSeparator: void <init>(char,java.lang.String)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.awt.geom.Edge: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.apache.commons.collections.FastHashMap: boolean isEmpty()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.scanners.ApiListingScanner: void <init>(springfox.documentation.spring.web.scanners.ApiDescriptionReader,springfox.documentation.spring.web.scanners.ApiModelReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isQualifier(java.lang.Class)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl$TLS11Context: void <clinit>()>-><sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList access$100(sun.security.ssl.ProtocolList,boolean)>
<org.springframework.boot.actuate.health.Health: void <init>(org.springframework.boot.actuate.health.Health$Builder)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getComponentType(java.lang.reflect.Type)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: java.lang.reflect.Field getAccessible(java.lang.reflect.Field)>-><org.hibernate.validator.internal.util.privilegedactions.GetDeclaredField: org.hibernate.validator.internal.util.privilegedactions.GetDeclaredField andMakeAccessible(java.lang.Class,java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$BlockingRegistrationClientConfig: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.JdkLogger: void debug(java.lang.String)>-><io.micrometer.core.util.internal.logging.JdkLogger: void log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: long getTimeToLive(java.lang.String,java.util.Locale)>-><java.util.ResourceBundle$Control: long getTimeToLive(java.lang.String,java.util.Locale)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.AnnotatedTypeFactory: sun.reflect.annotation.TypeAnnotation$LocationInfo addNesting(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo)>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Year: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.slf4j.helpers.SubstituteLogger: int hashCode()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.hibernate.validator.internal.metadata.location.BeanConstraintLocation: void <init>(java.lang.Class)>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation$LocationInfo pushArray()>-><sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation$LocationInfo pushLocation(byte,short)>
<sun.security.ssl.SecureKey: void <clinit>()>-><java.lang.Object: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.validation.FieldError: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForAnnotatedType(java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForParameterizedType(java.lang.reflect.AnnotatedParameterizedType,java.lang.reflect.TypeVariable[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Present: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.Throwable: void printStackTrace()>
<sun.security.ssl.ProtocolList: java.util.ArrayList convert(java.lang.String[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.stream.Collectors: java.util.Set lambda$toSet$4(java.util.Set,java.util.Set)>-><java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.springframework.core.annotation.MergedAnnotation: org.springframework.core.annotation.MergedAnnotation of(java.lang.reflect.AnnotatedElement,java.lang.Class,java.util.Map)>-><org.springframework.core.annotation.MergedAnnotation: org.springframework.core.annotation.MergedAnnotation of(java.lang.ClassLoader,java.lang.Object,java.lang.Class,java.util.Map)>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.GlyphLayout$SDCache$SDKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String getName()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int getOrder(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$1: int getOrder(java.lang.Object)>
<org.aspectj.weaver.UnresolvedType$TypeKind: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<net.logstash.logback.appender.AbstractLogstashTcpSocketAppender$TcpSendingEventHandler: void onEvent(net.logstash.logback.appender.AsyncDisruptorAppender$LogEvent,long,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.String: java.lang.String substring(int)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.reflect.Field: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.health.HealthEndpointSupport: void <clinit>()>-><org.springframework.boot.actuate.health.Health: org.springframework.boot.actuate.health.Health$Builder up()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areMemberConstraintsIgnoredFor(java.lang.reflect.Member)>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areAllConstraintAnnotationsIgnoredFor(java.lang.Class)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void checkMBeanTrustPermission(java.lang.Class)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission,java.lang.Object)>
<sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.ResolvedType getParentClass()>-><com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType getParentClass()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.web.accept.HeaderContentNegotiationStrategy: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<reactor.core.scheduler.Schedulers: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Enum: java.lang.String toString()>
<java.security.KeyPairGenerator$Delegate: void <init>(java.security.KeyPairGeneratorSpi,java.lang.String)>-><java.security.KeyPairGenerator: void <init>(java.lang.String)>
<org.springframework.core.GenericTypeResolver$TypeVariableMapVariableResolver: void <init>(java.util.Map)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.util.RawValue: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.AbstractSecurityBuilder: java.lang.Object build()>-><org.springframework.security.config.annotation.AlreadyBuiltException: void <init>(java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.poi.ss.format.CellFormatPart: java.lang.String toString()>
<com.p6spy.engine.common.CustomHashedHashSet: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<sun.net.idn.StringPrep$Values: void <init>(sun.net.idn.StringPrep$1)>-><sun.net.idn.StringPrep$Values: void <init>()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.Collections$SynchronizedMap: java.util.Collection values()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<sun.security.ssl.EngineInputRecord: void <init>(sun.security.ssl.SSLEngineImpl)>-><sun.security.ssl.InputRecord: void <init>()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.boot.web.servlet.support.ErrorPageFilter: void addClassIfPresent(java.util.Collection,java.lang.String)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<sun.security.ssl.JsseJce: javax.crypto.KeyAgreement getKeyAgreement(java.lang.String)>-><javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>
<org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind,boolean)>-><org.aspectj.bridge.MessageUtil$KindSelector: void <init>(org.aspectj.bridge.IMessage$Kind,boolean,java.lang.String)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(int,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key getKey()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.AbstractList: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.MapPropertyKeyExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.MapPropertyKeyExtractor: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.util.calendar.Era: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromParamType(java.lang.reflect.ParameterizedType,org.codehaus.jackson.map.type.TypeBindings)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><ch.qos.logback.classic.Logger: void info(java.lang.String,java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.PerInterface: java.lang.Object getAttribute(java.lang.Object,java.lang.String,java.lang.Object)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.MethodOverrides: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: int characteristics()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: int characteristics()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.AttributedString$AttributedStringIterator: int hashCode()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType[] _resolveSuperInterfaces(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$1: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.Enum: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.jsontype.NamedType: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.WeakCache$CacheKey: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents$Type$2: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.URL: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.poi.xssf.usermodel.XSSFFont: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isHealthEndpointExtension(java.lang.Object)>-><org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.annotation.MergedAnnotation get(java.lang.Class)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Float: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.atomic.AtomicIntegerArray: java.lang.String toString()>
<org.springframework.boot.cloud.CloudPlatform: void <clinit>()>-><org.springframework.boot.cloud.CloudPlatform$2: void <init>(java.lang.String,int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.Period: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.validation.ObjectError: boolean equals(java.lang.Object)>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void throwMBeanRegistrationException(java.lang.Throwable,java.lang.String)>-><javax.management.RuntimeErrorException: void <init>(java.lang.Error,java.lang.String)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.core.ResolvableType getReturnTypeForFactoryMethod(org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.reflect.Method getResolvedFactoryMethod()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.commons.beanutils.converters.ConverterFacade: java.lang.String toString()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><org.springframework.context.support.ResourceBundleMessageSource: java.util.ResourceBundle loadBundle(java.io.InputStream)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.ServerProperties)>
<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String format(java.lang.String,java.lang.Object[])>-><java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.util.Optional getExtractedType(java.lang.reflect.AnnotatedParameterizedType)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.Class boxedType(java.lang.Class)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getComponentType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$1: java.lang.reflect.Type getGenericComponentType()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashMap$KeySet: int size()>
<javax.management.InstanceAlreadyExistsException: void <init>(java.lang.String)>-><javax.management.OperationsException: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer: void parseArray(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.util.Collection)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getOwnerType()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><org.springframework.http.server.DefaultPathContainer$DefaultSeparator: java.lang.String value()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ObjectName: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.TreeMap$Entry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.util.MultiValueMap parsePathParams(java.lang.String,java.nio.charset.Charset)>-><org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object lambda$invokeInitMethods$5(java.lang.Object)>-><org.springframework.security.access.intercept.AbstractSecurityInterceptor: void afterPropertiesSet()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.RegularEnumSet: boolean addAll(java.util.Collection)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.poi.ss.util.CellRangeAddressBase: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.MessageFormat: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Hashtable: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean isEmpty()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$2: void done()>
<org.springframework.util.CollectionUtils$MultiValueMapAdapter: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration: void <init>(java.util.Map,org.springframework.beans.factory.ObjectProvider)>-><io.micrometer.shaded.org.pcollections.ConsPStack: void <init>()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeUseConstraints(java.lang.reflect.Member,java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.Type)>-><java.util.stream.Collectors: java.util.stream.Collector toSet()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.util.StringJoiner: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>-><org.springframework.ui.ModelMap: org.springframework.ui.ModelMap addAllAttributes(java.util.Map)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<sun.awt.DebugSettings: void loadSystemProperties()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Integer getTypeParameterIndex(java.lang.reflect.TypeVariable)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.zaxxer.hikari.util.ConcurrentBag: boolean lambda$values$2(int,com.zaxxer.hikari.util.ConcurrentBag$IConcurrentBagEntry)>-><com.zaxxer.hikari.pool.PoolEntry: int getState()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.math.BigDecimal: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Double: java.lang.String toString()>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><java.net.IDN: boolean isNonLDHAsciiCodePoint(int)>
<org.jboss.logging.Log4j2Logger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERVisibleString: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.nio.charset.Charset: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.Collections$SingletonMap: java.util.Collection values()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.Parsed: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void configure(javax.servlet.ServletRegistration$Dynamic)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.security.PermissionCollection: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.TypeBase: void <init>(com.fasterxml.jackson.databind.type.TypeBase)>-><com.fasterxml.jackson.databind.JavaType: void <init>(com.fasterxml.jackson.databind.JavaType)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: java.lang.String substring(int,int)>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: void <init>(org.hibernate.validator.internal.metadata.core.ConstraintHelper,org.hibernate.validator.internal.util.ExecutableHelper,org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator,java.util.List,org.hibernate.validator.internal.engine.MethodValidationConfiguration)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.security.ssl.JsseJce: void <clinit>()>-><sun.security.jca.ProviderList: sun.security.jca.ProviderList newList(java.security.Provider[])>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.Decoration$DecorationImpl: int hashCode()>
<com.fasterxml.classmate.types.ResolvedRecursiveType: java.util.List getImplementedInterfaces()>-><java.util.Collections: java.util.List emptyList()>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void addClassIfExists(java.util.List,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void debug(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.poi.xssf.streaming.SXSSFCell: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.web.access.intercept.FilterSecurityInterceptor createFilterSecurityInterceptor(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource,org.springframework.security.authentication.AuthenticationManager)>-><org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager getAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<sun.reflect.annotation.AnnotatedTypeFactory: sun.reflect.annotation.TypeAnnotation$LocationInfo addNesting(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo)>-><java.lang.reflect.Modifier: boolean isStatic(int)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<javax.management.NotificationBroadcasterSupport$SendNotifJob: void run()>-><com.sun.jmx.remote.util.ClassLogger: boolean debugOn()>
<com.sun.jmx.mbeanserver.MXBeanSupport: void register(javax.management.MBeanServer,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.MXBeanLookup: void addReference(javax.management.ObjectName,java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERBMPString: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: int hashCode()>
<java.util.Collections: void swap(java.util.List,int,int)>-><com.alibaba.fastjson.JSONArray: java.lang.Object get(int)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Generic: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.stream.ReferencePipeline: java.util.stream.Stream flatMap(java.util.function.Function)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.UUID: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: java.util.Spliterator spliterator()>-><java.util.ArrayDeque: java.util.Spliterator spliterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>-><javax.management.ObjectName: javax.management.ObjectName getInstance(javax.management.ObjectName)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><com.google.common.collect.ImmutableList$SubList: java.lang.Object get(int)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.x509.RDN: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.RegularImmutableList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERUTF8String: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.String: int length()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void removeClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void removeClassLoader(javax.management.ObjectName)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.core.ResolvableType getReturnTypeForFactoryMethod(org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.ResolvableType: java.lang.Class resolve()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getNewMBeanClassName(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.util.Spliterator trySplit()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: java.util.Spliterator trySplit()>
<org.springframework.security.core.userdetails.User$UserBuilder: java.lang.String lambda$roles$1(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1OctetString: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes()>-><sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType[] buildAnnotatedTypes(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper: java.util.Set toValueExtractorClasses(java.util.Set)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<com.fasterxml.classmate.util.ClassStack: void <init>(java.lang.Class)>-><com.fasterxml.classmate.util.ClassStack: void <init>(com.fasterxml.classmate.util.ClassStack,java.lang.Class)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.RegularEnumSet: int size()>
<org.springframework.web.method.HandlerMethod: void <init>(java.lang.Object,java.lang.reflect.Method)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.actuate.trace.http.Include: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.BitSet: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<javax.servlet.ServletOutputStream: void <clinit>()>-><java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>
<sun.security.ssl.SignatureAndHashAlgorithm: void <clinit>()>-><sun.security.ssl.SignatureAndHashAlgorithm: void supports(sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm,sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm,java.lang.String,int)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.URL: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Double: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator)>-><org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.FastList: boolean remove(java.lang.Object)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository getInstantiatorCLR()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<com.sun.jmx.remote.util.ClassLogger: void debug(java.lang.String,java.lang.Throwable)>-><com.sun.jmx.remote.util.ClassLogger: void finest(java.lang.String,java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<com.zaxxer.hikari.HikariDataSource: void <init>(com.zaxxer.hikari.HikariConfig)>-><com.zaxxer.hikari.pool.HikariPool: void <init>(com.zaxxer.hikari.HikariConfig)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashSet: boolean add(java.lang.Object)>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.format.CellNumberStringMod: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$EmptyList: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.JoinPointSignature: int hashCode()>
<sun.security.ssl.JsseJce$EcAvailability: void <clinit>()>-><sun.security.ssl.JsseJce: java.security.AlgorithmParameters getAlgorithmParameters(java.lang.String)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.TreeSet: int size()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: void addOperations(org.springframework.util.MultiValueMap,org.springframework.boot.actuate.endpoint.EndpointId,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer: org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey createOperationKey(org.springframework.boot.actuate.endpoint.Operation)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.config.RuntimeBeanReference: int hashCode()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.awt.geom.Rectangle2D: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<javax.management.openmbean.CompositeDataSupport: java.util.SortedMap makeMap(java.lang.String[],java.lang.Object[])>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.util.IdentityHashMap: void clear()>
<org.springframework.cglib.proxy.LazyLoaderGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>-><java.lang.String: java.lang.String intern()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.net.URL: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.util.FieldInfo: java.lang.String toString()>
<org.springframework.boot.web.embedded.tomcat.TldSkipPatterns: void <clinit>()>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$EmptyList: int hashCode()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>-><java.security.KeyPairGenerator$Delegate: void <init>(java.security.KeyPairGeneratorSpi,java.lang.String)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Duration: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.authentication.ProviderManager: void setAuthenticationEventPublisher(org.springframework.security.authentication.AuthenticationEventPublisher)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Long: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERPrintableString: java.lang.String toString()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.aspectj.bridge.IMessage$Kind: int compareTo(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.LocalDate: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$1: void <init>(org.springframework.boot.web.servlet.ServletContextInitializerBeans)>-><org.springframework.core.annotation.AnnotationAwareOrderComparator: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Calendar: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Manifest: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<java.util.Hashtable: void <init>(java.util.Map)>-><java.lang.Math: int max(int,int)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.springframework.web.servlet.function.RequestPredicates$ParamPredicate: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackageRelationship: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.SimpleType: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.util.EnumMap: void clear()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.zip.ZipEntry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void determineValueExtractorDefinitions(java.util.List,java.lang.Class)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.ClassPathResource: int hashCode()>
<org.apache.http.HttpHost: org.apache.http.HttpHost create(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.MutablePropertyValues: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map normalize(java.util.Map)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalLong: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.ImmutableDescriptor: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.TruePointcut: java.lang.String toString()>
<com.sun.jmx.mbeanserver.PerInterface: java.lang.Object getAttribute(java.lang.Object,java.lang.String,java.lang.Object)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap: java.util.Set entrySet()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Hashtable: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1OctetString: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.Provider$Service: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameter(java.lang.reflect.Type[])>-><org.hibernate.validator.internal.util.TypeHelper: java.util.Map normalize(java.util.Map)>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLEngineImpl: void <init>(sun.security.ssl.SSLContextImpl,java.lang.String,int)>-><java.util.Collections: java.util.List emptyList()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.xssf.usermodel.XSSFName: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree createConstraintTree(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: boolean matchKeys(javax.management.ObjectName)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void determineValueExtractorDefinitions(java.util.List,java.lang.Class)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.client.JdbcClientDetailsService: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.privilegedactions.SetContextClassLoader: void <init>(java.lang.ClassLoader)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.ProxyConnection: void untrackStatement(java.sql.Statement)>-><com.zaxxer.hikari.util.FastList: boolean remove(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider: void <init>(springfox.documentation.spring.web.readers.operation.HandlerMethodResolver,java.util.List)>-><springfox.documentation.spring.web.readers.operation.HandlerMethodResolver: void <init>(com.fasterxml.classmate.TypeResolver)>
<com.alibaba.fastjson.parser.deserializer.FieldDeserializer: void setValue(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.jsontype.NamedType: int hashCode()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onRefresh()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void createWebServer()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.font.FontLineMetrics: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<register-finalize <org.springframework.web.bind.annotation.RequestMethod: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Long: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree of(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.util.Set getComposingConstraintImpls()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>-><java.util.TreeSet: boolean addAll(java.util.Collection)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.util.DerValue: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.AbstractMap: void clear()>
<com.sun.jmx.mbeanserver.MBeanAnalyzer: void visit(com.sun.jmx.mbeanserver.MBeanAnalyzer$MBeanVisitor)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes()>-><sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Locale$LocaleKey: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.parser.ParseContext: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String toString()>
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)>-><sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String,java.lang.Throwable)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.util.LinkedMultiValueMap: boolean isEmpty()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.AbstractMap: boolean isEmpty()>
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$1: java.lang.Object postProcess(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>-><java.security.NoSuchProviderException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<java.security.KeyPairGenerator$Delegate: void <init>(sun.security.jca.GetInstance$Instance,java.util.Iterator,java.lang.String)>-><java.security.Provider: java.lang.String getName()>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><java.util.HashMap: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: int hashCode()>
<org.springframework.core.io.support.SpringFactoriesLoader: java.util.List loadFactories(java.lang.Class,java.lang.ClassLoader)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.security.KeyFactory: void <init>(java.security.KeyFactorySpi,java.security.Provider,java.lang.String)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.RegistrationBean: void setOrder(int)>
<com.fasterxml.classmate.util.LRUTypeCache: void <init>(int)>-><com.fasterxml.classmate.util.LRUTypeCache$CacheMap: void <init>(int)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean add(javax.management.ObjectName,java.lang.ClassLoader)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getKey()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.LinkedHashMap$LinkedKeySet: int size()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: java.lang.reflect.AnnotatedElement getDecl()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><io.netty.buffer.SwappedByteBuf: int hashCode()>
<java.util.zip.ZipOutputStream: void writeBytes(byte[],int,int)>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(byte[],int,int)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isSuperAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void sendNotification(java.lang.String,javax.management.ObjectName)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifiers(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation[])>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><reactor.util.Loggers$Slf4JLogger: void error(java.lang.String,java.lang.Throwable)>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>-><java.util.stream.Collectors: java.util.function.BinaryOperator mapMerger(java.util.function.BinaryOperator)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean isEmpty()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><javax.management.ObjectInstance: javax.management.ObjectName getObjectName()>
<java.net.IDN: java.lang.String toASCII(java.lang.String,int)>-><java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<springfox.documentation.spring.web.readers.parameter.ParameterTypeReader: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.ProcessEnvironment$ExternalData: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.poi.xssf.usermodel.XSSFFont: boolean equals(java.lang.Object)>
<java.lang.Void: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashMap: java.util.Collection values()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.EnumMap$EntrySet: int size()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.URL: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.nio.charset.CoderResult: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.awt.Rectangle: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.jboss.logging.Slf4jLocationAwareLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.jboss.logging.Slf4jLocationAwareLogger: void doLog(org.slf4j.spi.LocationAwareLogger,java.lang.String,int,java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.JdkLoggerFactory: void <init>()>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: void <init>()>
<springfox.documentation.schema.TypeNameExtractor: void <init>(com.fasterxml.classmate.TypeResolver,org.springframework.plugin.core.PluginRegistry,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.ChronoField: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType,int,float)>-><java.util.HashMap: void <init>(int,float)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.codehaus.jackson.map.type.SimpleType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Optional: java.lang.String toString()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void configure(javax.servlet.FilterRegistration$Dynamic)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: com.sun.jmx.mbeanserver.MXBeanLookup lookupNotNull(java.lang.Class)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1UTCTime: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><javax.management.ObjectName: java.lang.String getCanonicalName()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.LongNode: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.HashSet newHashSet()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext registerWithRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.GeneralName: int hashCode()>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <clinit>()>-><java.util.EnumMap: void <init>(java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader$1: void <init>(springfox.documentation.spring.web.scanners.CachingOperationReader,springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheLoader: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$Values: java.util.Iterator iterator()>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
<sun.security.ssl.SSLAlgorithmConstraints: void <clinit>()>-><sun.security.ssl.SSLAlgorithmConstraints: void <init>(javax.net.ssl.SSLSocket,boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration: void <init>()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.framework.JdkDynamicAopProxy: int hashCode()>
<com.sun.jmx.mbeanserver.NamedObject: void <init>(javax.management.ObjectName,javax.management.DynamicMBean)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1Null: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.YearMonth: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedArrayType: java.util.List getImplementedInterfaces()>-><java.util.Collections: java.util.List emptyList()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.type.CollectionType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.lang.Class: boolean isPrimitive()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry newHashEntry(java.lang.Object,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry,java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$2: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.BaseLocale$Key: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MXBeanLookup: void addReference(javax.management.ObjectName,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>-><springfox.documentation.spring.web.DescriptionResolver: void <init>(org.springframework.core.env.Environment)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Short: int hashCode()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><java.util.Collections$EmptyEnumeration: boolean hasMoreElements()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.PropertyName _findParamName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter,com.fasterxml.jackson.databind.AnnotationIntrospector)>-><java.lang.String: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.io.File: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>
<com.alibaba.fastjson.serializer.MiscCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.MessageFormat: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERIA5String: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiModelReader: void <init>(springfox.documentation.schema.ModelProvider,com.fasterxml.classmate.TypeResolver,springfox.documentation.spring.web.plugins.DocumentationPluginsManager)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.MonthDay: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int hashCode()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.management.openmbean.TabularDataSupport: void <init>(javax.management.openmbean.TabularType,int,float)>-><java.util.Collections$UnmodifiableCollection: int size()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration: void <init>()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <init>()>-><org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.MapPropertyValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.MapPropertyValueExtractor: void <init>()>
<org.apache.catalina.session.StandardSessionFacade: void <init>(javax.servlet.http.HttpSession)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setAutowireCandidateResolver(org.springframework.beans.factory.support.AutowireCandidateResolver)>-><org.springframework.beans.factory.support.AbstractBeanFactory: java.security.AccessControlContext getAccessControlContext()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><java.util.LinkedHashSet: void <init>()>
<springfox.documentation.schema.property.field.FieldProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.Parameter[],int,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Executable,int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: int hashCode()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedHeader(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration: void setAllowedHeaders(java.util.List)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<org.hibernate.validator.internal.util.privilegedactions.GetDeclaredField: void <init>(java.lang.Class,java.lang.String,boolean)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><javax.management.openmbean.CompositeDataSupport: javax.management.openmbean.CompositeType getCompositeType()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$ValueCollection: int size()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.hibernate.validator.internal.util.TypeVariables: boolean isInternal(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.util.TypeVariables: boolean isAnnotatedObject(java.lang.reflect.TypeVariable)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.PropertyMapper: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull(org.springframework.boot.context.properties.PropertyMapper$Source)>-><org.springframework.boot.context.properties.PropertyMapper$Source: org.springframework.boot.context.properties.PropertyMapper$Source whenNonNull()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.TypeVariable getExtractedTypeParameter()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.reflect.TypeVariable access$100(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void addNewDomMoi(javax.management.DynamicMBean,java.lang.String,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.ObjectName: java.lang.String getCanonicalKeyPropertyListString()>
<sun.awt.DebugSettings: java.util.List getPropertyNames()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><reactor.util.context.Context1: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.Proxy$Key2: int hashCode()>
<java.lang.invoke.MemberName: void <init>(byte,java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.invoke.MethodHandleNatives: boolean refKindIsMethod(byte)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.image.ColorModel: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Formatter$FixedString: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: long estimateSize()>-><java.util.ArrayDeque$DeqSpliterator: long estimateSize()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.ArrayType: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Locale$LocaleKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: int hashCode()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: void <init>(org.springframework.http.HttpStatus)>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.SecurityResponse: void <init>(org.springframework.http.HttpStatus,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERBMPString: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$1: java.lang.Object postProcess(java.lang.Object)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedWildcardTypeImpl: void <init>(java.lang.reflect.WildcardType,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><com.sun.beans.WildcardTypeImpl: java.lang.reflect.Type[] getLowerBounds()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(java.lang.reflect.AnnotatedElement)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(javax.validation.groups.ConvertGroup,javax.validation.groups.ConvertGroup$List)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getKey()>
<org.codehaus.jackson.map.type.HierarchicType: void <init>(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><org.hibernate.validator.internal.util.TypeVariables: java.lang.Class getContainerClass(java.lang.reflect.TypeVariable)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.MBeanAttributeInfo: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Collections$UnmodifiableList: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.serializer.SerialContext: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Double: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: javax.management.modelmbean.ModelMBeanOperationInfo getMBeanOperation(org.springframework.boot.actuate.endpoint.jmx.JmxOperation)>-><org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: int getImpact(org.springframework.boot.actuate.endpoint.OperationType)>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setAutowireCandidateResolver(org.springframework.beans.factory.support.AutowireCandidateResolver)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void register(java.lang.Class[])>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isWildcardTypeAssignable(java.lang.reflect.WildcardType,java.lang.reflect.Type)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.ZoneOffset: int hashCode()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.ConcurrentModificationException: void <init>()>
<org.springframework.jdbc.config.SortedResourcesFactoryBean: org.springframework.core.io.Resource[] createInstance()>-><org.springframework.context.support.GenericApplicationContext: org.springframework.core.io.Resource[] getResources(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>
<com.sun.beans.TypeResolver: void prepare(java.util.Map,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$3: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.WeakHashMap$KeySet: int size()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Double: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: void addReference(javax.management.ObjectName,java.lang.Object)>-><com.sun.jmx.mbeanserver.GetPropertyAction: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.alibaba.fastjson.JSONObject: boolean isEmpty()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: boolean hasUnwrapByDefaultAnnotation(java.lang.Class)>
<java.lang.invoke.ProxyClassesDumper: java.lang.invoke.ProxyClassesDumper getInstance(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isSuperAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.cglib.core.ClassInfo: int hashCode()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.URL: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Vector: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.net.URL: int hashCode()>
<sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>-><javax.net.ssl.SNIHostName: void <init>(java.lang.String)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.springframework.core.SimpleAliasRegistry: void registerAlias(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: int hashCode()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><java.beans.PropertyEditorSupport: java.lang.Object getValue()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<com.p6spy.engine.spy.option.P6OptionsRepository: java.lang.Object parse(java.lang.Class,java.lang.Object)>-><org.aspectj.bridge.AbortException: void printStackTrace(java.io.PrintStream)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$EmptySet: int size()>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.DERVisibleString: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientConfigurations$RestClientFallbackConfiguration: void <init>()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<com.caucho.hessian.io.JavaDeserializer: java.util.HashMap getFieldMap(java.lang.Class)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$2: void registering()>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void access$000(com.sun.jmx.interceptor.DefaultMBeanServerInterceptor,java.lang.ClassLoader,javax.management.ObjectName)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.regex.Pattern: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.DERT61String: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.Optional: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl$ExecutableParameterKey: void <init>(org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl,java.lang.reflect.Member,int)>-><java.lang.Object: void <init>()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.OptionalIntValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.security.KeyPairGenerator: void <clinit>()>-><sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String,java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.MapPropertyKeyExtractor: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>-><javax.management.RuntimeMBeanException: java.lang.Throwable getCause()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<reactor.util.Loggers$ConsoleLogger: void error(java.lang.String,java.lang.Throwable)>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireBean(java.lang.Object)>-><org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void populateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.BeanWrapper)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areAllConstraintAnnotationsIgnoredFor(java.lang.Class)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoCustomConfiguration: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isQualifier(java.lang.Class)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.caucho.hessian.io.ContextSerializerFactory: void initSerializerFiles(java.lang.String,java.util.HashSet,java.util.HashMap,java.lang.Class)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.net.InetSocketAddress: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode: void <clinit>()>-><org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter$Mode: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.ReactiveHealthEndpointConfiguration: void <init>()>
<io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>-><org.slf4j.helpers.NOPLogger: java.lang.String getName()>
<org.springframework.security.web.util.OnCommittedResponseWrapper: javax.servlet.ServletOutputStream getOutputStream()>-><javax.servlet.ServletResponseWrapper: javax.servlet.ServletOutputStream getOutputStream()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PatternParseException$PatternMessage: void <clinit>()>-><org.springframework.web.util.pattern.PatternParseException$PatternMessage: void <init>(java.lang.String,int,java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<sun.text.normalizer.UCharacter: void <clinit>()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.RuntimeBeanReference: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.xml.namespace.QName: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isUnboundWildcard(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isEmptyBounds(java.lang.reflect.Type[])>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void <clinit>()>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: int hashCode()>
<org.aspectj.bridge.SourceLocation: void <clinit>()>-><org.aspectj.bridge.SourceLocation: void <init>(java.io.File,int,int,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.sun.jmx.mbeanserver.Util: javax.management.ObjectName newObjectName(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.DependencyDescriptor: int hashCode()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object lambda$invokeInitMethods$5(java.lang.Object)>-><org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint: void afterPropertiesSet()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.csrf.CsrfFilter: void setAccessDeniedHandler(org.springframework.security.web.access.AccessDeniedHandler)>
<org.aspectj.weaver.tools.TraceFactory: boolean getBoolean(java.lang.String,boolean)>-><java.lang.String: java.lang.String valueOf(boolean)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.LocalDateTime: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.AbstractSecurityBuilder: java.lang.Object build()>-><java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Throwable)>
<com.sun.jmx.mbeanserver.MBeanIntrospector: java.lang.Object invokeM(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object)>-><com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.Object invokeM2(java.lang.Object,java.lang.Object,java.lang.Object[],java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.aspectj.weaver.patterns.AnnotationPatternList: void <clinit>()>-><org.aspectj.weaver.patterns.AnnotationPatternList: void <init>(org.aspectj.weaver.patterns.AnnotationTypePattern[])>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getMetaData(java.lang.reflect.Executable[])>-><java.lang.reflect.Method: int getModifiers()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><org.springframework.http.MediaType: double getQualityValue()>
<java.util.BitSet: java.lang.Object clone()>-><java.util.BitSet: void trimToSize()>
<org.apache.catalina.valves.ValveBase: java.lang.String getObjectNameKeyProperties()>-><java.lang.Object: java.lang.Class getClass()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.http.HttpHeaders: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><reactor.util.context.Context1: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1Boolean: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType: void <clinit>()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType: void <init>(java.lang.String,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap: java.util.Set entrySet()>
<org.springframework.boot.web.servlet.error.DefaultErrorAttributes: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.Color: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.net.URI: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$EcAvailability: void <clinit>()>-><sun.security.ssl.JsseJce: java.security.KeyPairGenerator getKeyPairGenerator(java.lang.String)>
<org.springframework.aop.framework.AdvisedSupport: org.springframework.aop.framework.AdvisedSupport getConfigurationOnlyCopy()>-><org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: boolean isStatic()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1Integer: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Optional: java.lang.Object get()>
<com.fasterxml.classmate.util.ResolvedTypeKey: void <init>(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$KeySet: java.util.Comparator comparator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.LocalTime: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$12: void <init>(java.lang.String,int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerObject(java.lang.String,java.lang.Object,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerDynamicMBean(java.lang.String,javax.management.DynamicMBean,javax.management.ObjectName)>
<org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(javax.management.ObjectName)>-><javax.management.ObjectName: java.util.Hashtable getKeyPropertyList()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.stream.Streams$ConcatSpliterator: long estimateSize()>-><java.util.ArrayDeque$DeqSpliterator: long estimateSize()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.security.ssl.SSLSessionImpl: void <init>(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection,sun.security.ssl.SessionId,java.lang.String,int)>-><sun.security.ssl.Debug: boolean isOn(java.lang.String)>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Clock$SystemClock: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.apache.catalina.core.StandardContext: void <init>()>-><org.apache.tomcat.util.compat.JreCompat: boolean isGraalAvailable()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.Color: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.net.URI: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<org.springframework.http.converter.ResourceHttpMessageConverter$1: void <init>(org.springframework.http.converter.ResourceHttpMessageConverter,java.io.InputStream,org.springframework.http.HttpInputMessage)>-><org.springframework.core.io.InputStreamResource: void <init>(java.io.InputStream)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(int,int)>-><sun.security.ssl.CipherSuite: void <init>(java.lang.String,int)>
<java.util.TreeMap: java.util.TreeMap$Entry getEntryUsingComparator(java.lang.Object)>-><org.springframework.security.core.userdetails.User$AuthorityComparator: int compare(java.lang.Object,java.lang.Object)>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName register(java.lang.Object,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.type.SimpleType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<org.springframework.aop.config.AopConfigUtils: void forceAutoProxyCreatorToUseClassProxying(org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.invoke.LambdaForm: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Character: int hashCode()>
<sun.security.ssl.OutputRecord: void <clinit>()>-><sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.codehaus.jackson.map.type.ArrayType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.el.ExpressionFactory$CacheKey: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.lang.ProcessEnvironment$StringEntrySet: int size()>
<java.net.IDN: java.lang.StringBuffer toASCIILower(java.lang.StringBuffer)>-><java.lang.StringBuffer: int length()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$SetFromMap: boolean isEmpty()>
<com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>-><com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.SimpleDateFormat: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.ResolvableType: int hashCode()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>-><sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>
<com.baomidou.dynamic.datasource.DynamicDataSourceCreator: void <clinit>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><org.dom4j.tree.BackedList: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.DisabledException: void <init>(java.lang.String)>-><org.springframework.security.authentication.AccountStatusException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Optional: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.awt.Font: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$SingletonSet: int size()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: java.lang.String getOrDeduceName(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.ResolvableType: java.lang.reflect.Type getType()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.util.EnumSet)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isTypeVariableAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<java.lang.invoke.MemberName: void <init>(byte,java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.util.Set entrySet()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>-><javax.management.MBeanInfo: java.lang.String getClassName()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver$ValueExtractorCacheKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.lang.StringBuilder: void <init>()>
<java.security.KeyPairGenerator$Delegate: void <init>(sun.security.jca.GetInstance$Instance,java.util.Iterator,java.lang.String)>-><java.security.KeyPairGenerator: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: int hashCode()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.IdentityHashMap$Values: int size()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: boolean matchKeys(javax.management.ObjectName)>-><javax.management.ObjectName: java.util.Hashtable getKeyPropertyList()>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.plugins.DocumentationPluginsManager getDocumentationPluginsManager()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><java.lang.AssertionError: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode()>
<java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.Provider: void check(java.lang.String)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ReadOnlyListPropertyValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader: void <init>(springfox.documentation.spring.web.DescriptionResolver)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: void <init>(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation[] filter(sun.reflect.annotation.TypeAnnotation[])>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.Permission: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Enum: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.Provider$Service: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.BeanMetadataAttribute: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.OperationTagsReader: void <init>(springfox.documentation.spring.web.readers.operation.DefaultTagsProvider)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.readers.operation.DefaultTagsProvider getDefaultTagsProvider()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.ArrayDeque$DeqSpliterator: int getFence()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void removeStale()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.security.Permission: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration$ReactiveUserDetailsServiceCondition$ReactiveWebApplicationCondition: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1BitString: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.BitSet: int hashCode()>
<org.springframework.security.oauth2.provider.client.JdbcClientDetailsService: void <clinit>()>-><java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.AttributedString$AttributedStringIterator: int hashCode()>
<org.springframework.boot.actuate.endpoint.jmx.annotation.JmxEndpointDiscoverer: java.lang.String lambda$createOperationKey$0(org.springframework.boot.actuate.endpoint.jmx.JmxOperation)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int hashCode()>
<org.apache.tomcat.util.modeler.ManagedBean: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<sun.security.ssl.JsseJce: java.security.SecureRandom getSecureRandom()>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<register-finalize <sun.security.ssl.SSLSessionImpl: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.CompositeDataSupport: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.ImmutableMapKeySet: int size()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases: boolean lambda$getNameForAlias$1(org.springframework.boot.context.properties.source.ConfigurationPropertyName,java.util.Map$Entry)>-><java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.spi.Provider: int hashCode()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.type.ArrayType: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.ZonedDateTime: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<javax.management.NotificationBroadcasterSupport: void sendNotification(javax.management.Notification)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object,java.lang.Throwable)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><javax.management.MBeanRegistrationException: void <init>(java.lang.Exception,java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String getDomain()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashMap$EntrySet: int size()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Short: boolean equals(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.springframework.http.HttpHeaders: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator)>-><org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: javax.el.ExpressionFactory buildExpressionFactory()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration: void <init>()>
<sun.security.ssl.JsseJce: javax.crypto.KeyAgreement getKeyAgreement(java.lang.String)>-><javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.security.Provider)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariDataSource: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>
<org.hibernate.validator.internal.engine.valueextraction.OptionalIntValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><io.netty.buffer.SwappedByteBuf: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentFieldLocation: void <init>(java.lang.reflect.Field)>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Predicates$AndPredicate: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><org.springframework.security.core.userdetails.memory.UserAttribute: java.lang.String getPassword()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.catalina.valves.ValveBase: void setContainer(org.apache.catalina.Container)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.CompositeType: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>-><java.util.ArrayList: void <init>(java.util.Collection)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.ResolvableType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: boolean lambda$getContainerClassTypeParameter$1(java.lang.Class,java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.format.CellNumberStringMod: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext registerWithRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Collection)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.google.common.collect.ImmutableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><net.logstash.logback.encoder.com.lmax.disruptor.Sequence: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.collect.ImmutableMap: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.InternalLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger getInstance(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.codehaus.jackson.map.type.ArrayType: boolean equals(java.lang.Object)>
<org.aspectj.bridge.ISourceLocation: void <clinit>()>-><org.aspectj.bridge.SourceLocation: void <init>(java.io.File,int,int,int)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.security.Provider: void clear()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.Class getClassFromType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.alibaba.fastjson.JSONObject: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.Class access$200(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void addClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: void addClassLoader(javax.management.ObjectName,java.lang.ClassLoader)>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType[] buildAnnotatedTypes(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.SimpleDateFormat: int hashCode()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<org.apache.catalina.util.LifecycleBase: void init()>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.WeakHashMap$EntrySet: int size()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAdaptableBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.privilegedactions.NewInstance: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<org.springframework.context.support.GenericApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object get(java.lang.Object)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.TreeMap: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.annotation.TypeMappedAnnotation: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<sun.security.ssl.CipherSuite$BulkCipher: void <clinit>()>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$1: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: void <init>()>-><java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.ResponseMessagesReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.TreeMap$EntrySet: int size()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Field,boolean)>-><java.lang.invoke.MemberName: java.lang.invoke.MemberName changeReferenceKind(byte,byte)>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.awt.geom.Curve: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.nio.ByteBuffer: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <init>(java.lang.String,int)>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.jmx.export.MBeanExporter: void <clinit>()>-><org.springframework.core.Constants: void <init>(java.lang.Class)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.zip.GZIPOutputStream: void finish()>-><org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream: void write(byte[],int,int)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: boolean isEmpty()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Optional: int hashCode()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.AnnotatedParameterizedType getValueExtractorDefinition(java.lang.Class)>-><java.lang.Class: java.lang.String getSimpleName()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.Map toImmutableMap(java.util.Map)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.JSONPObject: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><java.text.MessageFormat: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<javax.el.Util$CacheValue: void setExpressionFactory(javax.el.ExpressionFactory)>-><java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.p6spy.engine.spy.option.P6OptionsRepository$DelayedOptionChange: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<javax.management.NotificationBroadcasterSupport: void sendNotification(javax.management.Notification)>-><javax.management.NotificationBroadcasterSupport$SendNotifJob: void <init>(javax.management.NotificationBroadcasterSupport,javax.management.Notification,javax.management.NotificationBroadcasterSupport$ListenerInfo)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Package: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.UnsupportedOperationException: void <init>()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraintAnnotations(java.lang.reflect.Member,java.lang.annotation.Annotation,java.lang.annotation.ElementType)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: int hashCode()>
<org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String getName()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$EmptyMap: java.util.Collection values()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.springframework.security.web.util.matcher.NegatedRequestMatcher: java.lang.String toString()>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: int characteristics()>-><java.util.ArrayDeque$DeqSpliterator: int characteristics()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<javax.management.openmbean.ArrayType: boolean isAssignableFrom(javax.management.openmbean.OpenType)>-><javax.management.openmbean.ArrayType: boolean isAssignableFrom(javax.management.openmbean.OpenType)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: int buildHashCode(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.location.ReturnValueConstraintLocation: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$SingletonMap: java.util.Set entrySet()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.web.context.request.async.CallableProcessingInterceptor: void <clinit>()>-><java.lang.Object: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Class getCollectionItemClass(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.codehaus.jackson.map.type.ClassKey: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: int hashCode()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap: java.lang.Object remove(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getDefaultGroupSequence(java.lang.Class)>-><java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.spi.scripting.AbstractCachingScriptEvaluatorFactory: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: int hashCode()>
<org.springframework.web.method.HandlerMethod$HandlerMethodParameter: void <init>(org.springframework.web.method.HandlerMethod,int)>-><org.springframework.core.annotation.SynthesizingMethodParameter: void <init>(java.lang.reflect.Method,int)>
<sun.reflect.annotation.AnnotatedTypeFactory: sun.reflect.annotation.TypeAnnotation$LocationInfo addNesting(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo)>-><java.lang.Class: java.lang.Class getEnclosingClass()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration: void <init>()>-><io.micrometer.shaded.org.pcollections.ConsPStack: void <init>()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$ExternalData: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: boolean determineAvailabilityOfResourceBundleControl()>-><java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: int hashCode()>
<org.springframework.util.CollectionUtils: void lambda$unmodifiableMultiValueMap$0(java.util.Map,java.lang.Object,java.util.List)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: boolean matchKeys(javax.management.ObjectName)>-><java.util.Hashtable: int size()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>-><org.apache.catalina.LifecycleState: java.lang.String getLifecycleEvent()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.validation.FieldError: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<javax.el.ELException: void <init>(java.lang.Throwable)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.SubList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>-><com.sun.jmx.mbeanserver.MBeanSupport: java.lang.Object getResource()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void registerWebApplicationScopes()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void restore()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<org.aspectj.weaver.RuntimeVersion: void <clinit>()>-><org.aspectj.weaver.RuntimeVersion: void <init>(java.lang.String,int,java.lang.String[])>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><io.netty.util.concurrent.PromiseTask: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postRegister(javax.management.ObjectName,javax.management.DynamicMBean,boolean,boolean)>-><javax.management.RuntimeErrorException: void <init>(java.lang.Error,java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.font.TransformAttribute: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><javax.management.openmbean.CompositeType: javax.management.openmbean.OpenType getType(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.GregorianCalendar: int hashCode()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><java.lang.Throwable: java.lang.String getMessage()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.LinkedList: boolean add(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.JSONObject: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.reflect.Type[] getBounds()>
<org.jboss.logging.Log4j2Logger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.jboss.logging.Log4j2Logger: org.apache.logging.log4j.Level translate(org.jboss.logging.Logger$Level)>
<org.aspectj.weaver.patterns.TypePatternList: void <clinit>()>-><org.aspectj.weaver.patterns.TypePatternList: void <init>(org.aspectj.weaver.patterns.TypePattern[])>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<org.apache.catalina.core.ApplicationContext: void populateSessionTrackingModes()>-><org.apache.catalina.core.StandardContext: boolean getCookies()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.lang.Short: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.http.HttpHeaders: java.util.Set entrySet()>
<org.springframework.http.ReadOnlyHttpHeaders: java.util.Set entrySet()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.ObjectIdentifier: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.p6spy.engine.logging.Category: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.MutablePropertyValues: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.scanners.ApiDescriptionReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader,springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.spring.web.scanners.ApiDescriptionLookup)>-><synthetic.method.SingletonFactory: springfox.documentation.spring.web.scanners.ApiDescriptionLookup getApiDescriptionLookup()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Constructor: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.util.AbstractSet: boolean removeAll(java.util.Collection)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void <init>(int,float,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,boolean)>-><java.util.concurrent.locks.ReentrantLock: void <init>()>
<com.sun.jmx.mbeanserver.StandardMBeanIntrospector: java.lang.Object invokeM2(java.lang.reflect.Method,java.lang.Object,java.lang.Object[],java.lang.Object)>-><sun.reflect.misc.MethodUtil: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$EnumMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Class)>
<com.alibaba.fastjson.serializer.ObjectArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.ssl.SecureKey: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBean(java.lang.Class,java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer,org.springframework.beans.factory.ListableBeanFactory,java.lang.Object)>-><java.lang.Class: java.lang.String getSimpleName()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.apache.http.HttpHost: org.apache.http.HttpHost create(java.lang.String)>-><org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.Locale: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(javax.validation.groups.ConvertGroup,javax.validation.groups.ConvertGroup$List)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.HashMap newHashMap()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: void <init>()>-><io.micrometer.core.util.internal.logging.InternalLoggerFactory: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.location.CrossParameterConstraintLocation: java.lang.reflect.Type getTypeForValidatorResolution()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: boolean endsWith(java.lang.String)>
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.Integer: int intValue()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.wuwenze.poi.pojo.ExcelProperty: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.security.Provider$UString: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><java.util.Collections$EmptyMap: boolean isEmpty()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: java.lang.String toString()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: org.springframework.security.config.annotation.SecurityConfigurer apply(org.springframework.security.config.annotation.SecurityConfigurer)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: boolean equals(java.lang.Object)>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String getName()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void registering(com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><org.jboss.logging.JBossLogRecord: void <init>(java.util.logging.Level,java.lang.String,java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: java.util.SortedSet getRegisteredAttributesInAlphabeticalOrder()>-><javax.management.openmbean.TabularDataSupport: java.util.Set keySet()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: java.lang.String getDescription()>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.io.DataInputStream: int read(byte[])>-><java.util.zip.InflaterInputStream: int read(byte[],int,int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.map.type.SimpleType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.WeakCache$CacheValue: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashSet: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.netty.buffer.AbstractByteBuf: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.nio.charset.Charset: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: boolean contains(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SynchronizedSet: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.aspectj.bridge.IMessageHandler: void <clinit>()>-><org.aspectj.bridge.IMessageHandler$1: void <init>()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Collection)>-><java.lang.Object: java.lang.Class getClass()>
<java.sql.SQLException$1: java.lang.Throwable next()>-><javax.management.MBeanException: java.lang.Throwable getCause()>
<com.fasterxml.classmate.util.LRUTypeCache: void <init>(int)>-><com.fasterxml.classmate.util.ResolvedTypeCache: void <init>()>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<javax.el.ExpressionFactory: java.lang.String discoverClassName(java.lang.ClassLoader)>-><javax.el.ExpressionFactory$2: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.ImmutableMap: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.paths.OperationPathDecorator: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type$1: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.Collections$SetFromMap: int size()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getDescription()>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getServletName()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.GregorianCalendar: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.Instant: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.Extension: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.ExpressionFactory$CacheValue: java.lang.String getFactoryClassName()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.base.Present: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Spliterator trySplit()>-><java.util.ArrayDeque$DeqSpliterator: java.util.Spliterator trySplit()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.Map)>-><java.util.Collections$UnmodifiableMap: java.util.Collection values()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.io.StringWriter: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.management.MBeanServerDelegate: void <init>()>-><javax.management.NotificationBroadcasterSupport: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERPrintableString: java.lang.String toString()>
<org.springframework.beans.propertyeditors.CustomCollectionEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.alibaba.fastjson.parser.ParseContext: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.AttributedString$AttributedStringIterator: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isHealthEndpointExtension(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedField findPropertyMetaData(java.lang.reflect.Field)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Field,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>
<sun.security.ssl.Debug: boolean getBooleanProperty(java.lang.String,boolean)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.ThreadGroup: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><com.zaxxer.hikari.util.PropertyElf: void setTargetFromProperties(java.lang.Object,java.util.Properties)>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2: void <init>(java.lang.String,int,java.lang.String)>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <init>(java.lang.String,int,java.lang.String,org.springframework.context.annotation.MBeanExportConfiguration$1)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext registerWithRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.Class: java.lang.String getName()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<java.security.KeyPairGenerator$Delegate: void <init>(sun.security.jca.GetInstance$Instance,java.util.Iterator,java.lang.String)>-><sun.security.util.Debug: void println(java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.engine.MethodValidationConfiguration: java.util.Set buildConfiguredRuleSet(boolean,boolean,boolean)>-><org.hibernate.validator.internal.metadata.aggregated.rule.ParallelMethodsMustNotDefineParameterConstraints: void <init>()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree of(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><java.util.AbstractCollection: boolean isEmpty()>
<sun.security.ssl.SignatureAndHashAlgorithm: void supports(sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm,sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm,java.lang.String,int)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.Vector: java.util.Iterator iterator()>
<com.p6spy.engine.common.P6Util: java.lang.String joinNullSafe(java.util.Collection,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.util.LinkedMultiValueMap: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaSetters: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><sun.reflect.misc.MethodUtil: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.HashMap: boolean isEmpty()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>
<org.hibernate.validator.internal.engine.ValidationContext$ValidatorScopedContext: void <init>(org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: boolean isFailFast()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.wuwenze.poi.pojo.ExcelMapping: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.zone.ZoneRules: int hashCode()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.String methodName()>-><java.lang.reflect.Method: java.lang.String getName()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: boolean isClassPresent(java.lang.String,boolean)>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.OptionalLong: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.xssf.usermodel.XSSFName: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: java.lang.String toString()>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String getDescription()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromParamType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.HashSet newHashSet(int)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.ApiListingReader: void <init>()>-><java.lang.Object: void <init>()>
<sun.security.ssl.SSLAlgorithmDecomposer: void <init>()>-><sun.security.ssl.SSLAlgorithmDecomposer: void <init>(boolean)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void putAll(java.util.Map)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.apache.catalina.core.StandardPipeline: void setBasic(org.apache.catalina.Valve)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object,java.lang.Throwable)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.MBeanOperationInfo: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.reflect.WeakCache$CacheValue: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.apache.commons.collections.FastHashMap$CollectionView: int size()>
<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>-><java.util.ResourceBundle$RBClassLoader: java.net.URL getResource(java.lang.String)>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.alibaba.fastjson.JSONArray: int size()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: boolean matchKeys(javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String getCanonicalKeyPropertyListString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.io.ObjectStreamClass$WeakClassKey: int hashCode()>
<org.springframework.context.support.GenericApplicationContext: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.GenericApplicationContext: void setParent(org.springframework.context.ApplicationContext)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.ProtectionDomain: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: java.lang.reflect.AnnotatedType getAnnotatedType()>-><java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areParameterConstraintsIgnoredFor(java.lang.reflect.Member,int)>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areMemberConstraintsIgnoredFor(java.lang.reflect.Member)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>
<sun.text.normalizer.ReplaceableString: void <init>(java.lang.StringBuffer)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.Comparator adaptDependencyComparator(java.util.Map)>-><org.springframework.core.OrderComparator: java.util.Comparator withSourceProvider(org.springframework.core.OrderComparator$OrderSourceProvider)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: int size()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><reactor.util.context.ContextN: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey: int hashCode()>
<java.net.IDN: int searchDots(java.lang.String,int)>-><java.net.IDN: boolean isLabelSeparator(char)>
<java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.Provider: java.lang.Object implComputeIfAbsent(java.lang.Object,java.util.function.Function)>
<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJava(java.lang.String,java.lang.String)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.HashSet newHashSet(java.util.Collection)>-><java.util.HashSet: void <init>(java.util.Collection)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.poi.ss.format.CellNumberStringMod: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.springframework.security.web.access.expression.WebExpressionConfigAttribute: void <init>(org.springframework.expression.Expression,org.springframework.security.web.access.expression.EvaluationContextPostProcessor)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents$EncodeState: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MBeanSupport: void preRegister2(javax.management.MBeanServer,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.MXBeanSupport: void register(javax.management.MBeanServer,javax.management.ObjectName)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.JavaType: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeVariableImpl: void <init>(java.lang.reflect.TypeVariable,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: void <init>(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<java.security.KeyPairGenerator: void <clinit>()>-><sun.security.util.Debug: boolean isOn(java.lang.String)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: void setValue(java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object newValueReference(java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>
<ch.qos.logback.core.joran.action.ConversionRuleAction: void begin(ch.qos.logback.core.joran.spi.InterpretationContext,java.lang.String,org.xml.sax.Attributes)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.logging.log4j.message.AbstractMessageFactory: org.apache.logging.log4j.message.Message newMessage(java.lang.Object)>-><org.apache.logging.log4j.message.ObjectMessage: void <init>(java.lang.Object)>
<sun.security.ssl.SignatureAndHashAlgorithm: void supports(sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm,sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm,java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: java.lang.String getDomain()>-><org.apache.catalina.valves.ValveBase: java.lang.String getDomainInternal()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: org.springframework.http.ResponseEntity error(javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<javax.management.ObjectInstance: void <init>(javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type$12: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.TypeVariable getExtractedTypeParameter(java.lang.reflect.AnnotatedParameterizedType,java.lang.Class)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isUnboundWildcard(java.lang.reflect.Type)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void <init>(javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,com.sun.jmx.mbeanserver.Repository)>-><java.util.WeakHashMap: void <init>()>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer: java.lang.Object getLast(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <clinit>()>-><org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.HashSet: void <init>(int)>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.security.web.server.csrf.CsrfWebFilter: void <clinit>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.security.Provider: void implPutAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.concurrent.atomic.AtomicLong: void <init>(long)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.security.access.SecurityConfig: java.lang.String getAttribute()>
<springfox.documentation.spring.web.paths.PathSanitizer: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.aspectj.util.LangUtil: java.util.List getFirstNumbers(java.lang.String)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation[] filter(sun.reflect.annotation.TypeAnnotation[])>-><java.util.ArrayList: void <init>(int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: void <init>(org.hibernate.validator.internal.metadata.core.ConstraintHelper,org.hibernate.validator.internal.util.ExecutableHelper,org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.engine.groups.ValidationOrderGenerator,java.util.List,org.hibernate.validator.internal.engine.MethodValidationConfiguration)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.util.EnumSet)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.Float: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.TreeSet: boolean isEmpty()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$UrlHandlerMappingDescriptionProvider: void <init>(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$UrlHandlerMappingDescriptionProvider: void <init>()>
<com.fasterxml.classmate.types.ResolvedRecursiveType: void setReference(com.fasterxml.classmate.ResolvedType)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.cloud.CloudPlatform: void <clinit>()>-><org.springframework.boot.cloud.CloudPlatform$3: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Class getContainerClass(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.Class getContainerClass()>
<javax.el.ExpressionFactory: void <clinit>()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.core.ResolvableType: boolean isInstance(java.lang.Object)>-><org.springframework.core.ResolvableType: boolean isAssignableFrom(java.lang.Class)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.annotation.Annotation getQualifiedElementAnnotation(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.InetAddress: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<java.net.IDN: java.lang.String toASCII(java.lang.String,int)>-><java.net.IDN: boolean isRootLabel(java.lang.String)>
<org.springframework.web.filter.ForwardedHeaderFilter: void <clinit>()>-><java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<org.springframework.core.SimpleAliasRegistry: boolean hasAlias(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.codehaus.jackson.map.type.CollectionType: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void unregisterMBean(javax.management.ObjectName)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.MBeanConstructorInfo: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.net.SocketImpl: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void <init>(java.lang.String,boolean)>-><java.lang.String: java.lang.String intern()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><com.google.common.collect.RegularImmutableMap$KeySet: int size()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><javax.management.ObjectInstance: void <init>(javax.management.ObjectName,java.lang.String)>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><org.springframework.security.core.userdetails.memory.UserAttribute: void setEnabled(boolean)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: com.fasterxml.classmate.ResolvedType findSupertype(java.lang.Class)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.springframework.util.LinkedMultiValueMap: java.util.Set entrySet()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.spi.group.DefaultGroupSequenceProvider getDefaultGroupSequenceProvider(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.p6spy.engine.logging.Category: int hashCode()>
<java.net.IDN: void <clinit>()>-><java.net.SocketInputStream: void close()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: int size()>
<java.net.IDN: java.lang.String toASCII(java.lang.String,int)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.calendar.Era: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellBorder: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><sun.net.idn.StringPrepDataReader: byte[] getDataFormatVersion()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.base.Present: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Label: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.http.HttpMessageConverters: void <clinit>()>-><org.springframework.boot.autoconfigure.http.HttpMessageConverters: void addClassIfExists(java.util.List,java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.location.FieldConstraintLocation: void <init>(java.lang.reflect.Field)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type boxedType(java.lang.reflect.Type)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.web.csrf.CsrfFilter: void <init>(org.springframework.security.web.csrf.CsrfTokenRepository)>-><org.springframework.web.filter.OncePerRequestFilter: void <init>()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.hibernate.validator.internal.util.TypeResolutionHelper: com.fasterxml.classmate.TypeResolver getTypeResolver()>
<org.hibernate.validator.internal.engine.valueextraction.CharArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.SubList$1: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.net.URI: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean hasParameterConstraints(java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.TreeMap$KeySet: int size()>
<com.sun.jmx.mbeanserver.NamedObject: void <init>(javax.management.ObjectName,javax.management.DynamicMBean)>-><javax.management.ObjectName: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.net.SocketPermission: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<org.springframework.aop.scope.ScopedProxyUtils: org.springframework.beans.factory.config.BeanDefinitionHolder createScopedProxy(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.support.BeanDefinitionRegistry,boolean)>-><org.springframework.context.support.GenericApplicationContext: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void addClassLoader(java.lang.ClassLoader,javax.management.ObjectName)>-><javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.apache.tomcat.util.modeler.FeatureInfo: void <init>()>-><java.lang.Object: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: boolean canLoadExpressionFactory()>-><javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance()>
<org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: boolean hasBeanClass()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.security.UnresolvedPermission: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration: void <init>()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.List getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.util.Set)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ProtectedResourceDetailsConfiguration: void <init>()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><org.springframework.util.LinkedMultiValueMap: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<io.micrometer.core.util.internal.logging.Slf4JLoggerFactory: io.micrometer.core.util.internal.logging.InternalLogger wrapLogger(org.slf4j.Logger)>-><io.micrometer.core.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractList: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$EnumMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.Enum: java.lang.String name()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForAnnotatedType(java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForArrayType(java.lang.reflect.AnnotatedArrayType)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.zaxxer.hikari.pool.HikariProxyStatement: java.sql.SQLWarning getWarnings()>-><com.p6spy.engine.wrapper.StatementWrapper: java.sql.SQLWarning getWarnings()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.OptionalDouble: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SynchronizedMap: int hashCode()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1UTCTime: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.Year: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<sun.security.ssl.SSLContextImpl: java.lang.String[] getAvailableProtocols(sun.security.ssl.ProtocolVersion[])>-><java.util.Collections$EmptyList: java.lang.Object[] toArray(java.lang.Object[])>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1Null: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.WeakHashMap: java.util.Collection values()>
<java.util.AbstractQueue: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: void <init>(org.springframework.expression.Expression,org.springframework.security.web.access.expression.EvaluationContextPostProcessor)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration$BaseConfiguration: void <init>()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean hasParameterConstraints(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<com.baomidou.dynamic.datasource.spring.boot.autoconfigure.hikari.HikariCpConfig: void <clinit>()>-><java.util.concurrent.TimeUnit$5: long toMillis(long)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<sun.security.ssl.Debug: void <clinit>()>-><sun.security.ssl.Debug: void Help()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.EnumMap$KeySet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.OptionalInt: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.ConstructorArgumentValues: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils: void append_string_helper(org.springframework.cglib.core.CodeEmitter,org.springframework.asm.Type,org.springframework.cglib.core.EmitUtils$ArrayDelimiters,org.springframework.cglib.core.internal.CustomizerRegistry,org.springframework.cglib.core.ProcessArrayCallback)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.privilegedactions.GetDeclaredFields: org.hibernate.validator.internal.util.privilegedactions.GetDeclaredFields action(java.lang.Class)>-><org.hibernate.validator.internal.util.privilegedactions.GetDeclaredFields: void <init>(java.lang.Class)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.AnyTypePattern: int hashCode()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer: org.springframework.security.access.AccessDecisionManager createDefaultAccessDecisionManager(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.HashSet newHashSet()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getFieldMetaData(java.lang.Class)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.HashSet newHashSet()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.Collections$EmptyMap: java.util.Collection values()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.util.unit.DataSize: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.MBeanInfo: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.slf4j.helpers.SubstituteLogger: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object get(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: void expunge()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1Boolean: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: boolean isIncludeStackTrace(javax.servlet.http.HttpServletRequest,org.springframework.http.MediaType)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: boolean getTraceParameter(javax.servlet.http.HttpServletRequest)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.reflect.ParameterizedType,com.alibaba.fastjson.parser.ParserConfig)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isWildcardTypeAssignable(java.lang.reflect.WildcardType,java.lang.reflect.Type)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.StackTraceElement: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.RegularImmutableMap$Values: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object get(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.apache.catalina.core.AprLifecycleListener: void <clinit>()>-><java.lang.Object: void <init>()>
<org.aspectj.weaver.patterns.NamePattern: void <clinit>()>-><org.aspectj.weaver.patterns.NamePattern: void <init>(java.lang.String)>
<java.lang.SecurityException: void <init>()>-><java.lang.RuntimeException: void <init>()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.aspectj.weaver.JoinPointSignature: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>-><javax.management.MBeanInfo: javax.management.MBeanOperationInfo[] getOperations()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object value()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: void <init>(int)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.font.Decoration$DecorationImpl: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String[][] getZoneStrings()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.TypeHelper: java.util.Map getActualTypeArgumentsByParameterInternal(java.lang.reflect.Type)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.pool.ProxyConnection: void closeStatements()>-><com.zaxxer.hikari.util.FastList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<org.apache.tomcat.util.modeler.AttributeInfo: void <init>()>-><org.apache.tomcat.util.modeler.FeatureInfo: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.WeakHashMap: java.util.Collection values()>
<org.hibernate.validator.internal.metadata.location.ReturnValueConstraintLocation: void <init>(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Member)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object lambda$invokeInitMethods$5(java.lang.Object)>-><org.springframework.security.authentication.ProviderManager: void afterPropertiesSet()>
<com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationInterceptor: void <clinit>()>-><com.baomidou.dynamic.datasource.DynamicDataSourceClassResolver: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<com.sun.jmx.mbeanserver.PerInterface$InitMaps: void visitOperation(java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Vector: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.PropertyMapper$Source: boolean lambda$whenHasText$3(java.lang.Object)>-><java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>
<sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeVariableImpl: void <init>(java.lang.reflect.TypeVariable,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$EmptyList: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraints(java.lang.reflect.Member,java.lang.annotation.ElementType)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: com.sun.jmx.mbeanserver.MXBeanLookup lookupNotNull(java.lang.Class)>-><com.sun.jmx.mbeanserver.MXBeanLookup: com.sun.jmx.mbeanserver.MXBeanLookup getLookup()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellBorder: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.plugins.ResolvedMethodParameterEquivalence: void <init>()>-><com.google.common.base.Equivalence: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$ExistingWebApplicationScopes: void <init>(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread newThread(java.lang.Runnable)>-><com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String access$000(java.lang.String,java.lang.Object[])>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.poi.ss.format.CellNumberStringMod: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.nio.ByteBuffer: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.File: int hashCode()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.lang.String getResourceDescription(java.lang.String,org.springframework.beans.factory.ListableBeanFactory)>-><org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getResourceDescription()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.lang.reflect.Type,int,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,org.hibernate.validator.internal.metadata.raw.ConstrainedElement$ConstrainedElementKind,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode()>
<org.jboss.logging.Logger: void info(java.lang.Object)>-><org.jboss.logging.JBossLogManagerLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: java.lang.Object getTarget()>-><java.util.Collections: java.util.Map emptyMap()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<sun.security.ssl.EngineWriter: void <clinit>()>-><sun.security.ssl.Debug: sun.security.ssl.Debug getInstance(java.lang.String)>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object lambda$invokeInitMethods$5(java.lang.Object)>-><org.springframework.web.filter.GenericFilterBean: void afterPropertiesSet()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.logging.log4j.Level: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<org.springframework.security.authentication.ProviderManager: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: void configure(javax.servlet.Registration$Dynamic)>
<org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider: void clearCache()>-><org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.DERPrintableString: java.lang.String toString()>
<com.fasterxml.classmate.TypeBindings: java.util.List getTypeParameters()>-><java.util.Collections: java.util.List emptyList()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.map.type.ClassKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.util.concurrent.DirectExecutor: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.MemberImpl: int hashCode()>
<sun.security.ssl.CipherSuite$KeyExchange: sun.security.ssl.CipherSuite$KeyExchange[] values()>-><java.lang.Object: java.lang.Object clone()>
<sun.net.idn.StringPrep: java.lang.StringBuffer normalize(java.lang.StringBuffer)>-><java.lang.StringBuffer: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void rethrow(java.lang.Throwable)>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.invoke.LambdaForm$Name: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.Object getDefaultValue(java.lang.Class,java.lang.String)>-><org.springframework.core.annotation.AbstractMergedAnnotation: java.util.Optional getDefaultValue(java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder getCascadingMetaData(java.lang.reflect.Type,java.lang.reflect.AnnotatedElement,java.util.Map)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder annotatedObject(java.lang.reflect.Type,boolean,java.util.Map,java.util.Map)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getDescription()>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.LifecycleException: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.map.type.ArrayType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: void <init>()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><java.util.stream.Collectors: java.util.stream.Collector toSet()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.lang.invoke.MemberName: void <init>(byte,java.lang.Class,java.lang.String,java.lang.Object)>-><java.lang.invoke.MemberName: int flagsMods(int,int,byte)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.nio.charset.Charset: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.ObjectNode: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.HashMap$KeySet: int size()>
<javax.management.JMX: java.lang.Object createProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class,boolean,boolean)>-><com.sun.jmx.mbeanserver.Introspector: void testComplianceMBeanInterface(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.springframework.web.cors.CorsConfiguration: void addAllowedMethod(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isTypeVariableAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.reflect.Type[] getBounds()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void exclusiveUnregisterMBean(javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.aspectj.weaver.patterns.ThisOrTargetPointcut: void <clinit>()>-><org.aspectj.weaver.Shadow$Kind: boolean neverHasThis()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<javax.net.ssl.SNIHostName: void <init>(java.lang.String)>-><java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
<org.jboss.logging.Logger: void info(java.lang.Object)>-><org.jboss.logging.Slf4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.reflect.AnnotatedParameterizedType getValueExtractorDefinition(java.lang.Class)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.io.PrintWriter: void println(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Attributes$Name: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getMetaData(java.lang.reflect.Executable[])>-><java.lang.reflect.Method: boolean isSynthetic()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.AbstractMap: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree of(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.security.CodeSource: java.lang.String toString()>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERGeneralString: int hashCode()>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Class getContainerClass(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.util.TypeVariables: java.lang.Class getDeclaringClass(java.lang.reflect.TypeVariable)>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromVariable(java.lang.reflect.TypeVariable,org.codehaus.jackson.map.type.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String getName()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONPath: java.lang.Object getPropertyValue(java.lang.Object,java.lang.String,boolean)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Introspector: void checkCompliance(java.lang.Class)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.ArrayNode: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.nio.charset.Charset: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: void clear()>-><org.springframework.http.ReadOnlyHttpHeaders: void clear()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.OptionalLong: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<reactor.core.scheduler.Schedulers: void <clinit>()>-><java.util.LinkedHashMap: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation,java.util.List,java.lang.reflect.Type)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode getValueExtractionPath(java.util.List)>
<org.jboss.logging.JDKLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.util.logging.Logger: java.util.ResourceBundle getResourceBundle()>
<org.hibernate.validator.internal.engine.valueextraction.OptionalLongValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.usermodel.ExcelStyleDateFormatter: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromWildcard(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.WildcardType,com.fasterxml.classmate.TypeBindings)>
<com.sun.jmx.mbeanserver.MBeanSupport: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>-><org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaProxy: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<com.sun.jmx.mbeanserver.MXBeanSupport: void register(javax.management.MBeanServer,javax.management.ObjectName)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Class: int getModifiers()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERNumericString: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.privilegedactions.NewInstance: void <init>(java.lang.Class,java.lang.String)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.TreeMap$EntrySet: int size()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Long: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.security.ProtectionDomain: java.lang.String toString()>
<org.springframework.web.bind.annotation.RequestMethod: org.springframework.web.bind.annotation.RequestMethod[] values()>-><java.lang.Object: java.lang.Object clone()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.Collections: java.util.Set emptySet()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForParameterizedType(java.lang.reflect.AnnotatedParameterizedType,java.lang.reflect.TypeVariable[])>-><java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.commons.collections.FastHashMap: int hashCode()>
<javax.management.openmbean.CompositeDataInvocationHandler: void <init>(javax.management.openmbean.CompositeData,com.sun.jmx.mbeanserver.MXBeanLookup)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.jersey.JerseyManagementContextConfiguration: void <init>()>
<sun.security.ssl.SessionId: void <init>(boolean,java.security.SecureRandom)>-><sun.security.ssl.RandomCookie: void <init>(java.security.SecureRandom)>
<com.zaxxer.hikari.util.SuspendResumeLock: void <clinit>()>-><com.zaxxer.hikari.util.SuspendResumeLock$1: void <init>(boolean)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.WildTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.font.AttributeValues: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ReadOnlySetPropertyValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><io.netty.channel.nio.SelectedSelectionKeySet: int size()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void stop()>-><org.apache.catalina.valves.ValveBase: void stopInternal()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><org.dom4j.tree.BackedList: java.lang.Object set(int,java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Short: java.lang.String toString()>
<springfox.documentation.schema.property.field.FieldProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.apache.commons.beanutils.PropertyUtilsBean: void setPropertyOfMapBean(java.util.Map,java.lang.String,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.BooleanNode: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext unregisterFromRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><java.lang.Class: java.lang.String getName()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>-><sun.reflect.annotation.TypeAnnotation$LocationInfo: boolean isSameLocationInfo(sun.reflect.annotation.TypeAnnotation$LocationInfo)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SingletonMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils$MultiValueMapAdapter: java.util.List lambda$add$0(java.lang.Object)>-><java.util.LinkedList: void <init>()>
<org.jboss.logging.Logger: void info(java.lang.Object)>-><org.jboss.logging.Log4jLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<javax.el.ExpressionFactory: void <clinit>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedType: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.Class,java.util.Set)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder nonCascading()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.security.core.userdetails.memory.UserAttribute: void setAuthoritiesAsString(java.util.List)>-><org.springframework.security.core.userdetails.memory.UserAttribute: void addAuthority(org.springframework.security.core.GrantedAuthority)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.type.ArrayType withContentValueHandler(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<org.apache.catalina.util.LifecycleBase: void start()>-><org.apache.catalina.util.LifecycleBase: void invalidTransition(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: int hashCode()>
<java.io.DataInputStream: int read(byte[])>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: void <init>(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<org.apache.commons.collections.FastHashMap: void <init>(int,float)>-><java.util.HashMap: void <init>(int,float)>
<com.sun.jmx.mbeanserver.MBeanSupport: void preDeregister()>-><org.apache.catalina.util.LifecycleMBeanBase: void preDeregister()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.juli.logging.DirectJDKLog: boolean isInfoEnabled()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.access.expression.SecurityExpressionHandler getExpressionHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<java.util.Collections$SynchronizedMap: void clear()>-><java.security.Provider: void clear()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
<javax.el.ExpressionFactory: void <clinit>()>-><javax.el.ExpressionFactory$1: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.apache.commons.beanutils.converters.ConverterFacade: java.lang.String toString()>
<org.apache.catalina.core.StandardContext$ContextFilterMaps: void <init>(org.apache.catalina.core.StandardContext$1)>-><org.apache.catalina.core.StandardContext$ContextFilterMaps: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.LinkedHashMap: java.util.Collection values()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.location.BeanConstraintLocation: java.lang.reflect.Type getTypeForValidatorResolution()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.xml.sax.SAXException: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.util.List all()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.BooleanArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.BooleanArrayValueExtractor: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.Vector: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.commons.beanutils.MethodUtils$MethodDescriptor: boolean equals(java.lang.Object)>
<org.springframework.core.io.InputStreamResource: void <init>(java.io.InputStream,java.lang.String)>-><org.springframework.core.io.AbstractResource: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.RegularEnumSet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<sun.security.ssl.EphemeralKeyManager: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Primitive: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.Extension: int hashCode()>
<com.sun.jmx.mbeanserver.MXBeanLookup: java.lang.Object objectNameToMXBean(javax.management.ObjectName,java.lang.Class)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.Map toImmutableMap(java.util.Map)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Hashtable$KeySet: int size()>
<org.aspectj.weaver.patterns.ModifiersPattern: void <clinit>()>-><java.lang.reflect.Modifier: java.lang.String toString(int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String,java.util.Map)>-><org.springframework.web.servlet.ModelAndView: org.springframework.ui.ModelMap getModelMap()>
<com.sun.jmx.mbeanserver.Introspector: javax.management.DynamicMBean makeDynamicMBean(java.lang.Object)>-><com.sun.jmx.mbeanserver.Introspector: java.lang.Class getStandardMBeanInterface(java.lang.Class)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.Comparator: int lambda$comparingInt$7b0bb60$1(java.util.function.ToIntFunction,java.lang.Object,java.lang.Object)>-><java.lang.Integer: int compare(int,int)>
<org.hibernate.validator.internal.engine.valueextraction.LongArrayValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Field)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getKey()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry: java.lang.Object newKeyReference(java.lang.Object,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.lang.ref.ReferenceQueue)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$SoftKeyReference: void <init>(java.lang.Object,int,java.lang.ref.ReferenceQueue)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.invoke.MemberName: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getClassLevelConstraints(java.lang.Class)>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areClassLevelConstraintsIgnoredFor(java.lang.Class)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<javax.management.openmbean.CompositeDataSupport: java.util.SortedMap makeMap(java.lang.String[],java.lang.Object[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.Float: java.lang.String toString()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.jmx.EndpointMBean: void lambda$getOperations$0(java.util.Map,org.springframework.boot.actuate.endpoint.jmx.JmxOperation)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.web.servlet.MultipartProperties)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.springframework.boot.security.servlet.ApplicationContextRequestMatcher: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><java.io.PrintStream: void <init>(java.io.OutputStream)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(java.lang.String,org.springframework.util.MultiValueMap,java.lang.Class,java.lang.Class)>-><java.util.ArrayList: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)>-><java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.SubList$1: boolean hasNext()>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.type.CollectionType withContentTypeHandler(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.poi.xssf.usermodel.XSSFFont: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><net.logstash.logback.encoder.org.apache.commons.lang3.time.FastDateFormat: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><java.io.FileOutputStream: void <init>(java.io.File)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.type.ArrayType withContentTypeHandler(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<sun.net.util.IPAddressUtil: boolean isIPv6LiteralAddress(java.lang.String)>-><sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void add(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.util.privilegedactions.GetMethods: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<javax.management.JMX: java.lang.Object createProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class,boolean,boolean)>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.poi.xssf.streaming.SXSSFCell: java.lang.String toString()>
<org.springframework.context.support.AbstractApplicationContext: java.lang.String[] getAliases(java.lang.String)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.springframework.boot.actuate.trace.http.HttpExchangeTracer: java.lang.Long lambda$sendingResponse$0(org.springframework.boot.actuate.trace.http.HttpTrace)>-><java.lang.System: long currentTimeMillis()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.jar.Manifest: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.web.client.HttpClientMetricsAutoConfiguration: void <init>()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.aspectj.weaver.tools.DefaultTraceFactory: void <init>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<org.springframework.aop.framework.AdvisedSupport: java.lang.Class getTargetClass()>-><org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: java.lang.Class getTargetClass()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.juli.logging.DirectJDKLog: void info(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.text.StringCharacterIterator: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void setTable(org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry[])>-><java.lang.ref.ReferenceQueue: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.DERNumericString: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.apache.commons.collections.FastHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.Duration: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areParameterConstraintsIgnoredFor(java.lang.reflect.Member,int)>-><java.lang.Boolean: boolean booleanValue()>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><java.lang.StringBuffer: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.Vector: boolean addAll(java.util.Collection)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap,org.springframework.security.access.expression.SecurityExpressionHandler)>-><org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource: void <init>(java.util.LinkedHashMap)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireBean(java.lang.Object)>-><org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader getBeanClassLoader()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: int hashCode()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.asm.Label: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.LambdaForm: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ArrayElement: void <init>(java.lang.reflect.AnnotatedArrayType)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet: int size()>
<com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType getParentClass()>-><java.lang.StringBuilder: void <init>()>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromArrayType(java.lang.reflect.GenericArrayType,org.codehaus.jackson.map.type.TypeBindings)>-><org.hibernate.validator.internal.util.TypeHelper$1: java.lang.reflect.Type getGenericComponentType()>
<org.hibernate.validator.internal.engine.ValidationContext$ValidatorScopedContext: void <init>(org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: java.lang.Object getConstraintValidatorPayload()>
<org.springframework.core.SimpleAliasRegistry: void registerAlias(java.lang.String,java.lang.String)>-><org.springframework.core.SimpleAliasRegistry: void checkForAliasCircle(java.lang.String,java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.apache.http.HttpHost: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.MutablePropertyValues: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.http.ReadOnlyHttpHeaders: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.google.common.collect.ImmutableMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.UnsupportedOperationException: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.lang.reflect.Executable: java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes()>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.DynamicMBean getMBean(javax.management.ObjectName)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.Enum: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.util.LRUTypeCache: void put(com.fasterxml.classmate.util.ResolvedTypeKey,com.fasterxml.classmate.ResolvedType)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.lang.Object postProcess(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<javax.management.RuntimeErrorException: void <init>(java.lang.Error,java.lang.String)>-><javax.management.JMRuntimeException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: int hashCode()>
<sun.security.ssl.SignatureAndHashAlgorithm: java.lang.String[] getAlgorithmNames(java.util.Collection)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.apache.http.HttpHost: org.apache.http.HttpHost create(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.DERIA5String: java.lang.String toString()>
<org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>-><org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Set: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.core.MethodParameter: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><reactor.util.context.ContextN: java.lang.String toString()>
<springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,java.util.List,springfox.documentation.spring.web.DocumentationCache,springfox.documentation.spring.web.scanners.ApiDocumentationScanner,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.service.contexts.Defaults,javax.servlet.ServletContext,org.springframework.core.env.Environment)>-><org.springframework.web.context.support.StandardServletEnvironment: void <init>()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext registerWithRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext makeResourceContextFor(java.lang.Object,javax.management.ObjectName)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.asm.Label: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.SingletonImmutableList: java.lang.String toString()>
<javax.management.ObjectName: java.util.Hashtable getKeyPropertyList()>-><javax.management.ObjectName: java.util.Map _getKeyPropertyList()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.math.BigInteger: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.ExpressionFactory$CacheKey: void <init>(java.lang.ClassLoader)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><sun.misc.Signal: java.lang.String toString()>
<sun.security.ssl.SunJSSE: boolean isFIPS()>-><java.lang.Boolean: boolean booleanValue()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.ArrayType: int hashCode()>
<org.hibernate.validator.internal.util.TypeVariableBindings: java.util.Map getTypeVariableBindings(java.lang.Class)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.font.AttributeValues: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<org.hibernate.validator.internal.util.CollectionHelper: java.util.Map toImmutableMap(java.util.Map)>-><java.util.Collections$EmptyMap: java.util.Set entrySet()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.Class getDeclaringClass(java.lang.reflect.TypeVariable)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration getGenericDeclaration()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<javax.management.StandardMBean: void postDeregister()>-><com.sun.jmx.mbeanserver.MXBeanSupport: void unregister()>
<org.springframework.boot.web.servlet.ServletListenerRegistrationBean: void register(java.lang.String,javax.servlet.ServletContext)>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getClassLevelConstraints(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<javax.management.ReflectionException: void <init>(java.lang.Exception,java.lang.String)>-><javax.management.JMException: void <init>(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.font.AttributeValues: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanSupport: java.lang.Object getAttribute(java.lang.String)>-><com.sun.jmx.mbeanserver.MXBeanSupport: java.lang.Object getCookie()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.IntArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: org.hibernate.validator.internal.metadata.core.MetaConstraint create(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders$1: boolean removeEldestEntry(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.AnnotatedType)>-><org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Member)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.poi.ss.format.CellFormat: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.codehaus.jackson.map.type.ArrayType: java.lang.String toString()>
<javax.management.MBeanServerDelegate: long getStamp()>-><java.lang.System: long currentTimeMillis()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$ServletRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Servlet,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.String: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.jboss.logging.JBossLogManagerLogger: void doLog(org.jboss.logging.Logger$Level,java.lang.String,java.lang.Object,java.lang.Object[],java.lang.Throwable)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.apache.commons.collections.FastHashMap: void <init>(int)>-><java.util.HashMap: void <init>()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.MethodValidationConfiguration: void <init>(boolean,boolean,boolean,org.hibernate.validator.internal.engine.MethodValidationConfiguration$1)>-><org.hibernate.validator.internal.engine.MethodValidationConfiguration: void <init>(boolean,boolean,boolean)>
<org.springframework.boot.ResourceBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$SynchronizedCollection: int size()>
<com.sun.jmx.mbeanserver.MXBeanLookup: com.sun.jmx.mbeanserver.MXBeanLookup getLookup()>-><java.lang.ThreadLocal: java.lang.Object get()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.EventObject: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><io.netty.util.concurrent.PromiseTask: int hashCode()>
<com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings create(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.ProtectionDomain: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.StringJoiner: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: int hashCode()>
<com.zaxxer.hikari.pool.ProxyConnection: void closeStatements()>-><com.zaxxer.hikari.pool.ProxyLeakTask$1: void cancel()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.util.EnumSet)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.JavaType: int hashCode()>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><sun.text.normalizer.UCharacterIterator: java.lang.String getText()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.LinkedList: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.security.ssl.SecureKey: int hashCode()>
<com.alibaba.fastjson.util.FieldInfo: boolean getArgument(java.lang.reflect.Type[],java.lang.reflect.TypeVariable[],java.lang.reflect.Type[])>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getOwnerType()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.locale.provider.RuleBasedBreakIterator: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents$Type$11: void <init>(java.lang.String,int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int,org.springframework.web.util.HierarchicalUriComponents$1)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromParamType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.classmate.TypeBindings)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.JavaType refineDeserializationType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.status.StatusBase: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.awt.Point: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.DoubleArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.management.openmbean.SimpleType: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean elementsEqual(java.util.Iterator,java.util.Iterator)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<javax.management.StandardMBean: void postRegister(java.lang.Boolean)>-><com.sun.jmx.mbeanserver.MXBeanSupport: void unregister()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.UUID: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping: org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration getBuilderConfig()>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<javax.management.openmbean.CompositeDataSupport: java.util.SortedMap makeMap(java.lang.String[],java.lang.Object[])>-><javax.management.openmbean.OpenDataException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.map.type.ClassKey: int hashCode()>
<org.springframework.security.oauth2.common.exceptions.UnapprovedClientAuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>-><org.springframework.security.authentication.InsufficientAuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.catalina.core.AprLifecycleListener: void terminateAPR()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getClassLevelConstraints(java.lang.Class)>-><org.hibernate.validator.internal.metadata.core.MetaConstraints: org.hibernate.validator.internal.metadata.core.MetaConstraint create(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<java.security.Provider: java.lang.Object implMerge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping: void <clinit>()>-><java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<sun.reflect.annotation.TypeAnnotationParser: java.util.Map mapTypeAnnotations(sun.reflect.annotation.TypeAnnotation[])>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.apache.catalina.core.StandardContextValve: void <init>()>-><org.apache.catalina.valves.ValveBase: void <init>(boolean)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.FluentIterable: java.lang.String toString()>
<java.io.DataInputStream: int read(byte[])>-><org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read(byte[],int,int)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableList: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.OptionalInt: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: org.springframework.boot.web.servlet.RegistrationBean createRegistrationBean(java.lang.String,javax.servlet.Filter,int)>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void setName(java.lang.String)>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.EnumMap$EntrySet: boolean remove(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.HashSet: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedCollection: java.util.Spliterator spliterator()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Spliterator spliterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.google.common.util.concurrent.AbstractFuture: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Locale: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><sun.security.ssl.SecureKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object toOpenValue(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: java.lang.String toString()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object fromOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>-><org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: javax.el.ExpressionFactory buildExpressionFactory()>
<java.io.DataInputStream: int read(byte[])>-><java.net.SocketInputStream: int read(byte[],int,int)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.YearMonth: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.InetSocketAddress: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><javax.management.ObjectInstance: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<reactor.util.Loggers$JdkLogger: void error(java.lang.String,java.lang.Throwable)>-><java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1Sequence: int hashCode()>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.hibernate.validator.internal.engine.MethodValidationConfiguration: java.util.Set buildConfiguredRuleSet(boolean,boolean,boolean)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.HashSet newHashSet(int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.LocalDateTime: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<javax.el.Util: java.lang.ClassLoader getContextClassLoader()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.hibernate.validator.internal.engine.valueextraction.ListPropertyValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<sun.security.ssl.ProtocolVersion: sun.security.ssl.ProtocolVersion valueOf(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><java.lang.Object: java.lang.Class getClass()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.BindingTypePattern: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.math.BigDecimal: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.String toString()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<com.fasterxml.jackson.databind.DeserializationContext: java.text.DateFormat getDateFormat()>-><org.codehaus.jackson.map.util.StdDateFormat: java.lang.Object clone()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans: void logMappings(org.springframework.util.MultiValueMap)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.cglib.core.WeakCacheKey: int hashCode()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getRequireCsrfProtectionMatcher()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Hashtable: java.util.Set entrySet()>
<sun.security.ssl.EngineWriter: void <init>()>-><java.util.LinkedList: void <init>()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><reactor.util.context.Context1: java.lang.Object getKey()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.reflect.Field: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaultEntryPoint(org.springframework.security.config.annotation.web.HttpSecurityBuilder,org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$RequestMappingInfoHandlerMappingDescriptionProvider: void <init>(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$RequestMappingInfoHandlerMappingDescriptionProvider: void <init>()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<com.baomidou.dynamic.datasource.spring.boot.autoconfigure.druid.DruidConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void configure()>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MBeanSupport: void preDeregister()>-><javax.management.StandardMBean: void preDeregister()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.ZoneId: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.time.LocalTime: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.http.ResponseEntity: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.jmx.MBeanInfoFactory: javax.management.modelmbean.ModelMBeanOperationInfo[] getMBeanOperations(org.springframework.boot.actuate.endpoint.jmx.ExposableJmxEndpoint)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<org.springframework.boot.ResourceBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<sun.reflect.annotation.TypeAnnotationParser: java.util.Map mapTypeAnnotations(sun.reflect.annotation.TypeAnnotation[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<sun.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form,int)>-><java.lang.String: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: boolean isArray(java.lang.reflect.Type)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1GeneralizedTime: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERVideotexString: int hashCode()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<reactor.util.Loggers$Slf4JLogger: void error(java.lang.String,java.lang.Throwable)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.net.SocketPermission: int hashCode()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void register(java.lang.Class[])>-><org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext createClassLoaderContext(java.lang.ClassLoader,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$2: void <init>(com.sun.jmx.interceptor.DefaultMBeanServerInterceptor,java.lang.ClassLoader,javax.management.ObjectName)>
<springfox.documentation.spring.web.scanners.MediaTypeReader: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.map.type.ClassKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collection: java.util.stream.Stream stream()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int getOrder(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletContextInitializerBeans$1: void <init>(org.springframework.boot.web.servlet.ServletContextInitializerBeans)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.util.TypeSafeEnum: java.lang.String toString()>
<org.hibernate.validator.internal.engine.resolver.CachingTraversableResolverForSingleValidation: void <init>(javax.validation.TraversableResolver)>-><java.lang.Object: void <init>()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType resolve(java.lang.reflect.Type,java.lang.reflect.Type[])>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromClass(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: int size()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.lang.reflect.Method: java.lang.reflect.AnnotatedType getAnnotatedReturnType()>-><java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><com.sun.jmx.mbeanserver.MBeanSupport: void postDeregister()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: int hashCode()>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.spi.group.DefaultGroupSequenceProvider newGroupSequenceProviderClassInstance(java.lang.Class,java.lang.Class)>-><org.hibernate.validator.internal.util.privilegedactions.NewInstance: org.hibernate.validator.internal.util.privilegedactions.NewInstance action(java.lang.Class,java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: javax.management.ObjectName mxbeanToObjectName(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.Instant: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.sql.Timestamp: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.HashMap$Node: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: void <init>(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.lang.reflect.TypeVariable,boolean,java.util.Map,java.util.Map)>-><java.util.Collections$EmptyMap: java.util.Collection values()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.awt.image.ColorModel: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><javax.security.auth.Subject$SecureSet: int size()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<java.security.Provider: java.lang.Object implMerge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<javax.management.openmbean.CompositeDataSupport: void <init>(javax.management.openmbean.CompositeType,java.lang.String[],java.lang.Object[])>-><javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><org.springframework.security.core.userdetails.memory.UserAttribute: boolean isEnabled()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><javax.management.MBeanInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>-><java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><sun.net.idn.Punycode: boolean isBasic(int)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: javax.servlet.Registration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: javax.servlet.FilterRegistration$Dynamic addRegistration(java.lang.String,javax.servlet.ServletContext)>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.util.CellRangeAddressBase: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.stream.Collectors: java.util.stream.Collector toSet()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.Collections: java.util.Set emptySet()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <clinit>()>-><java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.util.List getPrimaryBeanNames(java.lang.String[])>-><org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isPrimary()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.font.AttributeValues: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashMap$KeySet: int size()>
<org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: void <init>(javax.validation.MessageInterpolator,javax.validation.TraversableResolver,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,javax.validation.ClockProvider,java.time.Duration,org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory,boolean,boolean,java.lang.Object,org.hibernate.validator.internal.engine.constraintvalidation.HibernateConstraintValidatorInitializationContextImpl,org.hibernate.validator.internal.engine.ValidatorFactoryImpl$1)>-><org.hibernate.validator.internal.engine.ValidatorFactoryImpl$ValidatorFactoryScopedContext: void <init>(javax.validation.MessageInterpolator,javax.validation.TraversableResolver,org.hibernate.validator.internal.util.ExecutableParameterNameProvider,javax.validation.ClockProvider,java.time.Duration,org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory,boolean,boolean,java.lang.Object,org.hibernate.validator.internal.engine.constraintvalidation.HibernateConstraintValidatorInitializationContextImpl)>
<org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.MethodParameter: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$SingletonSet: int size()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.text.FieldPosition: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><org.springframework.util.LinkedMultiValueMap: void add(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Executable,int)>-><java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>
<com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.TypeBindings emptyBindings()>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType[] buildAnnotatedTypes(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type[],sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: java.lang.Object _throwWrapped(java.lang.Exception,java.lang.String,java.lang.Object)>-><javax.management.MBeanException: java.lang.Throwable getCause()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.core.MethodParameter: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.nio.charset.Charset: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.geom.Point2D: int hashCode()>
<com.sun.jmx.mbeanserver.Introspector: javax.management.DynamicMBean makeDynamicMBean(java.lang.Object)>-><com.sun.jmx.mbeanserver.Introspector: void checkCompliance(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: boolean equals(java.lang.Object)>
<org.aspectj.util.LangUtil$StringChecker: void <init>(java.lang.String[])>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.OffsetDateTime: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.Collections$SynchronizedMap: void clear()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$4: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Optional: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getFieldMetaData(java.lang.Class)>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areMemberConstraintsIgnoredFor(java.lang.reflect.Member)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ReadOnlyMapPropertyValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: int hashCode()>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>-><java.util.stream.Collectors$CollectorImpl: void <init>(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.Set)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean hasQualifier(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.InjectionPoint: java.lang.annotation.Annotation[] getAnnotations()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><org.apache.tomcat.jni.SSL: int fipsModeSet(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration: void <init>()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Constructor)>-><java.lang.invoke.MemberName: boolean isResolved()>
<com.sun.jmx.mbeanserver.Repository: java.util.Set query(javax.management.ObjectName,javax.management.QueryExp)>-><java.util.TreeMap: java.util.Collection values()>
<org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultUserInfoRestTemplateFactory: org.springframework.security.oauth2.client.OAuth2RestTemplate getUserInfoRestTemplate()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation,java.util.List,java.lang.reflect.Type)>-><java.util.Collections$SingletonSet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.Class getWrappedValueType(org.hibernate.validator.internal.util.TypeResolutionHelper,java.lang.reflect.Type,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>
<springfox.documentation.spring.web.plugins.DefaultConfiguration: void <init>(springfox.documentation.spi.service.contexts.Defaults,com.fasterxml.classmate.TypeResolver,javax.servlet.ServletContext)>-><java.lang.Object: void <init>()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><sun.net.idn.StringPrepDataReader: void <init>(java.io.InputStream)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(java.util.Map)>-><java.lang.Math: int max(int,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.util.LinkedMultiValueMap: int hashCode()>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: void clear()>-><org.springframework.http.HttpHeaders: void clear()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.io.InputStream lambda$newBundle$0(boolean,java.lang.ClassLoader,java.lang.String)>-><java.net.URL: java.net.URLConnection openConnection()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>-><javax.management.ReflectionException: java.lang.Throwable getCause()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.core.annotation.AnnotationUtils: java.lang.Object getDefaultValue(java.lang.Class,java.lang.String)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.ELException: void <init>(java.lang.String,java.lang.Throwable)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.sun.jmx.mbeanserver.Repository: void registering(com.sun.jmx.mbeanserver.Repository$RegistrationContext)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.POJONode: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.xml.namespace.QName: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.zip.ZipEntry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.modelmbean.DescriptorSupport: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerJwtConfiguration: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: int hashCode()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Collection)>-><org.springframework.security.provisioning.InMemoryUserDetailsManager: void createUser(org.springframework.security.core.userdetails.UserDetails)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentFieldLocation: void <init>(java.lang.reflect.Field,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$1)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentFieldLocation: void <init>(java.lang.reflect.Field)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<com.github.xiaoymin.knife4j.spring.configuration.Knife4jProperties: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.MapPropertyValueExtractor: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><org.springframework.core.io.support.PropertiesLoaderUtils: java.util.Properties loadProperties(org.springframework.core.io.Resource)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: void <init>(java.lang.String,java.lang.ClassLoader)>-><org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>
<com.fasterxml.classmate.util.LRUTypeCache: void put(com.fasterxml.classmate.util.ResolvedTypeKey,com.fasterxml.classmate.ResolvedType)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[] retrieveDisplayNamesImpl(java.lang.String,java.util.Locale)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: int hashCode()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.JapaneseImperialCalendar: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.base.Predicates$AndPredicate: java.lang.String toString()>
<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String getName()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap: void addCount(long,int)>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.stream.Collector)>-><java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.apache.http.HttpHost: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.net.Inet4Address: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.System: int identityHashCode(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: com.sun.jmx.mbeanserver.MXBeanMapping makeParameterizedTypeMapping(java.lang.reflect.ParameterizedType,com.sun.jmx.mbeanserver.MXBeanMappingFactory)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.HashSet: boolean isEmpty()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.HashMap$EntrySet: int size()>
<org.springframework.cglib.proxy.DispatcherGenerator: void generate(org.springframework.cglib.core.ClassEmitter,org.springframework.cglib.proxy.CallbackGenerator$Context,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<javax.el.Util: javax.el.ExpressionFactory getExpressionFactory()>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock readLock()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <init>(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.lang.reflect.Type)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.alibaba.fastjson.util.ParameterizedTypeImpl: int hashCode()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void clearCache()>-><java.util.HashMap: void clear()>
<sun.net.idn.StringPrep: java.lang.StringBuffer normalize(java.lang.StringBuffer)>-><sun.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form,int)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postDeregisterInvoke(javax.management.ObjectName,javax.management.MBeanRegistration)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<sun.security.util.MemoryCache: void <init>(boolean,int,int)>-><java.lang.ref.ReferenceQueue: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<sun.security.ssl.SSLSessionContextImpl: int getDefaultCacheLimit()>-><sun.security.ssl.SSLSessionContextImpl$1: void <init>(sun.security.ssl.SSLSessionContextImpl)>
<org.springframework.beans.factory.support.BeanDefinitionReaderUtils: void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.support.BeanDefinitionRegistry)>-><org.springframework.context.support.GenericApplicationContext: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>
<org.hibernate.validator.internal.engine.valueextraction.CharArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.CharArrayValueExtractor: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.ImmutableList: int hashCode()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isWildcardTypeAssignable(java.lang.reflect.WildcardType,java.lang.reflect.Type)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] getLowerBounds()>
<org.hibernate.validator.resourceloading.PlatformResourceBundleLocator: java.lang.Object run(java.security.PrivilegedAction)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: void addValueExtractorDescriptorForTypeArgumentLocation(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.List,org.hibernate.validator.internal.metadata.location.TypeArgumentConstraintLocation)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void debug(java.lang.Object)>
<org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>-><org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Predicates$NotPredicate: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.core.SimpleAliasRegistry: void registerAlias(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.util.concurrent.DirectExecutor: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><org.hibernate.validator.internal.metadata.location.ConstraintLocation: org.hibernate.validator.internal.metadata.location.ConstraintLocation forReturnValue(java.lang.reflect.Executable)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.alibaba.fastjson.parser.ParseContext: java.lang.String toString()>
<com.fasterxml.classmate.util.ResolvedTypeCache: com.fasterxml.classmate.util.ResolvedTypeKey key(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>-><com.fasterxml.classmate.util.ResolvedTypeKey: void <init>(java.lang.Class)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.Map getErrorAttributes(javax.servlet.http.HttpServletRequest,boolean)>-><org.springframework.web.context.request.ServletWebRequest: void <init>(javax.servlet.http.HttpServletRequest)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.sql.Date: java.lang.String toString()>
<sun.security.ssl.ProtocolVersion: void <clinit>()>-><sun.security.ssl.SSLAlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.AlgorithmParameters)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$1: java.lang.Object next()>
<javax.net.ssl.SNIServerName: void <init>(int,byte[])>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><sun.reflect.misc.MethodUtil: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientConfigurations$RestClientBuilderConfiguration: void <init>()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type[] getResolvedInterfaces(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type resolveTypeVariables(java.lang.reflect.Type,java.lang.reflect.Type)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeArgumentsConstraints(java.lang.reflect.Member,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.AnnotatedType)>-><java.util.HashSet: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.Date: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.web.context.support.WebApplicationContextUtils: void registerWebApplicationScopes(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>-><org.springframework.web.context.support.WebApplicationContextUtils: void registerWebApplicationScopes(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,javax.servlet.ServletContext)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void <init>(javax.management.MBeanServer,javax.management.MBeanServerDelegate,com.sun.jmx.mbeanserver.MBeanInstantiator,com.sun.jmx.mbeanserver.Repository)>-><java.util.HashSet: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifiers(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation[])>-><org.springframework.util.StringUtils: boolean isEmpty(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry newHashEntry(java.lang.Object,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$HashEntry,java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.JumboEnumSet: int size()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.apache.http.HttpHost: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.SimpleTimeZone: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer createFromUrlPath(java.lang.String,org.springframework.http.server.PathContainer$Options)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.Duration: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: long estimateSize()>-><java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: long estimateSize()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.UnresolvedPermission: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><com.google.common.collect.ImmutableMapEntrySet: int size()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Vector: int hashCode()>
<org.aspectj.bridge.context.CompilationAndWeavingContext$DefaultFormatter: void <init>()>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><sun.text.normalizer.UTF16: java.lang.StringBuffer append(java.lang.StringBuffer,int)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><javax.imageio.ImageTypeSpecifier: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration$JwtConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<org.springframework.core.SimpleAliasRegistry: void registerAlias(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.provider.PolicyFile$SelfPermission: int hashCode()>
<javax.management.ObjectName: javax.management.ObjectName getInstance(javax.management.ObjectName)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1Primitive: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.asm.Handle: java.lang.String toString()>
<com.sun.jmx.mbeanserver.MXBeanLookup: void addReference(javax.management.ObjectName,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.catalina.core.AprLifecycleListener: void lifecycleEvent(org.apache.catalina.LifecycleEvent)>-><org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.LocalDate: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>-><org.springframework.security.oauth2.provider.expression.OAuth2ExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>
<org.springframework.core.annotation.AnnotationUtils: org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(java.lang.reflect.AnnotatedElement,java.lang.annotation.Annotation)>-><org.springframework.core.annotation.AnnotationUtils: org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(java.lang.reflect.AnnotatedElement,java.lang.annotation.Annotation,boolean,boolean)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType buildAnnotatedType(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><sun.reflect.annotation.AnnotatedTypeFactory: java.lang.reflect.AnnotatedType buildAnnotatedType(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo,sun.reflect.annotation.TypeAnnotation[],sun.reflect.annotation.TypeAnnotation[],java.lang.reflect.AnnotatedElement)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Short: int hashCode()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.security.Provider$Service: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.ApiOperationReader: void <init>(springfox.documentation.spring.web.plugins.DocumentationPluginsManager,springfox.documentation.OperationNameGenerator)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object remove(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.ref.WeakReference makeReference(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Integer: int hashCode()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.util.calendar.Era: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set findTypeUseConstraints(java.lang.reflect.Member,java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable,org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider$TypeArgumentLocation,java.lang.reflect.Type)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration: void <init>()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _constructType(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType[] _resolveSuperInterfaces(com.fasterxml.classmate.util.ClassStack,java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<sun.security.ssl.CipherSuite: boolean isAvailable()>-><sun.security.ssl.CipherSuite$KeyExchange: boolean isAvailable()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><com.google.common.collect.JdkBackedImmutableMap: java.lang.Object get(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration: void <init>(org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties)>
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$1: java.lang.Object postProcess(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Collections: void swap(java.util.List,int,int)>-><java.util.Vector: java.lang.Object get(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoDefaultConfiguration: void <init>(org.springframework.context.ApplicationContext)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementSelector: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap: void expunge()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.JumboEnumSet: int size()>
<javax.management.NotificationBroadcasterSupport$1: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>()>-><java.util.HashMap: void <init>()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: org.springframework.security.web.access.expression.AbstractVariableEvaluationContextPostProcessor createPostProcessor(org.springframework.security.web.util.matcher.RequestMatcher)>-><org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource$RequestVariablesExtractorEvaluationContextPostProcessor: void <init>(org.springframework.security.web.util.matcher.RequestMatcher)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void selfInitialize(javax.servlet.ServletContext)>-><org.springframework.boot.web.servlet.RegistrationBean: void onStartup(javax.servlet.ServletContext)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.session.NoOpSessionConfiguration: void <init>()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.security.oauth2.config.annotation.configuration.ClientDetailsServiceConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.sql.Time: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><com.google.common.collect.ImmutableCollection: boolean addAll(java.util.Collection)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.OptionalDouble: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.poi.xssf.streaming.SXSSFCell: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: int hashCode()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.io.InvalidObjectException: void <init>(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.ObjectName: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext registerWithRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String getCanonicalName()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: boolean equals(java.lang.Object)>
<org.apache.catalina.valves.ValveBase: java.lang.String getDomainInternal()>-><org.apache.catalina.util.LifecycleMBeanBase: java.lang.String getDomain()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.security.web.authentication.www.BasicAuthenticationFilter: void setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource)>-><org.springframework.security.web.authentication.www.BasicAuthenticationConverter: void setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.expression.TypedValue: int hashCode()>
<com.sun.jmx.mbeanserver.MBeanSupport: void postDeregister()>-><javax.management.StandardMBean: void postDeregister()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<org.springframework.security.core.userdetails.memory.UserAttribute: void <init>()>-><java.util.Vector: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.util.GenericSignature$ClassTypeSignature: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.locale.BaseLocale: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView: int hashCode()>
<org.apache.http.util.Args: java.lang.CharSequence containsNoBlanks(java.lang.CharSequence,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.IdentityHashMap$EntrySet: int size()>
<sun.reflect.annotation.TypeAnnotation$LocationInfo: sun.reflect.annotation.TypeAnnotation[] filter(sun.reflect.annotation.TypeAnnotation[])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,int,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.hibernate.validator.internal.metadata.BeanMetaDataManager: org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions getAnnotationProcessingOptionsFromNonDefaultProviders()>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: void merge(org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<javax.management.MBeanServerInvocationHandler: void <init>(javax.management.MBeanServerConnection,javax.management.ObjectName,boolean)>-><java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy[] values()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.commons.collections.FastHashMap: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.memory.UserAttribute: void addAuthority(org.springframework.security.core.GrantedAuthority)>-><java.util.Vector: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: int buildHashCode(org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.aop.support.AbstractPointcutAdvisor: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.access.expression.WebExpressionVoter: void <init>()>
<org.aspectj.util.FuzzyBoolean$MaybeFuzzyBoolean: void <init>(org.aspectj.util.FuzzyBoolean$1)>-><org.aspectj.util.FuzzyBoolean$MaybeFuzzyBoolean: void <init>()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.YearMonth: java.lang.String toString()>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><java.io.PrintStream: void println(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONObject: void clear()>-><org.springframework.core.env.ReadOnlySystemAttributesMap: void clear()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.awt.font.TransformAttribute: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.TreeSet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.xml.sax.SAXException: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$5: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.awt.image.ColorModel: int hashCode()>
<org.springframework.boot.actuate.health.Health$Builder: void <init>(org.springframework.boot.actuate.health.Status)>-><java.util.LinkedHashMap: void <init>()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.boot.web.client.RestTemplateBuilder: org.springframework.boot.web.client.RestTemplateBuilder customizers(java.util.Collection)>-><org.springframework.boot.web.client.RestTemplateBuilder: void <init>(org.springframework.boot.web.client.RestTemplateBuilder$RequestFactoryCustomizer,boolean,java.lang.String,java.util.Set,java.util.Set,java.util.function.Supplier,org.springframework.web.util.UriTemplateHandler,org.springframework.web.client.ResponseErrorHandler,org.springframework.boot.web.client.BasicAuthentication,java.util.Map,java.util.Set,java.util.Set)>
<io.micrometer.core.util.internal.logging.LocationAwareSlf4JLogger: void <init>(org.slf4j.spi.LocationAwareLogger)>-><io.micrometer.core.util.internal.logging.AbstractInternalLogger: void <init>(java.lang.String)>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$SingletonMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1Boolean: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.context.support.ApplicationListenerDetector: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<java.util.Collection: java.util.stream.Stream parallelStream()>-><java.util.ArrayDeque: java.util.Spliterator spliterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.LongNode: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.DateFormatSymbols: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.WeakHashMap: java.util.Set entrySet()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><reactor.util.context.ContextN: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapKeySet: int size()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.Date: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<org.aspectj.weaver.ResolvedType: void <clinit>()>-><org.aspectj.weaver.ResolvedType$MethodGetter: void <init>(org.aspectj.weaver.ResolvedType$1)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.Instant: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.DecimalFormat: int hashCode()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap: java.lang.Object get(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: java.lang.String toString()>
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void <init>(java.util.Properties)>-><java.util.Collections$EmptyEnumeration: java.lang.Object nextElement()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getClassName(javax.management.DynamicMBean)>-><com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.MapDeserializer: java.util.Map createMap(java.lang.reflect.Type)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getRawType()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><java.util.Collections$SetFromMap: boolean contains(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.MXBeanLookup: javax.management.ObjectName mxbeanToObjectName(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: boolean put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: void clear()>-><java.util.AbstractMap: void clear()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.WeakHashMap$Entry: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: int hashCode()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.aspectj.weaver.patterns.NoTypePattern: void <init>()>-><org.aspectj.weaver.patterns.TypePattern: void <init>(boolean,boolean,org.aspectj.weaver.patterns.TypePatternList)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans$FilterRegistrationBeanAdapter: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.format.WebConversionService: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.google.common.collect.ImmutableList: int hashCode()>
<java.util.PropertyResourceBundle: void <init>(java.io.Reader)>-><java.util.Properties: void load(java.io.Reader)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern: java.lang.String toString()>
<org.springframework.core.annotation.OrderUtils: java.lang.Integer getPriority(java.lang.Class)>-><org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.annotation.MergedAnnotation get(java.lang.String)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Vector$Itr: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.LocalTime: int hashCode()>
<springfox.documentation.spring.web.scanners.CachingOperationReader: void <init>(springfox.documentation.spring.web.readers.operation.OperationReader)>-><springfox.documentation.spring.web.scanners.CachingOperationReader$1: void <init>(springfox.documentation.spring.web.scanners.CachingOperationReader,springfox.documentation.spring.web.readers.operation.OperationReader)>
<sun.security.ssl.SignatureAndHashAlgorithm: void <init>(sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm,sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm,java.lang.String,int)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: com.sun.jmx.mbeanserver.NamedObject retrieveNamedObject(javax.management.ObjectName)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.xml.namespace.QName: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: java.util.Collection getPropertyValues(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.util.Collection values()>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.DefaultTagsProvider: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<sun.security.ssl.SSLSessionImpl: void <init>()>-><sun.security.ssl.SessionId: void <init>(boolean,java.security.SecureRandom)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLEngineImpl: void init(sun.security.ssl.SSLContextImpl)>-><sun.security.ssl.EngineInputRecord: void <init>(sun.security.ssl.SSLEngineImpl)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraint: org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode getValueExtractionPath(java.util.List)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$SingleValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.http.HttpHost: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.net.URI: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.net.URL: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: void clear()>-><org.springframework.http.ReadOnlyHttpHeaders: void clear()>
<org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: void init()>-><org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder: java.util.Collection getConfigurers()>
<com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport: boolean add(javax.management.ObjectName,java.lang.ClassLoader)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.AbstractMap: java.lang.String toString()>
<org.hibernate.validator.internal.engine.constraintvalidation.ComposingConstraintTree: void <clinit>()>-><org.hibernate.validator.internal.util.logging.LoggerFactory: org.hibernate.validator.internal.util.logging.Log make(java.lang.invoke.MethodHandles$Lookup)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERPrintableString: int hashCode()>
<javax.management.openmbean.CompositeDataSupport: void <init>(java.util.SortedMap,javax.management.openmbean.CompositeType)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$verify$4(java.lang.String,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalInt: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.util.Collection values()>
<sun.security.ssl.Utilities: javax.net.ssl.SNIHostName rawToSNIHostName(java.lang.String)>-><java.io.PrintStream: void println(java.lang.String)>
<org.springframework.security.oauth2.provider.client.JdbcClientDetailsService: void <clinit>()>-><java.lang.StringBuilder: void <init>()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void <init>(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class[])>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationModelsProvider: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Boolean: int hashCode()>
<org.springframework.core.SimpleAliasRegistry: void checkForAliasCircle(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.Object get(java.lang.String)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<sun.security.ssl.Debug: void <clinit>()>-><sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.springframework.http.server.DefaultPathContainer: void <clinit>()>-><java.lang.Character: java.lang.Character valueOf(char)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.HashSet: void <init>()>
<org.aspectj.weaver.AjcMemberMaker: void <clinit>()>-><org.aspectj.weaver.UnresolvedType: org.aspectj.weaver.UnresolvedType forName(java.lang.String)>
<org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor: void <init>()>-><java.lang.Object: void <init>()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.bouncycastle.asn1.ASN1TaggedObject: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.poi.ss.util.CellRangeAddressBase: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: int hashCode()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<java.util.ArrayDeque$DeqIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<javax.management.ObjectInstance: void <init>(javax.management.ObjectName,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.tomcat.util.modeler.NoDescriptorRegistry$PassthroughMBean: void <init>()>-><org.apache.tomcat.util.modeler.ManagedBean: void <init>()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: int lambda$getOrderedBeansOfType$1(java.util.Map$Entry,java.util.Map$Entry)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.PropertyPermission: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: java.io.InvalidObjectException invalidObjectException(java.lang.Throwable)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList: int size()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.HashMap$Node: java.lang.String toString()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<org.hibernate.validator.internal.util.StringHelper: java.lang.String decapitalize(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.ResolvedType: boolean equals(java.lang.Object)>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><java.security.ProtectionDomain: boolean implies(java.security.Permission)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.List addAll(java.util.List,java.util.List)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<com.sun.jmx.mbeanserver.Repository: void addMoiToTb(javax.management.DynamicMBean,javax.management.ObjectName,java.lang.String,java.util.Map,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.SecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: void configure(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: void <init>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter$ReferrerPolicy: void <clinit>()>-><java.util.HashMap: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.access.expression.WebExpressionConfigAttribute: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.support.NullBean: int hashCode()>
<sun.security.ssl.Debug: boolean getBooleanProperty(java.lang.String,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.el.ExpressionFactory: void <clinit>()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedField: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.HashSet: boolean add(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: com.sun.jmx.mbeanserver.MXBeanMapping makeParameterizedTypeMapping(java.lang.reflect.ParameterizedType,com.sun.jmx.mbeanserver.MXBeanMappingFactory)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>-><java.util.SubList: boolean addAll(java.util.Collection)>
<net.logstash.logback.appender.AbstractLogstashTcpSocketAppender$TcpSendingEventHandler: void onEvent(net.logstash.logback.appender.AsyncDisruptorAppender$LogEvent,long,boolean)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaProxy: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><javax.management.openmbean.CompositeDataInvocationHandler: void <init>(javax.management.openmbean.CompositeData)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.JoinPointSignature: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.AnnotatedType getAnnotatedGenericComponentType()>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: sun.reflect.annotation.TypeAnnotation[] getTypeAnnotations()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalLong: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Byte: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedObjectType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,com.fasterxml.classmate.ResolvedType[])>-><com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter: void <clinit>()>-><org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder: org.springframework.security.web.server.header.StaticServerHttpHeadersWriter$Builder header(java.lang.String,java.lang.String[])>
<org.hibernate.validator.internal.util.TypeVariables: java.lang.reflect.TypeVariable getActualTypeParameter(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.util.TypeVariables: boolean isInternal(java.lang.reflect.TypeVariable)>
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaults(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: void <init>(java.util.List)>
<org.springframework.util.Assert: void noNullElements(java.util.Collection,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>
<org.springframework.boot.ImageBanner: void printBanner(org.springframework.core.env.Environment,java.lang.Class,java.io.PrintStream)>-><org.aspectj.bridge.AbortException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.text.ChoiceFormat: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.io.ObjectStreamClass$FieldReflectorKey: int hashCode()>
<javax.el.ExpressionFactory$3: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,java.lang.String,org.springframework.util.MultiValueMap)>-><org.springframework.util.CollectionUtils: org.springframework.util.MultiValueMap unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.config.ConstructorArgumentValues: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.util.calendar.ZoneInfo: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundryActuatorAutoConfiguration$IgnoredPathsWebSecurityConfigurer: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: javax.management.openmbean.OpenDataException openDataException(java.lang.String,java.lang.Throwable)>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><sun.net.idn.StringPrep: void getValues(char,sun.net.idn.StringPrep$Values)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.core.env.PropertySource: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SetFromMap: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><sun.font.GlyphLayout$SDCache$SDKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.Package: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromParamType(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.classmate.TypeBindings)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type[] getActualTypeArguments()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.aspectj.weaver.patterns.HasMemberTypePattern: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.LinkedHashMap$LinkedEntrySet: int size()>
<org.springframework.core.annotation.AnnotationUtils: org.springframework.core.annotation.AnnotationAttributes lambda$getAnnotationAttributes$0(org.springframework.core.annotation.MergedAnnotation)>-><org.springframework.core.annotation.AnnotationAttributes: void <init>(java.lang.Class,boolean)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>-><java.util.Collections$EmptyMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$NonNullMXBeanMapping: java.lang.Object toOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$EnumMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.aspectj.weaver.patterns.AndTypePattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.Package: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<javax.el.ExpressionFactory: java.lang.String discoverClassName(java.lang.ClassLoader)>-><javax.el.ExpressionFactory$3: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents$Type: void <clinit>()>-><org.springframework.web.util.HierarchicalUriComponents$Type$6: void <init>(java.lang.String,int)>
<org.hibernate.validator.internal.engine.valueextraction.OptionalDoubleValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$encodeQueryParams$3(java.util.function.BiFunction,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><java.util.LinkedList: int size()>
<org.apache.catalina.core.ContainerBase: java.lang.String getMBeanKeyProperties()>-><org.apache.catalina.core.ContainerBase: java.lang.String getName()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.font.FontLineMetrics: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.lang.NullPointerException: void <init>()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectInstancesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.dom4j.io.SAXHelper: org.xml.sax.XMLReader createXMLReader(boolean)>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<org.apache.tomcat.util.modeler.Registry: void <clinit>()>-><org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>
<org.springframework.core.annotation.AnnotationAttributes: void <init>(java.lang.Class,boolean)>-><java.util.LinkedHashMap: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.IdentityHashMap$KeySet: int size()>
<org.springframework.http.server.DefaultPathContainer: void parsePathParamValues(java.lang.String,java.nio.charset.Charset,org.springframework.util.MultiValueMap)>-><java.lang.String: java.lang.String substring(int)>
<java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$UnmodifiableMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<org.springframework.web.util.HtmlCharacterEntityReferences: void <init>()>-><java.util.HashMap: void <init>(int)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.AndTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator)>-><org.hibernate.validator.messageinterpolation.AbstractMessageInterpolator: void <init>(org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,org.hibernate.validator.spi.resourceloading.ResourceBundleLocator,boolean)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><sun.text.normalizer.UCharacterIterator: java.lang.String getText()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedArrayTypeImpl: java.lang.reflect.AnnotatedType getAnnotatedGenericComponentType()>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: java.lang.reflect.AnnotatedElement getDecl()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanParameterInfo: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Object cast(java.lang.Object,java.lang.Class,com.alibaba.fastjson.parser.ParserConfig)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<sun.net.idn.StringPrep: java.lang.StringBuffer prepare(sun.text.normalizer.UCharacterIterator,int)>-><sun.text.normalizer.UCharacterIterator: int nextCodePoint()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.DERExternal: int hashCode()>
<org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider: void <clinit>()>-><org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$DelegatingHandlerMappingDescriptionProvider: void <init>(java.util.List,org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider$1)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List getParameterMetaData(java.lang.reflect.Executable)>-><java.util.Collections: java.util.Set emptySet()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><com.google.common.collect.JdkBackedImmutableMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERVisibleString: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForArrayType(java.lang.reflect.AnnotatedArrayType)>-><java.util.Collections: java.util.Map emptyMap()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.JapaneseImperialCalendar: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.baomidou.mybatisplus.core.metadata.OrderItem: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.stream.Collectors: void lambda$toMap$58(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.Map,java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<javax.el.ExpressionFactory$CacheKey: void <init>(java.lang.ClassLoader)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.util.OptionalDouble: java.lang.String toString()>
<sun.security.ssl.SSLContextImpl: void <init>()>-><sun.security.ssl.SSLSessionContextImpl: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: java.lang.String toString()>
<register-finalize <org.springframework.web.util.pattern.PatternParseException$PatternMessage: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<org.hibernate.validator.internal.metadata.raw.ConstrainedField: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Field,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,org.hibernate.validator.internal.metadata.raw.ConstrainedElement$ConstrainedElementKind,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Class: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.node.ArrayNode: int hashCode()>
<org.springframework.security.config.annotation.AlreadyBuiltException: void <init>(java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetadata(java.lang.reflect.AnnotatedType,java.lang.reflect.TypeVariable[])>-><java.util.Collections: java.util.Map emptyMap()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.servlet.CloudFoundrySecurityInterceptor: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.hibernate.validator.internal.engine.resolver.CachingTraversableResolverForSingleValidation: void <init>(javax.validation.TraversableResolver)>-><java.util.HashMap: void <init>()>
<sun.reflect.annotation.TypeAnnotationParser: java.lang.reflect.AnnotatedType buildAnnotatedType(byte[],sun.reflect.ConstantPool,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget)>-><sun.reflect.annotation.TypeAnnotation$TypeAnnotationTargetInfo: sun.reflect.annotation.TypeAnnotation$TypeAnnotationTarget getTarget()>
<com.sun.jmx.mbeanserver.PerInterface: java.lang.Object getAttribute(java.lang.Object,java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.endpoint.EndpointIdTimeToLivePropertyFunction: void <clinit>()>-><org.springframework.boot.context.properties.bind.Bindable: org.springframework.boot.context.properties.bind.Bindable of(java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.xssf.usermodel.extensions.XSSFCellBorder: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.Double: java.lang.String toString()>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource createMetadataSource(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry: java.util.LinkedHashMap createRequestMap()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.ASN1Sequence: int hashCode()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.security.ssl.EngineOutputRecord: int recordSize(byte)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.springframework.web.method.HandlerMethod: java.lang.String initDescription(java.lang.Class,java.lang.reflect.Method)>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object get(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Executable)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areCrossParameterConstraintsIgnoredFor(java.lang.reflect.Member)>-><java.lang.Boolean: boolean booleanValue()>
<com.zaxxer.hikari.util.ConcurrentBag: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><io.netty.buffer.AbstractByteBuf: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.WildTypePattern: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.awt.geom.Edge: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.util.Set objectNamesFromFilteredNamedObjects(java.util.Set,javax.management.QueryExp)>-><com.sun.jmx.mbeanserver.NamedObject: javax.management.ObjectName getName()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromAny(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.Type,com.fasterxml.classmate.TypeBindings)>-><java.lang.Object: java.lang.Class getClass()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.SubList: java.util.Iterator iterator()>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><org.apache.commons.collections.FastHashMap: java.util.Set entrySet()>
<java.util.Collections$SynchronizedMap: void clear()>-><java.util.HashMap: void clear()>
<org.springframework.core.annotation.AnnotationAwareOrderComparator: java.lang.Integer getPriority(java.lang.Object)>-><org.springframework.core.annotation.OrderUtils: java.lang.Integer getPriority(java.lang.Class)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.map.type.ClassKey: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$EmptyMap: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.Util: java.lang.Object cast(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><java.util.HashSet: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: void <init>(org.hibernate.validator.internal.metadata.core.ConstraintHelper,org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions)>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.BeanConfiguration retrieveBeanConfiguration(java.lang.Class)>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.aspectj.weaver.patterns.BasicToken: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>-><java.security.Signature$Delegate: void <init>(java.security.SignatureSpi,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><javax.management.openmbean.OpenDataException: void <init>(java.lang.String)>
<org.springframework.security.web.server.csrf.WebSessionServerCsrfTokenRepository: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint$ContainerClassTypeParameterAndExtractor: java.lang.String toString()>
<org.springframework.util.Assert: void noNullElements(java.util.Collection,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><springfox.documentation.spring.web.readers.operation.OperationParameterReader: void <init>(springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander,springfox.documentation.spi.schema.EnumTypeDeterminer)>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: boolean isRegistered(javax.management.ObjectName)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>-><java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>
<com.google.common.collect.ImmutableMap: void clear()>-><java.lang.UnsupportedOperationException: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.poi.ss.format.CellNumberFormatter$Special: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<java.util.stream.ReferencePipeline: void forEachWithCancel(java.util.Spliterator,java.util.stream.Sink)>-><java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.openxml4j.opc.PackageRelationship: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getTypeParametersCascadingMetaDataForParameterizedType(java.lang.reflect.AnnotatedParameterizedType,java.lang.reflect.TypeVariable[])>-><org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Map getGroupConversions(java.lang.reflect.AnnotatedElement)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.aspectj.weaver.JoinPointSignature: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.awt.RenderingHints$Key: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>-><java.util.Collections$EmptySet: boolean contains(java.lang.Object)>
<org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer: java.util.List getDecisionVoters(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.ArrayList: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.ByteArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ByteArrayValueExtractor: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void putAll(java.util.Map)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.beans.TypeConverterSupport: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><java.util.Collections$SetFromMap: boolean contains(java.lang.Object)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.fasterxml.classmate.TypeBindings: void <init>(java.lang.String[],com.fasterxml.classmate.ResolvedType[],java.lang.String[])>-><java.lang.StringBuilder: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>-><sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>
<org.hibernate.validator.internal.util.ReflectionHelper: java.lang.reflect.Type typeOf(java.lang.reflect.Member)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean areEqual(java.lang.Object,java.lang.Object)>-><javax.el.Util$CacheKey: boolean equals(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void preDeregisterInvoke(javax.management.MBeanRegistration)>-><com.sun.jmx.mbeanserver.MBeanSupport: void preDeregister()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.validation.ObjectError: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.codehaus.jackson.map.type.CollectionLikeType: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration: void <init>()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.net.Inet6Address: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.apache.poi.ss.format.CellNumberStringMod: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.net.InetSocketAddress: int hashCode()>
<org.hibernate.validator.internal.engine.MethodValidationConfiguration: java.util.Set buildConfiguredRuleSet(boolean,boolean,boolean)>-><java.util.HashSet: boolean add(java.lang.Object)>
<javax.el.ExpressionFactory: java.lang.String getClassNameServices(java.lang.ClassLoader)>-><javax.el.Util: java.lang.String message(javax.el.ELContext,java.lang.String,java.lang.Object[])>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.Class: java.lang.String getName()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.awt.image.ColorModel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><io.netty.buffer.AbstractByteBuf: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><io.micrometer.shaded.org.pcollections.ConsPStack$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableMapValues: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.util.Calendar: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: void <init>(java.lang.String,org.springframework.http.server.DefaultPathContainer$DefaultSeparator)>-><org.springframework.http.server.DefaultPathContainer$DefaultSeparator: java.lang.String encodedSequence()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.ssl.SecureKey: int hashCode()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.aspectj.weaver.WildcardedUnresolvedType: void <clinit>()>-><org.aspectj.weaver.WildcardedUnresolvedType: void <init>(java.lang.String,org.aspectj.weaver.UnresolvedType,org.aspectj.weaver.UnresolvedType)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.security.MessageDigest: java.lang.String toString()>
<org.aspectj.weaver.tools.TraceFactory: void <clinit>()>-><org.aspectj.weaver.BCException: void printStackTrace()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashMap$Values: int size()>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromVariable(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.classmate.TypeBindings)>-><com.fasterxml.classmate.TypeBindings: boolean hasUnbound(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.FloatArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: void <init>(javax.validation.valueextraction.ValueExtractor)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<org.apache.catalina.core.ContainerBase: java.lang.String getLogName()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.UnresolvedTypeVariableReferenceType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<org.springframework.web.servlet.DispatcherServlet: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedParameterizedTypeImpl: java.lang.reflect.ParameterizedType getParameterizedType()>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: java.lang.reflect.Type getType()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashSet: boolean isEmpty()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: int compareTo(java.lang.Object)>
<org.aspectj.weaver.patterns.IToken: void <clinit>()>-><org.aspectj.weaver.patterns.BasicToken: org.aspectj.weaver.patterns.BasicToken makeOperator(java.lang.String,int,int)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.awt.Color: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.SetPropertyValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.SetPropertyValueExtractor: void <init>()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: void addValueExtractorDescriptorForTypeArgumentLocation(org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,java.util.List,org.hibernate.validator.internal.metadata.location.TypeArgumentConstraintLocation)>-><org.hibernate.validator.internal.util.TypeVariables: java.lang.reflect.TypeVariable getActualTypeParameter(java.lang.reflect.TypeVariable)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: java.util.Set keySet()>-><javax.management.openmbean.TabularDataSupport: java.util.Set keySet()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeArgument: java.lang.String toString()>
<com.sun.jmx.mbeanserver.NamedObject: void <init>(javax.management.ObjectName,javax.management.DynamicMBean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLAlgorithmDecomposer: java.util.Set decompose(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.SubList$1: java.lang.Object next()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.net.URL: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.beans.PropertyDescriptor: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.crypto.CryptoPermission: int hashCode()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<sun.net.idn.StringPrep: java.lang.StringBuffer map(sun.text.normalizer.UCharacterIterator,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.net.IDN: void <clinit>()>-><java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: void removeStale()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$WeakValueReference: java.lang.Object keyRef()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.bouncycastle.asn1.ASN1BitString: int hashCode()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addAsRegistrationBean(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,java.lang.Class,org.springframework.boot.web.servlet.ServletContextInitializerBeans$RegistrationBeanAdapter)>-><reactor.util.context.Context1: java.lang.Object getValue()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.util.ClassUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.util.HashSet: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.OffsetDateTime: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl: boolean areClassLevelConstraintsIgnoredFor(java.lang.Class)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.lang.StackTraceElement: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: void addServletContextInitializerBeans(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: boolean equals(java.lang.Object)>
<javax.crypto.KeyAgreement: void <clinit>()>-><sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String,java.lang.String)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: java.util.stream.Stream lambda$new$0(java.util.List)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.Locale: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<register-finalize <reactor.core.scheduler.ParallelScheduler: java.util.concurrent.ScheduledExecutorService get()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.aspectj.bridge.IMessage$Kind: int compareTo(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><net.logstash.logback.encoder.com.lmax.disruptor.Sequence: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.core.MethodParameter: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository getInstantiatorCLR()>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$3: void <init>(com.sun.jmx.interceptor.DefaultMBeanServerInterceptor)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.Collections$EmptyList: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: void <init>(java.lang.String,boolean)>-><java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.path.PathImpl: void <init>(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.FloatNode: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><com.github.xiaoymin.knife4j.spring.configuration.Knife4jAutoConfiguration: void <init>()>
<org.aspectj.util.LangUtil: void <clinit>()>-><java.lang.Throwable: void printStackTrace(java.io.PrintStream)>
<sun.security.util.Cache: sun.security.util.Cache newSoftMemoryCache(int,int)>-><sun.security.util.MemoryCache: void <init>(boolean,int,int)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><java.awt.Rectangle: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.TreeMap$Entry: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.TypeResolver: com.fasterxml.classmate.ResolvedType _fromWildcard(com.fasterxml.classmate.util.ClassStack,java.lang.reflect.WildcardType,com.fasterxml.classmate.TypeBindings)>-><com.sun.beans.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.aspectj.bridge.context.PinpointingMessageHandler$MessageIssued: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><sun.security.util.DerInputBuffer: int hashCode()>
<com.sun.jmx.mbeanserver.Repository: javax.management.DynamicMBean retrieve(javax.management.ObjectName)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.aspectj.weaver.ResolvedPointcutDefinition: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<javax.net.ssl.SNIHostName: void checkHostName()>-><java.lang.String: boolean endsWith(java.lang.String)>
<org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: boolean isConstrained()>-><java.util.AbstractCollection: boolean isEmpty()>
<org.springframework.http.client.OkHttp3ClientHttpResponse: void <init>(okhttp3.Response)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration: javax.servlet.DispatcherType lambda$getDispatcherTypes$0(org.springframework.boot.web.servlet.DispatcherType)>-><javax.servlet.DispatcherType: javax.servlet.DispatcherType valueOf(java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set convertToMetaConstraints(java.util.List,java.lang.reflect.Field)>-><java.util.Collections: java.util.Set emptySet()>
<com.sun.jmx.mbeanserver.ConvertingMethod: java.lang.Object invokeWithOpenReturn(com.sun.jmx.mbeanserver.MXBeanLookup,java.lang.Object,java.lang.Object[])>-><com.sun.jmx.mbeanserver.MXBeanLookup: com.sun.jmx.mbeanserver.MXBeanLookup getLookup()>
<java.lang.reflect.Executable: java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes()>-><java.lang.reflect.Executable: byte[] getTypeAnnotationBytes0()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<com.fasterxml.classmate.TypeResolver: void <clinit>()>-><com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType create(java.lang.Class,com.fasterxml.classmate.TypeBindings,com.fasterxml.classmate.ResolvedType,java.util.List)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: void <init>(java.util.Set)>-><java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<org.springframework.boot.cloud.CloudPlatform: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ConcreteCflowPointcut$Slot: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyAnnotationTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Hashtable$KeySet: int size()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.Hashtable$EntrySet: boolean add(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.poi.ss.usermodel.ExcelStyleDateFormatter: int hashCode()>
<org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeSystem typeSystemForClassLoader(java.lang.ClassLoader,java.lang.String)>-><java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.ConstructorArgumentValues: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<javax.management.JMX: java.lang.Object newMXBeanProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class,boolean)>-><javax.management.JMX: java.lang.Object createProxy(javax.management.MBeanServerConnection,javax.management.ObjectName,java.lang.Class,boolean,boolean)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void <init>(int,long)>-><java.lang.Object: void <init>()>
<org.springframework.core.SimpleAliasRegistry: boolean hasAlias(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.TypeCategoryTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.LinkedHashMap$LinkedHashIterator: void remove()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.aggregated.rule.MethodConfigurationRule: void <init>()>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<sun.security.ssl.CipherSuite: sun.security.ssl.CipherSuite valueOf(int,int)>-><java.lang.StringBuilder: void <init>()>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.catalina.util.ContextName: void <init>(java.lang.String,boolean)>-><java.lang.String: java.lang.String substring(int,int)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: void <init>(java.util.Set)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: void <init>(java.util.Set)>
<org.hibernate.validator.internal.util.TypeVariableBindings: void processGenericSuperType(java.util.Map,java.util.Map,java.lang.reflect.Type)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.context.properties.source.MapConfigurationPropertySource: void put(java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.metadata.core.MetaConstraint: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<sun.security.ssl.SSLContextImpl: sun.security.ssl.CipherSuiteList getApplicableCipherSuiteList(sun.security.ssl.ProtocolList,boolean)>-><sun.security.ssl.CipherSuite: java.util.Collection allowedCipherSuites()>
<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy: void <clinit>()>-><java.lang.Class: java.lang.String getName()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.NoTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.authentication.ProviderManager performBuild()>-><org.springframework.security.authentication.ProviderManager: void setEraseCredentialsAfterAuthentication(boolean)>
<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void error(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.NotTypePattern: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.base.Present: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.config.BeanDefinition getOriginatingBeanDefinition()>-><org.springframework.beans.factory.support.BeanDefinitionResource: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.base.Predicates$AndPredicate: int hashCode()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.node.BinaryNode: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration: void <init>(org.springframework.boot.autoconfigure.http.HttpProperties)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.time.OffsetTime: int hashCode()>
<org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform: void <clinit>()>-><org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1: void <init>(java.lang.String,int,java.lang.String)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.sql.Timestamp: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.util.calendar.CalendarDate: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.fasterxml.jackson.databind.PropertyName: int hashCode()>
<com.fasterxml.classmate.util.ClassStack: void addSelfReference(com.fasterxml.classmate.types.ResolvedRecursiveType)>-><java.util.ArrayList: void <init>()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<javax.management.MBeanServerInvocationHandler: void <init>(javax.management.MBeanServerConnection,javax.management.ObjectName,boolean)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()>-><java.util.SubList$1: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean containsKey(java.lang.Object)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: boolean isJavaFxInClasspath()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager: boolean isClassPresent(java.lang.String,boolean)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><com.google.common.collect.ImmutableMap: java.util.Set entrySet()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.image.ColorModel: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><javax.xml.bind.JAXBException: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName nonDefaultDomain(javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String getDomain()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.context.support.AbstractApplicationContext: void doClose()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onClose()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.aspectj.weaver.patterns.AnyTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.xml.namespace.QName: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<sun.security.ssl.JsseJce: void <clinit>()>-><java.security.Security: java.security.Provider getProvider(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><reactor.util.context.ContextN: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeMapping: void makeCompositeBuilder()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: void <init>(int,float,int,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$ReferenceType,java.util.EnumSet)>-><java.util.RegularEnumSet: boolean contains(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: boolean areEqual(java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void registering(com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$2: void registering()>
<com.google.common.collect.Iterators: boolean elementsEqual(java.util.Iterator,java.util.Iterator)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.aspectj.weaver.patterns.NoTypePattern: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.apache.http.HttpHost: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<sun.reflect.annotation.AnnotatedTypeFactory: sun.reflect.annotation.TypeAnnotation$LocationInfo addNesting(java.lang.reflect.Type,sun.reflect.annotation.TypeAnnotation$LocationInfo)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.reflect.Type getOwnerType()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.security.UnresolvedPermission: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.management.openmbean.CompositeType: int hashCode()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.io.InputStream lambda$newBundle$0(boolean,java.lang.ClassLoader,java.lang.String)>-><java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern: int hashCode()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findConstraints(java.lang.reflect.Member,java.lang.annotation.ElementType)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void setAsText(java.lang.String)>-><org.springframework.security.core.userdetails.memory.UserAttribute: void setAuthoritiesAsString(java.util.List)>
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>-><java.security.Provider: java.lang.String getName()>
<org.hibernate.validator.internal.metadata.core.MetaConstraint$LinkedValueExtractionPathNode: void <init>(org.hibernate.validator.internal.metadata.core.MetaConstraint$ValueExtractionPathNode,java.util.List)>-><java.util.ArrayList: java.lang.Object get(int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.aspectj.weaver.UnresolvedType: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.BitSet: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><reactor.util.context.Context1: java.lang.Object getValue()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: int hashCode()>
<com.fasterxml.classmate.util.ResolvedTypeKey: void <init>(java.lang.Class)>-><com.fasterxml.classmate.util.ResolvedTypeKey: void <init>(java.lang.Class,com.fasterxml.classmate.ResolvedType[])>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.cglib.core.Signature: int hashCode()>
<org.springframework.core.type.classreading.CachingMetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(org.springframework.core.io.Resource)>-><org.apache.commons.collections.FastHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<springfox.documentation.spring.web.readers.operation.OperationResponseClassReader: void <init>(springfox.documentation.schema.TypeNameExtractor)>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.HikariConfig: void copyStateTo(com.zaxxer.hikari.HikariConfig)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpHeaders: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.aspectj.weaver.patterns.OrTypePattern: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.aspectj.weaver.patterns.ExactTypePattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator: javax.el.ExpressionFactory buildExpressionFactory()>-><org.hibernate.validator.internal.util.privilegedactions.SetContextClassLoader: org.hibernate.validator.internal.util.privilegedactions.SetContextClassLoader action(java.lang.ClassLoader)>
<org.springframework.security.core.userdetails.memory.UserAttributeEditor: void <init>()>-><java.beans.PropertyEditorSupport: void <init>()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.aspectj.weaver.patterns.NamePattern: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><javax.management.modelmbean.ModelMBeanOperationInfo: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><sun.font.GlyphLayout$LayoutEngineKey: int hashCode()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<sun.net.idn.StringPrep: void <init>(java.io.InputStream)>-><sun.net.idn.StringPrep: sun.text.normalizer.VersionInfo getVersionInfo(byte[])>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.util.HashMap$Node: java.lang.String toString()>
<sun.security.ssl.SignatureAndHashAlgorithm: void <clinit>()>-><java.security.Security: java.security.Provider getProvider(java.lang.String)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.aspectj.weaver.TypeVariableReferenceType: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext: void <init>(org.springframework.beans.factory.support.DefaultListableBeanFactory)>-><org.springframework.context.annotation.AnnotatedBeanDefinitionReader: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.util.GenericSignature$FormalTypeParameter: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.Type addValueExtractorDescriptorForWrappedValue(org.hibernate.validator.internal.util.TypeResolutionHelper,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager,org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl,java.util.List,org.hibernate.validator.internal.metadata.location.ConstraintLocation)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.core.GenericTypeResolver: java.lang.Class resolveTypeArgument(java.lang.Class,java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>-><com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] access$300(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>
<org.springframework.web.client.RestTemplate: void <init>(org.springframework.http.client.ClientHttpRequestFactory)>-><org.springframework.web.client.RestTemplate: void <init>()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Integer castToInt(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.util.Collection values()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: int hashCode()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeCompliantValueExtractors(java.lang.Class,java.util.Set)>-><org.hibernate.validator.internal.util.CollectionHelper: java.util.Set toImmutableSet(java.util.Set)>
<sun.net.util.IPAddressUtil: boolean isIPv4LiteralAddress(java.lang.String)>-><sun.net.util.IPAddressUtil: byte[] textToNumericFormatV4(java.lang.String)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<com.zaxxer.hikari.HikariConfig: void loadProperties(java.lang.String)>-><java.io.FileInputStream: void close()>
<org.springframework.web.servlet.config.annotation.InterceptorRegistration: java.lang.Object getInterceptor()>-><java.util.ArrayList: boolean isEmpty()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.net.InetAddress: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.lang.reflect.Constructor: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<java.util.Collections$SynchronizedMap: void clear()>-><com.google.common.collect.ImmutableMap: void clear()>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>-><sun.security.util.Debug: void println(java.lang.String)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><org.springframework.http.ReadOnlyHttpHeaders: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.font.Decoration$DecorationImpl: boolean equals(java.lang.Object)>
<sun.security.ssl.CipherSuite$BulkCipher: void <init>(java.lang.String,sun.security.ssl.CipherSuite$CipherType,int,int,int,int,boolean)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.lang.invoke.MemberName: void <init>(java.lang.reflect.Constructor)>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.classmate.types.ResolvedObjectType: com.fasterxml.classmate.types.ResolvedObjectType getParentClass()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.OptionalInt: int hashCode()>
<sun.security.ssl.SSLSessionImpl: void <init>(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection,sun.security.ssl.SessionId,java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.ConstrainedParameter: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum findEnum(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.wuwenze.poi.pojo.ExcelMapping: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.logging.log4j.Level: int hashCode()>
<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>-><java.util.WeakHashMap$EntrySet: boolean remove(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: java.lang.Object createInstance(java.util.Map,com.alibaba.fastjson.parser.ParserConfig)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<javax.el.ExpressionFactory: javax.el.ExpressionFactory newInstance(java.util.Properties)>-><javax.el.ExpressionFactory$CacheValue: java.lang.Class getFactoryClass()>
<org.apache.catalina.core.StandardContext: void <init>()>-><java.util.HashMap: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.beans.BeanMetadataAttribute: int hashCode()>
<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Locale)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><com.google.common.base.CharMatcher$Or: java.lang.String toString()>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: void <init>(java.lang.Class,char,java.lang.String)>-><com.fasterxml.classmate.ResolvedType: void <init>(java.lang.Class,com.fasterxml.classmate.TypeBindings)>
<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>-><java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>
<sun.net.idn.StringPrep: char getCodePointValue(int)>-><sun.net.idn.StringPrep$StringPrepTrieImpl: sun.text.normalizer.CharTrie access$000(sun.net.idn.StringPrep$StringPrepTrieImpl)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.hibernate.validator.internal.metadata.raw.AbstractConstrainedElement: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Introspector: javax.management.DynamicMBean makeDynamicMBean(java.lang.Object)>-><com.sun.jmx.mbeanserver.Util: java.lang.Object cast(java.lang.Object)>
<org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><org.aspectj.util.GenericSignature$ArrayTypeSignature: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<sun.security.ssl.Utilities: java.util.List addToSNIServerNameList(java.util.List,java.lang.String)>-><sun.security.ssl.Debug: boolean isOn(java.lang.String)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getMaximallySpecificAndContainerElementCompliantValueExtractor(java.lang.Class,java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.expression.TypedValue: int hashCode()>
<com.sun.jmx.mbeanserver.StandardMBeanSupport: javax.management.MBeanInfo getMBeanInfo()>-><com.sun.jmx.mbeanserver.StandardMBeanIntrospector: boolean isDefinitelyImmutableInfo(java.lang.Class)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><io.netty.buffer.SwappedByteBuf: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.aspectj.util.GenericSignature$TypeVariableSignature: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath: int evalSize(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.google.common.collect.FluentIterable: java.lang.String toString()>
<com.caucho.hessian.io.JavaDeserializer: java.util.HashMap getFieldMap(java.lang.Class)>-><org.aspectj.weaver.BCException: void printStackTrace()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.AbstractList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><com.wuwenze.poi.pojo.ExcelProperty: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<sun.net.idn.Punycode: java.lang.StringBuffer encode(java.lang.StringBuffer,boolean[])>-><sun.text.normalizer.UTF16: boolean isSurrogate(char)>
<org.hibernate.validator.internal.util.annotation.AnnotationDescriptor: int buildHashCode()>-><java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
<org.apache.catalina.util.LifecycleBase: void init()>-><org.apache.catalina.util.LifecycleBase: void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.aspectj.weaver.patterns.AndTypePattern: java.lang.String toString()>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isHealthEndpointExtension(java.lang.Object)>-><org.springframework.core.annotation.MergedAnnotations: org.springframework.core.annotation.MergedAnnotations from(java.lang.reflect.AnnotatedElement)>
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void <init>()>-><org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void <init>(org.springframework.context.ApplicationEventPublisher)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<com.alibaba.fastjson.serializer.CharArrayCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getRuntimeAndContainerElementCompliantValueExtractorsFromPossibleCandidates(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.lang.Class,java.util.Collection)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.springframework.boot.web.servlet.ServletContextInitializerBeans: javax.servlet.MultipartConfigElement getMultipartConfig(org.springframework.beans.factory.ListableBeanFactory)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>-><sun.security.util.Debug: void println(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.metrics.NoOpMeterRegistryConfiguration: void <init>()>
<org.hibernate.validator.internal.engine.valueextraction.IntArrayValueExtractor: void <clinit>()>-><org.hibernate.validator.internal.engine.valueextraction.IntArrayValueExtractor: void <init>()>
<org.apache.logging.log4j.message.MessageFormatMessage: void <init>(java.util.Locale,java.lang.String,java.lang.Object[])>-><java.lang.Object: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader: void <init>(springfox.documentation.schema.TypeNameExtractor,com.fasterxml.classmate.TypeResolver,springfox.documentation.spi.schema.EnumTypeDeterminer)>-><synthetic.method.SingletonFactory: springfox.documentation.schema.TypeNameExtractor getTypeNameExtractor()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.net.IDN: java.lang.StringBuffer toASCIILower(java.lang.StringBuffer)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.springframework.security.web.util.matcher.MediaTypeRequestMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.web.cors.CorsConfiguration: void <clinit>()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: int hashCode()>
<org.springframework.boot.cloud.CloudPlatform: void <clinit>()>-><org.springframework.boot.cloud.CloudPlatform$1: void <init>(java.lang.String,int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: void clear()>-><org.springframework.util.CollectionUtils$MultiValueMapAdapter: void clear()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<org.apache.catalina.LifecycleException: void <init>(java.lang.String,java.lang.Throwable)>-><java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer: boolean isCloudFoundryHealthEndpointExtension(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.apache.xmlbeans.StringEnumAbstractBase: int hashCode()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Introspector: void testComplianceMBeanInterface(java.lang.Class)>-><com.sun.jmx.mbeanserver.StandardMBeanIntrospector: com.sun.jmx.mbeanserver.MBeanAnalyzer getAnalyzer(java.lang.Class)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration: void <init>()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void unregistering(com.sun.jmx.mbeanserver.Repository$RegistrationContext,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$2: void unregistered()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.Set getClassLevelConstraints(java.lang.Class)>-><java.util.Collections: java.util.Set emptySet()>
<org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable: void <init>(org.hibernate.validator.internal.metadata.raw.ConfigurationSource,java.lang.reflect.Executable,java.util.List,java.util.Set,java.util.Set,java.util.Set,org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder)>-><java.util.HashSet: boolean isEmpty()>
<com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer: boolean parseField(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.Map,int[])>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: java.util.List findClassLevelConstraints(java.lang.Class)>-><java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<org.apache.catalina.core.AprLifecycleListener: void initializeSSL()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><java.util.SimpleTimeZone: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.awt.Color: int hashCode()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.boot.web.servlet.server.ServletWebServerFactory getWebServerFactory()>-><org.springframework.context.ApplicationContextException: void <init>(java.lang.String)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>-><org.aspectj.bridge.AbortException: void printStackTrace()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$WebEndpointServletConfiguration: void <init>()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$3: void <init>(com.sun.jmx.interceptor.DefaultMBeanServerInterceptor)>-><java.lang.Object: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.bouncycastle.asn1.ASN1BitString: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.BindingAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree: java.lang.String toString()>
<org.hibernate.validator.internal.util.TypeHelper: boolean isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>-><com.fasterxml.classmate.types.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.ResourceBundle$CacheKey: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<org.springframework.http.MediaType: int lambda$static$0(org.springframework.http.MediaType,org.springframework.http.MediaType)>-><org.springframework.util.MimeType: boolean isWildcardType()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.InjectionPoint: java.lang.annotation.Annotation[] getAnnotations()>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.aggregated.CascadingMetaDataBuilder findCascadingMetaData(java.lang.reflect.Executable,java.lang.reflect.Parameter[],int,java.lang.reflect.AnnotatedType)>-><java.lang.reflect.Parameter: java.lang.Class getType()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Long castToLong(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath: void deepScan(java.lang.Object,java.lang.String,java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.MBeanInfo: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Option: void <clinit>()>-><org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Option: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AndRequestMatcher: java.lang.String toString()>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor getUniqueValueExtractorOrThrowException(java.lang.Class,java.util.Set)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<net.logstash.logback.composite.JsonWritingUtils: void writeMapEntries(com.fasterxml.jackson.core.JsonGenerator,java.util.Map)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.Year: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><javax.el.ExpressionFactory$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)>
<com.fasterxml.classmate.util.ResolvedTypeCache: com.fasterxml.classmate.util.ResolvedTypeCache lruCache(int)>-><com.fasterxml.classmate.util.LRUTypeCache: void <init>(int)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl$ExecutableParameterKey: boolean equals(java.lang.Object)>
<org.springframework.security.config.annotation.SecurityConfigurerAdapter: java.lang.Object postProcess(java.lang.Object)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><java.text.ChoiceFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.aspectj.weaver.MemberImpl: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.util.GenericSignature$SimpleClassTypeSignature: java.lang.String toString()>
<org.apache.catalina.util.LifecycleMBeanBase: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>-><javax.management.ObjectName: java.lang.String getDomain()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><io.netty.channel.nio.SelectedSelectionKeySet$1: java.lang.Object next()>
<org.springframework.security.config.annotation.web.configurers.CsrfConfigurer: org.springframework.security.web.access.AccessDeniedHandler createAccessDeniedHandler(org.springframework.security.config.annotation.web.HttpSecurityBuilder)>-><java.util.LinkedHashMap: void <init>()>
<org.hibernate.validator.internal.metadata.core.MetaConstraints: java.lang.reflect.TypeVariable getContainerClassTypeParameter(java.lang.Class,org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver: void <clinit>()>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: boolean equals(java.lang.Object)>
<com.baomidou.dynamic.datasource.spring.boot.autoconfigure.hikari.HikariCpConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: java.util.Set getMaximallySpecificValueExtractors(java.util.Set)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><ch.qos.logback.core.subst.Token: int hashCode()>
<org.aspectj.bridge.IMessage: void <clinit>()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.springframework.context.annotation.ConditionEvaluator: boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ArrayElement: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.validation.FieldError: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CollectionMapping: java.lang.Object toNonNullOpenValue(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.util.LifecycleBase: void destroy()>-><org.apache.catalina.valves.ValveBase: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><javax.management.ObjectName: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.apache.poi.ss.format.CellFormatPart: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><java.time.Clock$SystemClock: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>-><java.util.BitSet: void set(int)>
<org.springframework.aop.framework.CglibAopProxy: org.springframework.cglib.proxy.Callback[] getCallbacks(java.lang.Class)>-><org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: boolean isStatic()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><java.net.InetSocketAddress: int hashCode()>
<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><javax.management.modelmbean.DescriptorSupport: boolean equals(java.lang.Object)>
<java.net.IDN: java.lang.String toASCIIInternal(java.lang.String,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.aspectj.weaver.patterns.ExactTypePattern: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.sun.jmx.mbeanserver.WeakIdentityHashMap: void expunge()>-><java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.lang.String: java.lang.String intern()>
<org.springframework.security.oauth2.provider.endpoint.TokenKeyEndpoint: void <init>(org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter)>-><org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter: void <init>()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.reflect.Proxy$KeyX: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor$Key: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.io.FilePermission: int hashCode()>
<org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor: java.lang.Object postProcess(java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Repository: void remove(javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
<com.sun.jmx.mbeanserver.Repository$ObjectNamePattern: void <init>(boolean,boolean,java.lang.String,java.util.Map,javax.management.ObjectName)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.aspectj.weaver.patterns.EllipsisTypePattern: int hashCode()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce: java.security.SecureRandom getSecureRandom()>-><java.security.KeyManagementException: void <init>(java.lang.String)>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$TabularMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.util.Vector: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.TypeHelper: java.lang.reflect.Type getErasedType(java.lang.reflect.Type)>-><org.hibernate.validator.internal.engine.valueextraction.AnnotatedObject: java.lang.reflect.Type[] getBounds()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><java.time.zone.ZoneOffsetTransition: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.aspectj.weaver.patterns.AnyTypePattern: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$ArrayMapping: java.lang.Object fromNonNullOpenValue(java.lang.Object)>-><java.lang.Class: boolean isArray()>
<sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: java.lang.annotation.Annotation[] getAnnotations()>-><sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: com.sun.jmx.interceptor.DefaultMBeanServerInterceptor$ResourceContext registerWithRepository(java.lang.Object,javax.management.DynamicMBean,javax.management.ObjectName)>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void sendNotification(java.lang.String,javax.management.ObjectName)>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$expandQueryParams$5(org.springframework.web.util.UriComponents$UriTemplateVariables,org.springframework.util.MultiValueMap,java.lang.String,java.util.List)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern: boolean equals(java.lang.Object)>
<com.p6spy.engine.spy.option.SystemProperties: java.util.Map getOptions()>-><org.aspectj.weaver.patterns.ExactAnnotationTypePattern: java.lang.String toString()>
<org.springframework.context.support.StaticApplicationContext: void <init>(org.springframework.context.ApplicationContext)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>-><java.lang.Object: void <init>()>
<com.sun.jmx.mbeanserver.Repository: void addMBean(javax.management.DynamicMBean,javax.management.ObjectName,com.sun.jmx.mbeanserver.Repository$RegistrationContext)>-><org.springframework.http.HttpHeaders: java.lang.Object get(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<org.springframework.core.ResolvableType: org.springframework.core.ResolvableType resolveVariable(java.lang.reflect.TypeVariable)>-><org.hibernate.validator.internal.util.TypeHelper$2: java.lang.reflect.Type getOwnerType()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><java.lang.StackTraceElement: int hashCode()>
<org.apache.tomcat.util.modeler.ManagedBean: void <init>()>-><org.apache.tomcat.util.modeler.FeatureInfo: void setDescription(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.bouncycastle.asn1.DERNumericString: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$copyProperties$1(java.util.Properties,java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: java.lang.String toString()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: int hashOf(java.lang.Object)>-><org.springframework.beans.MutablePropertyValues: int hashCode()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.security.Provider: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><com.google.common.base.Predicates$ObjectPredicate$1: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents: void lambda$getQuery$0(java.lang.StringBuilder,java.lang.String,java.util.List)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: java.lang.Object lazyBean(java.lang.Class)>-><org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$1: java.lang.Object postProcess(java.lang.Object)>
<com.zaxxer.hikari.util.PropertyElf: void setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.beans.propertyeditors.CustomMapEditor: void setValue(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: int size()>
<org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource: java.util.LinkedHashMap processMap(java.util.LinkedHashMap,org.springframework.expression.ExpressionParser)>-><java.util.TreeMap$Values: int size()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings$Mapping: void <init>(java.lang.String,java.lang.String)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: void <clinit>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.sun.jmx.mbeanserver.Repository: void addAllMatching(java.util.Map,java.util.Set,com.sun.jmx.mbeanserver.Repository$ObjectNamePattern)>-><com.google.common.collect.ImmutableMapValues: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap$Segment: boolean keyEq(java.lang.Object,java.lang.Object)>-><org.apache.poi.openxml4j.opc.PackagePartName: boolean equals(java.lang.Object)>
<org.hibernate.validator.internal.util.TypeHelper: boolean isClassAssignable(java.lang.Class,java.lang.Class)>-><com.p6spy.engine.common.CustomHashedHashSet: boolean contains(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><com.fasterxml.classmate.util.ResolvedTypeKey: java.lang.String toString()>
<com.zaxxer.hikari.util.PropertyElf: void lambda$setTargetFromProperties$0(java.lang.Object,java.util.List,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<reactor.core.scheduler.Schedulers: void defaultUncaughtException(java.lang.Thread,java.lang.Throwable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider: org.hibernate.validator.internal.metadata.raw.ConstrainedExecutable findExecutableMetaData(java.lang.reflect.Executable)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.aspectj.weaver.patterns.WildTypePattern: java.lang.String toString()>
<java.net.IDN: void <clinit>()>-><java.util.zip.ZipFile$ZipFileInputStream: void close()>
