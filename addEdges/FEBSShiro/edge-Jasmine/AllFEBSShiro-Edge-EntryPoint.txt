<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.sql.SQLException$1: java.lang.Throwable next()>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<sun.net.www.MeteredStream: int available()>-><java.io.ByteArrayInputStream: int available()>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.LinkedList: java.lang.Object[] toArray()>
<org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: boolean authQop()>
<org.springframework.util.LinkedCaseInsensitiveMap: void clear()>-><java.util.LinkedHashMap: void clear()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<java.net.SocksSocketImpl: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: int getPort()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(char[])>
<java.io.BufferedOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<java.io.FilterInputStream: void reset()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void reset()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.util.AbstractCollection: void clear()>-><freemarker.ext.beans.CollectionAdapter$1: void remove()>
<sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<net.sf.ehcache.util.LargeCollection: java.util.Iterator iterator()>-><java.util.ArrayList: void <init>()>
<java.io.DataOutputStream: void write(byte[],int,int)>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<com.fasterxml.classmate.TypeBindings: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.TypeBindings: int size()>
<net.sf.ehcache.transaction.local.LocalTransactionStore: boolean replace(net.sf.ehcache.Element,net.sf.ehcache.Element,net.sf.ehcache.store.ElementValueComparator)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean hasLockedAnything()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><java.io.InputStream: void close()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.util.zip.CheckedOutputStream: void write(byte[],int,int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<java.util.ArrayList: void <init>(java.util.Collection)>-><net.sf.ehcache.store.chm.SelectableConcurrentHashMap$KeySet: java.lang.Object[] toArray()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.net.Socket: java.io.OutputStream getOutputStream()>
<java.util.IdentityHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><net.sf.ehcache.store.CacheStore: net.sf.ehcache.Element getQuiet(java.lang.Object)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: void setDateHeader(java.lang.String,long)>-><org.apache.catalina.connector.Response: void setHeader(java.lang.String,java.lang.String)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.security.Permission: java.lang.String toString()>-><java.net.URLPermission: java.lang.String getActions()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<sun.net.www.http.HttpClient: void openServer()>-><java.net.URL: java.lang.String getProtocol()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.Operators$EmptySubscription: boolean isEmpty()>
<sun.net.www.MeteredStream: int available()>-><java.util.zip.InflaterInputStream: int available()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<freemarker.template.DefaultNonListCollectionAdapter: int size()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeObject(java.lang.Object)>-><com.fasterxml.jackson.databind.ObjectReader: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>
<java.util.Collections$SetFromMap: java.util.Spliterator spliterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Spliterator spliterator()>
<java.util.concurrent.ConcurrentHashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.common.entity.MenuTree: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<org.springframework.core.style.DefaultToStringStyler: void styleField(java.lang.StringBuilder,java.lang.String,java.lang.Object)>-><org.springframework.core.style.DefaultToStringStyler: void styleValue(java.lang.StringBuilder,java.lang.Object)>
<org.apache.catalina.connector.Response: boolean checkSpecialHeader(java.lang.String,java.lang.String)>-><org.apache.catalina.connector.Response: void setContentType(java.lang.String)>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onComplete()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Hashtable$Enumerator: void remove()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.FluxIterable$IterableSubscription: int size()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.InputStream: void mark(int)>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>-><java.net.URL: java.lang.String toExternalForm()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<net.sf.ehcache.transaction.local.LocalTransactionStore: net.sf.ehcache.Element removeElement(net.sf.ehcache.Element,net.sf.ehcache.store.ElementValueComparator)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: net.sf.ehcache.transaction.TransactionID getTransactionId()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<java.util.TimSort: void mergeHi(int,int,int,int)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.HashMap: void <init>()>
<cc.mrbird.febs.system.controller.ViewController: java.lang.String index(org.springframework.ui.Model)>-><cc.mrbird.febs.system.entity.User: java.lang.String getUsername()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.nodes.MappingNode: java.lang.String toString()>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>-><org.apache.shiro.web.session.mgt.WebSessionKey: javax.servlet.ServletRequest getServletRequest()>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean supportsPreemptiveAuthorization()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void removeSessionIdCookie(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.lang.Object[] toArray()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: void <init>(java.lang.String)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: int size()>
<java.io.FilterInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.LinkedList$ListItr: void add(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>
<org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.http.HttpClient: void openServer()>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.TreeMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.springframework.boot.context.properties.source.IterableConfigurationPropertySource: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String,java.lang.Object[])>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.MeteredStream: void close()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.awt.util.IdentityLinkedList: boolean add(java.lang.Object)>-><sun.awt.util.IdentityLinkedList: sun.awt.util.IdentityLinkedList$Entry addBefore(java.lang.Object,sun.awt.util.IdentityLinkedList$Entry)>
<java.io.ObjectInputStream$PeekInputStream: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: void fastPath()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedTable: com.google.common.collect.Table delegate()>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object delegate()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.String toString()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: java.util.List getSoftLocksForCache(java.lang.String)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getAuth(java.lang.String,java.net.URL)>-><java.net.URL: java.lang.String getPath()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<sun.net.www.http.HttpClient: void openServer()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.util.Calendar: java.util.Date getTime()>
<springfox.documentation.service.Response: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.AbstractPlainSocketImpl: void close()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.beans.factory.support.AutowireUtils: java.lang.Class resolveReturnTypeForFactoryMethod(java.lang.reflect.Method,java.lang.Object[],java.lang.ClassLoader)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: char getSeparator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><redis.clients.jedis.BuilderFactory$4: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.util.StringTokenizer: java.lang.String nextToken()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL,java.lang.String,int)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.jar.Attributes: int size()>
<org.apache.tomcat.util.http.ConcurrentDateFormat: java.text.SimpleDateFormat createInstance()>-><java.text.DateFormat: void setTimeZone(java.util.TimeZone)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>-><java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.apache.commons.collections.FastHashMap: int size()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.owasp.encoder.Encode: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String)>-><org.owasp.encoder.XMLEncoder: int firstEncodedOffset(java.lang.String,int,int)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.String toString()>
<freemarker.ext.beans._BeansAPI: void removeClearedReferencesFromCache(java.util.Map,java.lang.ref.ReferenceQueue)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedList: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>-><java.net.AbstractPlainSocketImpl: void setOption(int,java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: int transfer(byte[],int,int,java.nio.ByteBuffer)>-><org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.Element: java.lang.String toString()>
<net.sf.ehcache.store.disk.DiskStore: net.sf.ehcache.Element removeElement(net.sf.ehcache.Element,net.sf.ehcache.store.ElementValueComparator)>-><java.lang.String: int hashCode()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.InputStream getInputStream()>-><java.io.ByteArrayInputStream: void <init>(byte[])>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><redis.clients.jedis.Response: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$12: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String,int,java.net.URL)>-><java.lang.Object: void <init>()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><java.net.SocketInputStream: void close()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$EntrySet: int size()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.HashMap: int hash(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.FilterOutputStream: void flush()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><java.nio.CharBuffer: java.lang.String toString()>
<redis.clients.jedis.JedisPool: void <init>(org.apache.commons.pool2.impl.GenericObjectPoolConfig,java.lang.String,int,int,java.lang.String,int)>-><redis.clients.jedis.JedisPool: void <init>(org.apache.commons.pool2.impl.GenericObjectPoolConfig,java.lang.String,int,int,java.lang.String,int,java.lang.String)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: void close()>
<freemarker.template.IteratorToTemplateModelIteratorAdapter: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket()>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<ch.qos.logback.classic.LoggerContext: void addTurboFilter(ch.qos.logback.classic.turbo.TurboFilter)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.DataInputStream: int read(byte[],int,int)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletRequest getServletRequest()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.UnmodifiableIterator: void remove()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.PosterOutputStream: void write(int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><org.jsoup.helper.ChangeNotifyingArrayList: boolean addAll(java.util.Collection)>
<java.io.ObjectInputStream$PeekInputStream: int peek()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><sun.net.ApplicationProxy: sun.net.ApplicationProxy create(java.net.Proxy)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void <init>()>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>
<java.io.BufferedInputStream: void fill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<redis.clients.jedis.JedisSentinelPool: void destroy()>-><redis.clients.jedis.util.Pool: void destroy()>
<sun.misc.URLClassPath: void check(java.net.URL)>-><java.security.Permission: java.lang.String getName()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<io.netty.util.concurrent.SingleThreadEventExecutor: int drainTasks()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object poll()>
<org.crazycake.shiro.serializer.StringSerializer: byte[] serialize(java.lang.String)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.StringBuilder: void <init>(int)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><java.util.HashSet: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SynchronizedMap: java.util.Set entrySet()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: java.lang.Object[] toArray()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><java.nio.Buffer: int limit()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><springfox.documentation.service.Response: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1: java.util.Iterator iterator()>
<java.util.EnumMap: int entryHashCode(int)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.poi.xssf.usermodel.XSSFFont: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.apache.commons.pool2.impl.DefaultPooledObject: int compareTo(java.lang.Object)>
<org.owasp.encoder.Encoder: java.nio.charset.CoderResult overflow(java.nio.CharBuffer,int,java.nio.CharBuffer,int)>-><java.nio.Buffer: java.nio.Buffer position(int)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<sun.rmi.transport.proxy.HttpSendInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<cc.mrbird.febs.system.controller.UserController: cc.mrbird.febs.common.entity.FebsResponse updatePassword(java.lang.String,java.lang.String)>-><cc.mrbird.febs.system.entity.User: java.lang.String getUsername()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>-><java.net.Proxy: java.net.Proxy$Type type()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<net.sf.ehcache.store.MemoryStore: java.util.List getKeys()>-><net.sf.ehcache.store.chm.SelectableConcurrentHashMap: java.util.Set keySet()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.io.FilterOutputStream: void close()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.LinkedHashMap$LinkedValues: void clear()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.Integer: java.lang.String toHexString(int)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: void setCacheRequest(java.net.CacheRequest)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>-><java.util.NoSuchElementException: void <init>(java.lang.String)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletResponse getHttpResponse(java.lang.Object)>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object poll()>-><org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler: void accept(java.lang.Object,java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<freemarker.template.SimpleCollection: freemarker.template.TemplateModelIterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<java.net.URLPermission: void init(java.lang.String)>-><java.util.Collections: void sort(java.util.List)>
<sun.net.www.MeteredStream: int read()>-><java.util.zip.InflaterInputStream: int read()>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.MeteredStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<org.springframework.core.annotation.TypeMappedAnnotations$AggregatesSpliterator: boolean tryAdvance(org.springframework.core.annotation.TypeMappedAnnotations$Aggregate,java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void openServer()>
<sun.net.www.protocol.http.NegotiateAuthentication: void <init>(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<java.io.BufferedOutputStream: void flushBuffer()>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.net.httpserver.SSLStreams$OutputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.io.DataInputStream: int read(byte[],int,int)>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.net.Socket: void setTcpNoDelay(boolean)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooHigh(java.lang.Object,java.util.Comparator)>-><java.util.concurrent.ConcurrentSkipListMap: int cpr(java.util.Comparator,java.lang.Object,java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><io.netty.util.AbstractConstant: int compareTo(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.core.Environment$LazilyInitializedNamespace: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.AbstractMap$1: void clear()>
<java.util.concurrent.ConcurrentSkipListMap: int cpr(java.util.Comparator,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><springfox.documentation.service.Representation: java.lang.String toString()>
<freemarker.template.DefaultNonListCollectionAdapter: freemarker.template.TemplateModelIterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<org.springframework.core.style.DefaultToStringStyler: void styleIdentityHashCode(java.lang.StringBuilder,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.AbstractMap$2: boolean isEmpty()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.LinkedList: java.lang.Object get(int)>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><springfox.documentation.service.Response: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.jar.Manifest$FastInputStream: void fill()>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray()>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: int limit()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void add(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$KeySet: int size()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: int size()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.Vector: java.lang.Object elementAt(int)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.nio.charset.CoderResult: boolean isOverflow()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: void remove(java.lang.String)>
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getDescription(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRemoteUser()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.type.ArrayType: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.type.TypeBindings,java.lang.Object,java.lang.Object,java.lang.Object,boolean)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><org.springframework.beans.factory.support.ManagedList: void <init>()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: java.util.Iterator iterator()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.KeepAliveStream: long remainingToRead()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: boolean isEmpty()>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><java.sql.SQLException: java.util.Iterator iterator()>
<sun.net.www.MessageHeader: java.lang.String getHeaderNamesInList()>-><java.util.StringJoiner: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void enableSessionValidation()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: void <init>(org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.io.SequenceInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object)>-><org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object,org.springframework.core.style.ToStringStyler)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.crazycake.shiro.common.WorkAloneRedisManager: byte[] get(byte[])>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.Clock$SystemClock: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><com.p6spy.engine.common.CustomHashedHashSet: void clear()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Hashtable: java.util.Set keySet()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$5: java.lang.String run()>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Collections$SynchronizedCollection: void clear()>
<sun.util.locale.provider.LocaleProviderAdapter: boolean isSupportedLocale(java.util.Locale,sun.util.locale.provider.LocaleProviderAdapter$Type,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$EntrySet: int size()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>
<sun.net.www.protocol.http.HttpURLConnection$11: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$11: java.net.InetAddress run()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: int getMaxConnections()>-><sun.security.action.GetIntegerAction: void <init>(java.lang.String,int)>
<java.io.DataOutputStream: void writeBytes(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>
<org.apache.catalina.connector.Response: void addDateHeader(java.lang.String,long)>-><java.lang.String: int length()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: java.lang.String toString()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String toCookieDate(java.util.Date)>-><java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.net.HttpConnectSocketImpl$2: java.net.Socket run()>-><java.net.HttpConnectSocketImpl: java.net.Socket access$200(java.net.HttpConnectSocketImpl,java.lang.String,int)>
<java.io.FilterInputStream: void mark(int)>-><sun.net.www.MeteredStream: void mark(int)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$1: boolean hasNext()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.String: int length()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1: java.util.Iterator iterator()>
<reactor.core.publisher.Operators$MultiSubscriptionSubscriber: void drainLoop()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void cancel()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.event.RegisteredEventListeners$ListenerWrapper: java.lang.String toString()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.EnumMap$EntryIterator: void remove()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><redis.clients.jedis.Response: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: org.apache.shiro.session.Session storeSession(java.io.Serializable,org.apache.shiro.session.Session)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL,java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.lang.Object: void wait()>
<java.util.HashMap: int hash(java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.EnumMap$1: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.MessageHeader: void reset()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.httpserver.SSLStreams$OutputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.lang.Object[] toArray()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractCollection: boolean isEmpty()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>-><com.fasterxml.jackson.databind.cfg.MapperConfigBase: java.lang.Class findMixInClassFor(java.lang.Class)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.ObjectInputStream: int read(byte[],int,int)>
<java.net.HttpConnectSocketImpl$1: java.lang.Void run()>-><java.net.HttpConnectSocketImpl: java.lang.reflect.Field access$100()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveCache$1: void <init>(sun.net.www.http.KeepAliveCache,sun.net.www.http.KeepAliveCache)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<java.util.Formatter$FixedString: void print(java.lang.Object,java.util.Locale)>-><java.nio.CharBuffer: java.lang.Appendable append(java.lang.CharSequence)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Character: java.lang.String toString()>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.lang.Object[] toArray()>
<java.net.Proxy: java.lang.String toString()>-><java.net.Proxy: java.net.Proxy$Type type()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeSet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Character$Subset: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.ProgressSource: void finishTracking()>
<sun.net.www.http.KeepAliveCache: int getMaxConnections()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: int size()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.search.Attribute: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><springfox.documentation.service.Response: java.lang.String toString()>
<net.sf.ehcache.util.LargeCollection: java.util.Iterator additionalIterator()>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<redis.clients.jedis.ScanParams: redis.clients.jedis.ScanParams count(java.lang.Integer)>-><java.lang.Integer: int intValue()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.FastHttpDateFormat: java.lang.String formatDate(long)>-><java.util.Date: void <init>(long)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.lang.String: int hashCode()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.Vector: boolean isEmpty()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.xml.namespace.QName: java.lang.String toString()>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><java.net.SocketInputStream: void close()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<net.sf.ehcache.store.disk.DiskStore$KeySet: java.lang.Object[] toArray()>-><net.sf.ehcache.store.disk.DiskStore$HashIterator: boolean hasNext()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: long getSessionValidationInterval()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: boolean isEmpty()>
<reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: void fastPath()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.lang.ProcessEnvironment$StringValues$1: void remove()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.lang.Object[] toArray()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.nio.CharBuffer: char[] array()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendSameSite(java.lang.StringBuilder,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.apache.catalina.connector.Response: void setHeader(java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1: int size()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.util.EnumMap: java.lang.Object remove(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.Collections$SynchronizedCollection: void clear()>
<sun.net.www.http.HttpClient: void logFinest(java.lang.String)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$ListItr: void add(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptyList: int size()>
<sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void ascend()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooHigh(java.lang.Object,java.util.Comparator)>
<org.owasp.encoder.CSSEncoder: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.shiro.util.UnknownClassException: void <init>(java.lang.String)>-><org.apache.shiro.ShiroException: void <init>(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.www.http.HttpClient: void setIgnoreContinue(boolean)>
<sun.net.www.HeaderParser: int findInt(java.lang.String,int)>-><java.lang.String: java.lang.String valueOf(int)>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$CHMView: java.lang.Object[] toArray()>
<sun.security.ssl.Krb5Helper: java.lang.String getPrincipalHostName(java.security.Principal)>-><sun.security.ssl.Krb5Helper: void ensureAvailable()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.lang.Double: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.FilterInputStream: int available()>
<com.fasterxml.classmate.ResolvedType: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String getBriefDescription()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.SubList: int access$208(java.util.SubList)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.Parsed: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: int getDefaultPort()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.io.BufferedOutputStream: void flushBuffer()>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.springframework.core.style.DefaultToStringStyler: void styleEnd(java.lang.StringBuilder,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<net.sf.ehcache.pool.sizeof.ObjectGraphWalker: long walk(int,boolean,java.lang.Object[])>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.util.concurrent.ThreadPoolExecutor$Worker: void <init>(java.util.concurrent.ThreadPoolExecutor,java.lang.Runnable)>-><javax.swing.SwingWorker$6: java.lang.Thread newThread(java.lang.Runnable)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getNonce()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedList: boolean isMergeEnabled()>
<java.io.ObjectInputStream$PeekInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.jsoup.safety.Whitelist$TypedValue: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void setConnectTimeout(int)>-><sun.net.www.protocol.http.HttpURLConnection: void setConnectTimeout(int)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger access$000()>
<sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.net.URL)>-><sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.lang.System: long currentTimeMillis()>
<sun.net.www.http.HttpCaptureInputStream: int read(byte[])>-><java.io.FilterInputStream: int read(byte[])>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><org.apache.poi.xssf.streaming.SXSSFRow$FilledCellIterator: boolean hasNext()>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.lang.String: char charAt(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.util.function.Tuple2: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: long timeBeforeTimeout()>-><java.util.concurrent.TimeUnit$3: long convert(long,java.util.concurrent.TimeUnit)>
<sun.net.www.MeteredStream: int available()>-><java.io.SequenceInputStream: int available()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.lang.ThreadLocal: java.lang.Object get()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.jsoup.nodes.Node: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Collections$SynchronizedCollection: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Vector: boolean isEmpty()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void afterSessionValidationEnabled()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><javax.management.openmbean.TabularDataSupport: java.util.Set keySet()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.util.Iterator iterator()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: java.net.CookieHandler getCookieHandler()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.apache.catalina.connector.CoyoteOutputStream: void close()>-><org.apache.catalina.connector.OutputBuffer: void close()>
<redis.clients.jedis.ScanParams: java.util.Collection getParams()>-><java.util.ArrayList: void <init>(int)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getSessionId(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getReferencedSessionId(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<sun.net.www.protocol.http.HttpURLConnection$5: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$5: java.lang.String run()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.String: java.lang.String valueOf(int)>
<javax.security.auth.Subject$SecureSet: void clear()>-><javax.security.auth.Subject$SecureSet$6: void <init>(javax.security.auth.Subject$SecureSet,java.util.Iterator)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: boolean isEmpty()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getReferencedSessionId(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><java.lang.String: java.lang.String toLowerCase()>
<redis.clients.jedis.JedisSentinelPool$MasterListener: void shutdown()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URL: int getPort()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<sun.net.www.http.HttpClient: void closeServer()>-><java.net.Socket: void close()>
<java.util.zip.InflaterInputStream: void fill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getKey()>
<sun.nio.cs.StreamDecoder: boolean inReady()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.Response: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<java.io.SequenceInputStream: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedCollection: int size()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.rmi.transport.tcp.MultiplexOutputStream: void write(int)>
<net.sf.ehcache.store.disk.DiskStore$KeySet: java.lang.Object[] toArray()>-><java.util.ArrayList: java.lang.Object[] toArray()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: java.lang.String getHost()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getPath()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.poi.xssf.streaming.SXSSFCell: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<freemarker.template.DefaultNonListCollectionAdapter: freemarker.template.TemplateModelIterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><sun.net.www.http.HttpCaptureOutputStream: void <init>(java.io.OutputStream,sun.net.www.http.HttpCapture)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Class getType(java.lang.String)>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<sun.net.ApplicationProxy: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.Proxy$Type type()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.util.jar.JarInputStream: int read(byte[],int,int)>
<redis.clients.jedis.BinaryClient: void scan(byte[],redis.clients.jedis.ScanParams)>-><java.util.ArrayList: int size()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.asm.Label: java.lang.String toString()>
<freemarker.ext.beans.IteratorModel: boolean hasNext()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.beans.FeatureDescriptor: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: int size()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<java.util.AbstractList: void removeRange(int,int)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<redis.clients.jedis.Transaction: java.lang.String discard()>-><redis.clients.jedis.Connection: java.util.List getMany(int)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: boolean isEmpty()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.HeaderParser: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$9: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$9: java.io.InputStream run()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxIterable$IterableSubscription: void slowPath(long)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.net.HttpConnectSocketImpl: int getPort()>-><java.net.InetSocketAddress: int getPort()>
<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date getCalendarDate()>-><sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date getCalendarDate(long,sun.util.calendar.CalendarDate)>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><sun.net.www.MeteredStream: void close()>
<java.util.ArrayList$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.util.HashMap: void putAll(java.util.Map)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.util.TreeMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date getCalendarDate()>-><sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date newCalendarDate()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.SubList: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<net.sf.ehcache.transaction.local.LocalTransactionStore: java.util.List getKeys()>-><net.sf.ehcache.util.SetAsList: void <init>(java.util.Set)>
<org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.HashMap access$400(org.springframework.util.LinkedCaseInsensitiveMap)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.List sortErrorViewResolvers(java.util.List)>-><org.springframework.core.annotation.AnnotationAwareOrderComparator: void sortIfNecessary(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractList$Itr: boolean hasNext()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getExpected()>
<sun.net.www.http.HttpClient$1: java.lang.Void run()>-><java.net.InetSocketAddress: java.lang.String getHostString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<java.text.AttributeEntry: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serializeContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.net.URI: java.lang.String getPath()>
<sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>-><java.net.Proxy: java.net.Proxy$Type type()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><java.lang.String: int length()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber: int size()>
<sun.net.ProgressMonitor: boolean shouldMeterInput(java.net.URL,java.lang.String)>-><sun.net.DefaultProgressMeteringPolicy: boolean shouldMeterInput(java.net.URL,java.lang.String)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><springfox.documentation.service.Representation: int hashCode()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><springfox.documentation.service.Response: int hashCode()>
<sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>-><java.lang.Integer: java.lang.String toHexString(int)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: java.util.Iterator iterator()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><springfox.documentation.service.Response: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<freemarker.ext.beans.BeanModel: boolean isEmpty()>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.Arrays$ArrayList: int size()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.io.StringReader: void mark(int)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.HashSet: boolean contains(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: int length()>
<org.crazycake.shiro.common.WorkAloneRedisManager: byte[] set(byte[],byte[],int)>-><redis.clients.jedis.Jedis: void close()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<java.util.SubList: void removeRange(int,int)>-><java.util.Vector: void removeRange(int,int)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><redis.clients.jedis.Response: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: java.lang.String findKey(int)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.Year: int compareTo(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.PrintStream: void write(byte[],int,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.commons.pool2.BaseObject: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int,int)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><java.lang.System: long currentTimeMillis()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<java.io.FilterOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.convert.CustomConversions$StoreConversions: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<sun.security.util.HostnameChecker: boolean match(java.lang.String,java.security.Principal)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<sun.net.www.HeaderParser: void <init>(java.lang.String)>-><sun.net.www.HeaderParser: void parse()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getAuth(java.lang.String,java.net.URL)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.apache.catalina.connector.ResponseFacade: boolean isCommitted()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: int size()>
<sun.net.www.protocol.http.HttpURLConnection$3: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.reflect.Method: java.lang.String getName()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.HashMap: int hash(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: reactor.util.context.Context currentContext()>-><reactor.core.publisher.InnerOperator: reactor.util.context.Context currentContext()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<freemarker.template.DefaultNonListCollectionAdapter: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<freemarker.template.MapKeyValuePairIterator: freemarker.template.TemplateHashModelEx2$KeyValuePair next()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: int size()>
<redis.clients.jedis.Transaction: java.lang.String discard()>-><redis.clients.jedis.BinaryClient: void discard()>
<redis.clients.jedis.ScanParams: java.util.Collection getParams()>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<redis.clients.jedis.Pipeline: void sync()>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.lang.String,java.lang.String)>
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>-><javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<sun.net.www.http.ChunkedOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void ensureOpen()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.nio.ch.IOUtil: int read(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>-><java.nio.HeapByteBufferR: java.nio.ByteBuffer put(java.nio.ByteBuffer)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.net.URL: int getDefaultPort()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.lang.ProcessEnvironment$Value: int compareTo(java.lang.Object)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><reactor.core.Fuseable$QueueSubscription: java.lang.Object[] toArray()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.SocketImpl: int getLocalPort()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><org.springframework.util.ObjectUtils: java.lang.Object[] toObjectArray(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SingletonMap: java.util.Set entrySet()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><net.sf.ehcache.store.cachingtier.PooledBasedBackEnd: java.lang.Object get(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<redis.clients.jedis.JedisSentinelPool$MasterListener: void shutdown()>-><java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.net.Socket: void close()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><cc.mrbird.febs.common.entity.FebsResponse: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.zone.ZoneOffsetTransition: int compareTo(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: java.lang.Thread newThread(java.lang.Runnable)>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: java.lang.String access$000(org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Vector$Itr: boolean hasNext()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<ch.qos.logback.classic.LoggerContext: void fireOnReset()>-><io.micrometer.core.instrument.binder.logging.LogbackMetrics$1: void onReset(ch.qos.logback.classic.LoggerContext)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.template.SimpleNumber: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.lang.String: void <init>()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber: void clear()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.io.OutputStream: void write(byte[])>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: void <init>(byte[],int,int,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.AbstractList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.security.Provider$Service: boolean supportsKeyFormat(java.security.Key)>-><javax.crypto.spec.SecretKeySpec: java.lang.String getFormat()>
<reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><reactor.core.publisher.InnerProducer: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: boolean isEmpty()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getValue()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.terracotta.context.MutableTreeNode: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>
<java.io.PrintStream: void newLine()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>-><sun.net.www.protocol.http.HttpURLConnection$8: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<redis.clients.jedis.ScanParams: java.util.Collection getParams()>-><java.util.EnumMap: int size()>
<java.util.Collections$SetFromMap: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.Set keySet()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.io.PrintStream: boolean checkError()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><org.springframework.util.MultiValueMapAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.MessageHeader: void reset()>-><sun.net.www.MessageHeader: void grow()>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: void ensureOpen()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><java.io.InputStream: void close()>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.lang.String,java.lang.String)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$8: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<sun.net.www.MeteredStream: int read()>-><sun.net.httpserver.SSLStreams$InputStream: int read()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URLConnection: boolean getUseCaches()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.HeaderParser headerParser()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Socket: void checkAddress(java.net.InetAddress,java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><springfox.documentation.service.Response: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: int size()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.net.URL getURL()>
<net.sf.ehcache.util.LargeCollection: java.util.Iterator iterator()>-><net.sf.ehcache.util.LargeCollection: java.util.Iterator additionalIterator()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.poi.util.ReplacingInputStream: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$Values: java.util.Iterator iterator()>
<java.io.BufferedInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<redis.clients.jedis.Response: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><springfox.documentation.service.Response: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Vector: int size()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: void onDiscardMultiple(java.util.Collection,reactor.util.context.Context)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<redis.clients.jedis.Queable: redis.clients.jedis.Response generateResponse(java.lang.Object)>-><redis.clients.jedis.Response: void set(java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Date: long parse(java.lang.String)>-><java.lang.String: char charAt(int)>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.io.PrintStream: void flush()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<redis.clients.jedis.Jedis: void close()>-><redis.clients.jedis.JedisSentinelPool: void returnBrokenResource(redis.clients.jedis.Jedis)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.io.FilterInputStream: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.owasp.encoder.XMLEncoder: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.support.ManagedList: java.lang.Object merge(java.lang.Object)>-><org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.io.BufferedOutputStream: void write(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>-><sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>-><java.lang.Object: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader mapToMessageHeader(java.util.Map)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>-><sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.http.ChunkedInputStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.OffsetDateTime: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.HeaderParser headerParser()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String)>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><sun.security.action.GetPropertyAction: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
<org.slf4j.LoggerFactory: java.util.Set findPossibleStaticLoggerBinderPathSet()>-><java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void prepend(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: int getVersion()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.io.BufferedInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.Object: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.AbstractMap$2$1: boolean hasNext()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.apache.commons.collections.FastHashMap: java.util.Set entrySet()>
<com.fasterxml.classmate.ResolvedType: java.lang.StringBuilder _appendClassDescription(java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<redis.clients.jedis.ScanParams: java.util.Collection getParams()>-><java.nio.ByteBuffer: byte[] array()>
<redis.clients.jedis.util.RedisOutputStream: void flushBuffer()>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: int size()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: java.lang.StringBuilder _appendClassDescription(java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.EnumMap: int entryHashCode(int)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection: int access$600()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getLastAccessTime()>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><sun.net.www.MessageHeader: void <init>()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String reducePath(java.lang.String)>
<org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<java.io.DataInputStream: char readChar()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.io.DataInputStream: char readChar()>-><org.apache.poi.util.ReplacingInputStream: int read()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.AbstractList: java.util.ListIterator listIterator()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<java.util.LinkedHashMap$LinkedValues: void clear()>-><java.util.LinkedHashMap: void clear()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.io.FilterInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.jsoup.helper.ChangeNotifyingArrayList: void clear()>-><java.util.ArrayList: void clear()>
<org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>-><java.io.StringReader: void mark(int)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<redis.clients.jedis.BinaryJedis: redis.clients.jedis.ScanResult scan(byte[],redis.clients.jedis.ScanParams)>-><redis.clients.jedis.BinaryJedis: void checkIsInMultiOrPipeline()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.http.KeepAliveStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$Values: int size()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Vector$Itr: void remove()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.net.URL: int getDefaultPort()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Vector: java.util.Iterator iterator()>
<java.util.HashMap$KeySet: void clear()>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: void clear()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.io.BufferedOutputStream: void flushBuffer()>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.www.MessageHeader: void reset()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.util.Date: void <init>(long)>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void setDaemon(boolean)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.util.Iterator iterator()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.FileInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.net.URLPermission: void init(java.lang.String)>-><java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>
<redis.clients.jedis.Connection: java.util.List getMany(int)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<net.sf.ehcache.transaction.local.LocalTransactionStore: boolean replace(net.sf.ehcache.Element,net.sf.ehcache.Element,net.sf.ehcache.store.ElementValueComparator)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String toCookieDate(java.util.Date)>-><java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList: java.util.ListIterator listIterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.thymeleaf.exceptions.TemplateProcessingException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>-><org.thymeleaf.exceptions.TemplateEngineException: void <init>(java.lang.String,java.lang.Throwable)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Short: java.lang.String toString()>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><redis.clients.jedis.ScanResult: java.util.List getResult()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>
<sun.net.www.http.HttpClient: void finished()>-><java.io.PrintStream: boolean checkError()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.WeakHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>-><org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void setConnectTimeout(int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<reactor.core.publisher.Operators$MultiSubscriptionSubscriber: void drainLoop()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void request(long)>
<org.springframework.boot.convert.InputStreamSourceToByteArrayConverter: byte[] convert(org.springframework.core.io.InputStreamSource)>-><org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile: java.io.InputStream getInputStream()>
<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>-><java.util.concurrent.ConcurrentSkipListMap$Iter: void advance()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<java.time.format.DateTimePrintContext: java.time.temporal.TemporalAccessor adjust(java.time.temporal.TemporalAccessor,java.time.format.DateTimeFormatter)>-><java.time.ZoneOffset: java.time.zone.ZoneRules getRules()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: void slowPath(long)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.nio.cs.StreamDecoder: boolean inReady()>-><sun.net.www.http.ChunkedInputStream: int available()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: void setTunnelState(sun.net.www.protocol.http.HttpURLConnection$TunnelState)>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber: void clear()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.httpserver.ServerImpl$ServerTimerTask1: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.String: int length()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.URL: int getPort()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntrySet: int size()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: java.security.Permission getPermission()>-><java.net.HttpURLConnection: java.security.Permission getPermission()>
<org.apache.catalina.connector.OutputBuffer: void transfer(byte,java.nio.ByteBuffer)>-><org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: java.lang.Object[] toArray()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.data.redis.connection.jedis.JedisConnectionFactory: void destroy()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.net.SocketOutputStream: void write(int)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.FluxDoFinally$DoFinallyFuseableSubscriber: int size()>
<java.net.SocksSocketImpl: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.rmi.server.RemoteObject: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.AbstractMap$2: java.util.Iterator iterator()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.Vector: void forEach(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.FileInputStream: long skip(long)>
<org.apache.poi.util.ReplacingInputStream: int read()>-><org.apache.poi.util.ReplacingInputStream: int read()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.MethodParameter: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setAlgorithm(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<freemarker.template.DefaultNonListCollectionAdapter: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<java.io.ObjectInputStream: java.io.ObjectStreamClass readNonProxyDesc(boolean)>-><org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.apache.catalina.connector.Response: void setHeader(java.lang.String,java.lang.String)>-><org.apache.catalina.connector.Response: boolean isCommitted()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.lang.Object[] toArray()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: void forEach(java.util.function.Consumer)>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>-><java.lang.String: void <init>(char[],int,int)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: int size()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.quartz.SchedulerException: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: void finer(java.lang.String)>
<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.slf4j.helpers.SubstituteLogger: boolean isInfoEnabled()>
<java.io.ObjectInputStream$PeekInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<net.sf.ehcache.pool.sizeof.ObjectGraphWalker: long walk(int,boolean,java.lang.Object[])>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<sun.rmi.transport.proxy.HttpSendOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: void remove()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.HttpURLConnection: boolean getInstanceFollowRedirects()>
<java.util.Collections$SynchronizedCollection: void forEach(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: void forEach(java.util.function.Consumer)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.HashMap$KeySet: void clear()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void checkError()>-><java.io.PrintStream: boolean checkError()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.Handler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.https.Handler)>
<redis.clients.jedis.Pipeline: void sync()>-><redis.clients.jedis.Connection: java.util.List getMany(int)>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onExpiration(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void onChange(org.apache.shiro.session.Session)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><redis.clients.jedis.BuilderFactory$23: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: java.lang.Void run()>-><org.apache.catalina.connector.Response: void setContentType(java.lang.String)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: boolean isEmpty()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<java.util.ArrayList$SubList$1: void add(java.lang.Object)>-><java.util.ArrayList$SubList$1: void checkForComodification()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.apache.shiro.session.mgt.SimpleSession: boolean isExpired()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: void <init>()>-><sun.net.NetworkClient: void <init>()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.springframework.data.util.LazyStreamable: java.util.Iterator iterator()>
<java.io.DataInputStream: short readShort()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.apache.catalina.connector.CoyoteOutputStream: void checkRegisterForWrite()>-><org.apache.catalina.connector.OutputBuffer: void checkRegisterForWrite()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap access$100(java.util.concurrent.ConcurrentSkipListMap$SubMap)>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.String: int hashCode()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object poll()>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onComplete()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.poi.ss.format.CellNumberFormatter$Special: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void start()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<org.apache.catalina.connector.OutputBuffer: void appendByteArray(byte[],int,int)>-><org.apache.catalina.connector.OutputBuffer: void realWriteBytes(java.nio.ByteBuffer)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: boolean remove(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.LinkedHashMap$LinkedHashIterator: void remove()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.mgt.SimpleSession: long getTimeout()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.InetSocketAddress: void <init>(java.lang.String,int)>
<java.util.Base64$Encoder: byte[] encode(byte[])>-><java.util.Base64$Encoder: int encode0(byte[],int,int,byte[])>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.HashMap: java.util.Set entrySet()>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.NetworkClient: void setReadTimeout(int)>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><java.io.FileInputStream: void close()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveStream: java.lang.Thread access$000()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.EnumMap: java.util.Set keySet()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>
<reactor.core.publisher.FluxFlatMap$FlatMapMain: void drainLoop()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object poll()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.io.BufferedOutputStream: void write(byte[],int,int)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.http.ChunkedOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<freemarker.core.FMParser: freemarker.core.OutputFormatBlock OutputFormat()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setUseCaches(boolean)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<sun.rmi.server.LoaderHandler: void addPermissionsForURLs(java.net.URL[],java.security.PermissionCollection,boolean)>-><java.lang.String: java.lang.String substring(int,int)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<javax.net.ssl.HttpsURLConnection: void <init>(java.net.URL)>-><java.net.HttpURLConnection: void <init>(java.net.URL)>
<net.sf.ehcache.store.disk.DiskStore: net.sf.ehcache.Element fault(java.lang.Object,boolean)>-><java.lang.String: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.InputStream: void close()>
<sun.util.logging.PlatformLogger: void finest(java.lang.String)>-><sun.util.logging.PlatformLogger$JavaLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.Fuseable$QueueSubscription: java.util.Iterator iterator()>
<java.io.DataOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.MeteredStream: int available()>
<java.io.PrintStream: void write(java.lang.String)>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.thymeleaf.standard.expression.RestrictedRequestAccessUtils$RestrictedRequestWrapper: org.thymeleaf.exceptions.TemplateProcessingException createRestrictedParameterAccessException()>-><org.thymeleaf.exceptions.TemplateProcessingException: void <init>(java.lang.String)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onStop(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void onChange(org.apache.shiro.session.Session)>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.context.support.StaticMessageSource: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.io.DataOutputStream: void writeInt(int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<net.sf.ehcache.store.disk.DiskStore$KeySet: java.lang.Object[] toArray()>-><net.sf.ehcache.store.disk.DiskStore$KeySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void update(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.MemorySessionDAO: org.apache.shiro.session.Session storeSession(java.io.Serializable,org.apache.shiro.session.Session)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>-><java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.FileInputStream: int read(byte[],int,int)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.ObjectInputStream$BlockDataInputStream: long skip(long)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><freemarker.ext.beans.SequenceAdapter: int size()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.text.DateFormat: java.lang.String format(java.util.Date)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.util.zip.CheckedOutputStream: void write(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.rmi.server.LogStream: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><java.nio.CharBuffer: int hashCode()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.apache.commons.collections.FastHashMap$CollectionView: void clear()>-><java.util.HashMap$Values: void clear()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getContentType()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.core.style.DefaultToStringStyler: void styleValue(java.lang.StringBuilder,java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.SubList$1: boolean hasNext()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.String: char charAt(int)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.catalina.connector.Response: boolean isAppCommitted()>-><org.apache.catalina.connector.Response: int getContentLength()>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: int indexOf(int)>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>-><javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>
<java.net.SocksSocketImpl: void <init>(java.net.Proxy)>-><java.net.PlainSocketImpl: void <init>()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.IdentityHashMap$Values: void clear()>
<sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>-><java.util.Stack: java.lang.Object pop()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void parseHeader(java.io.InputStream)>-><sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<sun.net.www.protocol.http.HttpURLConnection: boolean usingProxy()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.https.Handler)>-><javax.net.ssl.HttpsURLConnection: void <init>(java.net.URL)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.HashMap$HashIterator: void remove()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableMap: int size()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<org.apache.poi.util.ReplacingInputStream: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<freemarker.template.DefaultIteratorAdapter$SimpleTemplateModelIterator: freemarker.template.TemplateModel next()>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.NetworkClient$1: java.lang.Object run()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.io.DataOutputStream: void write(byte[],int,int)>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.nio.charset.CoderResult: boolean isUnderflow()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.http.PosterOutputStream: void close()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.google.common.util.concurrent.DirectExecutor: java.lang.String toString()>
<sun.net.www.MeteredStream: int read()>-><java.util.zip.ZipFile$ZipFileInputStream: int read()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpInputStream: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<sun.net.www.http.ChunkedInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: void ensureOpen()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Object[])>
<redis.clients.jedis.JedisSentinelPool: void destroy()>-><redis.clients.jedis.JedisSentinelPool$MasterListener: void shutdown()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<net.sf.ehcache.util.LargeCollection: void <init>()>-><java.util.HashSet: void <init>()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DisposableBeanAdapter: void destroy()>-><org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void destroy()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String)>-><sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><sun.net.NetworkClient$2: void <init>(sun.net.NetworkClient)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<redis.clients.jedis.JedisSentinelPool$MasterListener: void shutdown()>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>-><org.crazycake.shiro.exception.SerializationException: void <init>(java.lang.String)>
<org.apache.poi.util.ReplacingInputStream: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: void remove()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serializeContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableMapEntrySet: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<org.owasp.encoder.XMLEncoder: java.nio.charset.CoderResult encodeArrays(java.nio.CharBuffer,java.nio.CharBuffer,boolean)>-><java.nio.Buffer: int limit()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.rmi.transport.proxy.HttpSendOutputStream: void close()>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.MeteredStream: int read()>-><java.io.FileInputStream: int read()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.system.entity.Menu: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Calendar: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.EnumMap$Values: java.util.Iterator iterator()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.apache.catalina.connector.Response: void setHeader(java.lang.String,java.lang.String)>-><org.apache.catalina.connector.Response: boolean checkSpecialHeader(java.lang.String,java.lang.String)>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: void clear()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: boolean isEmpty()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<redis.clients.jedis.BinaryJedis: java.lang.Long del(byte[])>-><redis.clients.jedis.BinaryClient: void del(byte[][])>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.net.HttpConnectSocketImpl$1: java.lang.Object run()>-><java.net.HttpConnectSocketImpl$1: java.lang.Void run()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<reactor.core.Exceptions: java.lang.Throwable addSuppressed(java.lang.Throwable,java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<java.lang.ProcessEnvironment$StringKeySet: void clear()>-><java.util.HashMap$KeySet: void clear()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<org.apache.catalina.connector.CoyoteOutputStream: void flush()>-><org.apache.catalina.connector.OutputBuffer: void flush()>
<java.net.URLStreamHandler: int hashCode(java.net.URL)>-><sun.net.www.protocol.https.Handler: int getDefaultPort()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.Socket: java.io.InputStream getInputStream()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>-><java.lang.StringBuilder: void <init>()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.HttpClient: void closeServer()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><springfox.documentation.service.Representation: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.Status: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>
<org.springframework.util.LinkedCaseInsensitiveMap: void clear()>-><java.util.HashMap: void clear()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onError(java.lang.Throwable)>-><reactor.core.publisher.InnerOperator: reactor.util.context.Context currentContext()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<sun.net.www.MessageHeader: void prepend(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void grow()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.JumboEnumSet: void clear()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.apache.catalina.connector.OutputBuffer: void transfer(byte,java.nio.ByteBuffer)>-><org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>
<java.io.DataOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><java.util.LinkedList: java.lang.Object poll()>
<java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void flush(boolean)>
<java.util.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.Object getContent()>-><java.net.URLConnection: java.lang.Object getContent()>
<java.net.ResponseCache: java.net.ResponseCache getDefault()>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><freemarker.ext.beans.OverloadedNumberUtil$NumberWithFallbackType: int compareTo(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.rmi.transport.tcp.MultiplexOutputStream: void close()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.security.Provider: java.util.Set keySet()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Response: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.misc.GC$LatencyRequest: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$CollectionView: void clear()>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><org.apache.poi.xssf.streaming.SXSSFRow$FilledCellIterator: java.lang.Object next()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient$1: java.lang.Void run()>-><java.net.InetSocketAddress: int getPort()>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: void <init>(sun.net.www.protocol.http.HttpCallerInfo)>
<io.netty.util.concurrent.FastThreadLocal: void removeFromVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String)>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.util.calendar.Gregorian$Date: void <init>()>-><sun.util.calendar.BaseCalendar$Date: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.http.HttpURLConnection$7: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Throwable)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<redis.clients.jedis.Queable: redis.clients.jedis.Response generateResponse(java.lang.Object)>-><java.util.LinkedList: java.lang.Object poll()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: java.lang.StringBuilder _appendSourceDesc(java.lang.StringBuilder)>-><java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><redis.clients.jedis.Jedis: void close()>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.lang.Object: java.lang.Class getClass()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.owasp.encoder.XMLEncoder: java.nio.charset.CoderResult encodeArrays(java.nio.CharBuffer,java.nio.CharBuffer,boolean)>-><java.lang.Character: boolean isLowSurrogate(char)>
<java.io.DataOutputStream: void write(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.HashMap: int hash(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.util.MimeType: java.lang.String toString()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.invoke.MethodType: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.ObjectOutputStream$BlockDataOutputStream: void close()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.Vector: void addElement(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.io.BufferedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.RegularImmutableMap$KeySet: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><sun.net.www.protocol.https.Handler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>
<org.apache.shiro.util.StringUtils: java.lang.String toDelimitedString(java.lang.Object[],java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.Objects: int hashCode(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$EmptyIterator: void remove()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: java.lang.String toString()>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.nio.HeapCharBuffer: java.nio.CharBuffer duplicate()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<javax.swing.SwingWorker$6: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.catalina.connector.Response: boolean isCommitted()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<java.util.TreeMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.LocalTime: java.lang.String toString()>
<java.io.ObjectInputStream$PeekInputStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.core.style.DefaultToStringStyler: void styleIdentityHashCode(java.lang.StringBuilder,java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>-><sun.net.www.HeaderParser: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String exceptionMessage(java.lang.Throwable)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<sun.net.www.MeteredStream: void close()>-><java.io.InputStream: void close()>
<java.io.InputStream: int read(byte[])>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: void clear()>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeSet: java.util.Iterator iterator()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<org.apache.catalina.connector.Response: void addHeader(java.lang.String,java.lang.String,java.nio.charset.Charset)>-><java.lang.String: char charAt(int)>
<sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><java.lang.StringBuilder: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void update(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.Collections$EmptyList: boolean isEmpty()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.invoke.MemberName: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.Collections$SetFromMap: void forEach(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: void forEach(java.util.function.Consumer)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$KeySet: int size()>
<java.util.LinkedHashMap$LinkedKeySet: void clear()>-><java.util.LinkedHashMap: void clear()>
<sun.net.www.ParseUtil: void appendFragment(java.lang.StringBuffer,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(char[])>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.security.MessageDigest: java.lang.String toString()>
<org.springframework.core.annotation.AnnotationAwareOrderComparator: void sortIfNecessary(java.lang.Object)>-><org.springframework.core.annotation.AnnotationAwareOrderComparator: void sort(java.lang.Object[])>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>-><java.net.URL: java.lang.String getFile()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.util.zip.InflaterInputStream: void close()>-><java.io.InputStream: void close()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.Vector$ListItr: void add(java.lang.Object)>-><java.util.Vector$Itr: void checkForComodification()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: boolean isEmpty()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.WeakHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.http.HttpClient: void privilegedOpenServer(java.net.InetSocketAddress)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.Date: long parse(java.lang.String)>-><sun.util.calendar.Gregorian: sun.util.calendar.CalendarDate getCalendarDate()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMapKeySet: void forEach(java.util.function.Consumer)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String removeCaseInsensitiveKey(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: java.lang.String trim()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.nio.CharBuffer: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressSource: void beginTracking()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.net.NetworkClient$1: java.lang.Object run()>-><sun.net.NetworkClient$1: java.lang.Void run()>
<java.io.BufferedOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.monitor.entity.SystemLog: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<redis.clients.jedis.Connection: java.lang.Long getIntegerReply()>-><redis.clients.jedis.Connection: java.lang.Object readProtocolWithCheckingBroken()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><redis.clients.jedis.Response: java.lang.String toString()>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: void setDateHeader(java.lang.String,long)>-><java.lang.String: int length()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.springframework.util.MultiValueMapAdapter: java.util.List remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<org.apache.shiro.web.util.WebUtils: boolean isWeb(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletRequest getServletRequest()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><freemarker.ext.beans.CollectionAdapter$1: void remove()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.ByteArrayInputStream: long skip(long)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String access$100(sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.beans.factory.support.DisposableBeanAdapter: void destroy()>-><org.springframework.web.filter.GenericFilterBean: void destroy()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.rmi.transport.proxy.HttpInputStream: int read(byte[],int,int)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.MeteredStream: void mark(int)>-><java.io.FilterInputStream: void mark(int)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber: boolean isEmpty()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: boolean isEmpty()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.UnknownSessionException: void <init>(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<net.sf.ehcache.store.chm.SelectableConcurrentHashMap: net.sf.ehcache.Element remove(java.lang.Object)>-><java.lang.String: int hashCode()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: void remove()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.net.Proxy: boolean equals(java.lang.Object)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.reader.ReaderException: java.lang.String toString()>
<org.jsoup.safety.Whitelist: org.jsoup.nodes.Attributes getEnforcedAttributes(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><ch.qos.logback.classic.Logger: boolean isInfoEnabled()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.crazycake.shiro.RedisManager: redis.clients.jedis.Jedis getJedis()>-><org.crazycake.shiro.RedisManager: void init()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.lang.Object[] toArray()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.monitor.entity.ActiveUser: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.apache.catalina.core.ApplicationPart: java.io.InputStream getInputStream()>-><org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.InputStream getInputStream()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.net.www.http.KeepAliveCleanerEntry: void <init>(sun.net.www.http.KeepAliveStream,sun.net.www.http.HttpClient)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.DigestAuthentication: boolean supportsPreemptiveAuthorization()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<net.sf.ehcache.store.CacheStore$4: net.sf.ehcache.Element call()>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpSendOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.nio.CharBuffer: java.lang.Appendable append(char)>-><java.nio.CharBuffer: java.nio.CharBuffer append(char)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.util.TimSort: int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void writeBytes(byte[],int,int)>-><org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$EmptyList: int size()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.net.InetAddress: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validate(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>
<net.sf.ehcache.store.CacheStore: java.util.List getKeys()>-><net.sf.ehcache.store.disk.DiskStore: java.util.List getKeys()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.crazycake.shiro.serializer.ObjectSerializer: java.lang.Object deserialize(byte[])>-><java.io.ByteArrayInputStream: void <init>(byte[])>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendPath(java.lang.StringBuilder,java.lang.String)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.net.www.http.HttpClient$1: java.lang.Object run()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><java.io.DataOutputStream: void write(int)>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.springframework.util.MultiValueMapAdapter: java.util.List remove(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.Object remove(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean isAuthorizationStale(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><java.lang.Thread: boolean isAlive()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<redis.clients.jedis.Pipeline: void clear()>-><redis.clients.jedis.Pipeline: redis.clients.jedis.Response discard()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>-><sun.net.www.MessageHeader: void print(java.io.PrintStream)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<java.io.DataInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.apache.poi.util.ReplacingInputStream: int read(byte[])>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<java.util.Collections$UnmodifiableCollection: boolean isEmpty()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.apache.tomcat.util.http.FastHttpDateFormat: java.lang.String formatDate(long)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.SubList$1: boolean hasNext()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<freemarker.ext.beans.CollectionModel: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.net.URLConnection: java.lang.Object getContent()>-><java.net.UnknownContentHandler: java.lang.Object getContent(java.net.URLConnection)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: void fastPath()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.URL: void <init>(java.lang.String)>
<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue mergeIfRequired(org.springframework.beans.PropertyValue,org.springframework.beans.PropertyValue)>-><org.springframework.beans.factory.support.ManagedList: boolean isMergeEnabled()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>-><java.io.StringReader: void reset()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectName preRegister(javax.management.DynamicMBean,javax.management.MBeanServer,javax.management.ObjectName)>-><com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: javax.management.ObjectName preRegister(javax.management.MBeanServer,javax.management.ObjectName)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.MessageHeader: void set(int,java.lang.String,java.lang.String)>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<io.micrometer.core.instrument.binder.logging.LogbackMetrics$1: void onReset(ch.qos.logback.classic.LoggerContext)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.net.www.http.HttpClient: void finished()>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<sun.net.httpserver.ServerImpl$ServerTimerTask: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: void remove()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpInputStream: long skip(long)>-><sun.net.www.MeteredStream: long skip(long)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<sun.net.www.MessageHeader: void remove(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.lang.Class: java.net.URL getResource(java.lang.String)>-><java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.LocalDateTime: java.lang.String toString()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL,java.lang.String,int)>
<org.crazycake.shiro.serializer.ObjectSerializer: java.lang.Object deserialize(byte[])>-><org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: void <init>(java.io.InputStream)>
<sun.net.www.protocol.http.AuthenticationHeader$SchemeMapValue: void <init>(sun.net.www.HeaderParser,java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler: void accept(javax.xml.stream.events.XMLEvent,reactor.core.publisher.SynchronousSink)>-><java.util.ArrayList: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.net.URL)>-><java.net.URL: java.lang.String getFile()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><freemarker.ext.beans.HashAdapter$1$1: void remove()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serializeContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest getServletRequest()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.io.ObjectOutputStream$BlockDataOutputStream: void close()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: java.util.Collection values()>-><java.util.Collections$UnmodifiableMap: java.util.Collection values()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<net.sf.ehcache.transaction.local.LocalTransactionStore: void assertNotTimedOut()>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean timedOut()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.PrintStream: void flush()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: boolean isEnabled()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.apache.catalina.connector.Response: void addDateHeader(java.lang.String,long)>-><org.apache.catalina.connector.Response: void addHeader(java.lang.String,java.lang.String)>
<java.io.FilterInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<net.sf.ehcache.util.LargeCollection: boolean removeAll(java.util.Collection)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.util.Set keySet()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendComment(java.lang.StringBuilder,java.lang.String)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<java.io.DataOutputStream: void writeChar(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><io.netty.util.concurrent.SingleThreadEventExecutor: boolean offerTask(java.lang.Runnable)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.ExpiredSessionException: void <init>(java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: javax.servlet.ServletRequest getServletRequest()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.Date: long parse(java.lang.String)>-><sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDate(int,int,int)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.SocketImpl: java.net.Socket getSocket()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.SocketImpl: java.net.InetAddress getInetAddress()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.MeteredStream: long skip(long)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><io.netty.util.concurrent.AbstractEventExecutor: java.util.Iterator iterator()>
<reactor.core.publisher.Operators$MultiSubscriptionSubscriber: void request(long)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void request(long)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.apache.shiro.session.mgt.DefaultSessionManager: java.io.Serializable getSessionId(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionKey: java.io.Serializable getSessionId()>
<org.apache.shiro.util.MapContext: int size()>-><java.util.HashMap: int size()>
<sun.net.www.MeteredStream: int available()>-><java.util.zip.ZipFile$ZipFileInputStream: int available()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><io.netty.util.concurrent.ScheduledFutureTask: int compareTo(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.apache.commons.collections.FastHashMap$CollectionView: void clear()>-><java.util.HashMap: void <init>()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session beforeInvalidNotification(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.ImmutableProxiedSession: void <init>(org.apache.shiro.session.Session)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><java.lang.Integer: java.lang.String toHexString(int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<java.util.LinkedList$ListItr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getDescription(boolean)>-><javax.servlet.ServletRequestWrapper: java.lang.String getRemoteAddr()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.transaction.ReadCommittedSoftLockImpl: java.lang.String toString()>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.HttpURLConnection$2: java.lang.Object run()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<com.sun.jmx.mbeanserver.JmxMBeanServer$3: com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository run()>-><com.sun.jmx.mbeanserver.JmxMBeanServer: com.sun.jmx.mbeanserver.MBeanInstantiator access$200(com.sun.jmx.mbeanserver.JmxMBeanServer)>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<reactor.core.publisher.InnerProducer: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: reactor.core.CoreSubscriber actual()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Vector: java.lang.Object get(int)>
<sun.net.www.protocol.http.AuthenticationInfo: void endAuthRequest(java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>-><java.lang.StringBuilder: void <init>()>
<java.text.AttributeEntry: int hashCode()>-><springfox.documentation.service.Representation: int hashCode()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: void destroy()>-><redis.clients.jedis.util.Pool: void destroy()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.sql.Timestamp: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: boolean containsKey(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean containsKey(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.http.ChunkedOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush(boolean)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.apache.shiro.util.MapContext: java.util.Set entrySet()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String unquote(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.TreeSet: void clear()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.asm.Type: java.lang.String toString()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getSessionIdCookieValue(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: boolean isSessionIdCookieEnabled()>
<java.net.InetSocketAddress: void <init>(int,java.lang.String)>-><java.net.SocketAddress: void <init>()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeParseException createError(java.lang.CharSequence,java.lang.RuntimeException)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<sun.net.www.http.HttpClient: void finished()>-><sun.net.www.http.HttpClient: void closeServer()>
<sun.net.www.MeteredStream: void close()>-><sun.rmi.transport.tcp.MultiplexInputStream: void close()>
<sun.rmi.server.LoaderHandler: void addPermissionsForURLs(java.net.URL[],java.security.PermissionCollection,boolean)>-><java.lang.String: boolean endsWith(java.lang.String)>
<java.util.concurrent.ConcurrentSkipListMap: int size()>-><java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findFirst()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.StringBuilder: void <init>()>
<java.util.Collections$SynchronizedCollection: void clear()>-><javax.security.auth.Subject$SecureSet: void clear()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.Collections$SetFromMap: java.lang.Object[] toArray()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Spliterators$2Adapter: boolean hasNext()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: java.lang.Object[] toArray()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<java.util.Spliterators$ArraySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.net.ProtocolException: void <init>(java.lang.String)>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.HttpClient: int getKeepAliveTimeout()>
<org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: void appendFields(org.springframework.core.style.ToStringCreator)>
<java.util.LinkedList$ListItr: void add(java.lang.Object)>-><java.util.LinkedList$ListItr: void checkForComodification()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.catalina.session.ManagerBase: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.ByteArrayOutputStream: void close()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.HashMap$Values: int size()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><net.sf.ehcache.store.cachingtier.PooledBasedBackEnd: java.lang.Object get(java.lang.Object)>
<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getStartTimestamp()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void checkPath(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.TreeMap$Values: void clear()>-><java.util.TreeMap: void clear()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.net.UnknownServiceException: void <init>(java.lang.String)>-><java.io.IOException: void <init>(java.lang.String)>
<freemarker.core.Configurable: void validateFormatNames(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.io.DataInputStream: char readChar()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.apache.tomcat.util.http.FastHttpDateFormat: java.lang.String formatDate(long)>-><org.apache.tomcat.util.http.FastHttpDateFormat: void updateFormatCache(java.lang.Long,java.lang.String)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.apache.shiro.web.util.WebUtils: boolean isWeb(java.lang.Object)>-><org.apache.shiro.web.util.WebUtils: boolean isWeb(org.apache.shiro.web.util.RequestPairSource)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.util.Base64: java.util.Base64$Encoder getEncoder()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.JumboEnumSet: boolean isEmpty()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.Collections$SetFromMap: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onChange(org.apache.shiro.session.Session)>-><org.crazycake.shiro.RedisSessionDAO: void update(org.apache.shiro.session.Session)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<cc.mrbird.febs.system.controller.UserController: cc.mrbird.febs.common.entity.FebsResponse updatePassword(java.lang.String,java.lang.String)>-><cc.mrbird.febs.system.entity.User: java.lang.String getPassword()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.Vector: int size()>
<sun.rmi.transport.proxy.HttpSendInputStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: java.lang.String toString()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.owasp.encoder.XMLEncoder: int firstEncodedOffset(java.lang.String,int,int)>-><java.lang.Character: int toCodePoint(char,char)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.OutputStream,long)>-><java.io.FilterOutputStream: void <init>(java.io.OutputStream)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.LinkedList: int size()>
<sun.util.locale.LocaleUtils: boolean isEmpty(java.util.Set)>-><java.util.TreeMap$KeySet: boolean isEmpty()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.BufferedInputStream: void close()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<java.util.Formatter$FormatSpecifier: void print(java.lang.Object,java.util.Locale)>-><java.nio.CharBuffer: java.lang.Appendable append(java.lang.CharSequence)>
<java.text.AttributeEntry: int hashCode()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<reactor.core.Exceptions: java.lang.Throwable addSuppressed(java.lang.Throwable,java.lang.Throwable)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<sun.net.www.MessageHeader: int getKey(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.io.PrintStream: void write(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: void clear()>-><org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Set entrySet()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: boolean startsWith(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: void remove()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: boolean authQop()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String,long)>-><java.util.Date: long parse(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>-><sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.net.URL)>
<org.apache.tomcat.util.http.FastHttpDateFormat: void updateFormatCache(java.lang.Long,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: int size()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.InetSocketAddress: java.lang.String getHostName()>
<redis.clients.jedis.Queable: redis.clients.jedis.Response getResponse(redis.clients.jedis.Builder)>-><java.util.LinkedList: boolean add(java.lang.Object)>
<org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile: java.io.InputStream getInputStream()>-><org.apache.catalina.core.ApplicationPart: java.io.InputStream getInputStream()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><org.springframework.util.MultiValueMapAdapter: java.lang.Object remove(java.lang.Object)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.AbstractSet: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>
<sun.rmi.server.LoaderHandler: void addPermissionsForURLs(java.net.URL[],java.security.PermissionCollection,boolean)>-><java.lang.String: int lastIndexOf(int)>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.RegularImmutableList: int size()>
<java.util.zip.CheckedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<org.apache.catalina.connector.OutputBuffer: void close()>-><java.nio.Buffer: int remaining()>
<java.io.DataInputStream: short readShort()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Double: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.FluxHide$SuppressFuseableSubscriber: void clear()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: void <init>(sun.net.www.protocol.http.HttpCallerInfo)>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><net.sf.ehcache.Element: java.lang.Object getObjectValue()>
<java.util.Collections$SynchronizedCollection: void forEach(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: void forEach(java.util.function.Consumer)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.Operators$MonoSubscriber: int size()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.KeepAliveStream: void setClosed()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<springfox.documentation.service.Response: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.HashMap$EntrySet: int size()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.io.File: int compareTo(java.lang.Object)>
<java.util.ArraysParallelSortHelpers$FJObject$Merger: void compute()>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.introspector.Property: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.TreeMap$Values: void clear()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendHttpOnly(java.lang.StringBuilder,boolean)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Hashtable: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendDomain(java.lang.StringBuilder,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<reactor.core.publisher.Operators: void onDiscardQueueWithClear(java.util.Queue,reactor.util.context.Context,java.util.function.Function)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$KeySet: int size()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><springfox.documentation.service.Response: int hashCode()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.ObjectOutputStream$BlockDataOutputStream: void write(int)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer$2: java.lang.Object run()>-><com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.SubList: java.util.Iterator iterator()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.springframework.core.style.ToStringCreator: java.lang.String toString()>-><org.springframework.core.style.DefaultToStringStyler: void styleEnd(java.lang.StringBuilder,java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader mapToMessageHeader(java.util.Map)>-><sun.net.www.MessageHeader: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.Collections$SetFromMap: java.lang.Object[] toArray()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><javax.management.ObjectName: int compareTo(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.crazycake.shiro.RedisManager: void init()>-><org.crazycake.shiro.common.WorkAloneRedisManager: redis.clients.jedis.JedisPoolConfig getJedisPoolConfig()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.MeteredStream: void close()>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><java.nio.Buffer: int remaining()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>-><sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.net.CookieHandler: java.net.CookieHandler getDefault()>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.security.DigestOutputStream: void write(byte[],int,int)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.FileInputStream: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<java.nio.CharBuffer: boolean equals(java.lang.Object)>-><java.nio.Buffer: int remaining()>
<java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.Long: long parseLong(java.lang.String)>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: void appendFragment(java.lang.StringBuffer,java.lang.String)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>-><java.net.InetSocketAddress: java.lang.String checkHost(java.lang.String)>
<freemarker.template.MapKeyValuePairIterator: freemarker.template.TemplateHashModelEx2$KeyValuePair next()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><springfox.documentation.service.Representation: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.text.DateFormat: java.lang.String format(java.util.Date)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<redis.clients.jedis.Pipeline: redis.clients.jedis.Response discard()>-><redis.clients.jedis.BinaryClient: void discard()>
<java.util.Vector$ListItr: void add(java.lang.Object)>-><java.util.Vector: void add(int,java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.zip.CheckedOutputStream: void write(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>-><java.lang.String: int length()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.Integer: java.lang.String toString(int)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><java.lang.StringBuilder: void <init>()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String unquote(java.lang.String)>-><java.lang.String: char charAt(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><springfox.documentation.service.Representation: int hashCode()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.ByteArrayOutputStream: void write(byte[],int,int)>
<org.apache.catalina.connector.OutputBuffer: void append(byte[],int,int)>-><org.apache.catalina.connector.OutputBuffer: void appendByteArray(byte[],int,int)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.HttpConnectSocketImpl: void doTunneling(java.net.HttpURLConnection)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStop(org.apache.shiro.session.Session)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<java.io.DataOutputStream: void writeByte(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<java.io.DataOutputStream: void writeShort(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNonce(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.AbstractList: void clear()>-><java.util.Collections$EmptyList: int size()>
<java.net.URLConnection: java.lang.String getContentType()>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>
<net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<springfox.documentation.service.Response: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.apache.shiro.util.StringUtils: java.lang.String toDelimitedString(java.lang.Object[],java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>-><sun.net.www.protocol.http.AuthCacheValue: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$5: java.lang.String run()>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><sun.net.www.http.KeepAliveStream: void close()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URL: int getDefaultPort()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.InputStream)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>
<freemarker.core._CoreAPI: void checkSettingValueItemsType(java.lang.String,java.lang.Class,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap: java.util.Set entrySet()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.io.PrintStream: void close()>-><org.apache.catalina.connector.CoyoteOutputStream: void close()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.HashSet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet: int size()>
<sun.net.www.MeteredStream: long skip(long)>-><sun.rmi.transport.proxy.HttpInputStream: long skip(long)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MeteredStream: void reset()>
<freemarker.template.MapKeyValuePairIterator: void <init>(java.util.Map,freemarker.template.ObjectWrapper)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.ResourceBundle$1: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><org.apache.tomcat.util.http.parser.HttpParser: boolean isToken(int)>
<org.crazycake.shiro.serializer.ObjectSerializer: java.lang.Object deserialize(byte[])>-><org.crazycake.shiro.exception.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.Arrays$ArrayList: void forEach(java.util.function.Consumer)>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getMethod()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.net.URLPermission: void <init>(java.lang.String,java.lang.String)>-><java.security.Permission: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.String: java.lang.String toLowerCase()>
<sun.rmi.transport.proxy.HttpInputStream: int read()>-><org.apache.poi.util.ReplacingInputStream: int read()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<sun.net.www.http.KeepAliveCache$1: void <init>(sun.net.www.http.KeepAliveCache,sun.net.www.http.KeepAliveCache)>-><java.lang.Object: void <init>()>
<java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<java.net.URLConnection: java.lang.Object getContent()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$Values: int size()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.String toString()>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><java.lang.Throwable: java.lang.String getMessage()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: boolean authQop()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.zip.DeflaterOutputStream: void close()>-><sun.net.www.http.PosterOutputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber: boolean isEmpty()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.security.PermissionCollection: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.lang.String getHeaderNamesInList()>-><java.util.StringJoiner: void <init>(java.lang.CharSequence)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.MeteredStream: void justRead(long)>-><sun.net.www.MeteredStream: void close()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.JumboEnumSet: int size()>
<org.owasp.encoder.URIEncoder: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.BufferedInputStream: void reset()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.KeepAliveStream: void reset()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.util.UUID: int compareTo(java.lang.Object)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.BufferedInputStream: long skip(long)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Vector: int size()>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.MeteredStream: void close()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.NetworkClient: void setReadTimeout(int)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<net.sf.ehcache.store.chm.SelectableConcurrentHashMap$KeySet: java.lang.Object[] toArray()>-><net.sf.ehcache.store.chm.SelectableConcurrentHashMap$KeySet: java.util.Iterator iterator()>
<org.owasp.encoder.CSSEncoder: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveCleanerEntry: sun.net.www.http.HttpClient getHttpClient()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.ObjectInputStream$BlockDataInputStream: int read(byte[],int,int)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.aop.TrueClassFilter: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber: boolean isEmpty()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile: boolean isEmpty()>-><org.apache.catalina.core.ApplicationPart: long getSize()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><springfox.documentation.service.Representation: int hashCode()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>-><org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.apache.shiro.session.mgt.SimpleSession: long getTimeout()>
<org.springframework.beans.factory.support.AbstractBeanFactory: void afterPrototypeCreation(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: int size()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.OutputStream,long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.net.SocketInputStream: void close()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.AbstractMap$1$1: void remove()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Values: void clear()>-><java.util.WeakHashMap: void clear()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.Base64$Encoder: byte[] encode(byte[])>-><java.util.Arrays: byte[] copyOf(byte[],int)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.Vector: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$Values: int size()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(sun.net.www.protocol.http.HttpCallerInfo,java.lang.String)>
<net.sf.ehcache.transaction.local.LocalTransactionStore: java.util.List getKeys()>-><net.sf.ehcache.util.LargeCollection: boolean removeAll(java.util.Collection)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getPath()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><io.netty.buffer.WrappedByteBuf: int compareTo(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><redis.clients.jedis.Response: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.io.PrintStream: void write(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object poll()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void request(long)>
<org.springframework.context.support.AbstractApplicationContext: boolean isTypeMatch(java.lang.String,org.springframework.core.ResolvableType)>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: boolean startsWith(java.lang.String)>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.nio.Buffer: java.nio.Buffer reset()>-><java.nio.InvalidMarkException: void <init>()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: java.lang.StringBuilder _appendSourceDesc(java.lang.StringBuilder)>-><java.nio.CharBuffer: int length()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void connect()>
<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpSendOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMapValues: java.util.Iterator iterator()>
<sun.net.www.http.HttpClient: boolean available()>-><java.net.Socket: java.io.InputStream getInputStream()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.Collections$SetFromMap: java.lang.Object[] toArray()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><sun.security.action.GetPropertyAction: void <init>(java.lang.String)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><freemarker.ext.beans.SequenceAdapter: java.lang.Object get(int)>
<freemarker.core._CoreAPI: void checkSettingValueItemsType(java.lang.String,java.lang.Class,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.StringBuilder: void <init>()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap$PrivateEntryIterator: void remove()>
<net.sf.ehcache.store.chm.SelectableConcurrentHashMap$KeySet: java.lang.Object[] toArray()>-><java.util.ArrayList: java.lang.Object[] toArray()>
<org.jsoup.safety.Whitelist: org.jsoup.nodes.Attributes getEnforcedAttributes(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.net.Proxy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void mark(int)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.TreeMap: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<redis.clients.jedis.Pipeline$MultiResponseBuilder: void addResponse(redis.clients.jedis.Response)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><freemarker.ext.beans.HashAdapter: java.lang.Object get(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.xml.sax.SAXException: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getReferencedSessionId(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><cc.mrbird.febs.common.xss.XssHttpServletRequestWrapper: java.lang.String getParameter(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<freemarker.template.IteratorToTemplateModelIteratorAdapter: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<freemarker.template.SimpleCollection$SimpleTemplateModelIterator: freemarker.template.TemplateModel next()>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.io.PrintStream: void write(byte[],int,int)>
<com.fasterxml.classmate.ResolvedType: java.lang.String getBriefDescription()>-><com.fasterxml.classmate.types.ResolvedPrimitiveType: java.lang.StringBuilder appendBriefDescription(java.lang.StringBuilder)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.RegularEnumSet$EnumSetIterator: void remove()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.net.URLConnection: java.lang.String stripOffParameters(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>-><java.util.AbstractMap: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.nio.CharBuffer: int hashCode()>-><java.nio.Buffer: int limit()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.Vector: java.lang.Object[] toArray()>
<org.apache.shiro.web.servlet.SimpleCookie: javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest,java.lang.String)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.Cookie[] getCookies()>
<java.util.Hashtable: java.lang.String toString()>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>-><java.lang.Integer: void <init>(int)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.template.SimpleHash: java.lang.String toString()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<sun.rmi.transport.tcp.ConnectionMultiplexer: void shutDown()>-><sun.net.www.MeteredStream: void close()>
<com.google.common.base.Predicate: boolean test(java.lang.Object)>-><com.google.common.base.Predicates$ObjectPredicate$1: boolean apply(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.io.StringReader: void reset()>
<java.util.EnumMap: int entryHashCode(int)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: int size()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.httpserver.Request$ReadStream: int read(byte[],int,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><javax.naming.ldap.Rdn: int compareTo(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.StringBuffer: void <init>()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.io.IOException: void <init>(java.lang.String)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.MessageHeader: void grow()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.Collections$EmptySet: java.lang.Object[] toArray()>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: void clear()>
<freemarker.core._CoreAPI: void checkSettingValueItemsType(java.lang.String,java.lang.Class,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<reactor.core.publisher.Operators$ScalarSubscription: void cancel()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: reactor.util.context.Context currentContext()>
<java.io.FilterInputStream: void close()>-><java.io.InputStream: void close()>
<redis.clients.jedis.JedisSentinelPool: void returnResource(redis.clients.jedis.Jedis)>-><redis.clients.jedis.exceptions.JedisException: void <init>(java.lang.String,java.lang.Throwable)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.SingletonImmutableList: java.lang.Object get(int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><reactor.core.Scannable$Attr$3: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Boolean run()>-><sun.net.www.protocol.http.HttpURLConnection: boolean access$300(sun.net.www.protocol.http.HttpURLConnection,java.lang.String,int,java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.net.URL: java.lang.String getHost()>
<java.net.HttpConnectSocketImpl: java.net.InetAddress getInetAddress()>-><java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.rmi.transport.tcp.MultiplexOutputStream: void write(byte[],int,int)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<sun.rmi.transport.proxy.HttpSendOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.net.URLConnection: java.lang.String getContentHandlerPkgPrefixes()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<reactor.core.publisher.Operators$ScalarSubscription: void request(long)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onNext(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.LocalDate: int compareTo(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<reactor.core.publisher.InnerProducer: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: reactor.core.CoreSubscriber actual()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.net.SocketOutputStream: void write(byte[],int,int)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.net.www.protocol.http.HttpURLConnection$11: java.lang.Object run()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><springfox.documentation.service.Response: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.RegularImmutableMap$Values: int size()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.NetworkClient: int getReadTimeout()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.LargeCollection: java.util.Iterator iterator()>-><net.sf.ehcache.transaction.local.LocalTransactionStore$1: java.util.Iterator sourceIterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.io.PrintStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.InputStream,java.net.CacheRequest)>-><java.io.FilterInputStream: void <init>(java.io.InputStream)>
<redis.clients.jedis.BinaryJedis: java.lang.String set(byte[],byte[])>-><redis.clients.jedis.Connection: java.lang.String getStatusCodeReply()>
<java.io.PrintStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void close()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: int getContentLength()>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.https.Handler)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler,javax.net.ssl.HttpsURLConnection)>
<redis.clients.jedis.Pipeline: void sync()>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.SubList: void removeRange(int,int)>-><java.util.AbstractList: void removeRange(int,int)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.URL: java.lang.String getHost()>
<org.apache.catalina.session.StandardSession: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.MeteredStream: void close()>-><java.net.SocketInputStream: void close()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getName()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.String: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.crazycake.shiro.RedisSessionDAO: java.lang.String getRedisSessionKey(java.io.Serializable)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void reset()>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer position(int)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$SetFromMap: boolean isEmpty()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: int size()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><sun.net.www.protocol.http.AuthCacheValue: void <init>()>
<net.sf.ehcache.pool.sizeof.ObjectGraphWalker: long walk(int,boolean,java.lang.Object[])>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.commons.collections.FastHashMap$CollectionView: void clear()>-><java.util.LinkedHashMap$LinkedKeySet: void clear()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: java.lang.String getNewMBeanClassName(java.lang.Object)>-><com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: javax.management.MBeanInfo getMBeanInfo()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: int size()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<redis.clients.jedis.util.RedisOutputStream: void flushBuffer()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><java.io.InputStream: void close()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: boolean isUnresolved()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.HashMap$KeySet: int size()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<sun.rmi.transport.proxy.HttpSendInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.FluxDoFinally$DoFinallyFuseableSubscriber: boolean isEmpty()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<springfox.documentation.service.Representation: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.ByteArrayInputStream: int read(byte[],int,int)>
<java.lang.Object: java.lang.String toString()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication$1: java.lang.Boolean run()>-><sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<redis.clients.jedis.BinaryJedis: void resetState()>-><redis.clients.jedis.Transaction: void close()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: char charAt(int)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.nio.Buffer: boolean hasRemaining()>
<com.sun.jmx.mbeanserver.JmxMBeanServer$2: java.lang.Object run()>-><com.sun.jmx.mbeanserver.JmxMBeanServer: javax.management.MBeanServer access$100(com.sun.jmx.mbeanserver.JmxMBeanServer)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.io.BufferedInputStream: void fill()>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<sun.net.www.MeteredStream: void justRead(long)>-><sun.net.ProgressSource: void updateProgress(long,long)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<java.util.IdentityHashMap$KeySet: void clear()>-><java.util.IdentityHashMap: void clear()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<reactor.core.publisher.Operators$MultiSubscriptionSubscriber: void set(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void cancel()>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.io.StringReader: int read()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.nio.ch.IOUtil: int read(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>-><java.nio.DirectByteBufferR: java.nio.ByteBuffer put(java.nio.ByteBuffer)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.SubList: java.util.Iterator iterator()>
<sun.net.ProgressEvent: void <init>(sun.net.ProgressSource,java.net.URL,java.lang.String,java.lang.String,sun.net.ProgressSource$State,long,long)>-><java.util.EventObject: void <init>(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.awt.geom.Edge: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.rmi.transport.proxy.HttpSendInputStream: int read(byte[],int,int)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.httpserver.SSLStreams$InputStream: int read(byte[],int,int)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: void clear()>-><java.util.ArrayList: void clear()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.io.ByteArrayOutputStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><springfox.documentation.service.Response: int hashCode()>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.io.StringReader: void mark(int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><redis.clients.jedis.Response: java.lang.String toString()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryAcquireSharedNanos(int,long)>-><java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int tryAcquireShared(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.HttpURLConnection$TunnelState tunnelState()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.HttpConnectSocketImpl: int getLocalPort()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Response: java.lang.String toString()>
<org.owasp.encoder.Encode: java.lang.String forXml(java.lang.String)>-><org.owasp.encoder.Encode: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.InputStream: int read(byte[],int,int)>
<java.net.ResponseCache: java.net.ResponseCache getDefault()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.swing.SwingWorker$6: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.Thread: void setName(java.lang.String)>
<sun.net.www.MeteredStream: int read()>-><sun.net.httpserver.Request$ReadStream: int read()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onError(java.lang.Throwable)>-><reactor.core.publisher.Operators: void onErrorDropped(java.lang.Throwable,reactor.util.context.Context)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><org.crazycake.shiro.RedisSessionDAO: java.lang.String getRedisSessionKey(java.io.Serializable)>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><java.net.URL: java.lang.String getProtocol()>
<net.sf.ehcache.store.CacheStore$4: net.sf.ehcache.Element call()>-><net.sf.ehcache.store.CacheStore: net.sf.ehcache.store.AuthoritativeTier access$300(net.sf.ehcache.store.CacheStore)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SetFromMap: java.lang.Object[] toArray()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void afterStopped(org.apache.shiro.session.Session)>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Hashtable$Entry: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: long timeBeforeTimeout()>-><java.lang.System: long nanoTime()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.owasp.encoder.XMLEncoder: java.nio.charset.CoderResult encodeArrays(java.nio.CharBuffer,java.nio.CharBuffer,boolean)>-><org.owasp.encoder.Unicode: boolean isNonCharacter(int)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.sql.SQLException$1: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.DataOutputStream: void write(int)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.util.AbstractMap: int hashCode()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><java.nio.CharBuffer: int hashCode()>
<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>-><sun.net.www.http.ChunkedOutputStream: void reset()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>-><sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><org.crazycake.shiro.common.WorkAloneRedisManager: void del(byte[])>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Boolean: boolean booleanValue()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.SubList$1: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.HashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<net.sf.ehcache.transaction.local.LocalTransactionStore: java.util.List getKeys()>-><net.sf.ehcache.transaction.local.LocalTransactionStore: void assertNotTimedOut()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: int size()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getRef()>
<sun.rmi.transport.proxy.HttpSendInputStream: int available()>-><sun.net.www.MeteredStream: int available()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: boolean isEmpty()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: boolean timedOut()>-><net.sf.ehcache.transaction.local.LocalTransactionContext: long timeBeforeTimeout()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>-><sun.net.www.http.HttpClient: void closeServer()>
<reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: void fastPath()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getProgress()>
<org.apache.catalina.connector.OutputBuffer: int transfer(byte[],int,int,java.nio.ByteBuffer)>-><org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<redis.clients.jedis.Response: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void update(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<redis.clients.jedis.Pipeline: redis.clients.jedis.Response getResponse(redis.clients.jedis.Builder)>-><redis.clients.jedis.Response: void <init>(redis.clients.jedis.Builder)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<net.sf.ehcache.transaction.local.LocalTransactionStore$1: java.util.Iterator sourceIterator()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.ComparableTimSort: void mergeLo(int,int,int,int)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: java.lang.Object run()>
<java.io.SequenceInputStream: void nextStream()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: void remove()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><net.sf.ehcache.transaction.ReadCommittedSoftLockImpl: net.sf.ehcache.Element getElement(net.sf.ehcache.transaction.TransactionID,net.sf.ehcache.transaction.SoftLockID)>
<org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler: void accept(java.lang.Object,java.lang.Object)>-><org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler: void accept(javax.xml.stream.events.XMLEvent,reactor.core.publisher.SynchronousSink)>
<redis.clients.jedis.util.RedisInputStream: void ensureFill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber: boolean isEmpty()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.net.URLConnection: java.lang.String getContentHandlerPkgPrefixes()>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>-><java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getReferencedSessionId(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<redis.clients.jedis.ScanResult: void <init>(byte[],java.util.List)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.lang.AssertionError: void <init>()>
<freemarker.ext.beans.CollectionModel: freemarker.template.TemplateModelIterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractMap$1: int size()>
<java.util.Hashtable: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.util.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.HttpURLConnection$TunnelState tunnelState()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SynchronizedMap: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection$9: java.io.InputStream run()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream access$200(sun.net.www.protocol.http.HttpURLConnection)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.StringBuilder: void <init>()>
<java.io.InputStream: long skip(long)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.lang.Boolean: boolean booleanValue()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.StringBuilder: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.ComparableTimSort: void mergeLo(int,int,int,int)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>
<sun.net.www.HeaderParser: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<net.sf.ehcache.store.disk.DiskStore$KeySet: java.lang.Object[] toArray()>-><java.util.ArrayList: void <init>()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.apache.shiro.util.MapContext: java.util.Set entrySet()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><java.io.FileInputStream: void close()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<redis.clients.jedis.Queable: int getPipelinedResponseLength()>-><java.util.LinkedList: int size()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<org.apache.catalina.connector.Response: void setHeader(java.lang.String,java.lang.String)>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: java.lang.String getRedisSessionKey(java.io.Serializable)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.BufferedInputStream: int available()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeySet: void forEach(java.util.function.Consumer)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: java.lang.Thread currentThread()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.MeteredStream: void close()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><springfox.documentation.service.Response: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedList: java.lang.Object merge(java.lang.Object)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<reactor.core.publisher.MonoToCompletableFuture: void onNext(java.lang.Object)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void cancel()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.lang.String: int length()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.AbstractCollection: void clear()>-><java.util.TreeMap$DescendingSubMap$DescendingEntrySetView: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>
<sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>-><javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.asm.Handle: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.rmi.transport.proxy.HttpSendOutputStream: void write(byte[],int,int)>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.io.ObjectStreamClass: java.lang.String getName()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.io.InputStream: int read(byte[])>-><java.io.InputStream: int read(byte[],int,int)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void setReadTimeout(int)>-><sun.net.www.protocol.http.HttpURLConnection: void setReadTimeout(int)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.IdentityHashMap: int size()>
<java.text.AttributeEntry: java.lang.String toString()>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.String: java.lang.String substring(int,int)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.crazycake.shiro.serializer.StringSerializer: byte[] serialize(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.DumperOptions$LineBreak: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeParseException createError(java.lang.CharSequence,java.lang.RuntimeException)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.math.BigDecimal: int compareTo(java.lang.Object)>
<sun.net.NetworkClient$2: java.lang.Object run()>-><sun.net.NetworkClient$2: java.net.Socket run()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>-><java.lang.Integer: java.lang.Integer decode(java.lang.String)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.FluxDoFinally$DoFinallyFuseableSubscriber: int size()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><java.io.StringReader: void reset()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.NetworkClient$2: void <init>(sun.net.NetworkClient)>-><java.lang.Object: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.Mono: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><java.io.InputStream: int read(byte[])>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: java.lang.String getPath()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: int size()>
<java.util.Collections$SetFromMap: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap: int size()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$1: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.apache.shiro.util.StringUtils: java.lang.String toDelimitedString(java.lang.Object[],java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSessionFromDataSource(java.io.Serializable)>-><org.apache.shiro.session.mgt.eis.AbstractSessionDAO: org.apache.shiro.session.Session readSession(java.io.Serializable)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.io.BufferedInputStream: void fill()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<sun.net.www.http.KeepAliveCache: void run()>-><sun.net.www.http.KeepAliveCache: void removeVector(sun.net.www.http.KeepAliveKey)>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>-><org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor$1: void execute(java.lang.Runnable)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: int size()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.lang.Throwable: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Response: java.lang.String toString()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<freemarker.template.MapKeyValuePairIterator: void <init>(java.util.Map,freemarker.template.ObjectWrapper)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.rmi.transport.proxy.HttpSendOutputStream: void write(int)>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object)>-><java.nio.CharBuffer: int length()>
<net.sf.ehcache.util.LargeCollection: java.util.Iterator iterator()>-><net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String access$000(org.springframework.util.LinkedCaseInsensitiveMap,java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String removeCaseInsensitiveKey(java.lang.String)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] toArray()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<java.security.DigestOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.MeteredStream: void close()>-><java.io.SequenceInputStream: void close()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void ensureOpen()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.Socket access$200(java.net.HttpConnectSocketImpl,java.lang.String,int)>-><java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.EnumMap$Values: void clear()>-><java.util.EnumMap: void clear()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.security.AccessControlContext: java.security.DomainCombiner getCombiner()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.Vector: java.util.List subList(int,int)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><springfox.documentation.service.Response: java.lang.String toString()>
<org.apache.catalina.connector.CoyoteOutputStream: void write(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void checkRegisterForWrite()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String getPatternString()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.nio.HeapCharBuffer: java.nio.CharBuffer duplicate()>-><java.nio.Buffer: int markValue()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.ProgressSource: void finishTracking()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.apache.poi.xssf.streaming.SXSSFRow$FilledCellIterator: boolean hasNext()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><springfox.documentation.service.Response: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$6: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$6: java.lang.Void run()>
<net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>-><java.lang.Integer: java.lang.String toString(int)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.io.DataInputStream: int readInt()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.nio.ch.IOUtil: int read(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>-><java.nio.HeapByteBufferR: boolean isReadOnly()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><sun.net.httpserver.SSLStreams$OutputStream: void write(int)>
<org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object,org.springframework.core.style.ToStringStyler)>-><java.lang.StringBuilder: void <init>(int)>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getContentType()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<freemarker.template.DefaultIteratorAdapter$SimpleTemplateModelIterator: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><org.crazycake.shiro.RedisSessionDAO: org.crazycake.shiro.common.SessionInMemory createSessionInMemory(org.apache.shiro.session.Session)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.net.www.MessageHeader$HeaderIterator: void <init>(sun.net.www.MessageHeader,java.lang.String,java.lang.Object)>-><java.lang.Object: void <init>()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.encoder.Encode: java.lang.String forHtml(java.lang.String)>
<net.sf.ehcache.transaction.ReadCommittedSoftLockImpl: net.sf.ehcache.Element getElement(net.sf.ehcache.transaction.TransactionID,net.sf.ehcache.transaction.SoftLockID)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Locale: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.expression.spel.ast.PropertyOrFieldReference: org.springframework.expression.TypedValue readProperty(org.springframework.expression.TypedValue,org.springframework.expression.EvaluationContext,java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<java.io.SequenceInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<sun.net.ProgressSource: void updateProgress(long,long)>-><sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionStore$1: java.util.Iterator sourceIterator()>-><net.sf.ehcache.transaction.local.LocalTransactionStore: java.util.List getKeys()>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.nio.HeapCharBuffer: java.nio.CharBuffer put(char[],int,int)>
<javax.net.ssl.HttpsURLConnection: void <init>(java.net.URL)>-><javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<java.net.URLPermission: java.lang.String actions()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>-><java.nio.Buffer: int remaining()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.nio.charset.CoderResult: java.lang.String toString()>
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String,long)>-><java.lang.String: int indexOf(java.lang.String)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashSet: java.util.Iterator iterator()>
<sun.net.www.HeaderParser: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>
<sun.nio.cs.StreamDecoder: int readBytes()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.http.PosterOutputStream: void <init>()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getQuery()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$SingletonList: int size()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<org.apache.catalina.connector.CoyoteOutputStream: boolean checkNonBlockingWrite()>-><org.apache.catalina.connector.OutputBuffer: boolean isBlocking()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.apache.catalina.connector.Response: boolean isCommitted()>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader getUserSetHeaders()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.util.Set entrySet()>-><org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.MeteredStream: long skip(long)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.rmi.transport.proxy.HttpSendOutputStream: void close()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.slf4j.event.Level: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.io.DataOutputStream: void writeChar(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$Values: java.util.Iterator iterator()>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap$EntrySet: void clear()>-><java.util.IdentityHashMap: void clear()>
<sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>-><java.net.URL: java.lang.String getProtocol()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: java.lang.Object[] toArray()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: void remove()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><java.io.FileInputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><java.io.BufferedInputStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><springfox.documentation.service.Representation: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void <init>()>
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String,long)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>
<org.owasp.encoder.Encode: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String)>-><java.lang.String: int length()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean add(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer rewind()>
<java.util.AbstractList: void removeRange(int,int)>-><java.util.AbstractList: java.util.ListIterator listIterator(int)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URL: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.lang.Long: long parseLong(java.lang.String)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.io.PrintStream: boolean checkError()>-><java.io.PrintStream: boolean checkError()>
<java.net.HttpConnectSocketImpl: int getLocalPort()>-><java.net.InetSocketAddress: int getPort()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$KeySet: int size()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Collections$EmptyList: int size()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.io.SequenceInputStream: void nextStream()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><reactor.core.Fuseable$QueueSubscription: java.lang.Object[] toArray()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><java.io.StringReader: void <init>(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.ChunkedInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpClient,sun.net.www.MessageHeader)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.Collections$EmptySet: boolean isEmpty()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.mgt.SimpleSession: boolean isStopped()>
<java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<springfox.documentation.service.Representation: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.http.KeepAliveStream: void close()>
<java.io.BufferedOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.ZoneOffset: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<freemarker.ext.beans._BeansAPI: void removeClearedReferencesFromCache(java.util.Map,java.lang.ref.ReferenceQueue)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket throwException()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Throwable)>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<redis.clients.jedis.BinaryClient: void expire(byte[],int)>-><redis.clients.jedis.Protocol: byte[] toByteArray(int)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyExpiration(org.apache.shiro.session.Session)>-><java.util.ArrayList$Itr: boolean hasNext()>
<freemarker.core.JavaTemplateDateFormatFactory: java.text.DateFormat getJavaDateFormat(int,java.lang.String,java.util.Locale,java.util.TimeZone)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.owasp.encoder.Encode: java.lang.String forHtml(java.lang.String)>-><org.owasp.encoder.Encode: java.lang.String forXml(java.lang.String)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>-><java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.crazycake.shiro.common.WorkAloneRedisManager: byte[] set(byte[],byte[],int)>-><redis.clients.jedis.BinaryJedis: java.lang.Long expire(byte[],int)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void realWriteBytes(java.nio.ByteBuffer)>-><org.apache.catalina.connector.ClientAbortException: void <init>(java.lang.Throwable)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.net.URLConnection: java.lang.String getContentHandlerPkgPrefixes()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap: int size()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.LinkedList$ListItr: boolean hasNext()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><springfox.documentation.service.Representation: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isStopped()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getStopTimestamp()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.AbstractMap$2: void clear()>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<sun.net.NetworkClient$2: java.net.Socket run()>-><java.net.Socket: void <init>(java.net.Proxy)>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.Hashtable$EntrySet: void clear()>-><java.security.Provider: void clear()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.String: char charAt(int)>
<java.util.Objects: int hashCode(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: int getNCCount()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<redis.clients.jedis.Transaction: void clear()>-><redis.clients.jedis.Transaction: java.lang.String discard()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.HttpConnectSocketImpl: java.net.Socket privilegedDoTunnel(java.lang.String,int)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<java.io.DataOutputStream: void writeInt(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.Thread: java.lang.Thread currentThread()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<freemarker.template.DefaultNonListCollectionAdapter: freemarker.template.TemplateModelIterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.SubList$1: java.lang.Object next()>
<java.io.DataInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.lang.Object[] toArray()>
<sun.net.www.http.KeepAliveCache: int getMaxConnections()>-><java.lang.Integer: int intValue()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.MessageHeader: void setIfNotSet(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>-><java.nio.HeapCharBuffer: java.nio.CharBuffer slice()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.ArrayList: void <init>()>
<org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>-><org.apache.catalina.connector.OutputBuffer: void realWriteBytes(java.nio.ByteBuffer)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.httpserver.Request$WriteStream: void write(int)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<net.sf.ehcache.util.SetAsList: java.util.Iterator iterator()>-><net.sf.ehcache.util.LargeCollection: java.util.Iterator iterator()>
<java.util.ArrayList$ArrayListSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.util.ArrayList$SubList: void add(int,java.lang.Object)>-><org.dom4j.tree.BackedList: void add(int,java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<java.io.DataOutputStream: void writeLong(long)>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<net.sf.ehcache.store.chm.SelectableConcurrentHashMap: net.sf.ehcache.Element get(java.lang.Object)>-><java.lang.String: int hashCode()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: int getDefaultPort(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><java.net.HttpConnectSocketImpl$2: java.lang.Object run()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.owasp.encoder.Encode$Buffer: void <init>()>-><java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.EnumMap: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><org.crazycake.shiro.serializer.StringSerializer: byte[] serialize(java.lang.Object)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Socket: void setSoTimeout(int)>
<java.util.Date: long parse(java.lang.String)>-><java.lang.String: int length()>
<redis.clients.jedis.BinaryClient: void expire(byte[],int)>-><redis.clients.jedis.Connection: void sendCommand(redis.clients.jedis.commands.ProtocolCommand,byte[][])>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.Thread: void setName(java.lang.String)>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyExpiration(org.apache.shiro.session.Session)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.AbstractMap$2: void clear()>-><java.util.AbstractMap: void clear()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<java.util.Collections$SetFromMap: void clear()>-><java.util.IdentityHashMap: void clear()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.protocol.https.HttpsClient: void closeIdleConnection()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.lang.CharSequence$1CharIterator: boolean hasNext()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.LocalDateTime: int compareTo(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMapKeySet: int size()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>-><net.sf.ehcache.Cache: java.lang.String getName()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.jar.Attributes: boolean isEmpty()>
<java.util.AbstractMap$1: void clear()>-><java.util.AbstractMap: void clear()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.security.Provider: java.util.Set entrySet()>
<java.io.FilterInputStream: void reset()>-><sun.net.www.MeteredStream: void reset()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<redis.clients.jedis.BinaryJedis: byte[] get(byte[])>-><redis.clients.jedis.Connection: byte[] getBinaryBulkReply()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.core.style.DefaultToStringStyler: void styleIdentityHashCode(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.util.ObjectUtils: java.lang.String getIdentityHexString(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.thymeleaf.standard.expression.RestrictedRequestAccessUtils$RestrictedRequestWrapper: java.lang.String getParameter(java.lang.String)>-><org.thymeleaf.standard.expression.RestrictedRequestAccessUtils$RestrictedRequestWrapper: org.thymeleaf.exceptions.TemplateProcessingException createRestrictedParameterAccessException()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap: java.util.Set entrySet()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.DigestAuthentication: boolean supportsPreemptiveAuthorization()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableList: void forEach(java.util.function.Consumer)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$SynchronizedMap: int size()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: int getDefaultPort()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<io.netty.util.internal.DefaultPriorityQueue: void bubbleDown(int,io.netty.util.internal.PriorityQueueNode)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.io.InputStream: void close()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.ProgressSource: void finishTracking()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.springframework.util.MimeType: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Socket: void setImpl()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: java.lang.String getPath()>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.lang.Error: void <init>(java.lang.String)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void checkRegisterForWrite()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeSet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>
<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<sun.net.httpserver.ServerImpl$ServerTimerTask: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractMap$2: int size()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Vector: java.util.Iterator iterator()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<com.zaxxer.hikari.pool.PoolBase: java.sql.Connection newConnection()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.chrono.ChronoZonedDateTime: int compareTo(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.IdentityHashMap$Values: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.springframework.beans.factory.support.AbstractBeanFactory: void afterPrototypeCreation(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean remove(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.EnumMap$EnumMapIterator: void remove()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<redis.clients.jedis.BinaryJedis: byte[] get(byte[])>-><redis.clients.jedis.BinaryJedis: void checkIsInMultiOrPipeline()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<sun.net.httpserver.ServerImpl$ServerTimerTask1: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.InflaterInputStream: void close()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Hashtable$ValueCollection: void clear()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void logFinest(java.lang.String)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$Values: int size()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><org.dom4j.tree.BackedList: boolean add(java.lang.Object)>
<net.sf.ehcache.transaction.local.LocalTransactionStore: java.util.List getKeys()>-><net.sf.ehcache.transaction.local.LocalTransactionStore: net.sf.ehcache.transaction.local.LocalTransactionContext getCurrentTransactionContext()>
<java.net.URLConnection: java.lang.Object getContent()>-><java.net.URLConnection: java.net.ContentHandler getContentHandler()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<sun.net.www.MeteredStream: int read()>-><java.io.ObjectInputStream$BlockDataInputStream: int read()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$EmptyMap: java.util.Set entrySet()>
<java.util.jar.Manifest$FastInputStream: void fill()>-><java.io.InputStream: int read(byte[],int,int)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<io.netty.util.internal.DefaultPriorityQueue: void bubbleUp(int,io.netty.util.internal.PriorityQueueNode)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<java.util.zip.InflaterInputStream: void fill()>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.HashSet: java.util.Iterator iterator()>
<net.sf.ehcache.transaction.local.LocalTransactionStore$1: java.util.Iterator sourceIterator()>-><net.sf.ehcache.transaction.local.LocalTransactionStore: net.sf.ehcache.store.Store access$100(net.sf.ehcache.transaction.local.LocalTransactionStore)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.TreeMap$KeySet: void clear()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readInt()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Map getAttributes()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><springfox.documentation.service.Representation: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.RegularImmutableList: int size()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>-><sun.net.www.http.HttpClient: java.lang.String getProxyHostUsed()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.apache.commons.collections.FastHashMap: int size()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.io.FileNotFoundException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: void forEach(java.util.function.Consumer)>
<org.apache.catalina.connector.ResponseFacade$DateHeaderPrivilegedAction: java.lang.Void run()>-><org.apache.catalina.connector.Response: void setDateHeader(java.lang.String,long)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: int size()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><java.net.HttpConnectSocketImpl$1: java.lang.Object run()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><sun.rmi.transport.proxy.HttpSendOutputStream: void write(int)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.net.URL: java.io.InputStream openStream()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<sun.util.locale.provider.CalendarNameProviderImpl: boolean isSupportedLocale(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<sun.net.www.MeteredStream: void close()>-><sun.net.ProgressSource: void finishTracking()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: boolean isEmpty()>
<java.util.Hashtable: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.ParseUtil: java.net.URI createURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: void checkPath(java.lang.String,java.lang.String,java.lang.String)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<java.lang.Object: java.lang.String toString()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<redis.clients.jedis.Pipeline: void sync()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<net.sf.ehcache.store.disk.DiskStore: boolean fault(java.lang.Object,net.sf.ehcache.store.disk.DiskStorageFactory$Placeholder,net.sf.ehcache.store.disk.DiskStorageFactory$DiskMarker)>-><java.lang.String: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<org.apache.catalina.connector.CoyoteOutputStream: void flush()>-><org.apache.catalina.connector.CoyoteOutputStream: void checkRegisterForWrite()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><java.lang.Thread: java.lang.Thread currentThread()>
<java.io.DataOutputStream: void writeInt(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<java.net.HttpConnectSocketImpl: java.net.InetAddress getInetAddress()>-><java.net.SocketImpl: java.net.InetAddress getInetAddress()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>-><java.net.InetSocketAddress: int getPort()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.lang.StringBuilder: int length()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.slf4j.helpers.SubstituteLogger: boolean isInfoEnabled()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><sun.security.util.HostnameChecker: sun.security.util.HostnameChecker getInstance(byte)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap: java.util.Set entrySet()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: int size()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Hashtable: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: boolean isFull(java.nio.Buffer)>-><java.nio.Buffer: int limit()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveStream: sun.net.www.http.KeepAliveStreamCleaner access$100()>
<org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.Class: java.lang.ClassLoader getClassLoader()>
<org.dom4j.tree.BackedList: void clear()>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URL: void <init>(java.net.URL,java.lang.String)>
<redis.clients.jedis.BinaryClient: void scan(byte[],redis.clients.jedis.ScanParams)>-><java.util.ArrayList: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$3: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$3: java.net.ResponseCache run()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendDomain(java.lang.StringBuilder,java.lang.String)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String,java.lang.Class)>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<sun.net.www.MeteredStream: long skip(long)>-><org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: long skip(long)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.aop.support.annotation.AnnotationMatchingPointcut: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.jsqlparser.statement.select.SelectExpressionItem: java.lang.String toString()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<sun.net.www.MessageHeader: java.lang.String getHeaderNamesInList()>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<redis.clients.jedis.Response: void <init>(redis.clients.jedis.Builder)>-><java.lang.Object: void <init>()>
<sun.rmi.transport.proxy.HttpInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath: void check(java.net.URL)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.security.Permission getPermission()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.catalina.core.ApplicationPart: long getSize()>-><org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: long getSize()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.StringBuffer: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String toCookieDate(java.util.Date)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: void close()>-><sun.net.httpserver.Request$ReadStream: void close()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><sun.net.www.http.ChunkedInputStream: void close()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: void forEach(java.util.function.Consumer)>
<org.apache.logging.log4j.message.ParameterFormatter: void appendCollection(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.owasp.encoder.XMLEncoder: java.nio.charset.CoderResult encodeArrays(java.nio.CharBuffer,java.nio.CharBuffer,boolean)>-><java.nio.CharBuffer: int arrayOffset()>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><java.io.BufferedInputStream: void close()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.EventObject: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<freemarker.template.SimpleCollection$SimpleTemplateModelIterator: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.text.AttributeEntry: java.lang.String toString()>-><springfox.documentation.service.Response: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest,java.lang.String)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: int size()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: int size()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.font.Decoration$DecorationImpl: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionStore: net.sf.ehcache.Element getQuiet(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: net.sf.ehcache.transaction.TransactionID getTransactionId()>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><org.crazycake.shiro.serializer.ObjectSerializer: java.lang.Object deserialize(byte[])>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.io.FileInputStream: void close()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$UnmodifiableCollection$1: void remove()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Map getAttributes()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.TreeMap$DescendingKeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.Set entrySet()>
<java.util.ArrayList$SubList: void add(int,java.lang.Object)>-><java.util.ArrayList$SubList: void add(int,java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: boolean isEmpty()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.InetSocketAddress: void <init>(java.lang.String,int)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<redis.clients.jedis.Transaction: void close()>-><redis.clients.jedis.Transaction: void clear()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: void forEach(java.util.function.Consumer)>
<cc.mrbird.febs.generator.controller.GeneratorController: void lambda$datasource$0(java.util.List,java.lang.String,com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DataSourceProperty)>-><sun.awt.util.IdentityLinkedList: boolean add(java.lang.Object)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.chrono.AbstractChronology: int compareTo(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<java.util.AbstractList: void clear()>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: int size()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.apache.catalina.connector.Response: boolean isAppCommitted()>-><org.apache.catalina.connector.Response: boolean isCommitted()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<org.apache.shiro.util.StringUtils: java.lang.String toDelimitedString(java.lang.Object[],java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: int size()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Hashtable: boolean isEmpty()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.AbstractList: void clear()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$Values: java.util.Iterator iterator()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<redis.clients.jedis.Response: java.lang.String toString()>-><redis.clients.jedis.BuilderFactory$3: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,java.util.List)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.List sortErrorViewResolvers(java.util.List)>
<java.lang.Object: java.lang.String toString()>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<net.sf.ehcache.store.disk.DiskStore$KeySet: java.lang.Object[] toArray()>-><net.sf.ehcache.store.disk.DiskStore$KeyIterator: java.lang.Object next()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<sun.net.www.MeteredStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<reactor.core.publisher.LambdaMonoSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void cancel()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><springfox.documentation.service.Response: int hashCode()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><org.apache.catalina.connector.ResponseFacade$DateHeaderPrivilegedAction: java.lang.Object run()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.io.BufferedInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URL: java.lang.String getPath()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String raw()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><redis.clients.jedis.ScanParams: void <init>()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Object run()>-><sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.String: int length()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<sun.net.www.http.HttpClient: void openServer()>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.http.HttpClient: void closeServer()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.Collection: java.util.stream.Stream stream()>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<org.springframework.core.style.ToStringCreator: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.LinkedList: int size()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<net.sf.ehcache.transaction.local.LocalTransactionStore: java.util.List getKeys()>-><net.sf.ehcache.transaction.local.LocalTransactionStore$1: void <init>(net.sf.ehcache.transaction.local.LocalTransactionStore)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Boolean: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.FileInputStream: int read(byte[],int,int)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.WeakHashMap$HashIterator: void remove()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><com.sun.jmx.mbeanserver.JmxMBeanServer$2: java.lang.Object run()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><com.google.common.collect.RegularImmutableMap$Values: int size()>
<java.security.DigestOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.util.MultiValueMapAdapter: java.util.List get(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.springframework.context.support.AbstractApplicationContext: boolean isSingleton(java.lang.String)>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<sun.rmi.transport.proxy.HttpInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer reset()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.io.IOException: void <init>(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream$1: void <init>()>-><java.lang.Object: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.owasp.encoder.XMLEncoder: java.nio.charset.CoderResult encodeArrays(java.nio.CharBuffer,java.nio.CharBuffer,boolean)>-><org.owasp.encoder.Encoder: java.nio.charset.CoderResult underflow(java.nio.CharBuffer,int,java.nio.CharBuffer,int)>
<redis.clients.jedis.ScanParams: void <init>()>-><java.util.EnumMap: void <init>(java.lang.Class)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Vector$Itr: boolean hasNext()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<javax.swing.SwingWorker$6: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler: void accept(javax.xml.stream.events.XMLEvent,reactor.core.publisher.SynchronousSink)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void next(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressEvent: void <init>(sun.net.ProgressSource,java.net.URL,java.lang.String,java.lang.String,sun.net.ProgressSource$State,long,long)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.net.URLPermission: void init(java.lang.String)>-><java.security.Permission: java.lang.String getName()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.Operators$MonoSubscriber: void clear()>
<java.time.ZoneId: java.time.ZoneId normalized()>-><java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.Instant)>
<java.io.DataOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>-><org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><reactor.core.Fuseable$QueueSubscription: java.util.Iterator iterator()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.InputStream: int read(byte[],int,int)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.BufferedOutputStream: void write(int)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.lang.System$2: void invokeFinalize(java.lang.Object)>-><sun.net.www.http.HttpClient: void finalize()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.Object next()>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String toCookieDate(java.util.Date)>-><java.text.DateFormat: void setTimeZone(java.util.TimeZone)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.net.InetSocketAddress: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.core.annotation.AnnotationAwareOrderComparator: void sort(java.lang.Object[])>-><java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: int size()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: long getTimeout(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.SimpleSession: long getTimeout()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void setPriority(int)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void <init>()>
<java.io.DataOutputStream: void writeChar(int)>-><sun.net.www.http.PosterOutputStream: void write(int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection$5: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String)>-><java.lang.Object: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><java.lang.System: long currentTimeMillis()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.Period: java.lang.String toString()>
<reactor.core.publisher.FluxIterable$IterableSubscription: void fastPath()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNonce(java.lang.String)>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onComplete()>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onComplete()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: void expire()>-><org.apache.shiro.session.mgt.SimpleSession: void stop()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.lang.String: int compareTo(java.lang.Object)>
<java.util.stream.Nodes$CollectionNode: java.util.Spliterator spliterator()>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.zone.ZoneRules: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.io.DataOutputStream: void writeBytes(java.lang.String)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<net.sf.ehcache.transaction.local.LocalTransactionContext: java.util.List getSoftLocksForCache(java.lang.String)>-><java.util.Collections: java.util.List emptyList()>
<java.io.DataOutputStream: void flush()>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.Object[] toArray()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.IdentityHashMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendSameSite(java.lang.StringBuilder,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: int getPort()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: int getPort()>
<java.util.ArrayList: boolean addAll(java.util.Collection)>-><sun.awt.util.IdentityLinkedList: java.lang.Object[] toArray()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><java.lang.Integer: int parseInt(java.lang.String)>
<sun.net.www.http.KeepAliveStreamCleaner$2: java.lang.Integer run()>-><sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>
<java.util.Hashtable: java.lang.String toString()>-><springfox.documentation.service.Response: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.EnumMap$Values: void clear()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.security.Provider: java.util.Set entrySet()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read()>-><sun.net.www.MeteredStream: int read()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.io.ObjectInputStream$PeekInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>-><sun.net.www.protocol.http.HttpURLConnection$6: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.Hashtable$KeySet: void clear()>-><java.util.Hashtable: void clear()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$CHMView: void clear()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: void clear()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object remove(java.lang.Object)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.ArrayList$SubList$1: void remove()>
<java.util.ArrayList$SubList: void add(int,java.lang.Object)>-><org.springframework.core.io.buffer.LimitedDataBufferList: void add(int,java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><java.net.SocketInputStream: int read(byte[])>
<java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.mgt.SimpleSession: void expire()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<javax.servlet.http.HttpServletRequestWrapper: java.lang.String getContextPath()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.TreeMap$KeySet: boolean isEmpty()>-><java.util.concurrent.ConcurrentSkipListMap: boolean isEmpty()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Response: java.lang.String toString()>
<org.springframework.core.style.ToStringCreator: org.springframework.core.style.ToStringCreator append(java.lang.String,java.lang.Object)>-><org.springframework.core.style.ToStringCreator: void printFieldSeparatorIfNecessary()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.core.BuiltinVariable: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.URLConnection: void setProxiedHost(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressMonitor: boolean shouldMeterInput(java.net.URL,java.lang.String)>
<net.sf.ehcache.transaction.local.LocalTransactionStore: void assertNotTimedOut()>-><net.sf.ehcache.transaction.local.LocalTransactionContext: net.sf.ehcache.transaction.TransactionID getTransactionId()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<sun.net.www.http.ChunkedInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpClient,sun.net.www.MessageHeader)>-><java.io.InputStream: void <init>()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.time.ZoneId: java.time.ZoneId normalized()>-><java.time.ZoneOffset: java.time.zone.ZoneRules getRules()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object poll()>-><reactor.core.publisher.InnerOperator: reactor.util.context.Context currentContext()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<java.util.Date: long parse(java.lang.String)>-><sun.util.calendar.CalendarDate: int getYear()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.apache.shiro.session.mgt.DelegatingSession: long getTimeout()>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: long getTimeout(org.apache.shiro.session.mgt.SessionKey)>
<java.util.TreeMap$Entry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<redis.clients.jedis.ScanParams: java.util.Collection getParams()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><java.util.Collections$1: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>-><java.lang.String: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.Executors$RunnableAdapter: java.lang.Object call()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<ch.qos.logback.core.helpers.ThrowableToStringArray: void extract(java.util.List,java.lang.Throwable,java.lang.StackTraceElement[])>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList: java.util.ListIterator listIterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onNext(java.lang.Object)>-><org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler: void accept(java.lang.Object,java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.net.Socket: void <init>(java.net.Proxy)>-><sun.net.ApplicationProxy: sun.net.ApplicationProxy create(java.net.Proxy)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: void forEach(java.util.function.Consumer)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.AbstractList: void removeRange(int,int)>-><java.util.LinkedList: java.util.ListIterator listIterator(int)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$KeySet: int size()>
<sun.net.www.http.ChunkedInputStream: void closeUnderlying()>-><sun.net.www.http.HttpClient: void closeServer()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><org.springframework.http.HttpHeaders: java.util.Set entrySet()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$Values: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.util.Calendar: java.util.Calendar getInstance()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.net.ProtocolException: void <init>(java.lang.String)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(int)>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.io.BufferedInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int available()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.rmi.transport.proxy.HttpOutputStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.MonthDay: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><java.io.InputStream: void close()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<sun.nio.cs.StreamDecoder: void implClose()>-><sun.net.www.MeteredStream: void close()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.session.ProxiedSession: void <init>(org.apache.shiro.session.Session)>-><java.lang.Object: void <init>()>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<sun.net.www.http.HttpClient$1: void <init>(sun.net.www.http.HttpClient,java.net.InetSocketAddress)>-><java.lang.Object: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.IdentityHashMap$IdentityHashMapIterator: void remove()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: void remove()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.apache.catalina.connector.ResponseFacade$DateHeaderPrivilegedAction: java.lang.Void run()>-><org.apache.catalina.connector.Response: void addDateHeader(java.lang.String,long)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: int length()>
<reactor.core.publisher.FluxIterable$IterableSubscription: void fastPath()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<redis.clients.jedis.Connection: java.lang.Long getIntegerReply()>-><redis.clients.jedis.Connection: void flush()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$Values: int size()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.core.io.buffer.NettyDataBuffer: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.MessageHeader: java.util.Iterator multiValueIterator(java.lang.String)>-><sun.net.www.MessageHeader$HeaderIterator: void <init>(sun.net.www.MessageHeader,java.lang.String,java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.ext.beans.OverloadedNumberUtil$NumberWithFallbackType: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><redis.clients.jedis.BuilderFactory$5: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.http.ChunkedInputStream: void ensureRawAvailable(int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><org.crazycake.shiro.RedisManager: redis.clients.jedis.Jedis getJedis()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>-><java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.lang.Thread: java.lang.Thread currentThread()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStop(org.apache.shiro.session.Session)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.apache.catalina.connector.CoyoteOutputStream: boolean checkNonBlockingWrite()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber: boolean isEmpty()>
<java.util.Objects: int hashCode(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: void wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.net.SocketOutputStream: void close()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.ClassLoader getClassLoader()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.EnumMap$EntrySet: void clear()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: char charAt(int)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Vector: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.regex.Matcher: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.apache.tomcat.util.http.ConcurrentDateFormat: java.lang.String format(java.util.Date)>-><org.apache.tomcat.util.http.ConcurrentDateFormat: java.text.SimpleDateFormat createInstance()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<java.util.ComparableTimSort: void mergeHi(int,int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validate(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.DumperOptions$Version: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Introspector: javax.management.NotCompliantMBeanException throwException(java.lang.Class,java.lang.Throwable)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><java.net.SocketInputStream: void close()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.io.SequenceInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$KeySet: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.JdkBackedImmutableMap: java.lang.Object get(java.lang.Object)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String unquote(java.lang.String)>-><java.lang.String: int length()>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.BasicAuthentication: boolean supportsPreemptiveAuthorization()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.math.BigInteger: java.lang.String toString()>
<redis.clients.jedis.BinaryJedis: redis.clients.jedis.ScanResult scan(byte[],redis.clients.jedis.ScanParams)>-><java.util.ArrayList: java.lang.Object get(int)>
<java.io.PrintStream: void write(int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>
<sun.net.www.http.ChunkedOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void ensureOpen()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: java.lang.Object[] toArray()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.io.ObjectInputStream$PeekInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.lang.ProcessEnvironment$StringEntrySet: void clear()>
<sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>-><java.net.URL: int getPort()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Float: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.rmi.transport.proxy.HttpOutputStream: void close()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>
<net.sf.ehcache.store.disk.DiskStore: net.sf.ehcache.Element getQuiet(java.lang.Object)>-><java.lang.String: int hashCode()>
<org.apache.catalina.connector.OutputBuffer: void writeByte(int)>-><org.apache.catalina.connector.OutputBuffer: void transfer(byte,java.nio.ByteBuffer)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.text.PatternEntry: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<cc.mrbird.febs.FebsShiroApplication: void main(java.lang.String[])>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.boot.autoconfigure.web.ErrorProperties)>
<sun.rmi.transport.proxy.HttpSendInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>-><javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>
<java.util.EnumMap: int entryHashCode(int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Proxy: java.net.Proxy$Type type()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.apache.catalina.connector.ResponseFacade: void addHeader(java.lang.String,java.lang.String)>-><org.apache.catalina.connector.ResponseFacade: boolean isCommitted()>
<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<sun.nio.cs.StreamDecoder: void implClose()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)>
<org.owasp.encoder.XMLEncoder: java.nio.charset.CoderResult encodeArrays(java.nio.CharBuffer,java.nio.CharBuffer,boolean)>-><java.nio.CharBuffer: char[] array()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: java.util.Iterator iterator()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><java.io.ByteArrayOutputStream: void write(int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<redis.clients.jedis.util.RedisOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<sun.rmi.transport.proxy.HttpInputStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)>-><org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Hashtable: java.util.Set entrySet()>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String)>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String removeCaseInsensitiveKey(java.lang.String)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: boolean isEmpty()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: net.sf.ehcache.transaction.TransactionID getTransactionId()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void setRequestMethod(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>
<redis.clients.jedis.Queable: boolean hasPipelinedResponse()>-><java.util.AbstractCollection: boolean isEmpty()>
<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: javax.servlet.ServletResponse getServletResponse()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.TreeMap$DescendingKeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.net.Proxy: java.lang.String toString()>-><java.net.Proxy: java.net.SocketAddress address()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><sun.net.www.ParseUtil: boolean isEscaped(java.lang.String,int)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.jar.Attributes: java.util.Set entrySet()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$Values: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.Arrays$ArrayList: java.lang.Object[] toArray()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.Duration: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<java.util.WeakHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.lang.reflect.Executable: java.lang.String sharedToGenericString(int,boolean)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList: void clear()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.io.BufferedInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.net.Socket: void setTcpNoDelay(boolean)>-><java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getNewKeys()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.Base64$Encoder: int encode0(byte[],int,int,byte[])>-><java.lang.Math: int min(int,int)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getUriPathSegmentParamValue(javax.servlet.ServletRequest,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.Operators$EmptySubscription: int size()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.naming.NamingException: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.net.ProtocolException: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<java.io.SequenceInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getUriPathSegmentParamValue(javax.servlet.ServletRequest,java.lang.String)>-><java.lang.String: int length()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Response: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.TreeMap$KeySet: void clear()>-><java.util.concurrent.ConcurrentSkipListMap: void clear()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<freemarker.ext.beans.CollectionModel: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>-><java.lang.NullPointerException: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$CHMView: boolean isEmpty()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletRequest getHttpRequest(java.lang.Object)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.lang.Object[] toArray()>
<java.io.DataInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.crazycake.shiro.common.WorkAloneRedisManager: byte[] get(byte[])>-><redis.clients.jedis.BinaryJedis: byte[] get(byte[])>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.io.PrintStream: void newLine()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.TreeSet: int size()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.util.Collections$UnmodifiableCollection: int size()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>
<sun.net.ApplicationProxy: void <init>(java.net.Proxy)>-><java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><com.google.common.collect.ImmutableMap: java.lang.Object remove(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><java.io.ObjectInputStream$BlockDataInputStream: int available()>
<java.io.DataOutputStream: void writeLong(long)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<java.util.Collections$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: java.lang.String getBriefDescription()>-><com.fasterxml.classmate.types.ResolvedObjectType: java.lang.StringBuilder appendBriefDescription(java.lang.StringBuilder)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.catalina.session.StandardSession: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.StringJoiner: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void ensureOpen()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: void validate()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<redis.clients.jedis.BinaryJedis: void checkIsInMultiOrPipeline()>-><redis.clients.jedis.Queable: boolean hasPipelinedResponse()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.IdentityHashMap$KeySet: void clear()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.AuthenticationInfo: void endAuthRequest(java.lang.String)>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.util.MultiValueMapAdapter: java.util.Collection values()>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.Collection values()>
<org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>-><java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber: void clear()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.template.Version: java.lang.String toString()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><sun.rmi.transport.tcp.MultiplexInputStream: int available()>
<org.springframework.util.MultiValueMapAdapter: java.util.Set keySet()>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.Set keySet()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.ArrayList$Itr: void remove()>
<sun.nio.cs.StreamDecoder: void implClose()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.www.MeteredStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: int getPort()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: boolean isEmpty()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>-><java.lang.String: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.DigestAuthentication: boolean supportsPreemptiveAuthorization()>
<org.springframework.util.MultiValueMapAdapter: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap: int size()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<springfox.documentation.service.Representation: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.ProgressSource: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: boolean hasLockedAnything()>-><java.util.HashMap: boolean isEmpty()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<redis.clients.jedis.JedisSentinelPool$MasterListener: void shutdown()>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<java.text.AttributeEntry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse getServletResponse()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.EnumMap: int entryHashCode(int)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.ParseUtil: void appendFragment(java.lang.StringBuffer,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.lang.ThreadLocal: void remove()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><springfox.documentation.service.Response: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<java.lang.System$2: void invokeFinalize(java.lang.Object)>-><sun.net.www.MeteredStream: void finalize()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>
<java.io.ObjectInputStream$PeekInputStream: int read()>-><sun.net.www.MeteredStream: int read()>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,boolean,sun.net.www.protocol.http.HttpURLConnection)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.http.conn.ssl.SubjectName: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.context.support.StaticMessageSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URLConnection: long getIfModifiedSince()>
<org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<java.util.TimSort: void mergeLo(int,int,int,int)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.apache.commons.collections.FastHashMap: java.lang.Object get(java.lang.Object)>
<javax.management.MBeanPermission: void setClassName(java.lang.String)>-><java.lang.String: boolean endsWith(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void <init>(java.nio.ByteBuffer,java.io.InputStream)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.net.SocketInputStream: void close()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.IdentityHashMap: int size()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>-><java.io.FilterInputStream: int read(byte[],int,int)>
<org.apache.catalina.connector.Response: void setDateHeader(java.lang.String,long)>-><org.apache.tomcat.util.http.FastHttpDateFormat: java.lang.String formatDate(long)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: java.lang.Object get(int)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Socket: void connect(java.net.SocketAddress,int)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.util.zip.CheckedOutputStream: void write(byte[],int,int)>
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: void <init>()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.aop.support.ComposablePointcut: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.net.UnknownContentHandler: java.lang.Object getContent(java.net.URLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.SubList: java.util.AbstractList access$100(java.util.SubList)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onError(java.lang.Throwable)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.AssertionError: void <init>()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableMap: boolean isEmpty()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void <init>(org.apache.shiro.session.mgt.ValidatingSessionManager)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<sun.net.www.http.KeepAliveStreamCleaner$2: java.lang.Object run()>-><sun.net.www.http.KeepAliveStreamCleaner$2: java.lang.Integer run()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<net.sf.ehcache.transaction.local.LocalTransactionStore: net.sf.ehcache.Element removeElement(net.sf.ehcache.Element,net.sf.ehcache.store.ElementValueComparator)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>
<sun.net.www.MeteredStream: int available()>-><sun.rmi.transport.proxy.HttpInputStream: int available()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendPath(java.lang.StringBuilder,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean)>-><java.util.Collections: java.util.Set emptySet()>
<redis.clients.jedis.Pipeline: void close()>-><redis.clients.jedis.Pipeline: void clear()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.apache.poi.xssf.streaming.SXSSFRow$FilledCellIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream access$200(sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.HashMap$EntrySet: void clear()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.util.TreeMap$KeySet: void clear()>-><java.util.TreeMap: void clear()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.event.RegisteredEventListeners: java.lang.String toString()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.font.AttributeValues: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.AbstractList$ListItr: void add(java.lang.Object)>-><java.util.AbstractList: void add(int,java.lang.Object)>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveCleanerEntry: void setQueuedForCleanup()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><java.io.ObjectOutputStream$BlockDataOutputStream: void write(int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.web.util.pattern.PathPattern: char getSeparator()>-><org.springframework.http.server.PathContainer$Options: char separator()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(sun.net.www.protocol.http.HttpCallerInfo,java.lang.String)>-><java.lang.Object: void <init>()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String unquote(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.Collections$EmptyList: java.lang.Object[] toArray()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletRequest getServletRequest()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.sql.Timestamp: int compareTo(java.lang.Object)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.mgt.SessionKey)>
<org.thymeleaf.exceptions.TemplateProcessingException: void <init>(java.lang.String)>-><org.thymeleaf.exceptions.TemplateProcessingException: void <init>(java.lang.String,java.lang.Throwable)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.io.ByteArrayOutputStream: int size()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>
<java.net.URLPermission: void init(java.lang.String)>-><java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.crazycake.shiro.serializer.ObjectSerializer: java.lang.Object deserialize(byte[])>
<org.crazycake.shiro.RedisSessionDAO: void update(org.apache.shiro.session.Session)>-><org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: sun.net.ProgressSource$State getState()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.Response: java.lang.String toString()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedList: java.lang.Object merge(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: int transfer(byte[],int,int,java.nio.ByteBuffer)>-><java.nio.Buffer: int remaining()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><redis.clients.jedis.BinaryJedis: redis.clients.jedis.ScanResult scan(byte[],redis.clients.jedis.ScanParams)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void disconnect()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnect()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>-><java.util.Random: void nextBytes(byte[])>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.ConcurrentHashMap: int size()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.net.URL: java.lang.String toExternalForm()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$1: void <init>(java.lang.String,java.net.URL,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.Authenticator$RequestorType)>-><java.lang.Object: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$EmptyMap: java.util.Set keySet()>
<org.apache.tomcat.util.http.ConcurrentDateFormat: java.text.SimpleDateFormat createInstance()>-><java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
<org.apache.shiro.session.mgt.ImmutableProxiedSession: void <init>(org.apache.shiro.session.Session)>-><org.apache.shiro.session.ProxiedSession: void <init>(org.apache.shiro.session.Session)>
<org.apache.catalina.connector.OutputBuffer: int transfer(byte[],int,int,java.nio.ByteBuffer)>-><java.lang.Math: int min(int,int)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream,boolean)>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: boolean isFull(java.nio.Buffer)>-><java.nio.Buffer: int capacity()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<redis.clients.jedis.BinaryJedis: java.lang.String set(byte[],byte[])>-><redis.clients.jedis.BinaryClient: void set(byte[],byte[])>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: void reset()>
<redis.clients.jedis.Connection: java.util.List getMany(int)>-><redis.clients.jedis.Connection: java.lang.Object readProtocolWithCheckingBroken()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getNonce()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<ch.qos.logback.classic.LoggerContext: void resetListenersExceptResetResistant()>-><io.micrometer.core.instrument.binder.logging.LogbackMetrics$1: boolean isResetResistant()>
<java.util.Hashtable: java.lang.String toString()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: char charAt(int)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.InetSocketAddress: int getPort()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.io.InputStream: void close()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><java.net.SocketInputStream: void close()>
<org.apache.catalina.connector.OutputBuffer: void append(byte[],int,int)>-><org.apache.catalina.connector.OutputBuffer: int transfer(byte[],int,int,java.nio.ByteBuffer)>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><java.net.SocketInputStream: void close()>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.Operators$ScalarSubscription: void clear()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><sun.security.util.HostnameChecker: void match(java.lang.String,java.security.cert.X509Certificate)>
<java.net.URLConnection: java.lang.String typeToPackageName(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><io.netty.buffer.AbstractByteBuf: int compareTo(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap: java.util.Set keySet()>
<reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onNext(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void update(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.util.zip.InflaterInputStream: void fill()>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<sun.net.www.protocol.https.HttpsClient: void putInKeepAliveCache()>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<com.fasterxml.jackson.core.JsonLocation: java.lang.StringBuilder _appendSourceDesc(java.lang.StringBuilder)>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.ParseUtil: boolean isEscaped(java.lang.String,int)>-><java.lang.String: char charAt(int)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber: boolean isEmpty()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: int getPort()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.FileOutputStream: void write(byte[],int,int)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean supportsPreemptiveAuthorization()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<java.util.TreeMap$KeySet: void clear()>-><java.util.AbstractMap: void clear()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.String: java.lang.String toString()>
<java.io.FilterInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: java.lang.String getBriefDescription()>-><java.lang.StringBuilder: void <init>()>
<net.sf.ehcache.store.LegacyStoreWrapper: java.util.List getKeys()>-><java.util.HashSet: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.net.Proxy: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.security.Provider: java.lang.Object remove(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,java.util.List)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: long getTimeout(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.HttpServletSession: long getTimeout()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.LinkedHashMap$LinkedEntrySet: void clear()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.util.zip.ZipOutputStream: void close()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.AbstractList: void clear()>-><java.util.Arrays$ArrayList: int size()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.net.URLPermission: void init(java.lang.String)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.www.ParseUtil: boolean isEscaped(java.lang.String,int)>-><java.lang.String: int length()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$5: java.lang.String run()>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.apache.commons.collections.FastHashMap$CollectionView: void clear()>-><java.util.HashMap$EntrySet: void clear()>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<java.util.Date: long parse(java.lang.String)>-><java.util.Date: sun.util.calendar.BaseCalendar getCalendarSystem(int)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Collections$1: java.lang.Object next()>
<java.util.EnumMap: int entryHashCode(int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.springframework.util.MultiValueMapAdapter: java.util.Set keySet()>-><java.util.Collections$UnmodifiableMap: java.util.Set keySet()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.NoSuchElementException: void <init>()>
<freemarker.core.Configurable: void validateFormatNames(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.core.style.ToStringCreator: org.springframework.core.style.ToStringCreator append(java.lang.String,java.lang.Object)>-><org.springframework.core.style.DefaultToStringStyler: void styleField(java.lang.StringBuilder,java.lang.String,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.BasicAuthentication: boolean isAuthorizationStale(java.lang.String)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><springfox.documentation.service.Representation: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.net.ProgressSource: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.buffer.EmptyByteBuf: java.lang.String toString()>
<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>-><java.nio.HeapCharBuffer: char get(int)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.springframework.web.servlet.HttpServletBean: void setEnvironment(org.springframework.core.env.Environment)>-><org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.ImmutableMap: java.util.Set entrySet()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.io.ObjectOutputStream$BlockDataOutputStream: void write(byte[],int,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream: void reset()>-><java.io.IOException: void <init>(java.lang.String)>
<java.io.DataOutputStream: void writeLong(long)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.apache.commons.collections.FastHashMap: java.util.Set keySet()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.Enum: int ordinal()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.apache.tomcat.util.http.FastHttpDateFormat: java.lang.String formatDate(long)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.SingletonImmutableList: int size()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.TreeMap$Entry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.rmi.transport.tcp.MultiplexInputStream: int read(byte[],int,int)>
<org.springframework.core.annotation.MergedAnnotationsCollection$AnnotationsSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<sun.net.www.MeteredStream: void close()>-><java.io.FilterInputStream: void close()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ObjectReader: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.core.style.DefaultToStringStyler: void styleFieldStart(java.lang.StringBuilder,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.Vector$VectorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.lang.Thread: boolean isAlive()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.net.Socket: void close()>-><java.net.AbstractPlainSocketImpl: void close()>
<java.lang.Object: java.lang.String toString()>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.util.logging.PlatformLogger: void finer(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap: int size()>
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveStream: java.lang.Thread access$002(java.lang.Thread)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getReferencedSessionId(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: boolean isSessionIdUrlRewritingEnabled()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Throwable: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String raw()>
<sun.net.www.MeteredStream: int available()>-><sun.net.www.MeteredStream: int available()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.String,java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><redis.clients.jedis.HostAndPort: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object getValidValue()>-><java.util.concurrent.ConcurrentSkipListMap: java.lang.Object access$000()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>-><java.lang.Object: java.lang.Object clone()>
<org.owasp.encoder.XMLEncoder: int firstEncodedOffset(java.lang.String,int,int)>-><java.lang.Character: boolean isLowSurrogate(char)>
<redis.clients.jedis.Pipeline: redis.clients.jedis.Response discard()>-><redis.clients.jedis.exceptions.JedisDataException: void <init>(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.security.UnresolvedPermission: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<sun.security.provider.PolicyFile: java.security.Permissions getPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[])>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.io.FilterInputStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.SingletonImmutableList: int size()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.RedisConfiguration: org.springframework.data.redis.connection.RedisPassword getPasswordOrElse(org.springframework.data.redis.connection.RedisConfiguration,java.util.function.Supplier)>-><org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: org.springframework.data.redis.connection.RedisPassword getPassword()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.StringTokenizer: java.lang.String nextToken()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><java.util.HashSet: boolean remove(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.ChunkedInputStream: int available()>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.util.concurrent.Queues$ZeroQueue: void clear()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.lang.Long: int compareTo(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><java.util.Vector: boolean add(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.io.DataOutputStream: void writeInt(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getAlgorithm()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>-><sun.net.www.protocol.http.HttpURLConnection: int getReadTimeout()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getSessionIdCookieValue(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletResponse toHttp(javax.servlet.ServletResponse)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><reactor.util.context.ContextN: java.lang.Object get(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: void clear()>-><java.lang.UnsupportedOperationException: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><sun.net.www.protocol.http.HttpURLConnection$3: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter: int size()>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><io.netty.buffer.SwappedByteBuf: int compareTo(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<net.sf.ehcache.pool.sizeof.ObjectGraphWalker: long walk(int,boolean,java.lang.Object[])>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Vector: boolean add(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: void clear()>-><java.util.LinkedHashMap$LinkedEntrySet: void clear()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.ehcache.store.chm.SelectableConcurrentHashMap$KeySet: java.lang.Object[] toArray()>-><net.sf.ehcache.store.chm.SelectableConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void putInKeepAliveCache()>-><sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void update(org.apache.shiro.session.Session)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.commons.beanutils.converters.ConverterFacade: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Long: long parseLong(java.lang.String)>
<java.io.ObjectInputStream$PeekInputStream: int peek()>-><sun.net.www.http.ChunkedInputStream: int read()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.http.HttpClient: void setIgnoreContinue(boolean)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.aop.support.ClassFilters$IntersectionClassFilter: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractList$Itr: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><java.util.zip.DeflaterOutputStream: void write(int)>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: void remove()>
<com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.TypeBindings: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.MeteredStream: void finalize()>-><java.lang.Object: void finalize()>
<reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onError(java.lang.Throwable)>-><reactor.core.publisher.Operators: void onErrorDropped(java.lang.Throwable,reactor.util.context.Context)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<net.sf.ehcache.store.chm.SelectableConcurrentHashMap$Segment: boolean evict()>-><java.lang.String: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.apache.shiro.session.UnknownSessionException: void <init>(java.lang.Throwable)>
<net.sf.ehcache.pool.sizeof.ObjectGraphWalker: long walk(int,boolean,java.lang.Object[])>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><redis.clients.jedis.ScanResult: byte[] getCursorAsBytes()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: int size()>-><java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object getValidValue()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.core.style.DefaultToStringStyler: void styleField(java.lang.StringBuilder,java.lang.String,java.lang.Object)>-><org.springframework.core.style.DefaultToStringStyler: void styleFieldStart(java.lang.StringBuilder,java.lang.String)>
<freemarker.ext.beans.CollectionModel: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><java.util.HashSet: void <init>()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<sun.net.www.http.ClientVector: void <init>(int)>-><java.util.Stack: void <init>()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>-><java.lang.System: long currentTimeMillis()>
<java.io.FilterInputStream: int read()>-><org.apache.poi.util.ReplacingInputStream: int read()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.naming.ldap.Rdn$RdnEntry: java.lang.String toString()>
<org.springframework.beans.factory.support.DisposableBeanAdapter: void destroy()>-><org.springframework.data.redis.connection.jedis.JedisConnectionFactory: void destroy()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>-><org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<sun.nio.cs.StreamDecoder: int readBytes()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.crazycake.shiro.common.WorkAloneRedisManager: byte[] set(byte[],byte[],int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void setInterval(long)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.template.SimpleScalar: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.SubList: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><java.util.zip.CheckedOutputStream: void write(int)>
<sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>-><java.io.FilterInputStream: void <init>(java.io.InputStream)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.AbstractCollection: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void removeSessionIdCookie(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: org.apache.shiro.web.servlet.Cookie getSessionIdCookie()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$CHMView: int size()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: void remove()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$Values: int size()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap: java.lang.Object get(java.lang.Object)>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.apache.poi.util.ReplacingInputStream: int read()>-><java.lang.Enum: int ordinal()>
<redis.clients.jedis.BinaryClient: void scan(byte[],redis.clients.jedis.ScanParams)>-><redis.clients.jedis.ScanParams: java.util.Collection getParams()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.concurrent.ArrayBlockingQueue: void clear()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.TreeMap$Entry: int hashCode()>-><springfox.documentation.service.Representation: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.util.LazyStreamable: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><springfox.documentation.service.Response: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getStopTimestamp()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getContextPath()>
<net.sf.ehcache.management.sampled.SampledMBeanRegistrationProvider: void dispose()>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.io.BufferedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int available()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object)>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><java.util.concurrent.locks.LockSupport: void parkNanos(long)>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.net.URLConnection: java.net.ContentHandler getContentHandler()>-><java.lang.Throwable: void printStackTrace()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.net.Socket: java.io.OutputStream getOutputStream()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.util.StringUtils: java.lang.String clean(java.lang.String)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: long getLastModified()>-><java.net.URLConnection: long getLastModified()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.jsoup.nodes.Comment: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyList: java.lang.Object[] toArray()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: java.lang.String valueOf(char)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.rmi.transport.proxy.HttpInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.nio.CharBuffer: int compareTo(java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.owasp.encoder.XMLEncoder: java.nio.charset.CoderResult encodeArrays(java.nio.CharBuffer,java.nio.CharBuffer,boolean)>-><java.nio.Buffer: int position()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.FilterInputStream: int read(byte[])>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.lang.ProcessEnvironment$StringEntrySet$1: void remove()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: int size()>
<sun.rmi.transport.proxy.HttpSendInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>
<net.sf.ehcache.util.SetAsList: void <init>(java.util.Set)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromAny(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.PrintStream: void write(int)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><net.sf.ehcache.store.cachingtier.PooledBasedBackEnd: java.lang.Object put(java.lang.Object,java.lang.Object)>
<redis.clients.jedis.util.RedisOutputStream: void flushBuffer()>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.http.HttpHeaders: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.LinkedList: void clear()>
<org.springframework.core.style.DefaultToStringStyler: void styleValue(java.lang.StringBuilder,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.job.entity.Job: java.lang.String toString()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.web.filter.GenericFilterBean: void destroy()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<sun.net.www.MeteredStream: int available()>-><sun.net.httpserver.SSLStreams$InputStream: int available()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRemoteUser()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>
<java.io.ObjectInputStream$PeekInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.ResponseFacade: boolean isCommitted()>-><org.apache.catalina.connector.Response: boolean isAppCommitted()>
<java.text.AttributeEntry: java.lang.String toString()>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.http.KeepAliveCache$1: java.lang.Object run()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.AbstractSet: boolean equals(java.lang.Object)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: sun.net.ProgressSource$State getState()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.lang.String: void getChars(int,int,char[],int)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.ext.beans.BeansWrapper: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>-><java.util.HashMap: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.HttpURLConnection: int getResponseCode()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroupMember: int compareTo(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: void destroy()>-><redis.clients.jedis.BinaryJedisCluster: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.terracotta.statistics.jsr166e.LongAdder: java.lang.String toString()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap: java.util.Set keySet()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.AbstractList$Itr: java.lang.Object next()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionStore: boolean replace(net.sf.ehcache.Element,net.sf.ehcache.Element,net.sf.ehcache.store.ElementValueComparator)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.util.MultiValueMapAdapter: java.lang.Object get(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.String toString()>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.util.logging.PlatformLogger: void fine(java.lang.String)>-><sun.util.logging.PlatformLogger$JavaLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><redis.clients.jedis.Response: java.lang.String toString()>
<cc.mrbird.febs.others.controller.EximportController: cc.mrbird.febs.common.entity.FebsResponse importExcels(org.springframework.web.multipart.MultipartFile)>-><org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile: java.lang.String getOriginalFilename()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.io.FileInputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int available()>-><sun.net.www.MeteredStream: int available()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(com.fasterxml.classmate.util.ClassKey)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.AbstractMap: java.util.Set keySet()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.SocketImpl: void setSocket(java.net.Socket)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.HashMap$KeySet: void forEach(java.util.function.Consumer)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.io.FilterOutputStream: void close()>-><org.apache.catalina.connector.CoyoteOutputStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.lang.StringBuilder: void <init>()>
<springfox.documentation.service.Representation: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.util.calendar.Era: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><java.io.BufferedInputStream: void close()>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><java.lang.String: int length()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toUpperCase()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.SingletonImmutableList: int size()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.HttpsClient: int getDefaultPort()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: boolean isEmpty()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<redis.clients.jedis.JedisSentinelPool: void destroy()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection$6: java.lang.Void run()>-><sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>
<reactor.core.publisher.LambdaMonoSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void cancel()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>-><java.util.StringTokenizer: java.lang.String nextToken()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object remove(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.awt.image.ColorModel: java.lang.String toString()>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><sun.net.www.protocol.https.HttpsClient: java.net.Socket createSocket()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.Socket privilegedDoTunnel(java.lang.String,int)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidationIfNecessary()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: boolean isSessionValidationSchedulerEnabled()>
<java.util.IdentityHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<freemarker.cache.TemplateCache: freemarker.template.Template getTemplateInternal(java.lang.String,java.util.Locale,java.lang.Object,java.lang.String,boolean)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<java.io.ObjectInputStream$PeekInputStream: int available()>-><sun.net.www.MeteredStream: int available()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.quartz.utils.Key: int compareTo(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.lang.Object: void <init>()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: int length()>
<sun.nio.cs.StreamEncoder: void writeBytes()>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DelegatingSession: long getTimeout()>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><redis.clients.jedis.ScanParams: redis.clients.jedis.ScanParams match(byte[])>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpSendOutputStream: void write(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><java.nio.CharBuffer: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Response: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.Operators$ScalarSubscription: int size()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<sun.net.www.protocol.https.DelegateHttpsURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler,javax.net.ssl.HttpsURLConnection)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<freemarker.ext.beans._BeansAPI: void removeClearedReferencesFromCache(java.util.Map,java.lang.ref.ReferenceQueue)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<cc.mrbird.febs.others.controller.EximportController: void lambda$generateImportTemplate$0(java.util.List,int)>-><sun.awt.util.IdentityLinkedList: boolean add(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: int size()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$EntrySet: int size()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getMethod()>
<java.util.Date: long parse(java.lang.String)>-><java.util.TimeZone: java.util.TimeZone getDefaultRef()>
<java.util.concurrent.ConcurrentHashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.lang.Boolean: int compareTo(java.lang.Object)>
<java.io.SequenceInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String scheme()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<net.sf.ehcache.store.disk.DiskStorageFactory: void unbind()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.boot.autoconfigure.web.ErrorProperties)>-><org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.boot.autoconfigure.web.ErrorProperties,java.util.List)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<java.net.URLConnection: void setUseCaches(boolean)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.JdkBackedImmutableMap: int size()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<com.fasterxml.classmate.ResolvedType: java.lang.String getBriefDescription()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.reflect.Parameter: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer$1: javax.management.loading.ClassLoaderRepository run()>-><com.sun.jmx.mbeanserver.MBeanInstantiator: com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository getClassLoaderRepository()>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.File: void <init>(java.io.File,java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.springframework.core.io.buffer.NettyDataBuffer: java.lang.String toString()>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: boolean pathMatches(java.lang.String,java.lang.String)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.TreeMap$EntrySet: void clear()>
<java.util.SubList: void removeRange(int,int)>-><java.util.SubList: void removeRange(int,int)>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.RegularEnumSet: boolean isEmpty()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.MBeanInfo: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><redis.clients.jedis.Response: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<freemarker.template.DefaultIteratorAdapter$SimpleTemplateModelIterator: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.zip.DeflaterOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.MutablePropertyValues: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.Collections$SingletonList: void forEach(java.util.function.Consumer)>
<javax.security.auth.Subject$SecureSet: void clear()>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<org.crazycake.shiro.RedisSessionDAO: void update(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<freemarker.ext.beans.IteratorModel: freemarker.template.TemplateModel next()>-><net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>
<freemarker.template.SimpleCollection: freemarker.template.TemplateModelIterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<redis.clients.jedis.JedisSentinelPool$MasterListener: void shutdown()>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: java.io.InputStream getInputStream()>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.StackTraceElement: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void <init>(java.nio.ByteBuffer)>-><java.io.InputStream: void <init>()>
<java.util.Vector$Itr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><org.owasp.encoder.XMLEncoder: java.nio.charset.CoderResult encodeArrays(java.nio.CharBuffer,java.nio.CharBuffer,boolean)>
<sun.net.ApplicationProxy: sun.net.ApplicationProxy create(java.net.Proxy)>-><sun.net.ApplicationProxy: void <init>(java.net.Proxy)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><reactor.util.function.Tuple2: java.util.Iterator iterator()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.FilterInputStream: void reset()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.crazycake.shiro.RedisSessionDAO: long getSessionInMemoryLiveTime(org.crazycake.shiro.common.SessionInMemory)>-><java.util.Date: long getTime()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.io.DataInputStream: boolean readBoolean()>-><org.apache.poi.util.ReplacingInputStream: int read()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><springfox.documentation.service.Response: int hashCode()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><java.lang.String: char charAt(int)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooLow(java.lang.Object,java.util.Comparator)>-><java.util.concurrent.ConcurrentSkipListMap: int cpr(java.util.Comparator,java.lang.Object,java.lang.Object)>
<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue mergeIfRequired(org.springframework.beans.PropertyValue,org.springframework.beans.PropertyValue)>-><org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet$6: java.lang.Object run()>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String,java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getReferencedSessionId(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getSessionIdCookieValue(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.SubList$1: java.lang.Object next()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveCleanerEntry: boolean getQueuedForCleanup()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String)>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String,long)>-><java.lang.StringBuilder: void <init>()>
<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><java.io.InputStream: void close()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.ConcurrentDateFormat: java.lang.String format(java.util.Date)>-><java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<com.zaxxer.hikari.pool.PoolBase: java.sql.Connection newConnection()>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String toCookieDate(java.util.Date)>-><java.text.DateFormat: java.lang.String format(java.util.Date)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.InputStream: void close()>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.lang.String: int length()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.catalina.session.StandardSession: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SingletonList: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.rmi.server.LoaderHandler$Loader: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.crazycake.shiro.RedisSessionDAO: java.lang.String getRedisSessionKey(java.io.Serializable)>
<redis.clients.jedis.JedisPool: void <init>(org.apache.commons.pool2.impl.GenericObjectPoolConfig,java.lang.String,int,int,int,java.lang.String,int,java.lang.String)>-><redis.clients.jedis.JedisPoolAbstract: void <init>(org.apache.commons.pool2.impl.GenericObjectPoolConfig,org.apache.commons.pool2.PooledObjectFactory)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.net.httpserver.SSLStreams$OutputStream: void write(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><io.netty.buffer.PoolChunkList: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: long getTimeout()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<java.io.BufferedInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.MeteredStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.ZoneId: java.lang.String toString()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int available()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.springframework.beans.MutablePropertyValues: java.util.Iterator iterator()>
<java.io.BufferedInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpInputStream: int read(byte[],int,int)>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><io.netty.util.internal.RecyclableArrayList: boolean addAll(java.util.Collection)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.FluxHide$SuppressFuseableSubscriber: boolean isEmpty()>
<org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object,org.springframework.core.style.ToStringStyler)>-><org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.rmi.transport.tcp.TCPEndpoint: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<redis.clients.jedis.BinaryJedis: redis.clients.jedis.ScanResult scan(byte[],redis.clients.jedis.ScanParams)>-><redis.clients.jedis.BinaryClient: void scan(byte[],redis.clients.jedis.ScanParams)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection$11: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.SubList: boolean addAll(java.util.Collection)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.classmate.ResolvedType: int hashCode()>-><com.fasterxml.classmate.TypeBindings: int hashCode()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.Operators$MonoSubscriber: boolean isEmpty()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><java.io.FilterInputStream: int read(byte[])>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void finalize()>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: void dispose()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.Proxy: java.net.Proxy$Type type()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: boolean isTrustedSite(java.net.URL)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: void <init>()>
<java.io.DataInputStream: int readUnsignedShort()>-><org.apache.poi.util.ReplacingInputStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.aop.support.annotation.AnnotationClassFilter: java.lang.String toString()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpSendInputStream: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.web.util.WebUtils: boolean isWeb(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletResponse getServletResponse()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.NegotiateAuthentication: void <init>(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.String getMessage()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.HeaderParser: int findInt(java.lang.String,int)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String,java.lang.String)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.HashMap$EntrySet: void clear()>-><java.util.HashMap: void clear()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.apache.shiro.session.mgt.DefaultSessionManager: java.util.Collection getActiveSessions()>-><org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<org.apache.logging.log4j.message.ParameterFormatter: void appendCollection(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.apache.tomcat.util.collections.ConcurrentCache: java.lang.Object get(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(java.lang.Object)>-><org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>
<java.util.Date: long parse(java.lang.String)>-><sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><springfox.documentation.service.Response: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.SubList$1: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.time.format.DateTimePrintContext: java.time.temporal.TemporalAccessor adjust(java.time.temporal.TemporalAccessor,java.time.format.DateTimeFormatter)>-><java.time.ZoneOffset: int getTotalSeconds()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter: java.util.Iterator iterator()>
<java.util.jar.Manifest$FastInputStream: void fill()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.Cookie[] getCookies()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.Cookie[] getCookies()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.security.CodeSource: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: java.net.PasswordAuthentication privilegedRequestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onNext(java.lang.Object)>-><com.google.common.base.Predicate: boolean test(java.lang.Object)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.PushbackInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getAlgorithm()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: void slowPath(long)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.apache.shiro.session.mgt.DefaultSessionManager: void afterExpired(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void delete(org.apache.shiro.session.Session)>
<java.text.AttributeEntry: java.lang.String toString()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$1: java.lang.Object next()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractMap$1: boolean isEmpty()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.io.BufferedInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Method[] _failGetClassMethods(java.lang.Class,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.net.Socket: java.io.OutputStream getOutputStream()>
<org.apache.shiro.session.mgt.DefaultSessionManager: java.util.Collection getActiveSessions()>-><java.util.Collections: java.util.Set emptySet()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.HeaderParser: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.lang.Object: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$KeySet: int size()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.String: boolean startsWith(java.lang.String)>
<org.springframework.context.support.StaticMessageSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: java.lang.String substring(int)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><io.netty.buffer.EmptyByteBuf: int compareTo(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.springframework.web.util.pattern.PathPattern: int compareTo(org.springframework.web.util.pattern.PathPattern)>-><java.lang.String: int compareTo(java.lang.String)>
<java.io.FilterOutputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<org.springframework.core.io.buffer.NettyDataBuffer: java.lang.String toString()>-><io.netty.buffer.WrappedByteBuf: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.apache.tomcat.util.collections.ConcurrentCache: java.lang.Object get(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.http.HttpClient: boolean getHttpKeepAliveSet()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.poi.openxml4j.opc.PackagePart: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.http.parser.MediaType: java.lang.String getCharset()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$CHMView: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionStore$1: java.util.Iterator sourceIterator()>-><net.sf.ehcache.store.LegacyStoreWrapper: java.util.List getKeys()>
<sun.net.www.http.HttpCaptureInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpCapture)>-><java.io.FilterInputStream: void <init>(java.io.InputStream)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.http.KeepAliveStreamCleaner$1: java.lang.Object run()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.nio.ByteBuffer: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<sun.net.www.MessageHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<java.lang.Iterable: java.util.Spliterator spliterator()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMapValues: int size()>
<java.util.TreeMap$KeySet: int size()>-><java.util.concurrent.ConcurrentSkipListMap: int size()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.AssertionError: void <init>()>
<net.sf.ehcache.util.LargeCollection: boolean removeAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><net.sf.ehcache.transaction.ReadCommittedSoftLockImpl: java.lang.Object getKey()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: java.lang.Object next()>
<org.springframework.util.MultiValueMapAdapter: java.util.List put(java.lang.Object,java.util.List)>-><java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection$5: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean available()>-><java.io.BufferedInputStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.security.Provider: java.lang.Object get(java.lang.Object)>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressEvent: void <init>(sun.net.ProgressSource,java.net.URL,java.lang.String,java.lang.String,sun.net.ProgressSource$State,long,long)>
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String,long)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.Collections$SetFromMap: void forEach(java.util.function.Consumer)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: void <init>(java.util.concurrent.ConcurrentSkipListMap)>-><java.util.concurrent.ConcurrentSkipListMap$Iter: void <init>(java.util.concurrent.ConcurrentSkipListMap)>
<sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>-><java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.FilterInputStream: int read(byte[],int,int)>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream,boolean)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<javax.servlet.ServletRequestWrapper: java.lang.String getRemoteAddr()>-><javax.servlet.ServletRequestWrapper: java.lang.String getRemoteAddr()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><ch.qos.logback.classic.Logger: boolean isInfoEnabled()>
<org.springframework.web.util.pattern.PathPattern: int hashCode()>-><java.lang.String: int hashCode()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: java.lang.String trim()>
<sun.net.www.protocol.http.HttpURLConnection$2: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$2: java.net.CookieHandler run()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<redis.clients.jedis.Pipeline: void clear()>-><redis.clients.jedis.Pipeline: void sync()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<net.sf.ehcache.store.LegacyStoreWrapper: java.util.List getKeys()>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<org.owasp.encoder.Encoder: java.nio.charset.CoderResult overflow(java.nio.CharBuffer,int,java.nio.CharBuffer,int)>-><java.nio.CharBuffer: int arrayOffset()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.io.DataInputStream: int readInt()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: long getTimeout()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Collections$SetFromMap: void clear()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.net.URL: java.lang.String getHost()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<org.apache.catalina.connector.Response: void addDateHeader(java.lang.String,long)>-><org.apache.tomcat.util.http.FastHttpDateFormat: java.lang.String formatDate(long)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<redis.clients.jedis.JedisSentinelPool$MasterListener: void shutdown()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><java.util.Spliterators$1Adapter: boolean hasNext()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.net.URL: java.lang.String getHost()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: java.lang.ClassLoader getContextClassLoader()>
<redis.clients.jedis.BinaryClient: void get(byte[])>-><redis.clients.jedis.Connection: void sendCommand(redis.clients.jedis.commands.ProtocolCommand,byte[][])>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.apache.catalina.connector.OutputBuffer: void append(byte[],int,int)>-><org.apache.catalina.connector.OutputBuffer: boolean isFull(java.nio.Buffer)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String)>
<java.io.DataInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressEvent: void <init>(sun.net.ProgressSource,java.net.URL,java.lang.String,java.lang.String,sun.net.ProgressSource$State,long,long)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getSessionId(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: java.io.Serializable getSessionId(org.apache.shiro.session.mgt.SessionKey)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressSource: void finishTracking()>
<java.io.SequenceInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.SubList$1: java.lang.Object next()>
<freemarker.template.DefaultIteratorAdapter$SimpleTemplateModelIterator: freemarker.template.TemplateModel next()>-><net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><redis.clients.jedis.Response: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.regex.Pattern: java.lang.String toString()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.MeteredStream: void reset()>-><java.io.FilterInputStream: void reset()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><java.net.SocketInputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$Values: java.util.Iterator iterator()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<springfox.documentation.service.Response: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.http.ChunkedInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: void ensureOpen()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.http.PosterOutputStream: void close()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.lang.ProcessEnvironment$StringKeySet: void clear()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><redis.clients.jedis.Response: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getSessionId(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getSessionId(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<freemarker.log.Logger: void logInLogger(boolean,java.lang.String,java.lang.Throwable)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.util.Date: int compareTo(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.util.Iterator iterator()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.commons.collections.FastHashMap$CollectionView: void clear()>-><org.apache.commons.collections.FastHashMap$Values: java.util.Collection get(java.util.Map)>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<net.sf.ehcache.transaction.local.LocalTransactionStore: net.sf.ehcache.Element removeElement(net.sf.ehcache.Element,net.sf.ehcache.store.ElementValueComparator)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean hasLockedAnything()>
<org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.ZoneOffset: int compareTo(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Boolean run()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisManager: void init()>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisConfiguration: java.lang.Integer getDatabaseOrElse(org.springframework.data.redis.connection.RedisConfiguration,java.util.function.Supplier)>-><org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: int getDatabase()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<redis.clients.jedis.Pipeline: void sync()>-><redis.clients.jedis.Queable: int getPipelinedResponseLength()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.http.HttpClient: void <init>()>
<com.fasterxml.classmate.ResolvedType: java.lang.StringBuilder _appendClassDescription(java.lang.StringBuilder)>-><com.fasterxml.classmate.TypeBindings: com.fasterxml.classmate.ResolvedType getBoundType(int)>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.apache.poi.util.ReplacingInputStream: int read()>-><java.io.FilterInputStream: int read()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.nodes.Tag: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpInputStream: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.crazycake.shiro.RedisSessionDAO: java.lang.String getRedisSessionKey(java.io.Serializable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Date: long parse(java.lang.String)>-><sun.util.calendar.AbstractCalendar: long getTime(sun.util.calendar.CalendarDate)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<springfox.documentation.service.Representation: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object poll()>-><reactor.core.publisher.Operators: java.lang.RuntimeException onNextPollError(java.lang.Object,java.lang.Throwable,reactor.util.context.Context)>
<springfox.documentation.service.Response: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<java.nio.HeapCharBuffer: java.nio.CharBuffer duplicate()>-><java.nio.Buffer: int position()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><java.io.FileInputStream: void close()>
<sun.net.www.MeteredStream: int read()>-><java.io.BufferedInputStream: int read()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler getSessionValidationScheduler()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.time.format.DateTimePrintContext: java.time.temporal.TemporalAccessor adjust(java.time.temporal.TemporalAccessor,java.time.format.DateTimeFormatter)>-><java.time.ZoneId: java.time.ZoneId normalized()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.util.MultiValueMapAdapter: java.util.Set keySet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>-><java.util.Collections$EmptySet: java.lang.Object[] toArray()>
<org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><sun.net.www.http.KeepAliveStream: void close()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<net.sf.ehcache.store.disk.DiskStore$KeySet: java.lang.Object[] toArray()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: void justRead(long)>-><sun.net.www.MeteredStream: boolean isMarked()>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection: void access$400(sun.net.www.protocol.http.HttpURLConnection,boolean)>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.nio.charset.Charset: int compareTo(java.lang.Object)>
<java.io.ObjectInputStream$PeekInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.io.BufferedInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: void parseHeader(java.io.InputStream)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date getCalendarDate()>-><java.lang.System: long currentTimeMillis()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><reactor.core.Scannable$Attr$3: java.lang.Object next()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.text.DigitList: java.lang.String toString()>
<sun.net.www.ParseUtil: void checkPath(java.lang.String,java.lang.String,java.lang.String)>-><java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<org.apache.tomcat.util.collections.ConcurrentCache: java.lang.Object get(java.lang.Object)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<net.sf.ehcache.store.chm.SelectableConcurrentHashMap$KeySet: java.lang.Object[] toArray()>-><net.sf.ehcache.store.chm.SelectableConcurrentHashMap$HashEntryIterator: boolean hasNext()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1: java.util.Iterator iterator()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onError(java.lang.Throwable)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onError(java.lang.Throwable)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<java.util.AbstractList: void clear()>-><java.util.SubList: void removeRange(int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<reactor.core.publisher.Operators$ScalarSubscription: void request(long)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onComplete()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<net.sf.ehcache.store.chm.SelectableConcurrentHashMap$KeySet: java.lang.Object[] toArray()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.HttpURLConnection$3: java.lang.Object run()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,boolean,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.MessageHeader: java.lang.String toString()>
<org.dom4j.tree.BackedList: void clear()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$UnmodifiableMap: int size()>
<org.apache.shiro.session.ExpiredSessionException: void <init>(java.lang.String)>-><org.apache.shiro.session.StoppedSessionException: void <init>(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getExpected()>
<redis.clients.jedis.util.RedisOutputStream: void flush()>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String getHost()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: boolean isEmpty()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.SubList: int size()>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: boolean checkError()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.MeteredStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: com.google.common.collect.Table delegate()>
<redis.clients.jedis.ScanParams: java.util.Collection getParams()>-><java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.URL: int getDefaultPort()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.www.http.PosterOutputStream: void write(int)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.boot.autoconfigure.web.ErrorProperties,java.util.List)>-><org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,java.util.List)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.HttpRetryException: void <init>(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<net.sf.ehcache.store.disk.DiskStorageFactory: void unbind()>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><springfox.documentation.service.Response: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getLastAccessTime()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<sun.net.www.http.ChunkedInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void closeUnderlying()>
<java.text.AttributeEntry: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void writeByte(int)>-><org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$SingletonMap: int size()>
<javax.swing.SwingWorker$6: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.Thread: void setDaemon(boolean)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.MessageHeader: java.util.Map getHeaders()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.text.DateFormat: java.text.DateFormat getInstance()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.PasswordAuthentication privilegedRequestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><sun.net.www.protocol.http.HttpURLConnection$1: void <init>(java.lang.String,java.net.URL,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.Authenticator$RequestorType)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.ext.beans.SimpleMethodModel: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: void ensureRawAvailable(int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.net.URI: int compareTo(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveCache: java.lang.Thread access$000(sun.net.www.http.KeepAliveCache)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MeteredStream: void mark(int)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<net.sf.ehcache.util.LargeCollection: boolean removeAll(java.util.Collection)>-><net.sf.ehcache.util.LargeCollection: boolean remove(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: java.net.Socket createSocket()>-><javax.net.ssl.DefaultSSLSocketFactory: java.net.Socket createSocket()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: sun.net.ProgressSource$State getState()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.RegularImmutableList: java.lang.Object get(int)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><java.io.BufferedOutputStream: void write(int)>
<java.util.LinkedList$LLSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStop(org.apache.shiro.session.Session)>
<java.util.Collections$SynchronizedCollection: void clear()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$CHMView: void clear()>
<java.io.DataOutputStream: void writeInt(int)>-><sun.net.www.http.PosterOutputStream: void write(int)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$EntrySet: java.lang.Object[] toArray()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.NetProperties$1: java.lang.Object run()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractMap$2: java.util.Iterator iterator()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void openServer()>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><org.springframework.core.NestedExceptionUtils: java.lang.String buildMessage(java.lang.String,java.lang.Throwable)>
<net.sf.ehcache.transaction.local.LocalTransactionContext: java.util.List getSoftLocksForCache(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$7: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.springframework.util.unit.DataSize: int compareTo(java.lang.Object)>
<org.crazycake.shiro.serializer.StringSerializer: byte[] serialize(java.lang.String)>-><org.crazycake.shiro.exception.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.String: java.lang.String toLowerCase()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.DumperOptions$FlowStyle: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void delete(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.net.SocketOutputStream: void close()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.AbstractList$Itr: boolean hasNext()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><com.google.common.collect.SingletonImmutableList: int size()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.String: java.lang.String valueOf(long)>
<redis.clients.jedis.ScanParams: java.util.Collection getParams()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<sun.net.www.MeteredStream: void close()>-><sun.net.httpserver.SSLStreams$InputStream: void close()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.nio.CharBuffer: java.lang.String toString()>
<net.sf.ehcache.store.chm.SelectableConcurrentHashMap: net.sf.ehcache.Element[] getRandomValues(int,java.lang.Object)>-><java.lang.String: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Boolean run()>
<net.sf.ehcache.store.CacheStore$4: net.sf.ehcache.Element call()>-><java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>
<org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: javax.servlet.http.HttpSession getObject()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession()>
<sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>-><sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void next(java.lang.Object)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<springfox.documentation.service.Response: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<sun.net.www.MeteredStream: int available()>-><org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int available()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<sun.misc.URLClassPath: void check(java.net.URL)>-><java.lang.String: int indexOf(java.lang.String)>
<java.io.BufferedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.httpserver.Request$WriteStream: void write(byte[],int,int)>
<java.io.PrintStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: boolean authQop()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.buffer.WrappedByteBuf: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$EmptyList: boolean isEmpty()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<java.io.DataOutputStream: void write(int)>-><sun.net.www.http.PosterOutputStream: void write(int)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void afterStopped(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: boolean isDeleteInvalidSessions()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.slf4j.helpers.NOPLogger: boolean isTraceEnabled()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Vector$Itr: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.apache.catalina.connector.ResponseFacade$DateHeaderPrivilegedAction: java.lang.Object run()>-><org.apache.catalina.connector.ResponseFacade$DateHeaderPrivilegedAction: java.lang.Void run()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getLastAccessTime()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>-><java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] toArray()>
<sun.net.www.MeteredStream: int read()>-><sun.rmi.transport.tcp.MultiplexInputStream: int read()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.net.HostPortrange: int[] parsePort(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>-><sun.net.www.protocol.http.HttpURLConnection: void reset()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.NetworkClient$1: java.lang.Void run()>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.core.CommonTemplateMarkupOutputModel: java.lang.String toString()>
<java.nio.HeapCharBuffer: java.nio.CharBuffer duplicate()>-><java.nio.HeapCharBuffer: void <init>(char[],int,int,int,int,int)>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.apache.catalina.connector.Response: void addDateHeader(java.lang.String,long)>-><org.apache.catalina.connector.Response: boolean isCommitted()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.LinkedList: java.lang.Object get(int)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<net.sf.ehcache.pool.sizeof.ObjectGraphWalker: long walk(int,boolean,java.lang.Object[])>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.MeteredStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.rmi.transport.proxy.HttpSendOutputStream: void write(byte[],int,int)>
<java.util.ArrayList$SubList: void add(int,java.lang.Object)>-><io.netty.util.internal.RecyclableArrayList: void add(int,java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void remove()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<sun.nio.cs.StreamDecoder: boolean inReady()>-><sun.net.www.MeteredStream: int available()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.KeepAliveStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long,sun.net.www.http.HttpClient)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.io.BufferedOutputStream: void flushBuffer()>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.micrometer.core.instrument.ImmutableTag: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.Subject$SecureSet$6: java.lang.Object run()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>
<freemarker.template.DefaultIteratorAdapter$SimpleTemplateModelIterator: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.Objects: int hashCode(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.http.PosterOutputStream: void close()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object remove(java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: void forEach(java.util.function.Consumer)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: javax.servlet.ServletRequest getServletRequest()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.util.Set keySet()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: int compareTo(java.lang.Object)>
<java.io.DataInputStream: short readShort()>-><org.apache.poi.util.ReplacingInputStream: int read()>
<java.net.HostPortrange: int[] defaultPort()>-><java.lang.String: boolean equals(java.lang.Object)>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.NetworkClient: void setReadTimeout(int)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.InternalError: void <init>(java.lang.String)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<java.util.ComparableTimSort: void mergeLo(int,int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse getServletResponse()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber: int size()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<reactor.core.publisher.InnerOperator: reactor.util.context.Context currentContext()>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: reactor.core.CoreSubscriber actual()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><sun.net.www.MessageHeader: java.lang.String getHeaderNamesInList()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: void add(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.HashSet: boolean isEmpty()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.PrintStream: void write(int)>
<java.io.InputStream: int read(byte[],int,int)>-><java.lang.NullPointerException: void <init>()>
<java.io.DataOutputStream: void writeShort(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: boolean remove(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableMapValues: java.util.Iterator iterator()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.apache.poi.ss.format.CellNumberStringMod: int compareTo(java.lang.Object)>
<java.util.Collections$3: java.lang.Object nextElement()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int getResponseCode()>
<sun.rmi.transport.proxy.HttpInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.URL: int getPort()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String removeCaseInsensitiveKey(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String convertKey(java.lang.String)>
<org.springframework.util.MultiValueMapAdapter: boolean isEmpty()>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.lang.ThreadLocal: java.lang.Object get()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.text.FieldPosition: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$EntrySet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>-><java.util.AbstractSet: void <init>()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getStartTimestamp()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.AuthenticationInfo: void endAuthRequest(java.lang.String)>
<sun.net.www.MeteredStream: void close()>-><java.io.ObjectInputStream$BlockDataInputStream: void close()>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>-><sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.FileOutputStream: void close()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.FastHttpDateFormat: void updateFormatCache(java.lang.Long,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.MessageHeader: void setIfNotSet(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.jar.Attributes: java.util.Set keySet()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.StringBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.beans.FeatureDescriptor: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.io.BufferedInputStream: void close()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$EntrySet: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.HttpClient: void closeServer()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.apache.catalina.connector.CoyoteOutputStream: boolean checkNonBlockingWrite()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.util.Base64: java.util.Base64$Decoder getDecoder()>
<io.micrometer.core.instrument.binder.logging.LogbackMetrics$1: void onReset(ch.qos.logback.classic.LoggerContext)>-><ch.qos.logback.classic.LoggerContext: void addTurboFilter(ch.qos.logback.classic.turbo.TurboFilter)>
<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void setUseCaches(boolean)>-><java.net.URLConnection: void setUseCaches(boolean)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.apache.catalina.connector.CoyoteOutputStream: void write(int)>-><org.apache.catalina.connector.CoyoteOutputStream: boolean checkNonBlockingWrite()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readInt()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void checkError()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: char[] toCharArray()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.Object[] toArray()>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.http.HttpClient: void finished()>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHost()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>-><sun.net.ProgressSource: void finishTracking()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.stream.SortedOps$RefSortingSink: void end()>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.util.calendar.Gregorian: sun.util.calendar.CalendarDate getCalendarDate()>-><sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date getCalendarDate()>
<org.crazycake.shiro.RedisManager: void init()>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupSession(org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendSecure(java.lang.StringBuilder,boolean)>
<redis.clients.jedis.BinaryClient: void scan(byte[],redis.clients.jedis.ScanParams)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.slf4j.helpers.NOPLogger: boolean isInfoEnabled()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void update(org.apache.shiro.session.Session)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: int size()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.ClientVector: void <init>(int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><java.net.SocketInputStream: int read(byte[])>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void initSessionsInThread()>-><java.util.HashMap: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node loNode(java.util.Comparator)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$CHMView: java.lang.Object[] toArray()>
<org.springframework.cglib.proxy.BridgeMethodResolver$BridgedFinder: org.springframework.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String toString()>-><org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.StringBuilder: void <init>()>
<java.net.URLConnection: java.lang.String stripOffParameters(java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setConnectTimeout(int)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.FileInputStream: int read(byte[])>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$EmptyMap: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DecimalStyle: java.lang.String toString()>
<org.apache.tomcat.util.http.ConcurrentDateFormat: java.lang.String format(java.util.Date)>-><java.text.DateFormat: java.lang.String format(java.util.Date)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.ThreadGroup: java.lang.String toString()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getProgress()>
<reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onComplete()>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onComplete()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap: int size()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><com.google.common.collect.JdkBackedImmutableMap: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void access$400(sun.net.www.protocol.http.HttpURLConnection,boolean)>-><sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><reactor.core.Scannable$Attr$3: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void removeSessionIdCookie(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.util.zip.ZipInputStream: int read(byte[],int,int)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object get(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void <init>(java.nio.ByteBuffer,java.io.InputStream)>-><java.io.InputStream: void <init>()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void update(org.apache.shiro.session.Session)>-><org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: org.apache.shiro.web.servlet.Cookie$SameSiteOptions getSameSite()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.core.io.buffer.NettyDataBuffer: java.lang.String toString()>-><io.netty.buffer.EmptyByteBuf: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.time.format.DateTimePrintContext: java.time.temporal.TemporalAccessor adjust(java.time.temporal.TemporalAccessor,java.time.format.DateTimeFormatter)>-><java.time.ZoneRegion: java.time.zone.ZoneRules getRules()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList: boolean isEmpty()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><java.net.ProtocolException: void <init>(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.lang.ProcessEnvironment$StringKeySet$1: void remove()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean isKeepingAlive()>-><sun.net.www.http.HttpClient: boolean getHttpKeepAliveSet()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.util.MultiValueMapAdapter: boolean isEmpty()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.connector.ResponseFacade: void addHeader(java.lang.String,java.lang.String)>-><org.apache.catalina.connector.Response: void addHeader(java.lang.String,java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.EnumMap: int size()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNonce(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.MessageHeader: java.util.Iterator multiValueIterator(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.List sortErrorViewResolvers(java.util.List)>-><java.util.ArrayList: void <init>()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable$KeySet: void clear()>-><java.security.Provider: void clear()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractMap$2: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader getUserSetHeaders()>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.FluxIterable$IterableSubscription: void clear()>
<java.io.FilterOutputStream: void write(byte[])>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.text.AttributeEntry: java.lang.String toString()>-><redis.clients.jedis.Response: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.awt.geom.Curve: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.WeakHashMap$Values: void clear()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection$9: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.SimpleTimeZone: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: java.lang.String findValue(int)>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><net.sf.ehcache.store.LruMemoryStore$SpoolingLinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.apache.shiro.web.servlet.SimpleCookie: void appendVersion(java.lang.StringBuilder,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void checkError()>-><java.io.IOException: void <init>(java.lang.String)>
<freemarker.core.ExtendedDecimalFormatParser: java.text.DecimalFormat parse()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<com.google.common.collect.ImmutableCollection: void clear()>-><java.lang.UnsupportedOperationException: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.Thread: void setDaemon(boolean)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.apache.shiro.session.StoppedSessionException: void <init>(java.lang.String)>-><org.apache.shiro.session.InvalidSessionException: void <init>(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.ArrayBlockingQueue$Itr: void remove()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setCachedHA1(java.lang.String)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.NetworkClient: void setConnectTimeout(int)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.InetSocketAddress: boolean isUnresolved()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: void <init>(char[],int,int)>
<java.util.stream.ReferencePipeline$11$1: void <init>(java.util.stream.ReferencePipeline$11,java.util.stream.Sink)>-><java.util.stream.Sink$ChainedReference: void <init>(java.util.stream.Sink)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>
<org.springframework.core.NestedRuntimeException: boolean contains(java.lang.Class)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.nio.Buffer: java.nio.Buffer position(int)>
<org.apache.catalina.connector.OutputBuffer: int transfer(byte[],int,int,java.nio.ByteBuffer)>-><java.nio.HeapByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: void <init>()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<sun.net.www.protocol.http.HttpURLConnection$11: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String)>-><java.lang.Object: void <init>()>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.jar.Attributes: java.util.Set entrySet()>
<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>-><java.lang.Long: long parseLong(java.lang.String)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.lang.Object[] toArray()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String)>
<java.net.URLConnection: java.net.ContentHandler getContentHandler()>-><java.net.URLConnection: java.lang.String getContentType()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: long getLastModified()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<cc.mrbird.febs.others.controller.EximportController: cc.mrbird.febs.common.entity.FebsResponse importExcels(org.springframework.web.multipart.MultipartFile)>-><org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile: java.io.InputStream getInputStream()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: void <init>(org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler)>-><java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>-><sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyExpiration(org.apache.shiro.session.Session)>-><java.util.ArrayList: java.util.Iterator iterator()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest getServletRequest()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.HashSet: boolean isEmpty()>
<java.net.URLPermission: java.lang.String actions()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setUseCaches(boolean)>
<java.util.Objects: int hashCode(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<org.springframework.util.MultiValueMapAdapter: boolean containsKey(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void setSessionValidationScheduler(org.apache.shiro.session.mgt.SessionValidationScheduler)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet: int size()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: int size()>
<java.net.Proxy: boolean equals(java.lang.Object)>-><java.net.Proxy: java.net.Proxy$Type type()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.x509.AVA: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<java.io.DataOutputStream: void writeByte(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.lang.Object[] toArray()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.springframework.beans.factory.ObjectProvider: java.util.Iterator iterator()>
<redis.clients.jedis.Connection: java.util.List getMany(int)>-><java.util.ArrayList: void <init>(int)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><io.netty.util.concurrent.AbstractEventExecutor: boolean inEventLoop()>
<sun.net.www.HeaderParser: sun.net.www.HeaderParser subsequence(int,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><java.io.StringReader: int read()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<javax.security.auth.Subject$SecureSet$6: void <init>(javax.security.auth.Subject$SecureSet,java.util.Iterator)>-><java.lang.Object: void <init>()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.io.StringReader: int read()>
<java.util.IdentityHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>-><org.springframework.web.util.pattern.PatternParseException$PatternMessage: java.lang.String formatMessage(java.lang.Object[])>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.crazycake.shiro.serializer.ObjectSerializer: java.lang.Object deserialize(byte[])>-><java.io.ObjectInputStream: java.lang.Object readObject()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: void destroy()>-><redis.clients.jedis.JedisSentinelPool: void destroy()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><org.jsoup.helper.ChangeNotifyingArrayList: boolean add(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Response: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><net.sf.ehcache.util.AggregateIterator: java.util.Iterator getNextIterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter: java.util.Iterator iterator()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.Integer: int parseInt(java.lang.String,int)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><java.io.InputStream: void close()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.HashMap: java.util.Set keySet()>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void advance()>-><java.util.NoSuchElementException: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.zip.InflaterInputStream: void fill()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.io.BufferedOutputStream: void flush()>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.system.entity.User: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Vector$Itr: java.lang.Object next()>
<reactor.core.publisher.Operators: void onDiscardQueueWithClear(java.util.Queue,reactor.util.context.Context,java.util.function.Function)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void clear()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.SubList$1: boolean hasNext()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.apache.catalina.connector.Response: void addHeader(java.lang.String,java.lang.String,java.nio.charset.Charset)>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.LinkedList: int size()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.stream.Nodes$CollectionNode: java.util.Spliterator spliterator()>-><java.util.Collections$SetFromMap: java.util.stream.Stream stream()>
<net.sf.ehcache.util.AggregateIterator: java.util.Iterator getNextIterator()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<org.crazycake.shiro.RedisSessionDAO: org.crazycake.shiro.common.SessionInMemory createSessionInMemory(org.apache.shiro.session.Session)>-><org.crazycake.shiro.common.SessionInMemory: void <init>()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>
<java.util.TreeMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><io.netty.util.concurrent.MultithreadEventExecutorGroup: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casNext(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>-><sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Vector$Itr: java.lang.Object next()>
<sun.net.www.http.ChunkedInputStream: int available()>-><sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getProgress()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void <init>(java.nio.ByteBuffer)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntrySet: int size()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serializeContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.net.Socket: void setKeepAlive(boolean)>-><java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.MeteredStream: long skip(long)>-><java.net.SocketInputStream: long skip(long)>
<redis.clients.jedis.Queable: void clean()>-><java.util.LinkedList: void clear()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.lang.StringBuilder: void <init>()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.naming.ldap.Rdn: java.lang.String toString()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Vector: boolean addAll(java.util.Collection)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.http.KeepAliveStream$1: java.lang.Object run()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.HashMap$Values: void clear()>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.servlet.FrameworkServlet: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.OffsetTime: int compareTo(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.Operators: void onNextDropped(java.lang.Object,reactor.util.context.Context)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<freemarker.template.DefaultIterableAdapter: freemarker.template.TemplateModelIterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.URL: void <init>(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.BufferedInputStream: void close()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><io.netty.util.internal.RecyclableArrayList: boolean add(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>-><java.lang.Object: int hashCode()>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<reactor.core.publisher.FluxIterable$IterableSubscription: void slowPath(long)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.nio.CharBuffer: int hashCode()>-><java.nio.Buffer: int position()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<freemarker.ext.beans.IteratorModel: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(sun.net.www.protocol.http.HttpCallerInfo,java.lang.String)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.StringTokenizer: java.lang.String nextToken()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.AbstractList: void removeRange(int,int)>-><java.util.AbstractList$Itr: void remove()>
<java.util.AbstractList: void clear()>-><java.util.SubList: int size()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void enableSessionValidation()>-><java.util.concurrent.Executors$DelegatedScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ConcurrentSkipListMap$Node: void <init>(java.util.concurrent.ConcurrentSkipListMap$Node)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.util.Collections$EmptySet: boolean contains(java.lang.Object)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<redis.clients.jedis.JedisSentinelPool$MasterListener: void shutdown()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>
<java.nio.CharBuffer: boolean equals(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(char,char)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Byte: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String access$000(sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.HeaderParser: void parse()>-><java.lang.String: java.lang.String toLowerCase()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.System: long currentTimeMillis()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: void reset()>-><sun.net.www.MeteredStream: boolean isMarked()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<net.sf.ehcache.transaction.local.LocalTransactionStore$1: java.util.Iterator sourceIterator()>-><net.sf.ehcache.store.CacheStore: java.util.List getKeys()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.system.entity.Dept: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findFirst()>-><java.util.concurrent.ConcurrentSkipListMap$Node: void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><java.sql.SQLException$1: boolean hasNext()>
<java.util.concurrent.Executors$DelegatedScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>-><java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.net.URI: java.net.URI normalize(java.net.URI)>-><java.net.URI: java.lang.String normalize(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><org.crazycake.shiro.RedisSessionDAO: void initSessionsInThread()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<java.net.HttpURLConnection: void <init>(java.net.URL)>-><java.net.URLConnection: void <init>(java.net.URL)>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><springfox.documentation.service.Response: int hashCode()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<redis.clients.jedis.util.RedisOutputStream: void flushBuffer()>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set collectAllSoftLocksForTransactionID(net.sf.ehcache.transaction.TransactionID)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Vector$Itr: boolean hasNext()>
<org.apache.catalina.connector.Response: void addHeader(java.lang.String,java.lang.String)>-><org.apache.catalina.connector.Response: void addHeader(java.lang.String,java.lang.String,java.nio.charset.Charset)>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.ProgressSource: java.lang.String toString()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getNewKeys()>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.util.Set entrySet()>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.RegularImmutableMap$Values: java.lang.Object get(int)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.UnknownSessionException: void <init>(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.Byte: java.lang.Byte valueOf(byte)>
<java.io.FilterInputStream: void mark(int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void mark(int)>
<org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.util.Base64: java.util.Base64$Encoder getEncoder()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.ThreadPoolExecutor$Worker: void <init>(java.util.concurrent.ThreadPoolExecutor,java.lang.Runnable)>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: java.lang.Thread newThread(java.lang.Runnable)>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.nio.Buffer: int remaining()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.HttpClient: void closeServer()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: boolean equals(java.lang.Object)>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.io.File: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Package: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void closeIdleConnection()>-><sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void append(byte[],int,int)>-><org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><java.util.HashSet: int size()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.core.Token: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><java.net.SocketOutputStream: void write(int)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><org.apache.shiro.util.UnknownClassException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><java.io.PushbackInputStream: int available()>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.BufferedInputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<org.owasp.encoder.Encode: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String)>-><org.owasp.encoder.Encode$Buffer: void <init>()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.AbstractList: void clear()>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: int size()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: java.net.PasswordAuthentication privilegedRequestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: int compareTo(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><sun.net.www.ParseUtil: java.net.URI createURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><reactor.core.Fuseable$QueueSubscription: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.io.DataOutputStream: void writeChar(int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.ObjectOutputStream$BlockDataOutputStream: void write(byte[],int,int)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean)>-><sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletResponse getServletResponse()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.util.locale.Extension: java.lang.String toString()>
<java.net.HttpRetryException: void <init>(java.lang.String,int)>-><java.io.IOException: void <init>(java.lang.String)>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.KeepAliveCleanerEntry: sun.net.www.http.KeepAliveStream getKeepAliveStream()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>-><java.io.FilterInputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><springfox.documentation.service.Representation: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.net.AbstractPlainSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.AbstractPlainSocketImpl: void close()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: void <init>()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean access$200(java.util.concurrent.ConcurrentSkipListMap$SubMap)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.Fuseable$QueueSubscription: java.util.Iterator iterator()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.ext.beans.BeanModel: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void writeBytes(byte[],int,int)>-><org.apache.catalina.connector.OutputBuffer: void append(byte[],int,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: int size()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.util.Vector: boolean addAll(java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: java.lang.Object[] toArray()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.jar.Manifest$FastInputStream: void fill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<redis.clients.jedis.util.RedisInputStream: void ensureFill()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.io.FilterInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<freemarker.ext.beans._BeansAPI: void removeClearedReferencesFromCache(java.util.Map,java.lang.ref.ReferenceQueue)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.TreeMap$KeySet: boolean contains(java.lang.Object)>-><java.util.concurrent.ConcurrentSkipListMap: boolean containsKey(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<io.micrometer.core.instrument.binder.logging.LogbackMetrics$1: void onReset(ch.qos.logback.classic.LoggerContext)>-><io.micrometer.core.instrument.binder.logging.LogbackMetrics: ch.qos.logback.classic.LoggerContext access$100(io.micrometer.core.instrument.binder.logging.LogbackMetrics)>
<freemarker.template.SimpleCollection$SimpleTemplateModelIterator: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: java.util.Iterator multiValueIterator(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean add(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><freemarker.ext.beans.HashAdapter: int size()>
<sun.net.www.protocol.http.HttpURLConnection$7: java.net.ProxySelector run()>-><java.net.ProxySelector: java.net.ProxySelector getDefault()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.Operators: java.lang.Throwable onOperatorError(org.reactivestreams.Subscription,java.lang.Throwable,java.lang.Object,reactor.util.context.Context)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.apache.shiro.session.mgt.DefaultSessionManager: java.util.Collection getActiveSessions()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Collections$UnmodifiableCollection: void clear()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<net.sf.ehcache.store.disk.DiskStore: net.sf.ehcache.Element evictElement(java.lang.Object,net.sf.ehcache.store.disk.DiskStorageFactory$DiskSubstitute)>-><java.lang.String: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.net.www.protocol.http.HttpURLConnection$10: java.lang.Object run()>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.MeteredStream: int read()>-><org.apache.poi.util.ReplacingInputStream: int read()>
<java.text.AttributeEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<freemarker.template.DefaultIterableAdapter: freemarker.template.TemplateModelIterator iterator()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><reactor.core.Fuseable$QueueSubscription: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.MeteredStream: void close()>-><java.io.ByteArrayInputStream: void close()>
<net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.security.MessageDigest: void update(byte[])>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.jsoup.safety.Whitelist: org.jsoup.nodes.Attributes getEnforcedAttributes(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.BasicAuthentication: boolean supportsPreemptiveAuthorization()>
<sun.net.www.protocol.http.HttpURLConnection$10: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$10: java.io.IOException run()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void onExpiration(org.apache.shiro.session.Session)>
<javax.management.MBeanPermission: void setClassName(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<java.io.ObjectInputStream$PeekInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void delete(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.crazycake.shiro.serializer.StringSerializer: byte[] serialize(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><java.util.Vector: int size()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner$1: java.lang.Integer run()>-><sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.zip.ZipEntry: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<sun.util.logging.PlatformLogger: void fine(java.lang.String)>-><sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValues: void forEach(java.util.function.Consumer)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: boolean isEmpty()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.crazycake.shiro.common.WorkAloneRedisManager: void del(byte[])>-><redis.clients.jedis.Jedis: void close()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<redis.clients.jedis.Jedis: void close()>-><redis.clients.jedis.JedisSentinelPool: void returnResource(redis.clients.jedis.Jedis)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.SequenceInputStream: int read(byte[],int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<freemarker.template.DefaultIteratorAdapter$SimpleTemplateModelIterator: boolean hasNext()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.Proxy: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: int length()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.util.Base64$Decoder: byte[] decode(java.lang.String)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.HashMap: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.commons.pool2.impl.BaseGenericObjectPool$IdentityWrapper: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><redis.clients.jedis.BuilderFactory$25: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void advance()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void descend()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: java.lang.Object[] toArray()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.crazycake.shiro.common.WorkAloneRedisManager: byte[] set(byte[],byte[],int)>-><org.crazycake.shiro.RedisManager: redis.clients.jedis.Jedis getJedis()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.FilterInputStream: void mark(int)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String)>
<springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<freemarker.template.IteratorToTemplateModelIteratorAdapter: boolean hasNext()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeySet: int size()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>
<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>-><java.nio.Buffer: int remaining()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getKey()>
<sun.net.ProgressSource: void beginTracking()>-><sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.TreeMap$Entry: java.lang.String toString()>
<java.io.ObjectInputStream$PeekInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.x509.GeneralName: java.lang.String toString()>
<freemarker.ext.beans.CollectionModel: int size()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.io.PushbackInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>-><sun.net.www.MessageHeader: java.lang.String[] access$100(sun.net.www.MessageHeader)>
<java.util.Collections$3: java.lang.Object nextElement()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><java.util.AbstractList: boolean add(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.io.BufferedInputStream: void fill()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.Collections$2: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.io.PushbackInputStream: void close()>-><java.io.InputStream: void close()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.rmi.transport.proxy.HttpSendOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.lang.StringBuilder: void <init>()>
<freemarker.core._CoreAPI: void checkSettingValueItemsType(java.lang.String,java.lang.Class,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeySet: int size()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<net.sf.ehcache.management.ResourceClassLoader: java.net.URL translateFromVFSToPhysicalURL(java.net.URL)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.Object getContent()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<java.io.BufferedOutputStream: void flushBuffer()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<reactor.core.publisher.LambdaMonoSubscriber: void dispose()>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void cancel()>
<java.util.HashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMapValues: void forEach(java.util.function.Consumer)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<reactor.core.publisher.Operators$MultiSubscriptionSubscriber: void set(org.reactivestreams.Subscription)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void cancel()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<java.net.SocketInputStream: void close()>-><java.net.AbstractPlainSocketImpl: void close()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.Cookie[] getCookies()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.http.KeepAliveStream: void close()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.String: char charAt(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.TypeDescription: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber: int size()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.lang.ProcessEnvironment$StringValues: void clear()>-><java.util.HashMap$Values: void clear()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.http.HttpClient: void finished()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.LargeCollection: java.util.Iterator iterator()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><org.springframework.beans.factory.support.ManagedMap: void <init>()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Hashtable: int size()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><reactor.core.Fuseable$QueueSubscription: java.lang.Object[] toArray()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.Collections$SetFromMap: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object remove(java.lang.Object)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToOptionalConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$Values: java.lang.Object[] toArray()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<org.springframework.beans.CachedIntrospectionResults: boolean isClassLoaderAccepted(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap: void putAll(java.util.Map)>
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>-><java.io.PrintStream: void flush()>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><freemarker.ext.beans.SequenceAdapter: int size()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.HttpURLConnection: int getResponseCode()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>-><java.io.InputStream: void close()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.AbstractQueue: void clear()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<redis.clients.jedis.JedisSentinelPool: void returnResource(redis.clients.jedis.Jedis)>-><redis.clients.jedis.JedisSentinelPool: void returnBrokenResource(redis.clients.jedis.Jedis)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.web.util.pattern.SingleCharWildcardedPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.nodes.SequenceNode: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.io.DataOutputStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.lang.Object: void notifyAll()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<java.io.FilterInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.Object next()>
<org.apache.logging.log4j.message.ParameterFormatter: void appendCollection(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList$COWIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.nio.Buffer: java.nio.Buffer clear()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeAwareMethods(java.lang.String,java.lang.Object)>-><org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void setBeanName(java.lang.String)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><springfox.documentation.service.Response: java.lang.String toString()>
<java.util.zip.CheckedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.io.DataOutputStream: void writeBytes(java.lang.String)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.Operators$MonoSubscriber: int size()>
<sun.net.httpserver.ServerImpl$ServerTimerTask1: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.util.ArrayList: void <init>()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.nio.CharBuffer: java.lang.Appendable append(java.lang.CharSequence)>-><java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence)>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.MeteredStream: int read()>
<sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>-><java.lang.Thread: java.lang.Thread currentThread()>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.util.stream.AbstractPipeline: java.util.stream.Sink wrapSink(java.util.stream.Sink)>-><java.util.stream.ReferencePipeline$1: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>
<freemarker.core.Configurable: void validateFormatNames(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList: void <init>()>
<sun.rmi.server.LoaderHandler: void addPermissionsForURLs(java.net.URL[],java.security.PermissionCollection,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.security.Permission getPermission()>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><org.crazycake.shiro.common.WorkAloneRedisManager: byte[] get(byte[])>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<net.sf.ehcache.util.LargeCollection: boolean removeAll(java.util.Collection)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.AbstractMap: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionStore: boolean replace(net.sf.ehcache.Element,net.sf.ehcache.Element,net.sf.ehcache.store.ElementValueComparator)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<org.crazycake.shiro.RedisSessionDAO: long getSessionInMemoryLiveTime(org.crazycake.shiro.common.SessionInMemory)>-><java.util.Date: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.io.PrintStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.io.BufferedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>-><reactor.core.publisher.InnerProducer: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>
<java.util.zip.InflaterInputStream: void fill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<java.io.DataInputStream: short readShort()>-><sun.net.www.http.ChunkedInputStream: int read()>
<sun.net.www.HeaderParser: int findInt(java.lang.String,int)>-><java.lang.Integer: int parseInt(java.lang.String)>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.FluxDoFinally$DoFinallyFuseableSubscriber: void clear()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.util.DerValue: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><org.apache.catalina.connector.CoyoteOutputStream: void close()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.io.PrintStream: void flush()>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.data.redis.connection.jedis.JedisConnectionFactory: void afterPropertiesSet()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void grow()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><com.sun.jmx.mbeanserver.JmxMBeanServer$3: java.lang.Object run()>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>-><java.util.HashMap: int size()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<reactor.core.publisher.Operators: void onErrorDropped(java.lang.Throwable,reactor.util.context.Context)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>-><com.google.common.collect.Synchronized$SynchronizedTable: com.google.common.collect.Table delegate()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><sun.rmi.transport.tcp.MultiplexOutputStream: void write(int)>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><sun.net.www.protocol.http.HttpURLConnection$2: void <init>(sun.net.www.protocol.http.HttpURLConnection)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<org.apache.commons.collections.FastHashMap$CollectionView: void clear()>-><java.util.HashMap$KeySet: void clear()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.rmi.transport.proxy.HttpSendOutputStream: void write(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<java.io.BufferedInputStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.TreeMap$Values: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<java.io.ObjectInputStream$PeekInputStream: int peek()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.MessageHeader: java.util.Map getHeaders()>-><sun.net.www.MessageHeader: java.util.Map getHeaders(java.lang.String[])>
<net.sf.ehcache.store.chm.SelectableConcurrentHashMap: net.sf.ehcache.Element put(java.lang.Object,net.sf.ehcache.Element,long)>-><java.lang.String: int hashCode()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<freemarker.core._CoreAPI: void checkSettingValueItemsType(java.lang.String,java.lang.Class,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$KeySet: boolean isEmpty()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>-><sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.concurrent.CopyOnWriteArraySet: void clear()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.crazycake.shiro.RedisSessionDAO: java.lang.String getRedisSessionKey(java.io.Serializable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><java.util.Spliterators$1Adapter: java.lang.Object next()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.ChunkedInputStream: void ensureRawAvailable(int)>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onExpiration(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: void setExpired(boolean)>
<sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><redis.clients.jedis.Response: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.awt.Color: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.net.www.http.PosterOutputStream: void close()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.crazycake.shiro.RedisManager: redis.clients.jedis.Jedis getJedis()>-><redis.clients.jedis.JedisPool: redis.clients.jedis.Jedis getResource()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.net.httpserver.Request$WriteStream: void write(byte[],int,int)>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<net.sf.ehcache.management.sampled.SampledMBeanRegistrationProvider: void dispose()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$EntrySet: int size()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.io.FileInputStream: void close()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>
<sun.net.www.http.KeepAliveStream: void close()>-><java.lang.Math: long min(long,long)>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: long getContentLengthLong()>-><java.net.URLConnection: long getContentLengthLong()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><java.io.FileInputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.ProtocolException: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.security.Permission: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<freemarker.template.SimpleCollection$SimpleTemplateModelIterator: freemarker.template.TemplateModel next()>-><net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter: java.util.Iterator iterator()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter: int size()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.HttpsClient: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.WeakHashMap: int size()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><java.net.SocketInputStream: void close()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.core.SortedProperties: java.util.Set entrySet()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: boolean checkNonBlockingWrite()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>
<javax.swing.SwingWorker$6: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.Thread: java.lang.String getName()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.lang.StringBuilder: void <init>()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: int length()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: java.lang.String getHostName()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<com.p6spy.engine.common.CustomHashedHashSet: void clear()>-><java.util.HashSet: void clear()>
<java.io.FilterInputStream: int read()>-><sun.net.www.MeteredStream: int read()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupportedImpl(sun.net.www.protocol.http.HttpCallerInfo)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><java.util.concurrent.ForkJoinWorkerThread$InnocuousForkJoinWorkerThread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><org.apache.poi.xssf.streaming.SXSSFRow$FilledCellIterator: java.lang.Object next()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.apache.shiro.web.util.WebUtils: boolean isWeb(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.session.mgt.WebSessionKey: javax.servlet.ServletResponse getServletResponse()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendSameSite(java.lang.StringBuilder,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><com.google.common.collect.IndexedImmutableSet: void forEach(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.tomcat.util.http.ConcurrentDateFormat: java.lang.String format(java.util.Date)>-><java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedMap: boolean isMergeEnabled()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<org.owasp.encoder.XMLEncoder: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: java.io.Serializable getSessionId(org.apache.shiro.session.mgt.SessionKey)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><redis.clients.jedis.Response: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><sun.misc.GC$LatencyRequest: int compareTo(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.aop.TruePointcut: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: void justRead(long)>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.Object[] toArray()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.rmi.server.UID: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Set entrySet()>-><java.util.concurrent.ConcurrentSkipListMap$EntrySet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><redis.clients.jedis.Response: java.lang.String toString()>
<sun.net.www.MeteredStream: long skip(long)>-><sun.net.www.MeteredStream: void justRead(long)>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveStream: void close()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.util.Iterator iterator()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.TreeMap$EntrySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.Vector: int size()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: java.lang.Object _throwWrapped(java.lang.Exception,java.lang.String,java.lang.Object)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<java.nio.CharBuffer: boolean equals(java.lang.Object)>-><java.nio.Buffer: int limit()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><io.netty.channel.nio.NioEventLoop: void wakeup(boolean)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: boolean isEmpty()>
<redis.clients.jedis.Pipeline: redis.clients.jedis.Response discard()>-><redis.clients.jedis.Pipeline: redis.clients.jedis.Response getResponse(redis.clients.jedis.Builder)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.HashMap: boolean isEmpty()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.httpserver.SSLStreams$OutputStream: void write(byte[],int,int)>
<sun.net.www.http.KeepAliveStreamCleaner: boolean offer(sun.net.www.http.KeepAliveCleanerEntry)>-><java.util.LinkedList: boolean offer(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>
<org.springframework.util.MultiValueMapAdapter: java.util.List put(java.lang.Object,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.DumperOptions$ScalarStyle: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStop(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session beforeInvalidNotification(org.apache.shiro.session.Session)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Integer: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.hibernate.validator.internal.util.annotation.AnnotationProxy: java.lang.String toString()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: void connect()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.apache.poi.xssf.streaming.SXSSFRow: int compareTo(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.springframework.data.util.TypeDiscoverer: org.springframework.data.util.TypeInformation createInfo(java.lang.reflect.Type)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.core.env.ReadOnlySystemAttributesMap: int size()>
<sun.net.www.MeteredStream: void finalize()>-><sun.net.ProgressSource: void close()>
<freemarker.template.DefaultNonListCollectionAdapter: boolean isEmpty()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidationIfNecessary()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: boolean isEnabled()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,long)>-><sun.net.ProgressMonitor: int getProgressUpdateThreshold()>
<javax.management.MBeanPermission: void setClassName(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: void <init>()>
<java.util.zip.CheckedOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.WildcardPathElement: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int compareTo(java.lang.Object)>
<org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$10: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.IOException,java.lang.Object[])>-><java.lang.Object: void <init>()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><org.dom4j.tree.BackedList: boolean add(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.net.URLConnection: java.net.URL getURL()>
<org.apache.poi.util.ReplacingInputStream: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValues: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Arrays$ArrayList: int size()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.BitSet: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<springfox.documentation.service.Representation: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<sun.net.www.http.HttpClient: void openServer()>-><java.net.Proxy: java.net.Proxy$Type type()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void set(int,java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void grow()>
<java.util.ArrayList$SubList$1: void add(java.lang.Object)>-><java.util.ArrayList$SubList: void add(int,java.lang.Object)>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.net.URL: int getPort()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>-><java.lang.String: int hashCode()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<redis.clients.jedis.ScanParams: redis.clients.jedis.ScanParams count(java.lang.Integer)>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.EnumMap: java.util.Set entrySet()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpSendSocket: void close()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.AnnotationAwareOrderComparator: void sortIfNecessary(java.lang.Object)>-><org.springframework.core.annotation.AnnotationAwareOrderComparator: void sort(java.util.List)>
<org.crazycake.shiro.exception.SerializationException: void <init>(java.lang.String)>-><java.lang.Exception: void <init>(java.lang.String)>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: java.lang.String getHostString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.lang.String toString()>
<java.io.PrintStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.google.common.collect.SingletonImmutableList: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>-><sun.net.www.MessageHeader: java.lang.String[] access$200(sun.net.www.MessageHeader)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<javax.management.MBeanPermission: void setClassName(java.lang.String)>-><java.lang.String: int length()>
<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.Operators$MonoSubscriber: boolean isEmpty()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: void finer(java.lang.String)>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<java.net.HttpConnectSocketImpl: int getPort()>-><java.net.SocketImpl: int getPort()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: long getTimeout(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String reducePath(java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.apache.shiro.session.mgt.DefaultSessionManager: void delete(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.MemorySessionDAO: void delete(org.apache.shiro.session.Session)>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.Iterator iterator()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Iterator entryIterator()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<java.net.URLConnection: long getLastModified()>-><java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String,long)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.JdkBackedImmutableMap: int size()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Arrays$ArrayList: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$CHMView: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>-><java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.String: char charAt(int)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.IdentityHashMap$EntrySet: void clear()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><sun.net.www.protocol.http.HttpURLConnection$12: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.lang.String,int,java.net.URL)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.Operators$ScalarSubscription: boolean isEmpty()>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: java.lang.String substring(int)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: long getTimeout(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DelegatingSession: long getTimeout()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<sun.net.www.MeteredStream: long skip(long)>-><sun.rmi.transport.proxy.HttpSendInputStream: long skip(long)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.apache.catalina.connector.Response: boolean isAppCommitted()>-><org.apache.catalina.connector.Response: long getContentWritten()>
<java.util.EnumMap$EntrySet: void clear()>-><java.util.EnumMap: void clear()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.ByteArrayOutputStream: void write(int)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap: void clear()>-><java.util.concurrent.ConcurrentSkipListMap: void initialize()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap: boolean isEmpty()>
<java.io.FilterInputStream: void close()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: org.crazycake.shiro.common.SessionInMemory createSessionInMemory(org.apache.shiro.session.Session)>-><org.crazycake.shiro.common.SessionInMemory: void setCreateTime(java.util.Date)>
<sun.net.www.MeteredStream: int read()>-><sun.rmi.transport.proxy.HttpInputStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.FilterOutputStream: void close()>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.StringBuilder: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.io.FilterInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.security.Provider: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStreamCleaner$1: java.lang.Object run()>-><sun.net.www.http.KeepAliveStreamCleaner$1: java.lang.Integer run()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: long getTimeout()>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.RegularImmutableList: int size()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.ParseUtil: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedValues: int size()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.StringBuffer: java.lang.String toString()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.apache.shiro.session.UnknownSessionException: void <init>(java.lang.Throwable)>-><org.apache.shiro.session.InvalidSessionException: void <init>(java.lang.Throwable)>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.net.URLConnection: java.lang.String typeToPackageName(java.lang.String)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Object[])>
<net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getNewKeys()>-><java.util.HashSet: boolean add(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getMethod()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.AbstractMap$1$1: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.ZonedDateTime: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: sun.net.www.HeaderParser subsequence(int,int)>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int compareTo(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL,java.lang.String,int)>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletResponse getResponse(java.lang.Object)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse getServletResponse()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getUriPathSegmentParamValue(javax.servlet.ServletRequest,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentSkipListMap: int cpr(java.util.Comparator,java.lang.Object,java.lang.Object)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.crazycake.shiro.common.WorkAloneRedisManager: byte[] get(byte[])>-><org.crazycake.shiro.RedisManager: redis.clients.jedis.Jedis getJedis()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: void destroy()>-><org.springframework.data.redis.connection.jedis.JedisConnectionFactory: boolean getUsePool()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$11: java.net.InetAddress run()>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void growCollectionIfNecessary()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: void remove()>
<java.util.Collections$SetFromMap: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap: void clear()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Object run()>-><sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>
<org.apache.poi.util.ReplacingInputStream: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Hashtable$EntrySet: int size()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void setDaemon(boolean)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: void stop()>-><java.util.Date: void <init>()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Formatter$FixedString: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.core.SortedProperties: java.util.Set entrySet()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<freemarker.template.DefaultIteratorAdapter$SimpleTemplateModelIterator: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.PrintStream: void close()>
<sun.net.www.MeteredStream: int available()>-><sun.rmi.transport.proxy.HttpSendInputStream: int available()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.types.ResolvedObjectType: java.lang.StringBuilder appendBriefDescription(java.lang.StringBuilder)>-><com.fasterxml.classmate.ResolvedType: java.lang.StringBuilder _appendClassDescription(java.lang.StringBuilder)>
<redis.clients.jedis.Pipeline: void sync()>-><redis.clients.jedis.Queable: redis.clients.jedis.Response generateResponse(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.nio.charset.Charset: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.apache.tomcat.util.http.FastHttpDateFormat: void updateFormatCache(java.lang.Long,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getSessionId(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.util.WebUtils: boolean isWeb(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.io.FileInputStream: int read(byte[],int,int)>
<org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Throwable)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.util.Vector: void removeRange(int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><java.util.LinkedHashMap: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<redis.clients.jedis.Pipeline: redis.clients.jedis.Response getResponse(redis.clients.jedis.Builder)>-><redis.clients.jedis.Queable: redis.clients.jedis.Response getResponse(redis.clients.jedis.Builder)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.util.StringTokenizer: java.lang.String nextToken()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.net.URL: int getDefaultPort()>-><sun.net.www.protocol.https.Handler: int getDefaultPort()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.rmi.transport.proxy.HttpSendOutputStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><org.apache.commons.collections.FastHashMap: java.lang.Object remove(java.lang.Object)>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.quartz.impl.triggers.AbstractTrigger: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.TreeMap$EntrySet: void clear()>-><java.util.TreeMap: void clear()>
<java.nio.CharBuffer: java.nio.CharBuffer append(char)>-><java.nio.HeapCharBuffer: java.nio.CharBuffer put(char)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyList: void forEach(java.util.function.Consumer)>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$Node: void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>-><java.util.concurrent.ConcurrentSkipListMap$Node: void <init>(java.util.concurrent.ConcurrentSkipListMap$Node)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<java.util.EnumMap$KeySet: void clear()>-><java.util.EnumMap: void clear()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.IOException getChainedException(java.io.IOException)>-><sun.net.www.protocol.http.HttpURLConnection$10: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.IOException,java.lang.Object[])>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<freemarker.template.SimpleCollection$SimpleTemplateModelIterator: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.Operators$ScalarSubscription: boolean isEmpty()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getMethod()>
<sun.net.www.MeteredStream: int read()>-><java.io.ObjectInputStream: int read()>
<org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<com.sun.jmx.mbeanserver.Introspector: javax.management.NotCompliantMBeanException throwException(java.lang.Class,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<io.netty.util.concurrent.SingleThreadEventExecutor: java.lang.Runnable pollTaskFrom(java.util.Queue)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object poll()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber: int size()>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: boolean isExpired()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.InputStream,java.net.CacheRequest)>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><sun.net.www.ParseUtil: boolean match(char,long,long)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.lang.Enum: int compareTo(java.lang.Object)>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void afterPropertiesSet()>
<java.io.DataInputStream: int readInt()>-><org.apache.poi.util.ReplacingInputStream: int read()>
<java.net.HttpConnectSocketImpl$2: java.lang.Object run()>-><java.net.HttpConnectSocketImpl$2: java.net.Socket run()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: java.lang.String toString()>
<java.util.IdentityHashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.yaml.snakeyaml.introspector.Property: int compareTo(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.eis.AbstractSessionDAO: org.apache.shiro.session.Session readSession(java.io.Serializable)>-><org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void afterStopped(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void delete(org.apache.shiro.session.Session)>
<redis.clients.jedis.BinaryJedis: java.lang.Long del(byte[])>-><redis.clients.jedis.BinaryJedis: void checkIsInMultiOrPipeline()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.SubList: java.util.Iterator iterator()>
<io.micrometer.core.instrument.binder.logging.LogbackMetrics$1: void onReset(ch.qos.logback.classic.LoggerContext)>-><io.micrometer.core.instrument.binder.logging.LogbackMetrics: java.util.Map access$000(io.micrometer.core.instrument.binder.logging.LogbackMetrics)>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.jsoup.safety.Whitelist: org.jsoup.nodes.Attributes getEnforcedAttributes(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.HashMap: int hash(java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>-><sun.net.NetworkClient: void setReadTimeout(int)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.io.DataOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<java.net.URLConnection: java.lang.String getContentHandlerPkgPrefixes()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.web.util.pattern.PathPattern: int compareTo(org.springframework.web.util.pattern.PathPattern)>-><java.util.Comparators$NullComparator: int compare(java.lang.Object,java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>
<net.sf.ehcache.store.disk.DiskStore: boolean flush(net.sf.ehcache.Element)>-><java.lang.String: int hashCode()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<java.util.stream.Streams$StreamBuilderImpl: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.Spliterators$ArraySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Vector: java.util.Iterator iterator()>
<javax.security.auth.Subject$SecureSet: void clear()>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.net.SocketInputStream: int read(byte[])>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.quartz.impl.JobDetailImpl: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.io.IOException: void <init>(java.lang.String)>
<reactor.core.publisher.Operators$MultiSubscriptionSubscriber: void drainLoop()>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void request(long)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.text.ParsePosition: java.lang.String toString()>
<sun.net.www.MessageHeader: void set(int,java.lang.String,java.lang.String)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void setIfNotSet(java.lang.String,java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.LinkedHashMap: java.util.Collection values()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.wuwenze.poi.pojo.ExcelMapping: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.nio.CharBuffer: int compare(char,char)>-><java.lang.Character: int compare(char,char)>
<sun.net.www.MeteredStream: int read()>-><sun.rmi.transport.proxy.HttpSendInputStream: int read()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.http.KeepAliveStreamCleaner: boolean offer(sun.net.www.http.KeepAliveCleanerEntry)>-><java.util.LinkedList: int size()>
<java.util.WeakHashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><java.lang.Object: java.lang.Class getClass()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: java.lang.String substring(int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.ObjectInstance: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<freemarker.ext.beans.CollectionModel: freemarker.template.TemplateModelIterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: org.apache.shiro.session.Session storeSession(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<springfox.documentation.service.Response: int hashCode()>-><java.util.Objects: int hash(java.lang.Object[])>
<java.util.Collections$SynchronizedCollection: boolean isEmpty()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<java.io.DataOutputStream: void write(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Iterator)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.RegularImmutableMap$Values: int size()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.lang.String: java.lang.String valueOf(int)>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.net.URI: java.net.URI normalize()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void reset()>-><java.io.FilterInputStream: void reset()>
<java.io.FilterInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap$LinkedEntrySet: void clear()>-><java.util.LinkedHashMap: void clear()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpCaptureInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpCapture)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.template.SimpleSequence: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getPath()>
<java.net.URLPermission$Authority: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler: void accept(javax.xml.stream.events.XMLEvent,reactor.core.publisher.SynchronousSink)>-><org.springframework.util.Assert: void state(boolean,java.lang.String)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: void reset()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<java.io.DataOutputStream: void writeByte(int)>-><sun.net.www.http.PosterOutputStream: void write(int)>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.io.DataOutputStream: void writeShort(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<com.sun.beans.TypeResolver: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.reflect.Type)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.LocalTime: int compareTo(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.redis.connection.stream.StreamRecords$MapBackedRecord: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<java.io.SequenceInputStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><sun.net.httpserver.Request$WriteStream: void write(int)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.InputStream: long skip(long)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><java.io.InputStream: void close()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><redis.clients.jedis.Response: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.bootstrap.AbstractBootstrap: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: boolean requestIsInProgress(java.lang.String)>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.Operators: void onNextDropped(java.lang.Object,reactor.util.context.Context)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.HashMap$ValueSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><java.io.IOException: void <init>(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<sun.nio.cs.StreamDecoder: void implClose()>-><sun.net.www.http.KeepAliveStream: void close()>
<freemarker.cache.TemplateCache: freemarker.template.Template getTemplateInternal(java.lang.String,java.util.Locale,java.lang.Object,java.lang.String,boolean)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: java.lang.String getProtocol()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
<org.apache.commons.collections.FastHashMap$CollectionView: void clear()>-><org.apache.commons.collections.FastHashMap$KeySet: java.util.Collection get(java.util.Map)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.ImmutableMapValues$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.MessageHeader: void set(int,java.lang.String,java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<org.springframework.web.util.pattern.RegexPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.ChunkedInputStream: void processRaw()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><java.net.ProtocolException: void <init>(java.lang.String)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: long getExpected()>
<org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>-><java.io.ObjectOutputStream: void flush()>
<io.netty.util.internal.DefaultPriorityQueue: boolean removeTyped(io.netty.util.internal.PriorityQueueNode)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<cc.mrbird.febs.system.controller.UserController: cc.mrbird.febs.common.entity.FebsResponse updateProfile(cc.mrbird.febs.system.entity.User)>-><cc.mrbird.febs.system.entity.User: java.lang.Long getUserId()>
<org.owasp.encoder.URIEncoder: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1: java.util.Iterator iterator()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.http.HttpClient: java.io.OutputStream getOutputStream()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<reactor.core.publisher.Operators: boolean terminate(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void cancel()>
<java.text.AttributeEntry: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<redis.clients.jedis.Pipeline: redis.clients.jedis.Response getResponse(redis.clients.jedis.Builder)>-><redis.clients.jedis.Pipeline$MultiResponseBuilder: void addResponse(redis.clients.jedis.Response)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.crazycake.shiro.serializer.StringSerializer: byte[] serialize(java.lang.Object)>-><org.crazycake.shiro.serializer.StringSerializer: byte[] serialize(java.lang.String)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.StringBuilder: void <init>()>
<java.lang.System$2: void invokeFinalize(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void finalize()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><sun.net.www.http.ChunkedOutputStream: void reset()>
<java.util.WeakHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: int size()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<sun.net.www.protocol.http.BasicAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray()>
<java.util.zip.CheckedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><sun.net.www.http.ChunkedInputStream: void closeUnderlying()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.net.SocketImpl: java.lang.String toString()>
<java.util.Hashtable$ValueCollection: void clear()>-><java.util.Hashtable: void clear()>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><java.io.InputStream: int read(byte[],int,int)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<reactor.core.publisher.FluxIterable$IterableSubscription: boolean isEmpty()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.baomidou.mybatisplus.core.metadata.OrderItem: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: void remove()>
<java.io.BufferedInputStream: void fill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object,java.util.Comparator)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooLow(java.lang.Object,java.util.Comparator)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.lettuce.core.masterreplica.RedisUpstreamReplicaNode: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: java.lang.String getRedisSessionKey(java.io.Serializable)>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: void <init>(java.io.InputStream)>-><java.io.ObjectInputStream: void <init>(java.io.InputStream)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.http.HttpClient: boolean getHttpKeepAliveSet()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.nio.CharBuffer: boolean equals(java.lang.Object)>-><java.nio.HeapCharBuffer: char get(int)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.io.DataInputStream: char readChar()>-><sun.net.www.MeteredStream: int read()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: void clear()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><java.lang.StringBuilder: void <init>()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void descend()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap access$100(java.util.concurrent.ConcurrentSkipListMap$SubMap)>
<org.apache.catalina.connector.OutputBuffer: void close()>-><org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: void wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.CoyoteOutputStream: boolean checkNonBlockingWrite()>-><org.apache.catalina.connector.OutputBuffer: boolean isReady()>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>-><java.lang.Object: void <init>()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.Date: long parse(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.BasicAuthentication: boolean supportsPreemptiveAuthorization()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.SubList$1: boolean hasNext()>
<java.util.Date: long parse(java.lang.String)>-><java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<java.util.LinkedList$LLSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.io.BufferedInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.OffsetTime: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.util.logging.PlatformLogger: void warning(java.lang.String)>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><java.nio.CharBuffer: int hashCode()>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.HashMap$Node: java.lang.Object getValue()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void disconnect()>
<java.lang.Object: java.lang.String toString()>-><springfox.documentation.service.Representation: int hashCode()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getSessionId(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.ServletResponse getResponse(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><java.lang.String: int compareTo(java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.BufferedInputStream: void mark(int)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: int size()>
<reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: boolean isEmpty()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Collections$SingletonList: int size()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: void <init>()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Vector$Itr: boolean hasNext()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.io.DataInputStream: byte readByte()>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.springframework.core.style.DefaultToStringStyler: void styleFieldStart(java.lang.StringBuilder,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.net.URL: int getPort()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.util.Date: void <init>()>
<sun.net.www.MeteredStream: void close()>-><java.io.FileInputStream: void close()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><freemarker.ext.beans.HashAdapter: java.lang.Object get(java.lang.Object)>
<sun.net.ProgressSource: void updateProgress(long,long)>-><sun.net.ProgressSource: void close()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<java.util.AbstractList: void clear()>-><freemarker.ext.beans.SequenceAdapter: int size()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.lang.ThreadLocal: java.lang.Object get()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<java.net.CookieHandler: java.net.CookieHandler getDefault()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest getServletRequest()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Arrays$ArrayList: int size()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<redis.clients.jedis.ScanParams: java.util.Collection getParams()>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<java.io.BufferedInputStream: void close()>-><java.io.InputStream: void close()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.Character: boolean isSpaceChar(char)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.MeteredStream: void close()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.Vector: void addElement(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.lang.CharSequence$1CharIterator: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<sun.net.www.MeteredStream: int read()>-><java.net.SocketInputStream: int read()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.lang.Object: void <init>()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: int getNCCount()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.net.URLConnection: java.lang.String getContentHandlerPkgPrefixes()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.Vector: java.lang.Object[] toArray()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean isEmpty()>
<org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getLastAccessTime()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>-><java.net.URL: java.lang.String getHost()>
<java.util.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.MeteredStream: void close()>
<java.net.HttpURLConnection: int getResponseCode()>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>
<org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String access$000(org.springframework.util.LinkedCaseInsensitiveMap,java.lang.String)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<cc.mrbird.febs.system.controller.UserController: cc.mrbird.febs.common.entity.FebsResponse updateAvatar(java.lang.String)>-><cc.mrbird.febs.system.entity.User: java.lang.String getUsername()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: boolean isEmpty()>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,long)>-><java.lang.Object: void <init>()>
<java.util.HashMap: int hash(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.apache.catalina.connector.ClientAbortException: void <init>(java.lang.Throwable)>-><java.io.IOException: void <init>(java.lang.Throwable)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<org.apache.catalina.connector.Response: boolean isAppCommitted()>-><org.apache.catalina.connector.Response: boolean isSuspended()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.io.ObjectStreamClass: java.lang.String toString()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Spliterators$1Adapter: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream access$100(sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void closeUnderlying()>-><sun.net.www.http.HttpClient: void finished()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<redis.clients.jedis.util.RedisOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<sun.net.www.HeaderParser$ParserIterator: void <init>(sun.net.www.HeaderParser,boolean)>-><java.lang.Object: void <init>()>
<java.util.AbstractList: void clear()>-><java.util.Collections$SingletonList: int size()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.io.SequenceInputStream: void nextStream()>-><sun.net.www.http.ChunkedInputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><springfox.documentation.service.Response: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String exceptionMessage(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.MonthDay: int compareTo(java.lang.Object)>
<org.crazycake.shiro.common.WorkAloneRedisManager: byte[] get(byte[])>-><redis.clients.jedis.Jedis: void close()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Vector: void clear()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.util.StringTokenizer: void <init>(java.lang.String)>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet: int size()>
<java.util.Collections$SynchronizedCollection: void forEach(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: void forEach(java.util.function.Consumer)>
<freemarker.template.TemplateException: void renderMessages()>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><freemarker.ext.beans.CollectionAdapter: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><springfox.documentation.service.Response: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.rmi.transport.proxy.HttpSendOutputStream: void flush()>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<java.util.Hashtable: java.lang.String toString()>-><sun.net.ProgressSource: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.nio.channels.FileLock: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>-><java.io.StringReader: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.UUID: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: int size()>-><java.util.Collections$UnmodifiableMap: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuffer: void <init>()>
<freemarker.ext.beans.CollectionModel: freemarker.template.TemplateModelIterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.jsoup.parser.ParseError: java.lang.String toString()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><java.io.FileInputStream: int read(byte[])>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveEntry: void <init>(sun.net.www.http.HttpClient,long)>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<org.thymeleaf.exceptions.TemplateEngineException: void <init>(java.lang.String,java.lang.Throwable)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<freemarker.template.SimpleCollection$SimpleTemplateModelIterator: boolean hasNext()>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.LinkedHashMap$LinkedKeySet: void clear()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.text.DateFormat: void setTimeZone(java.util.TimeZone)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.InetSocketAddress: boolean isUnresolved()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.AssertionError: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><springfox.documentation.service.Response: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.terracotta.statistics.GeneralOperationStatistic: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.Vector: java.lang.Object[] toArray()>
<java.security.DigestOutputStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.ProgressMonitor: sun.net.ProgressMonitor getDefault()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method determineDestroyMethod(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.IdentityHashMap: java.util.Set keySet()>
<sun.net.www.http.HttpClient: void openServer()>-><sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.AssertionError: void <init>()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.util.Set entrySet()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<reactor.core.Exceptions: java.lang.Throwable addSuppressed(java.lang.Throwable,java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<java.util.WeakHashMap$KeySet: void clear()>-><java.util.WeakHashMap: void clear()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Collections$SetFromMap: void clear()>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<org.apache.shiro.session.mgt.DefaultSessionKey: void <init>(java.io.Serializable)>-><java.lang.Object: void <init>()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String getCollectionTypeString(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.springframework.util.MultiValueMapAdapter: java.util.List get(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<redis.clients.jedis.Transaction: java.lang.String discard()>-><redis.clients.jedis.Connection: java.lang.String getStatusCodeReply()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.io.FilterInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.ehcache.Element: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser$ParserIterator: boolean hasNext()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.fasterxml.classmate.TypeBindings: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void toReadMode(java.nio.Buffer)>-><java.nio.Buffer: int position()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.http.ChunkedInputStream: int read()>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.Object: int hashCode()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.lang.ThreadLocal: java.lang.Object get()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.URL: int getDefaultPort()>
<org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.io.ObjectStreamClass: java.lang.String getName()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><springfox.documentation.service.Representation: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.net.InetSocketAddress: void <init>(int,java.lang.String)>-><java.net.InetSocketAddress$InetSocketAddressHolder: void <init>(java.lang.String,java.net.InetAddress,int,java.net.InetSocketAddress$1)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<sun.net.www.http.PosterOutputStream: void close()>-><java.io.ByteArrayOutputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.protocol.http.HttpCallerInfo getHttpCallerInfo()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.io.FileOutputStream: void close()>
<org.springframework.core.style.ToStringCreator: void printFieldSeparatorIfNecessary()>-><org.springframework.core.style.DefaultToStringStyler: void styleFieldSeparator(java.lang.StringBuilder)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.io.ObjectInputStream$PeekInputStream: int peek()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.springframework.cglib.proxy.BridgeMethodResolver$BridgedFinder: org.springframework.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean remove(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.core.style.DefaultToStringStyler: void styleValue(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>
<sun.util.locale.provider.LocaleProviderAdapter: boolean isSupportedLocale(java.util.Locale,sun.util.locale.provider.LocaleProviderAdapter$Type,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void reset()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onNext(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer$1: java.lang.Object run()>-><com.sun.jmx.mbeanserver.JmxMBeanServer$1: javax.management.loading.ClassLoaderRepository run()>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<redis.clients.jedis.JedisFactory: void <init>(java.lang.String,int,int,int,java.lang.String,int,java.lang.String)>-><redis.clients.jedis.JedisFactory: void <init>(java.lang.String,int,int,int,java.lang.String,int,java.lang.String,boolean,javax.net.ssl.SSLSocketFactory,javax.net.ssl.SSLParameters,javax.net.ssl.HostnameVerifier)>
<java.util.Random: void nextBytes(byte[])>-><java.util.Random: int nextInt()>
<sun.net.www.protocol.http.HttpURLConnection$10: java.io.IOException run()>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>
<freemarker.ext.beans._BeansAPI: void removeClearedReferencesFromCache(java.util.Map,java.lang.ref.ReferenceQueue)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>-><javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.temporal.ChronoField: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.jsoup.parser.Tag: java.lang.String toString()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.io.SequenceInputStream: void nextStream()>-><sun.net.www.MeteredStream: void close()>
<sun.rmi.transport.proxy.HttpSendInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>-><java.nio.Buffer: int position()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.dom4j.tree.BackedList: void clear()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<redis.clients.jedis.util.RedisInputStream: void ensureFill()>-><org.apache.poi.util.ReplacingInputStream: int read(byte[])>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.lang.Object[] toArray()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedMap: boolean isMergeEnabled()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.EnumMap$KeySet: void clear()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.www.http.PosterOutputStream: void close()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><springfox.documentation.service.Response: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.core.SortedProperties: java.util.Set keySet()>
<java.util.WeakHashMap$EntrySet: void clear()>-><java.util.WeakHashMap: void clear()>
<java.io.FilterInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.ImmutableMapValues$1: boolean hasNext()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>-><java.net.URLConnection: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.KeepAliveCleanerEntry: sun.net.www.http.HttpClient getHttpClient()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void appendByteArray(byte[],int,int)>-><java.nio.Buffer: int capacity()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.nio.CharBuffer: boolean equals(java.lang.Object)>-><java.nio.Buffer: int position()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.net.PlainSocketImpl: void <init>()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<net.sf.ehcache.writer.CacheWriterManagerException: java.lang.RuntimeException getCause()>-><java.lang.Throwable: java.lang.Throwable getCause()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>-><java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.SubList$1: boolean hasNext()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void appendEscape(java.lang.StringBuffer,byte)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.io.FilterInputStream: void reset()>-><sun.net.www.http.KeepAliveStream: void reset()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>-><java.lang.Math: int min(int,int)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.FluxHide$SuppressFuseableSubscriber: int size()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Date: long parse(java.lang.String)>-><sun.util.calendar.Gregorian: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.util.Collections$SynchronizedMap: java.lang.Object remove(java.lang.Object)>
<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>-><sun.net.www.MessageHeader: int access$000(sun.net.www.MessageHeader)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: void <init>(java.net.URL,java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.lang.String getContentType()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<sun.net.www.HeaderParser: void parse()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<sun.net.www.MeteredStream: long skip(long)>-><sun.net.www.MeteredStream: long skip(long)>
<org.apache.shiro.session.mgt.eis.MemorySessionDAO: void delete(org.apache.shiro.session.Session)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void mark(int)>-><java.io.FilterInputStream: void mark(int)>
<freemarker.template.DefaultIterableAdapter: freemarker.template.TemplateModelIterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: java.lang.String getProtocol()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeAwareMethods(java.lang.String,java.lang.Object)>-><org.springframework.web.filter.GenericFilterBean: void setBeanName(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<java.net.URI: java.net.URI normalize(java.net.URI)>-><java.lang.String: int length()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><org.owasp.encoder.XMLEncoder: int maxEncodedLength(int)>
<sun.nio.cs.StreamDecoder: int readBytes()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.zaxxer.hikari.HikariDataSource: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(char[])>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><java.net.SocketInputStream: void close()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.util.StringTokenizer: java.lang.String nextToken()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><sun.net.www.protocol.http.HttpURLConnection$8: java.lang.Object run()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: int getKey(java.lang.String)>
<redis.clients.jedis.JedisSentinelPool$MasterListener: void shutdown()>-><redis.clients.jedis.BinaryJedis: void disconnect()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMapEntrySet: int size()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Spliterators$1Adapter: boolean hasNext()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void ensureOpen()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.context.support.StaticMessageSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.net.URL: int getPort()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object poll()>-><reactor.core.publisher.Operators: java.lang.Throwable onNextError(java.lang.Object,java.lang.Throwable,reactor.util.context.Context,org.reactivestreams.Subscription)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeSet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.poi.ss.util.CellRangeAddressBase: java.lang.String toString()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.MeteredStream: void close()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.lang.Object[] toArray()>
<java.net.URI: java.net.URI normalize(java.net.URI)>-><java.net.URI: boolean isOpaque()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><reactor.util.context.ContextN: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>
<redis.clients.jedis.JedisFactory: void <init>(java.lang.String,int,int,int,java.lang.String,int,java.lang.String,boolean,javax.net.ssl.SSLSocketFactory,javax.net.ssl.SSLParameters,javax.net.ssl.HostnameVerifier)>-><redis.clients.jedis.JedisFactory: void <init>(java.lang.String,int,int,int,java.lang.String,java.lang.String,int,java.lang.String,boolean,javax.net.ssl.SSLSocketFactory,javax.net.ssl.SSLParameters,javax.net.ssl.HostnameVerifier)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.util.Iterator iterator()>
<java.net.URLPermission: java.lang.String actions()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpSendInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: java.util.List getSoftLocksForCache(java.lang.String)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.error.Mark: java.lang.String toString()>
<sun.net.www.MeteredStream: long skip(long)>-><sun.net.httpserver.SSLStreams$InputStream: long skip(long)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.owasp.encoder.XMLEncoder: java.nio.charset.CoderResult encodeArrays(java.nio.CharBuffer,java.nio.CharBuffer,boolean)>-><org.owasp.encoder.Encoder: java.nio.charset.CoderResult overflow(java.nio.CharBuffer,int,java.nio.CharBuffer,int)>
<sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.MeteredStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void ascend()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap access$100(java.util.concurrent.ConcurrentSkipListMap$SubMap)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.io.IOException: void <init>(java.lang.String)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<reactor.core.Scannable: java.lang.Object scan(reactor.core.Scannable$Attr)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.SubList$1: void remove()>
<java.io.SequenceInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.lang.StringBuffer: void <init>(int)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><springfox.documentation.service.Representation: int hashCode()>
<sun.net.www.http.KeepAliveEntry: void <init>(sun.net.www.http.HttpClient,long)>-><java.lang.Object: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.io.ByteArrayOutputStream: void close()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><java.nio.CharBuffer: int hashCode()>
<ch.qos.logback.core.joran.action.PropertyAction: void loadAndSetProperties(ch.qos.logback.core.joran.spi.InterpretationContext,java.io.InputStream,ch.qos.logback.core.joran.action.ActionUtil$Scope)>-><java.io.BufferedInputStream: void close()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.io.DataOutputStream: void writeChar(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<sun.net.www.http.KeepAliveStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long,sun.net.www.http.HttpClient)>-><sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.Boolean: boolean getBoolean(java.lang.String)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidationIfNecessary()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>
<org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(org.springframework.web.util.pattern.PathPattern)>
<org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String access$000(org.springframework.util.LinkedCaseInsensitiveMap,java.lang.String)>
<freemarker.core._CoreAPI: void checkSettingValueItemsType(java.lang.String,java.lang.Class,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>
<java.util.stream.IntPipeline$4$1: void accept(int)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: int size()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<sun.net.httpserver.ServerImpl$ServerTimerTask: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: int size()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.AbstractList$Itr: boolean hasNext()>
<sun.net.www.http.HttpClient$1: java.lang.Object run()>-><sun.net.www.http.HttpClient$1: java.lang.Void run()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: int size()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: java.lang.String substring(int,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><java.util.concurrent.RejectedExecutionException: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.ImmutableMap: java.util.Set keySet()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<redis.clients.jedis.ScanParams: redis.clients.jedis.ScanParams count(java.lang.Integer)>-><redis.clients.jedis.Protocol: byte[] toByteArray(int)>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getDomain()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.net.URL: java.lang.String toString()>
<org.jsoup.safety.Whitelist: boolean isSafeAttribute(java.lang.String,org.jsoup.nodes.Element,org.jsoup.nodes.Attribute)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><java.io.FilterInputStream: int available()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.util.Date: int hashCode()>
<redis.clients.jedis.Queable: redis.clients.jedis.Response getResponse(redis.clients.jedis.Builder)>-><redis.clients.jedis.Response: void <init>(redis.clients.jedis.Builder)>
<java.io.FilterInputStream: int available()>-><sun.net.www.MeteredStream: int available()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.mgt.SessionKey)>-><javax.servlet.ServletRequestWrapper: void removeAttribute(java.lang.String)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String exceptionMessage(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.io.FileOutputStream: void write(byte[],int,int)>
<org.apache.catalina.connector.Response: void addHeader(java.lang.String,java.lang.String,java.nio.charset.Charset)>-><org.apache.catalina.connector.Response: boolean checkSpecialHeader(java.lang.String,java.lang.String)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyList: java.lang.Object[] toArray()>
<org.springframework.context.i18n.LocaleContextHolder: java.util.Locale getLocale(org.springframework.context.i18n.LocaleContext)>-><org.springframework.context.i18n.SimpleLocaleContext: java.util.Locale getLocale()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.mgt.SessionKey)>
<reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: void slowPath(long)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<freemarker.core._CoreAPI: void checkSettingValueItemsType(java.lang.String,java.lang.Class,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.core.OrderComparator: int compare(java.lang.Object,java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: int indexOf(int)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$SynchronizedMap: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.ImmutableMap: boolean isEmpty()>
<org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: java.lang.Object run()>-><org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction: java.lang.Void run()>
<sun.net.www.protocol.http.HttpURLConnection$3: java.net.ResponseCache run()>-><java.net.ResponseCache: java.net.ResponseCache getDefault()>
<sun.net.www.MeteredStream: void justRead(long)>-><sun.net.www.http.KeepAliveStream: void close()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SynchronizedCollection: int size()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.security.DigestOutputStream: void write(byte[],int,int)>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int getResponseCode()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>-><org.springframework.core.style.ToStringCreator: org.springframework.core.style.ToStringCreator append(java.lang.String,java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.ConstructorArgumentValues: void addOrMergeIndexedArgumentValue(java.lang.Integer,org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)>-><org.springframework.beans.factory.support.ManagedList: boolean isMergeEnabled()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: java.lang.String getProtocol()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: void remove()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.io.SequenceInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><java.util.Date: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: void remove()>
<sun.rmi.transport.tcp.ConnectionMultiplexer: void shutDown()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: java.lang.Object[] toArray()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getSessionIdCookieValue(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void descend()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooLow(java.lang.Object,java.util.Comparator)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.MessageHeader: void <init>()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>-><java.io.ByteArrayOutputStream: void write(byte[],int,int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer$3: java.lang.Object run()>-><com.sun.jmx.mbeanserver.JmxMBeanServer$3: com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository run()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.AbstractCollection: void clear()>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: void remove()>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>-><java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.Collections$SetFromMap: java.util.Iterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.io.DataOutputStream: void writeLong(long)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.io.FileOutputStream: void write(int)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.IdentityHashMap$EntryIterator: void remove()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><java.net.Proxy: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.HeaderParser$ParserIterator: java.lang.Object next()>-><sun.net.www.HeaderParser$ParserIterator: java.lang.String next()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void update(org.apache.shiro.session.Session)>-><org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.protocol.http.HttpCallerInfo getHttpCallerInfo()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$Values: java.lang.Object[] toArray()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$EmptyMap: int size()>
<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object doGet(java.lang.Object)>-><java.util.concurrent.ConcurrentSkipListMap$Node: void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeSet: boolean isEmpty()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.Vector: boolean addAll(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.lang.Object[] toArray()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: void <init>(java.lang.String,int)>
<redis.clients.jedis.ScanParams: redis.clients.jedis.ScanParams match(byte[])>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisConfiguration: java.lang.String getUsernameOrElse(org.springframework.data.redis.connection.RedisConfiguration,java.util.function.Supplier)>-><org.springframework.data.redis.connection.RedisStaticMasterReplicaConfiguration: java.lang.String getUsername()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<reactor.core.publisher.Operators$ScalarSubscription: void clear()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: reactor.util.context.Context currentContext()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.Year: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.StringBuilder: void <init>()>
<java.net.Proxy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.awt.Point: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><java.io.PrintStream: void flush()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.sql.SQLException$1: boolean hasNext()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>-><org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.SubList$1: boolean hasNext()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><ch.qos.logback.classic.Logger: boolean isDebugEnabled()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getReferencedSessionId(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getUriPathSegmentParamValue(javax.servlet.ServletRequest,java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<redis.clients.jedis.ScanResult: java.lang.String getCursor()>-><redis.clients.jedis.util.SafeEncoder: java.lang.String encode(byte[])>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.File: void <init>(java.lang.String,java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.util.concurrent.ConcurrentSkipListMap: boolean isEmpty()>-><java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findFirst()>
<reactor.core.publisher.FluxTimeout$TimeoutTimeoutSubscriber: void cancel()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void cancel()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.apache.catalina.connector.OutputBuffer: void appendByteArray(byte[],int,int)>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<org.springframework.beans.CachedIntrospectionResults: boolean isClassLoaderAccepted(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.io.DataOutputStream: void writeShort(int)>-><sun.net.www.http.PosterOutputStream: void write(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendPath(java.lang.StringBuilder,java.lang.String)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><ch.qos.logback.classic.Logger: void error(java.lang.String)>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.StoppedSessionException: void <init>(java.lang.String)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.io.DataInputStream: int readInt()>-><sun.net.www.MeteredStream: int read()>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: int length()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void <init>(org.apache.shiro.session.mgt.ValidatingSessionManager)>-><java.lang.Object: void <init>()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<sun.net.ApplicationProxy: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<java.beans.FeatureDescriptor: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getSessionId(org.apache.shiro.session.mgt.SessionKey)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.io.PrintStream: void close()>
<sun.net.www.MessageHeader: java.util.Map getHeaders(java.lang.String[])>-><sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>
<net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: java.util.Spliterator spliterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Spliterator spliterator()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<sun.net.www.MeteredStream: void close()>-><java.io.PushbackInputStream: void close()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.Collections$SetFromMap: void clear()>-><java.util.WeakHashMap: void clear()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>-><org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><redis.clients.jedis.Response: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<sun.net.httpserver.ServerImpl$ServerTimerTask1: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.Thread: void setPriority(int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.owasp.encoder.URIEncoder: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$9: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><java.nio.CharBuffer: java.lang.String toString()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void ensureOpen()>-><java.io.IOException: void <init>(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><java.io.PrintStream: void write(int)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.LinkedList: boolean add(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.boot.autoconfigure.template.TemplateLocation: java.lang.String toString()>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>-><java.nio.CharBuffer: int length()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.SubList$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection$7: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$7: java.net.ProxySelector run()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.apache.poi.xssf.streaming.SXSSFRow: java.util.Iterator iterator()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><sun.nio.cs.ThreadLocalCoders: java.nio.charset.CharsetEncoder encoderFor(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onStop(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getStopTimestamp()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.PasswordAuthentication privilegedRequestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.io.SequenceInputStream: void nextStream()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.util.Date: void <init>(long)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.io.FileInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.io.File: java.lang.String getCanonicalPath()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.security.AccessController: java.security.AccessControlContext getContext()>
<ch.qos.logback.classic.LoggerContext: void fireOnStop()>-><io.micrometer.core.instrument.binder.logging.LogbackMetrics$1: void onStop(ch.qos.logback.classic.LoggerContext)>
<reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.Operators: void onDiscard(java.lang.Object,reactor.util.context.Context)>
<java.util.TreeMap$Entry: int hashCode()>-><springfox.documentation.service.Response: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.io.ObjectInputStream$PeekInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.net.Socket: void connect(java.net.SocketAddress,int)>-><java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: int size()>
<sun.net.www.http.HttpCaptureInputStream: void close()>-><java.io.FilterInputStream: void close()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: void forEach(java.util.function.Consumer)>
<java.lang.Object: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$1: java.net.PasswordAuthentication run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.NetworkClient$2: java.lang.Object run()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.ImmutableMapValues: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.util.Set entrySet()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><java.io.InputStream: void close()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.rmi.transport.proxy.HttpSendInputStream: long skip(long)>-><sun.net.www.MeteredStream: long skip(long)>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void appendHttpOnly(java.lang.StringBuilder,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.MeteredStream: long skip(long)>-><java.util.zip.InflaterInputStream: long skip(long)>
<sun.net.www.http.ChunkedOutputStream: boolean checkError()>-><java.io.PrintStream: boolean checkError()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><java.io.InputStream: void close()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.KeepAliveStream: void mark(int)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.lang.ProcessEnvironment$Variable: int compareTo(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<sun.security.util.HostnameChecker: boolean match(java.lang.String,java.security.Principal)>-><sun.security.util.HostnameChecker: java.lang.String getServerName(java.security.Principal)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void postRegister(javax.management.ObjectName,javax.management.DynamicMBean,boolean,boolean)>-><com.sun.jmx.mbeanserver.MBeanServerDelegateImpl: void postRegister(java.lang.Boolean)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><springfox.documentation.service.Response: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.apache.logging.log4j.message.ParameterFormatter: void appendCollection(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.ArrayList: void <init>(java.util.Collection)>-><sun.awt.util.IdentityLinkedList: java.lang.Object[] toArray()>
<reactor.core.publisher.FluxIterable$IterableSubscription: void fastPath()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.owasp.encoder.Encoder: java.nio.charset.CoderResult underflow(java.nio.CharBuffer,int,java.nio.CharBuffer,int)>-><java.nio.CharBuffer: int arrayOffset()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect()>-><java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.http.HttpClient: boolean isCachedConnection()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.ImmutableMap: java.util.Set entrySet()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.io.ObjectStreamField: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.nio.Buffer: int position()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getUriPathSegmentParamValue(javax.servlet.ServletRequest,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String,java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<freemarker.ext.beans.IteratorModel: boolean hasNext()>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.HashSet: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: java.lang.Object next()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>-><org.crazycake.shiro.exception.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.x509.Extension: java.lang.String toString()>
<org.springframework.context.support.StaticMessageSource: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<redis.clients.jedis.util.RedisOutputStream: void flushBuffer()>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<org.jsoup.safety.Whitelist: org.jsoup.nodes.Attributes getEnforcedAttributes(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.lang.String: int length()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: void remove()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.MeteredStream: void justRead(long)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.AbstractCollection: void clear()>
<org.springframework.web.util.pattern.WildcardTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String reducePath(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue$LBQSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendDomain(java.lang.StringBuilder,java.lang.String)>
<java.io.DataOutputStream: void write(int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>
<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence)>-><java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>
<sun.net.www.MeteredStream: void close()>-><sun.rmi.server.MarshalInputStream: void close()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><sun.security.x509.X509CRLEntryImpl: int compareTo(java.lang.Object)>
<sun.net.www.MeteredStream: void close()>-><sun.rmi.transport.proxy.HttpSendInputStream: void close()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.RegularImmutableMap: int size()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><java.io.InputStream: int read(byte[],int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void closeServer()>
<java.net.HttpConnectSocketImpl: int getLocalPort()>-><java.net.SocketImpl: int getLocalPort()>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int compareTo(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>-><java.lang.Object: void <init>()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.util.JapaneseImperialCalendar: void add(int,int)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String scheme()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.io.ObjectInputStream$PeekInputStream: int available()>-><java.io.FilterInputStream: int available()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>
<java.io.DataInputStream: boolean readBoolean()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.ProgressSource: void setContentType(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.SubList$1: boolean hasNext()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber: boolean isEmpty()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>
<sun.rmi.transport.proxy.HttpSendOutputStream: void write(byte[],int,int)>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.HttpClient: java.io.InputStream getInputStream()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.slf4j.helpers.NOPLogger: boolean isInfoEnabled()>
<org.owasp.encoder.URIEncoder: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<net.sf.ehcache.store.cachingtier.OnHeapCachingTier$Fault: java.lang.Object get()>-><net.sf.ehcache.store.CacheStore$4: java.lang.Object call()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<redis.clients.jedis.JedisSentinelPool: void returnBrokenResource(redis.clients.jedis.Jedis)>-><redis.clients.jedis.util.Pool: void returnBrokenResourceObject(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<sun.rmi.server.LoaderHandler: void addPermissionsForURLs(java.net.URL[],java.security.PermissionCollection,boolean)>-><java.net.SocketPermission: boolean implies(java.security.Permission)>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Inet6Address: java.lang.String getHostAddress()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><org.apache.commons.collections.FastHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.owasp.encoder.XMLEncoder: int firstEncodedOffset(java.lang.String,int,int)>-><java.lang.String: char charAt(int)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void requestCompleted(java.lang.String)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>-><io.netty.util.internal.ThreadExecutorMap$2: void run()>
<java.text.AttributeEntry: int hashCode()>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<java.util.Objects: int hashCode(java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.lang.String: java.lang.String trim()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.SubList$1: void add(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Method[] _failGetClassMethods(java.lang.Class,java.lang.Throwable)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.io.FileInputStream: int available()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractMap$2: boolean isEmpty()>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>-><java.util.StringTokenizer: boolean hasMoreTokens()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><sun.net.www.http.HttpClient: void closeServer()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void appendComment(java.lang.StringBuilder,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptySet: java.lang.Object[] toArray()>
<java.io.FilterInputStream: int read(byte[])>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void forEach(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.ArrayList: boolean isEmpty()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.mgt.SessionKey)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>-><java.util.LinkedHashMap$LinkedHashIterator: void remove()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: boolean isAuthorizationStale(java.lang.String)>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.util.Base64: java.util.Base64$Encoder getEncoder()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.YearMonth: int compareTo(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.google.common.util.concurrent.AbstractFuture: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.lang.String: boolean startsWith(java.lang.String)>
<redis.clients.jedis.ScanParams: void <init>()>-><java.lang.Object: void <init>()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.DataOutputStream: void write(byte[],int,int)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<java.io.SequenceInputStream: int read()>-><sun.net.www.MeteredStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.ObjectName: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.web.util.pattern.PatternParseException$PatternMessage: java.lang.String formatMessage(java.lang.Object[])>-><java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>
<redis.clients.jedis.BinaryJedis: void resetState()>-><redis.clients.jedis.Pipeline: void close()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.HashMap$Node: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxHide$SuppressFuseableSubscriber: boolean isEmpty()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<redis.clients.jedis.BinaryJedis: java.lang.Long expire(byte[],int)>-><redis.clients.jedis.BinaryJedis: void checkIsInMultiOrPipeline()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap: boolean isEmpty()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] toArray()>
<org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object remove(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>-><java.lang.String: void <init>(byte[],int,int,int)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<freemarker.template.DefaultIteratorAdapter$SimpleTemplateModelIterator: boolean hasNext()>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<springfox.documentation.service.Representation: boolean equals(java.lang.Object)>-><java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.Integer: int parseInt(java.lang.String)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.lang.Object next()>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.net.URL: int getPort()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.Object[] toArray()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.net.URLConnection: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.nio.HeapCharBuffer: java.nio.CharBuffer duplicate()>-><java.nio.Buffer: int capacity()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><java.io.FilterInputStream: int read(byte[])>
<java.util.Hashtable: java.lang.String toString()>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.net.NetworkClient$1: java.lang.Void run()>-><java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><redis.clients.jedis.Response: java.lang.String toString()>
<freemarker.template.SimpleCollection$SimpleTemplateModelIterator: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>-><java.lang.Math: long min(long,long)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.time.ZoneId: java.time.ZoneId normalized()>-><java.time.ZoneRegion: java.time.zone.ZoneRules getRules()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getHeaderName()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$8: java.io.OutputStream run()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream access$100(sun.net.www.protocol.http.HttpURLConnection)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.LinkedList$ListItr: void add(java.lang.Object)>-><java.util.LinkedList: void linkLast(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Collections$1: java.lang.Object next()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><springfox.documentation.service.Representation: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date newCalendarDate()>-><sun.util.calendar.Gregorian$Date: void <init>()>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.BasicAuthentication: boolean supportsPreemptiveAuthorization()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validate(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletResponse getResponse(java.lang.Object)>-><org.apache.shiro.web.subject.support.WebDelegatingSubject: javax.servlet.ServletResponse getServletResponse()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><java.util.Stack: java.lang.Object push(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.Object: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Optional: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><java.nio.CharBuffer: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<java.io.PushbackInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<java.text.AttributeEntry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<freemarker.template.SimpleCollection$SimpleTemplateModelIterator: boolean hasNext()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><java.net.CookieHandler: java.net.CookieHandler getDefault()>
<redis.clients.jedis.JedisSentinelPool: void destroy()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.concurrent.Executors$RunnableAdapter: java.lang.Object call()>-><io.netty.util.internal.ThreadExecutorMap$2: void run()>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: void clear()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.io.BufferedInputStream: int available()>-><sun.net.www.MeteredStream: int available()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.JmxMBeanServer$2: java.lang.Object run()>-><com.sun.jmx.mbeanserver.JmxMBeanServer: javax.management.MBeanServerDelegate access$000(com.sun.jmx.mbeanserver.JmxMBeanServer)>
<sun.nio.ch.IOUtil: int read(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>-><java.nio.DirectByteBufferR: boolean isReadOnly()>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.GZIPInputStream$1: void close()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletResponse getHttpResponse(java.lang.Object)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.ServletResponse getResponse(java.lang.Object)>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<net.sf.ehcache.store.disk.DiskStore: net.sf.ehcache.Element remove(java.lang.Object)>-><java.lang.String: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: int getKey(java.lang.String)>
<java.util.ComparableTimSort: void mergeHi(int,int,int,int)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.Integer: int intValue()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: void forEach(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><java.io.FileInputStream: int read(byte[])>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.net.URL: int getDefaultPort()>
<net.sf.ehcache.store.cachingtier.CountBasedBackEnd: net.sf.ehcache.Element findEvictionCandidate(java.lang.Object,java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.time.format.DateTimePrintContext: java.time.temporal.TemporalAccessor adjust(java.time.temporal.TemporalAccessor,java.time.format.DateTimeFormatter)>-><java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.Instant)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><freemarker.ext.beans.HashAdapter: boolean isEmpty()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionStore: net.sf.ehcache.Element removeElement(net.sf.ehcache.Element,net.sf.ehcache.store.ElementValueComparator)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendComment(java.lang.StringBuilder,java.lang.String)>
<java.io.FilterInputStream: int read(byte[],int,int)>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getSessionIdName()>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getName()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><java.nio.CharBuffer: java.lang.String toString()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.Vector: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$2: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.HttpClient: boolean isInKeepAliveCache()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Class: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.lang.Integer: int compareTo(java.lang.Object)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.net.URL: int getPort()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<sun.util.logging.PlatformLogger: void finest(java.lang.String)>-><sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: int size()>
<redis.clients.jedis.BinaryClient: void scan(byte[],redis.clients.jedis.ScanParams)>-><redis.clients.jedis.Connection: void sendCommand(redis.clients.jedis.commands.ProtocolCommand,byte[][])>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><net.sf.ehcache.store.MemoryStore: net.sf.ehcache.Element getQuiet(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>
<sun.net.www.ParseUtil: boolean isEscaped(java.lang.String,int)>-><sun.net.www.ParseUtil: boolean match(char,long,long)>
<redis.clients.jedis.BinaryJedis: java.lang.Long expire(byte[],int)>-><redis.clients.jedis.BinaryClient: void expire(byte[],int)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<net.sf.ehcache.store.LegacyStoreWrapper: java.util.List getKeys()>-><net.sf.ehcache.store.LruMemoryStore: java.util.List getKeys()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.zip.CheckedOutputStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.lang.StringBuilder: void <init>()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<java.util.stream.StreamSpliterators$DistinctSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<org.crazycake.shiro.exception.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>-><java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.net.HostPortrange: int[] defaultPort()>
<org.springframework.data.redis.connection.jedis.JedisConnectionFactory: void destroy()>-><org.springframework.data.redis.connection.ClusterCommandExecutor: void destroy()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.TimSort: void binarySort(java.lang.Object[],int,int,int,java.util.Comparator)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.Arrays$ArrayList: java.lang.Object[] toArray()>
<java.io.ObjectInputStream$PeekInputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.boot.convert.CollectionToDelimitedStringConverter: java.lang.Object convert(java.util.Collection,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<net.sf.ehcache.store.CacheStore$4: java.lang.Object call()>-><net.sf.ehcache.store.CacheStore$4: net.sf.ehcache.Element call()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void closeUnderlying()>-><sun.net.www.http.ChunkedInputStream: boolean hurry()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.boot.autoconfigure.web.ErrorProperties,java.util.List)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void enableSessionValidation()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$UnmodifiableMap: java.util.Set keySet()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void print(java.lang.Object,java.util.Locale)>-><java.nio.CharBuffer: java.lang.Appendable append(char)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.SubList$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<freemarker.template.DefaultNonListCollectionAdapter: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String convertKey(java.lang.String)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.FileInputStream: void close()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><reactor.core.Fuseable$QueueSubscription: java.lang.Object[] toArray()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.lang.ProcessEnvironment$StringValues: void clear()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendVersion(java.lang.StringBuilder,int)>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.String: int length()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<java.util.AbstractCollection: void clear()>-><freemarker.ext.beans.CollectionAdapter$1: boolean hasNext()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><io.micrometer.core.instrument.Tag: int compareTo(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<redis.clients.jedis.ScanParams: java.util.Collection getParams()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.security.DigestOutputStream: void write(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Spliterators$1Adapter: java.lang.Object next()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.channel.ReflectiveChannelFactory: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<sun.net.www.http.HttpCaptureInputStream: int read()>-><java.io.FilterInputStream: int read()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.net.URL: int getPort()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>-><sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.p6spy.engine.common.CustomHashedHashSet: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$1: void remove()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.HashMap$Values: void forEach(java.util.function.Consumer)>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>
<org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>-><org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.boot.autoconfigure.web.ErrorProperties)>-><java.util.Collections: java.util.List emptyList()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String)>
<freemarker.ext.beans._BeansAPI: void removeClearedReferencesFromCache(java.util.Map,java.lang.ref.ReferenceQueue)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.apache.poi.util.ReplacingInputStream: java.lang.String toString()>-><java.lang.Enum: java.lang.String name()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.String: int length()>
<org.springframework.core.style.DefaultToStringStyler: void styleField(java.lang.StringBuilder,java.lang.String,java.lang.Object)>-><org.springframework.core.style.DefaultToStringStyler: void styleFieldEnd(java.lang.StringBuilder,java.lang.String)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList: void <init>()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$SynchronizedMap: java.util.Set entrySet()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.core.OutputFormat: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.core.TemplateObject: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.monitor.entity.LoginLog: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><java.io.BufferedInputStream: void close()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SetFromMap: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,org.springframework.boot.autoconfigure.web.ErrorProperties)>-><org.springframework.boot.autoconfigure.web.ErrorProperties: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><java.io.BufferedInputStream: void close()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptyList: java.lang.Object[] toArray()>
<java.util.concurrent.ConcurrentSkipListMap: int cpr(java.util.Comparator,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: java.lang.Object[] toArray()>
<freemarker.ext.beans._BeansAPI: void removeClearedReferencesFromCache(java.util.Map,java.lang.ref.ReferenceQueue)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$Values: java.lang.Object[] toArray()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void checkResponseCredentials(boolean)>
<org.springframework.core.NestedExceptionUtils: java.lang.Throwable getRootCause(java.lang.Throwable)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<net.sf.ehcache.store.chm.SelectableConcurrentHashMap: java.util.concurrent.locks.ReentrantReadWriteLock lockFor(java.lang.Object)>-><java.lang.String: int hashCode()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getNewKeys()>-><net.sf.ehcache.transaction.SoftLockManagerImpl: java.util.concurrent.ConcurrentMap getNewKeyLocks()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Vector: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.redis.connection.stream.RecordId: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><springfox.documentation.service.Representation: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<java.io.ObjectInputStream: java.io.ObjectStreamClass readNonProxyDesc(boolean)>-><org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.net.SocketInputStream: int read(byte[],int,int)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser$ParserIterator: java.lang.Object next()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.apache.poi.openxml4j.opc.PackagePart: int compareTo(java.lang.Object)>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>-><java.nio.CharBuffer: int compare(char,char)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureTheRestPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: java.lang.StringBuilder _appendClassDescription(java.lang.StringBuilder)>-><com.fasterxml.classmate.TypeBindings: int size()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: long getContentLengthLong()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.URL: java.lang.String getAuthority()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.io.FilterInputStream: void mark(int)>-><sun.net.www.http.KeepAliveStream: void mark(int)>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><org.apache.shiro.util.ClassUtils: org.slf4j.Logger access$100()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: void openServer()>-><sun.net.NetworkClient: void openServer(java.lang.String,int)>
<sun.net.www.protocol.http.HttpURLConnection: void setReadTimeout(int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.transaction.SoftLockID: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EntrySet: int size()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.sql.Time: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.URL: java.lang.String getProtocol()>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><org.crazycake.shiro.serializer.StringSerializer: byte[] serialize(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><com.google.common.collect.ImmutableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><java.util.LinkedList: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.hibernate.validator.internal.util.StringHelper: java.lang.String toShortString(java.lang.reflect.Type)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getSessionIdCookieValue(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void <init>(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)>-><java.net.HttpURLConnection: void <init>(java.net.URL)>
<org.apache.catalina.connector.Response: long getContentWritten()>-><org.apache.catalina.connector.OutputBuffer: long getContentWritten()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<java.util.AbstractMap$1: void clear()>-><org.springframework.util.ConcurrentReferenceHashMap: void clear()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.SocketImpl: int getPort()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.AbstractMap: void clear()>-><java.util.TreeMap$DescendingSubMap: java.util.Set entrySet()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: java.util.Map getHeaders(java.lang.String[])>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.ImmutableList$SubList: java.lang.Object get(int)>
<java.util.Vector: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<freemarker.template.IteratorToTemplateModelIteratorAdapter: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: java.util.Map getHeaders()>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.URL: java.lang.String getPath()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.EmptyInputStream: void <init>()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.String: java.lang.String toLowerCase()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.shiro.web.util.WebUtils: boolean isWeb(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.session.mgt.WebSessionKey: javax.servlet.ServletRequest getServletRequest()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultToStringStyler: void styleIdentityHashCode(java.lang.StringBuilder,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>-><java.util.HashMap: boolean isEmpty()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int lastIndexOf(int)>
<sun.net.www.protocol.http.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.nio.cs.StreamDecoder: int readBytes()>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<java.util.Collections$3: boolean hasMoreElements()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int read()>-><java.io.FilterInputStream: int read()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsURLConnectionImpl: int getResponseCode()>-><java.net.HttpURLConnection: int getResponseCode()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: java.util.Iterator iterator()>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><ch.qos.logback.classic.Logger: boolean isTraceEnabled()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setReadTimeout(int)>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getOpaque()>
<org.apache.shiro.util.ClassUtils$ExceptionIgnoringAccessor: java.lang.Class loadClass(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: void check(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<redis.clients.jedis.JedisSentinelPool$MasterListener: void shutdown()>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.net.URLConnection: long getContentLengthLong()>-><java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.jsoup.nodes.TextNode: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void afterExpired(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DefaultSessionManager: boolean isDeleteInvalidSessions()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.http.ChunkedInputStream: int read()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<redis.clients.jedis.util.RedisOutputStream: void write(byte[],int,int)>-><sun.net.www.http.PosterOutputStream: void write(byte[],int,int)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.FileInputStream: int read(byte[],int,int)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<reactor.core.publisher.FluxIterable$IterableSubscription: void slowPath(long)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.net.URLPermission: java.lang.String actions()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.net.URI: java.net.URI normalize()>-><java.net.URI: java.net.URI normalize(java.net.URI)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.Instant: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>
<sun.rmi.transport.tcp.ConnectionMultiplexer: void shutDown()>-><java.io.InputStream: void close()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><sun.net.ProgressSource: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: java.net.Socket doTunnel(java.lang.String,int)>-><java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>
<sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>-><java.lang.String: int length()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptySet: int size()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.lang.Float: int compareTo(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<cc.mrbird.febs.monitor.controller.FebsActuatorController: void <init>(cc.mrbird.febs.monitor.endpoint.FebsHttpTraceEndpoint)>-><synthetic.method.SingletonFactory: cc.mrbird.febs.monitor.endpoint.FebsHttpTraceEndpoint getFebsHttpTraceEndpoint()>
<freemarker.ext.beans.IteratorModel: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>-><io.netty.util.concurrent.SingleThreadEventExecutor: void wakeup(boolean)>
<org.owasp.encoder.XMLEncoder: int firstEncodedOffset(java.lang.String,int,int)>-><org.owasp.encoder.Unicode: boolean isNonCharacter(int)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.util.zip.DeflaterOutputStream: void write(int)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: boolean hurry()>-><sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<reactor.core.publisher.Operators$MultiSubscriptionSubscriber: void drainLoop()>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void cancel()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Vector$Itr: boolean hasNext()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<reactor.core.publisher.Operators$ScalarSubscription: void request(long)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onNext(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: java.util.List sortErrorViewResolvers(java.util.List)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.awt.AppContext: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.nio.cs.StreamDecoder: int readBytes()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.nio.charset.Charset: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.springframework.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getPath()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$CHMView: java.lang.Object[] toArray()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object,org.springframework.core.style.ToStringStyler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.generator.entity.GeneratorConfig: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.net.Socket: void setSoLinger(boolean,int)>-><java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.util.zip.ZipOutputStream: void write(byte[],int,int)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<sun.net.www.HeaderParser: java.util.Iterator keys()>-><sun.net.www.HeaderParser$ParserIterator: void <init>(sun.net.www.HeaderParser,boolean)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String reducePath(java.lang.String)>-><java.lang.String: int lastIndexOf(int)>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<sun.net.www.MeteredStream: int available()>-><sun.net.httpserver.Request$ReadStream: int available()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<redis.clients.jedis.JedisPool: void <init>(org.apache.commons.pool2.impl.GenericObjectPoolConfig,java.lang.String,int,int,java.lang.String,int,java.lang.String)>-><redis.clients.jedis.JedisPool: void <init>(org.apache.commons.pool2.impl.GenericObjectPoolConfig,java.lang.String,int,int,int,java.lang.String,int,java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<net.sf.ehcache.store.disk.DiskStorageFactory: net.sf.ehcache.store.disk.DiskStorageFactory$DiskSubstitute getDiskEvictionTarget(java.lang.Object,int)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.filter.GenericFilterBean: void setEnvironment(org.springframework.core.env.Environment)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.LinkedHashMap: java.util.Set keySet()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><sun.net.www.http.HttpClient: void closeServer()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serializeContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><com.google.common.collect.ImmutableCollection: boolean add(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.HttpCallerInfo: void <init>(sun.net.www.protocol.http.HttpCallerInfo,java.lang.String)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.apache.shiro.web.session.HttpServletSession: long getTimeout()>
<com.sun.jmx.mbeanserver.JmxMBeanServer$3: com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository run()>-><com.sun.jmx.mbeanserver.MBeanInstantiator: com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository getClassLoaderRepository()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber: int size()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.net.URLConnection: java.lang.String typeToPackageName(java.lang.String)>-><java.lang.String: int length()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.http.KeepAliveStreamCleaner$2: java.lang.Object run()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>
<java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<java.util.Date: long parse(java.lang.String)>-><sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setTimeOfDay(int,int,int,int)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidationIfNecessary()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.AbstractList$ListItr: void add(java.lang.Object)>-><java.util.AbstractList$Itr: void checkForComodification()>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.Vector: int size()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void <init>(sun.net.www.protocol.http.HttpURLConnection,java.io.InputStream)>-><java.io.FilterInputStream: void <init>(java.io.InputStream)>
<java.io.DataInputStream: short readShort()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.awt.SunHints$Key: java.lang.String toString()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<redis.clients.jedis.BinaryClient: void discard()>-><redis.clients.jedis.Connection: void sendCommand(redis.clients.jedis.commands.ProtocolCommand)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><freemarker.ext.beans.SequenceAdapter: int size()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.http.AuthCacheValue: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.commons.pool2.impl.DefaultPooledObject: java.lang.String toString()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.io.InputStream: int read(byte[],int,int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<redis.clients.jedis.BinaryJedis: java.lang.Long expire(byte[],int)>-><redis.clients.jedis.Connection: java.lang.Long getIntegerReply()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: boolean available()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.util.zip.ZipOutputStream: void write(byte[],int,int)>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletResponse getResponse(java.lang.Object)>-><org.apache.shiro.web.session.mgt.WebSessionKey: javax.servlet.ServletResponse getServletResponse()>
<sun.awt.util.IdentityLinkedList$Entry: void <init>(java.lang.Object,sun.awt.util.IdentityLinkedList$Entry,sun.awt.util.IdentityLinkedList$Entry)>-><java.lang.Object: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.YearMonth: java.lang.String toString()>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.http.KeepAliveStream: void close()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.PrimitiveIterator$OfInt: java.lang.Object next()>
<java.util.AbstractList: void removeRange(int,int)>-><java.util.LinkedList$ListItr: void remove()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.util.WebUtils: boolean isHttp(java.lang.Object)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<cc.mrbird.febs.monitor.controller.ViewController: void <init>(cc.mrbird.febs.monitor.helper.FebsActuatorHelper)>-><synthetic.method.SingletonFactory: cc.mrbird.febs.monitor.helper.FebsActuatorHelper getFebsActuatorHelper()>
<java.net.URLPermission: java.lang.String actions()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<net.sf.ehcache.transaction.local.LocalTransactionStore$1: java.util.Iterator sourceIterator()>-><net.sf.ehcache.util.SetAsList: java.util.Iterator iterator()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String unquote(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.net.URLPermission: java.lang.String actions()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.lang.Object[] toArray()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler: void accept(javax.xml.stream.events.XMLEvent,reactor.core.publisher.SynchronousSink)>-><javax.xml.namespace.QName: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.InetSocketAddress: java.lang.String getHostName()>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Socket: void <init>(java.net.Proxy)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.concurrent.ConcurrentHashMap$CollectionView: void clear()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><java.nio.CharBuffer: int hashCode()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.rmi.transport.tcp.ConnectionMultiplexer: void shutDown()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.FluxIterable$IterableSubscription: boolean isEmpty()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.stream.Nodes$CollectionNode: java.util.Spliterator spliterator()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<sun.net.www.http.HttpClient: boolean available()>-><java.net.Socket: void setSoTimeout(int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Long: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: void remove()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getSessionIdCookieValue(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: org.apache.shiro.web.servlet.Cookie getSessionIdCookie()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: java.net.Socket createSocket()>-><sun.net.NetworkClient: java.net.Socket createSocket()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyStop(org.apache.shiro.session.Session)>-><java.util.ArrayList$Itr: boolean hasNext()>
<sun.net.www.http.HttpCaptureOutputStream: void flush()>-><java.io.FilterOutputStream: void flush()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><org.crazycake.shiro.common.SessionInMemory: org.apache.shiro.session.Session getSession()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><java.lang.StringBuilder: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.rmi.transport.tcp.ConnectionMultiplexer: void shutDown()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void proxiedConnect(java.net.URL,java.lang.String,int,boolean)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validate(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void add(java.lang.Object)>-><java.lang.UnsupportedOperationException: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<java.util.AbstractList$ListItr: void add(java.lang.Object)>-><java.util.ConcurrentModificationException: void <init>()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.concurrent.TimeUnit$3: long convert(long,java.util.concurrent.TimeUnit)>-><java.util.concurrent.TimeUnit$4: long toMillis(long)>
<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue mergeIfRequired(org.springframework.beans.PropertyValue,org.springframework.beans.PropertyValue)>-><org.springframework.beans.factory.support.ManagedList: java.lang.Object merge(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.text.AttributeEntry: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableMapKeySet: int size()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onError(java.lang.Throwable)>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: boolean isExpired()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.String: java.lang.String toLowerCase()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.util.Iterator iterator()>
<java.util.zip.DeflaterOutputStream: void close()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><java.io.BufferedInputStream: void close()>
<org.apache.catalina.connector.OutputBuffer: void appendByteArray(byte[],int,int)>-><org.apache.catalina.connector.OutputBuffer: int transfer(byte[],int,int,java.nio.ByteBuffer)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController: void <init>(org.springframework.boot.web.servlet.error.ErrorAttributes,java.util.List)>-><java.lang.Object: void <init>()>
<java.util.ArrayList$SubList: void add(int,java.lang.Object)>-><org.jsoup.helper.ChangeNotifyingArrayList: void add(int,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.NegotiateAuthentication: byte[] nextToken(byte[])>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><java.lang.Character: boolean isISOControl(char)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: void remove()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: org.crazycake.shiro.common.SessionInMemory createSessionInMemory(org.apache.shiro.session.Session)>-><org.crazycake.shiro.common.SessionInMemory: void setSession(org.apache.shiro.session.Session)>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.httpserver.SSLStreams$OutputStream: void write(int)>
<net.sf.ehcache.store.LegacyStoreWrapper: java.util.List getKeys()>-><java.util.ArrayList: void <init>(java.util.Collection)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.Instant: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><net.sf.ehcache.util.LargeCollection: java.util.Iterator iterator()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<net.sf.ehcache.pool.sizeof.ObjectGraphWalker: long walk(int,boolean,java.lang.Object[])>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.web.util.pattern.PathPattern: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: char getSeparator()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EntrySet: java.lang.Object[] toArray()>
<java.io.ObjectInputStream$PeekInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<freemarker.core.FMParser: void HeaderElement()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.springframework.util.MultiValueMapAdapter: int size()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><springfox.documentation.service.Response: int hashCode()>
<java.util.Collections$SetFromMap: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean containsKey(java.lang.Object)>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void remove()>
<java.io.PrintStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><javax.security.auth.Subject$SecureSet: int size()>
<java.net.SocksSocketImpl: void <init>(java.net.Proxy)>-><java.net.InetSocketAddress: java.lang.String getHostString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.HeaderParser: java.util.Iterator keys()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><java.lang.StringBuilder: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<sun.net.www.ParseUtil: java.net.URI createURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.net.URI: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.ArrayList: void <init>(java.util.Collection)>-><net.sf.ehcache.store.disk.DiskStore$KeySet: java.lang.Object[] toArray()>
<sun.rmi.server.LoaderHandler: void addPermissionsForURLs(java.net.URL[],java.security.PermissionCollection,boolean)>-><java.security.Permission: java.lang.String getName()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.net.www.MeteredStream: int read()>-><org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read()>
<java.io.DataOutputStream: void writeByte(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><java.util.HashSet: boolean add(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.Object next()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.FluxIterable$IterableSubscription: int size()>
<java.util.zip.ZipInputStream: int read(byte[],int,int)>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveStreamCleaner: boolean offer(sun.net.www.http.KeepAliveCleanerEntry)>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<org.apache.catalina.session.ManagerBase: java.lang.String toString()>-><org.apache.catalina.util.ToStringUtil: java.lang.String toString(java.lang.Object,org.apache.catalina.Container)>
<redis.clients.jedis.Response: java.lang.String toString()>-><redis.clients.jedis.BuilderFactory$6: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<java.io.BufferedInputStream: long skip(long)>-><sun.net.www.MeteredStream: long skip(long)>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><sun.net.www.MeteredStream: void close()>
<org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: void clear()>-><java.util.HashMap: void clear()>
<java.util.EnumMap: int entryHashCode(int)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<reactor.core.publisher.FluxIterable$IterableSubscription: void fastPath()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<net.sf.ehcache.store.disk.DiskStore: java.util.List getKeys()>-><java.util.ArrayList: void <init>(java.util.Collection)>
<java.util.TreeMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><ch.qos.logback.classic.Logger: void error(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean isAuthorizationStale(java.lang.String)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.tokens.Token$ID: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.Objects: int hashCode(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.jsoup.safety.Whitelist: org.jsoup.nodes.Attributes getEnforcedAttributes(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<sun.rmi.transport.proxy.HttpSendInputStream: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.juli.logging.DirectJDKLog: void warn(java.lang.Object,java.lang.Throwable)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$SingletonMap: java.util.Set entrySet()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.util.Arrays: void fill(byte[],byte)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.httpserver.Request$WriteStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.apache.poi.util.ReplacingInputStream: int read()>-><java.util.Arrays: void fill(int[],int)>
<org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>-><org.apache.poi.util.ReplacingInputStream: int read()>
<java.util.Collections$SynchronizedCollection: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.String: int lastIndexOf(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Boolean: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.LargeCollection: boolean removeAll(java.util.Collection)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.String: java.lang.String toLowerCase()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><javax.naming.ldap.Rdn$RdnEntry: int compareTo(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.net.URL: java.lang.String getHost()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.LocalDate: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.ArrayList: void clear()>
<org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.OutputBuffer: void write(byte[],int,int)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><com.google.common.collect.ImmutableEntry: java.lang.Object getValue()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Spliterators$2Adapter: boolean hasNext()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.template.SimpleDate: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><sun.util.BuddhistCalendar: void add(int,int)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String,long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<net.sf.ehcache.util.LargeCollection: boolean removeAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.HashMap$KeySpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendSecure(java.lang.StringBuilder,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.HashMap$Values: void clear()>-><java.util.HashMap: void clear()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyExpiration(org.apache.shiro.session.Session)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber: boolean isEmpty()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.time.Duration: int compareTo(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.io.PushbackInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.lang.reflect.Type: java.lang.String getTypeName()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.session.mgt.WebSessionKey: javax.servlet.ServletRequest getServletRequest()>
<java.net.URLConnection: java.net.ContentHandler getContentHandler()>-><java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><freemarker.ext.beans.SequenceAdapter: int size()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><org.apache.poi.xssf.streaming.SXSSFRow$FilledCellIterator: boolean hasNext()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.crazycake.shiro.serializer.StringSerializer: byte[] serialize(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Hashtable$ValueCollection: int size()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.Vector: java.lang.Object[] toArray()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.DigestAuthentication$1: java.lang.Object run()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>-><sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.http.HttpClient: java.lang.String getProxyHostUsed()>-><java.net.Proxy: java.net.SocketAddress address()>
<org.crazycake.shiro.common.WorkAloneRedisManager: byte[] set(byte[],byte[],int)>-><redis.clients.jedis.BinaryJedis: java.lang.String set(byte[],byte[])>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: java.util.Date getStopTimestamp()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object poll()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void reset()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><springfox.documentation.service.Response: int hashCode()>
<com.sun.jmx.mbeanserver.MBeanIntrospector: javax.management.MBeanNotificationInfo[] findNotifications(java.lang.Object)>-><javax.management.MBeanServerDelegate: javax.management.MBeanNotificationInfo[] getNotificationInfo()>
<java.io.DataOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<sun.net.www.http.KeepAliveCache$1: java.lang.Void run()>-><sun.net.www.http.KeepAliveCache: java.lang.Thread access$002(sun.net.www.http.KeepAliveCache,java.lang.Thread)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthScheme getAuthScheme()>
<sun.net.www.MeteredStream: int available()>-><java.util.zip.ZipInputStream: int available()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$1: boolean hasNext()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Hashtable: int size()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><sun.security.util.HostnameChecker: boolean match(java.lang.String,java.security.Principal)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><sun.misc.SharedSecrets: sun.misc.JavaNetHttpCookieAccess getJavaNetHttpCookieAccess()>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<java.io.FileDescriptor: void closeAll(java.io.Closeable)>-><sun.net.www.MeteredStream: void close()>
<java.io.PrintStream: void write(java.lang.String)>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String getName()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><javax.management.openmbean.TabularDataSupport: int size()>
<sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>-><java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<freemarker.template.SimpleCollection: freemarker.template.TemplateModelIterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber: int size()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.AbstractCollection: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.text.AttributeEntry: java.lang.String toString()>-><springfox.documentation.service.Representation: java.lang.String toString()>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.lang.StringBuilder: void <init>()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.apache.shiro.util.MapContext: java.util.Set entrySet()>-><java.util.HashMap: java.util.Set entrySet()>
<reactor.core.publisher.FluxFlatMap$FlatMapMain: void drainLoop()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<redis.clients.jedis.Transaction: java.lang.String discard()>-><redis.clients.jedis.Queable: int getPipelinedResponseLength()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: int size()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Collections$3: java.lang.Object nextElement()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><com.google.common.collect.RegularImmutableList: int size()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<freemarker.template.MapKeyValuePairIterator: freemarker.template.TemplateHashModelEx2$KeyValuePair next()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.ArrayList$SubList: void add(int,java.lang.Object)>-><java.util.ArrayList: void add(int,java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.security.CodeSigner: java.lang.String toString()>
<sun.net.www.http.PosterOutputStream: void write(int)>-><java.io.ByteArrayOutputStream: void write(int)>
<sun.net.www.http.HttpClient: boolean available()>-><java.net.Socket: int getSoTimeout()>
<reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: void slowPath(long)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.TreeMap$Entry: int hashCode()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><java.lang.Object: void notifyAll()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.owasp.encoder.XMLEncoder: java.nio.charset.CoderResult encodeArrays(java.nio.CharBuffer,java.nio.CharBuffer,boolean)>-><java.lang.Character: int toCodePoint(char,char)>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.util.Calendar: int compareTo(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<sun.net.www.http.HttpClient: void openServer()>-><sun.net.www.http.HttpClient: void privilegedOpenServer(java.net.InetSocketAddress)>
<reactor.core.publisher.Operators: void onDiscard(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.Vector$ListItr: void add(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.HttpURLConnection: void reset()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>-><java.util.ArrayList: void <init>()>
<org.owasp.encoder.CSSEncoder: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.Flux: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<java.net.URLPermission: void init(java.lang.String)>-><java.net.URLPermission: void parseURI(java.lang.String)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><java.util.ArrayList: void <init>()>
<java.util.HashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.EnumMap$Values: int size()>
<org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.io.FilterInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.lang.String: java.lang.String copyValueOf(char[],int,int)>
<java.net.Socket: void setSoTimeout(int)>-><java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><net.sf.ehcache.store.LegacyStoreWrapper: net.sf.ehcache.Element getQuiet(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void addToCache()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean supportsPreemptiveAuthorization()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<sun.net.www.MeteredStream: int available()>-><java.util.zip.ZipFile$ZipFileInflaterInputStream: int available()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<redis.clients.jedis.ScanParams: java.util.Collection getParams()>-><java.util.EnumMap: java.util.Set entrySet()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.URL: int getPort()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><java.nio.CharBuffer: java.lang.String toString()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.io.DataOutputStream: void writeBytes(java.lang.String)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<freemarker.template.TemplateException: void renderMessages()>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<redis.clients.jedis.Transaction: java.lang.String discard()>-><redis.clients.jedis.Queable: void clean()>
<org.apache.catalina.connector.OutputBuffer: void append(byte[],int,int)>-><java.nio.Buffer: int remaining()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><java.net.SocketInputStream: int available()>
<reactor.core.Scannable: java.lang.Object scan(reactor.core.Scannable$Attr)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><java.util.HashSet: void <init>()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence)>-><java.lang.String: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<sun.awt.util.IdentityLinkedList: sun.awt.util.IdentityLinkedList$Entry addBefore(java.lang.Object,sun.awt.util.IdentityLinkedList$Entry)>-><sun.awt.util.IdentityLinkedList$Entry: void <init>(java.lang.Object,sun.awt.util.IdentityLinkedList$Entry,sun.awt.util.IdentityLinkedList$Entry)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><springfox.documentation.service.Response: int hashCode()>
<io.netty.channel.SingleThreadEventLoop: boolean hasTasks()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<org.springframework.web.context.support.ServletContextAwareProcessor: java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)>-><org.springframework.web.filter.GenericFilterBean: void setServletContext(javax.servlet.ServletContext)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.Object: java.lang.Class getClass()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.io.FilterOutputStream: void close()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.AbstractList: void removeRange(int,int)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$ValueCollection: int size()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><java.io.InputStream: int read(byte[])>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getAlgorithm()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxIterable: void subscribe(reactor.core.CoreSubscriber)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><java.net.SocketInputStream: void close()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.ObjectProvider getBeanProvider(org.springframework.core.ResolvableType)>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<java.util.ArrayList$SubList: void add(int,java.lang.Object)>-><java.util.ArrayList$SubList: void rangeCheckForAdd(int)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.MeteredStream: void close()>
<sun.net.www.MeteredStream: void finalize()>-><sun.net.www.MeteredStream: void close()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Thread: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<sun.net.www.MeteredStream: int read()>-><java.io.SequenceInputStream: int read()>
<sun.rmi.transport.proxy.HttpInputStream: int read()>-><sun.net.www.MeteredStream: int read()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.net.URL: java.lang.String getHost()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.jsoup.safety.Whitelist: boolean isSafeAttribute(java.lang.String,org.jsoup.nodes.Element,org.jsoup.nodes.Attribute)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: boolean contains(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.x509.RDN: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: int size()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<java.util.Collections$SynchronizedCollection: java.util.Spliterator spliterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Spliterator spliterator()>
<sun.net.www.http.KeepAliveStream: void queueForCleanup(sun.net.www.http.KeepAliveCleanerEntry)>-><sun.net.www.http.KeepAliveStream$1: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.awt.Font: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><sun.net.www.http.ChunkedInputStream: void processRaw()>
<java.util.ComparableTimSort: void mergeHi(int,int,int,int)>-><com.fasterxml.classmate.util.ClassKey: int compareTo(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<reactor.core.publisher.FluxFlatMap$FlatMapMain: void tryEmit(reactor.core.publisher.FluxFlatMap$FlatMapInner,java.lang.Object)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<org.apache.catalina.connector.OutputBuffer: void transfer(byte,java.nio.ByteBuffer)>-><java.nio.HeapByteBuffer: java.nio.ByteBuffer put(byte)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.Session doGetSession(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<java.io.FilterOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<java.net.Socket: void connect(java.net.SocketAddress,int)>-><java.net.AbstractPlainSocketImpl: void connect(java.net.SocketAddress,int)>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.PushbackInputStream: long skip(long)>
<sun.net.www.http.HttpClient: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><java.io.BufferedOutputStream: void write(byte[],int,int)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void run()>-><sun.net.www.http.HttpClient: void closeServer()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<sun.net.www.http.HttpCaptureOutputStream: void <init>(java.io.OutputStream,sun.net.www.http.HttpCapture)>-><java.io.FilterOutputStream: void <init>(java.io.OutputStream)>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.Operators$EmptySubscription: void clear()>
<sun.net.www.protocol.http.HttpURLConnection: void expect100Continue()>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Date: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.apache.shiro.web.util.WebUtils: javax.servlet.ServletResponse getResponse(java.lang.Object)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletResponse getServletResponse()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.google.common.base.JdkPattern: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.LinkedList: int size()>
<java.io.PrintStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<java.io.FilterInputStream: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<redis.clients.jedis.ScanParams: redis.clients.jedis.ScanParams match(byte[])>-><java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.HashSet: void clear()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$SingletonMap: int size()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.apache.catalina.connector.ResponseFacade: boolean isCommitted()>-><org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: void reset()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.quartz.impl.triggers.AbstractTrigger: int compareTo(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.lang.String)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><sun.net.www.ParseUtil: void appendEscape(java.lang.StringBuffer,byte)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><redis.clients.jedis.ScanResult: java.lang.String getCursor()>
<org.crazycake.shiro.RedisSessionDAO: long getSessionInMemoryLiveTime(org.crazycake.shiro.common.SessionInMemory)>-><org.crazycake.shiro.common.SessionInMemory: java.util.Date getCreateTime()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$2: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.Thread: void <init>(java.lang.Runnable)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Enum: java.lang.String toString()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.SocksSocketImpl: void <init>(java.net.Proxy)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.Collections$SetFromMap: void clear()>-><org.springframework.util.ConcurrentReferenceHashMap: void clear()>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><java.io.FileInputStream: void close()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$SetFromMap: int size()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<sun.net.www.ParseUtil: java.net.URI createURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.ParseUtil: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void clear()>
<java.util.Hashtable$EntrySet: void clear()>-><java.util.Hashtable: void clear()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter$1: java.lang.Object next()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: void fill()>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean supportsPreemptiveAuthorization()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.ZipFile$ZipFileInputStream: void close()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>-><org.apache.shiro.session.mgt.DefaultSessionKey: java.io.Serializable getSessionId()>
<java.net.HttpConnectSocketImpl: void doTunneling(java.net.HttpURLConnection)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setUseCaches(boolean)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.AbstractList: void clear()>-><java.util.AbstractList: void removeRange(int,int)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: void removeFromCache()>-><sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: int size()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><freemarker.ext.beans.HashAdapter: java.util.Set entrySet()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validate(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<org.springframework.data.redis.connection.lettuce.LettuceFutureUtils: java.lang.Object join(java.util.concurrent.CompletionStage)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>-><java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.springframework.core.io.AbstractFileResolvingResource: boolean exists()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.http.HttpClient: boolean available()>-><sun.net.www.http.HttpClient: void logFinest(java.lang.String)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.zip.CheckedOutputStream: void write(int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<io.netty.util.concurrent.SingleThreadEventExecutor: void reject(java.lang.Runnable)>-><io.netty.util.concurrent.RejectedExecutionHandlers$2: void rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.net.URL,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.String: byte[] getBytes(java.lang.String)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletResponse getServletResponse()>-><org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>
<sun.net.www.protocol.http.HttpURLConnection: void checkURLFile()>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
<java.io.ObjectInputStream$PeekInputStream: int peek()>-><sun.net.www.MeteredStream: int read()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpSendInputStream: int read()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>
<org.apache.shiro.web.servlet.SimpleCookie: void removeFrom(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: boolean isSecure()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: int size()>
<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: void endAuthRequest(java.lang.String)>
<io.micrometer.core.instrument.binder.logging.LogbackMetrics$1: void onReset(ch.qos.logback.classic.LoggerContext)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><ch.qos.logback.classic.Logger: void error(java.lang.String)>
<org.springframework.core.io.buffer.LimitedDataBufferList: void clear()>-><java.util.ArrayList: void clear()>
<java.text.AttributeEntry: java.lang.String toString()>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.scanner.SimpleKey: java.lang.String toString()>
<java.util.HashMap$KeySet: void clear()>-><java.util.HashMap: void clear()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onChange(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.eis.MemorySessionDAO: void update(org.apache.shiro.session.Session)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<redis.clients.jedis.Response: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.io.DataOutputStream: void writeBytes(java.lang.String)>-><sun.net.www.http.PosterOutputStream: void write(int)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<sun.net.NetworkClient: void setReadTimeout(int)>-><java.net.Socket: void setSoTimeout(int)>
<net.sf.ehcache.store.disk.DiskStore: boolean containsKey(java.lang.Object)>-><java.lang.String: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.Cache: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>-><org.apache.shiro.util.StringUtils: java.lang.String toString(java.lang.Object[])>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>
<sun.net.www.protocol.http.AuthenticationHeader: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.lang.Short: int compareTo(java.lang.Object)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.AbstractList: boolean add(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<sun.net.www.http.KeepAliveStream$1: java.lang.Void run()>-><java.lang.Thread: void start()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void flush()>-><org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validate(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void doValidate(org.apache.shiro.session.Session)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void destroy()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><java.io.BufferedInputStream: void close()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$SingletonMap: java.util.Set keySet()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.net.URL getURL()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.net.HostPortrange: java.lang.String toLowerCase(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.IdentityHashMap$ValueSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.SubList$1: java.lang.Object next()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>
<org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler: void accept(javax.xml.stream.events.XMLEvent,reactor.core.publisher.SynchronousSink)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void ensureOpen()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.io.PrintStream: boolean checkError()>-><java.io.PrintStream: void flush()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.net.SocketInputStream: int read()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: void openServer()>-><java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.util.MultiValueMapAdapter: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void close()>-><org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.owasp.encoder.Encoder: java.nio.charset.CoderResult underflow(java.nio.CharBuffer,int,java.nio.CharBuffer,int)>-><java.nio.Buffer: java.nio.Buffer position(int)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setQop(java.lang.String)>
<org.apache.shiro.web.session.HttpServletSession: long getTimeout()>-><org.apache.shiro.session.InvalidSessionException: void <init>(java.lang.Throwable)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.security.Provider$UString: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.NetworkClient: void setReadTimeout(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void realWriteChars(java.nio.CharBuffer)>-><java.nio.Buffer: int capacity()>
<net.sf.ehcache.store.disk.DiskStore: java.util.List getKeys()>-><net.sf.ehcache.store.disk.DiskStore: java.util.Set keySet()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$Values: java.util.Iterator iterator()>
<sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>-><java.net.Proxy: java.net.SocketAddress address()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeSet: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<java.util.TreeMap: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<freemarker.template.MapKeyValuePairIterator: boolean hasNext()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: java.util.Iterator iterator()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap: java.util.Set keySet()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.util.Set entrySet()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><java.lang.StringBuilder: int length()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.lang.Math: long max(long,long)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read(byte[],int,int)>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>-><sun.net.ProgressSource: void updateProgress(long,long)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void ensureOpen()>-><java.io.IOException: void <init>(java.lang.String)>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>-><sun.net.www.protocol.http.HttpURLConnection: boolean usingProxy()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.String: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<org.apache.catalina.connector.Response: boolean isSuspended()>-><org.apache.catalina.connector.OutputBuffer: boolean isSuspended()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><net.sf.ehcache.store.cachingtier.PooledBasedBackEnd: java.lang.Object remove(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.HeaderParser: int findInt(java.lang.String,int)>
<sun.net.www.protocol.http.NegotiateAuthentication: byte[] firstToken()>-><sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<java.net.URLConnection: java.lang.String typeToPackageName(java.lang.String)>-><java.lang.String: void getChars(int,int,char[],int)>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.apache.shiro.web.session.HttpServletSession: java.io.Serializable getId()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><com.sun.jmx.mbeanserver.JmxMBeanServer$1: java.lang.Object run()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthScheme getAuthScheme()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><springfox.documentation.service.Representation: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Currency: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<java.util.Base64$Encoder: byte[] encode(byte[])>-><java.util.Base64$Encoder: int outLength(int)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.crazycake.shiro.RedisSessionDAO: long getSessionInMemoryLiveTime(org.crazycake.shiro.common.SessionInMemory)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyList: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractMap: boolean isEmpty()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.security.Provider: java.lang.Object get(java.lang.Object)>
<java.io.DataOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.util.concurrent.Queues$ZeroQueue: boolean isEmpty()>
<org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>-><org.springframework.core.style.ToStringCreator: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap: java.util.Set entrySet()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.owasp.encoder.XMLEncoder: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.google.common.collect.ImmutableMap: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><sun.net.util.IPAddressUtil: byte[] textToNumericFormatV4(java.lang.String)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.apache.shiro.session.mgt.DefaultSessionKey: void <init>(java.io.Serializable)>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<org.apache.catalina.connector.CoyoteOutputStream: void write(int)>-><org.apache.catalina.connector.OutputBuffer: void writeByte(int)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.HttpURLConnection$TunnelState tunnelState()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<sun.util.locale.provider.CalendarNameProviderImpl: boolean isSupportedLocale(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean contains(java.lang.Object)>
<redis.clients.jedis.BinaryClient: void scan(byte[],redis.clients.jedis.ScanParams)>-><java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.String: int length()>
<org.apache.tomcat.util.http.FastHttpDateFormat: java.lang.String formatDate(long)>-><org.apache.tomcat.util.http.ConcurrentDateFormat: java.lang.String format(java.util.Date)>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><org.jsoup.helper.ChangeNotifyingArrayList: boolean add(java.lang.Object)>
<org.apache.commons.collections.FastHashMap$CollectionView: void clear()>-><java.util.LinkedHashMap$LinkedEntrySet: void clear()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.stream.SortedOps$SizedRefSortingSink: void end()>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: void clear()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><javax.security.auth.Subject$SecureSet$1: void remove()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.rmi.transport.tcp.MultiplexOutputStream: void close()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.common.entity.QueryRequest: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<ch.qos.logback.classic.LoggerContext: void fireOnLevelChange(ch.qos.logback.classic.Logger,ch.qos.logback.classic.Level)>-><io.micrometer.core.instrument.binder.logging.LogbackMetrics$1: void onLevelChange(ch.qos.logback.classic.Logger,ch.qos.logback.classic.Level)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.net.HostPortrange: int[] parsePort(java.lang.String)>-><java.lang.String: int indexOf(int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><com.google.common.collect.ImmutableCollection: void clear()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.thymeleaf.exceptions.TemplateProcessingException: void <init>(java.lang.String,java.lang.Throwable)>-><org.thymeleaf.exceptions.TemplateProcessingException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>
<sun.net.ProgressMonitor: int getProgressUpdateThreshold()>-><sun.net.DefaultProgressMeteringPolicy: int getProgressUpdateThreshold()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Vector$Itr: boolean hasNext()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getNewKeys()>-><net.sf.ehcache.transaction.SoftLockID: java.lang.Object getKey()>
<sun.net.www.MeteredStream: long skip(long)>-><java.util.zip.ZipInputStream: long skip(long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<org.owasp.encoder.CSSEncoder: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<sun.nio.cs.StreamDecoder: void implClose()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<sun.net.www.MeteredStream: int available()>-><java.io.FileInputStream: int available()>
<org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.lang.Long: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><java.security.DigestOutputStream: void write(int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>-><sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.String: int indexOf(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.RuntimeException getCause()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.net.URLConnection: java.lang.String getContentHandlerPkgPrefixes()>-><sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>
<net.sf.ehcache.transaction.local.LocalTransactionStore$1: void <init>(net.sf.ehcache.transaction.local.LocalTransactionStore)>-><net.sf.ehcache.util.LargeSet: void <init>()>
<org.crazycake.shiro.common.SessionInMemory: void <init>()>-><java.lang.Object: void <init>()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: void remove()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.util.Iterator iterator()>
<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><sun.net.ProgressSource: java.net.URL getURL()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.apache.catalina.session.StandardSession: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><springfox.documentation.service.Representation: java.lang.String toString()>
<reactor.core.publisher.LambdaMonoSubscriber: void dispose()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void cancel()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.rmi.dgc.VMID: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.String: boolean endsWith(java.lang.String)>
<net.sf.ehcache.concurrent.ConcurrencyUtil: int hash(java.lang.Object)>-><java.lang.String: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getCnonce()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionStore: java.util.List getKeys()>-><net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>
<org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>-><org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.security.AccessController: java.security.AccessControlContext createWrapper(java.security.DomainCombiner,java.lang.Class,java.security.AccessControlContext,java.security.AccessControlContext,java.security.Permission[])>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.apache.shiro.io.ClassResolvingObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<reactor.core.publisher.Operators$ScalarSubscription: void request(long)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onComplete()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: int length()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: boolean isEmpty()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getCachedHA1()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.SubstituteLogger: boolean isTraceEnabled()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>-><org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>
<org.springframework.util.LinkedCaseInsensitiveMap$Values: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap: void clear()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><sun.net.www.http.ChunkedOutputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>-><sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.NetworkClient: int getReadTimeout()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><reactor.util.context.ContextN: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.NetProperties$1: java.lang.Void run()>-><sun.net.NetProperties: void access$000()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<redis.clients.jedis.JedisSentinelPool: void destroy()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.net.URL: java.lang.String getAuthority()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.lang.Object next()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.stream.Nodes$CollectionNode: java.util.Spliterator spliterator()>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptySet: java.lang.Object[] toArray()>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><java.net.SocketInputStream: void close()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.apache.shiro.session.UnknownSessionException: void <init>(java.lang.String)>
<org.apache.shiro.session.InvalidSessionException: void <init>(java.lang.Throwable)>-><org.apache.shiro.session.SessionException: void <init>(java.lang.Throwable)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl$ClassIndexWrapper: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer limit(int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.HttpURLConnection$7: java.lang.Object run()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.WeakHashMap$KeySet: void clear()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.SimpleSession: int hashCode()>-><java.lang.Boolean: int hashCode()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$KeySet: int size()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.EnumMap$Values: java.util.Iterator iterator()>
<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>-><java.io.PrintStream: void <init>(java.io.OutputStream)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.CacheManager: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.http.ChunkedInputStream: void close()>
<java.text.AttributeEntry: int hashCode()>-><springfox.documentation.service.Response: int hashCode()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.AbstractCollection: void clear()>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.lang.Object next()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.io.DataOutputStream: void writeShort(int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>
<freemarker.core.Configurable: void validateFormatNames(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<sun.rmi.transport.proxy.HttpInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<net.sf.ehcache.store.disk.DiskStore: boolean put(net.sf.ehcache.Element)>-><java.lang.String: int hashCode()>
<java.util.stream.SpinedBuffer$1Splitr: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><sun.net.www.MeteredStream: void close()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.ArrayList: void <init>(java.util.Collection)>-><org.apache.shiro.web.filter.mgt.SimpleNamedFilterList: java.lang.Object[] toArray()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$2: java.net.CookieHandler run()>-><java.net.CookieHandler: java.net.CookieHandler getDefault()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$SetFromMap: int size()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.RegularImmutableMap: int size()>
<sun.net.www.HeaderParser: sun.net.www.HeaderParser subsequence(int,int)>-><sun.net.www.HeaderParser: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><springfox.documentation.service.Response: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.StringBuilder: java.lang.String toString()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<freemarker.core.Configurable: void validateFormatNames(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><java.lang.String: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.GenericConfigurator: void doConfigure(java.net.URL)>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.util.zip.InflaterInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.lang.String: java.lang.String valueOf(int)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.ArrayList$SubList$1: void add(java.lang.Object)>-><java.util.ConcurrentModificationException: void <init>()>
<springfox.documentation.service.Representation: boolean equals(java.lang.Object)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<org.crazycake.shiro.serializer.StringSerializer: byte[] serialize(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.security.DigestOutputStream: void write(int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(int)>
<java.net.URLPermission: void init(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><java.lang.Object: java.lang.Class getClass()>
<java.net.URLPermission: void init(java.lang.String)>-><java.net.URLPermission: java.lang.String actions()>
<java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SingletonMap: boolean isEmpty()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.net.www.protocol.http.HttpURLConnection$1: java.lang.Object run()>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><org.slf4j.helpers.NOPLogger: void debug(java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<redis.clients.jedis.util.RedisOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.MessageHeader: void <init>()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><sun.net.httpserver.Request$WriteStream: void close()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><springfox.documentation.service.Response: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><reactor.util.concurrent.SpscArrayQueue: java.lang.Object[] toArray()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><java.util.Collections$1: boolean hasNext()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.slf4j.helpers.NOPLogger: void trace(java.lang.String)>
<java.util.SubList: void removeRange(int,int)>-><java.util.SubList: void checkForComodification()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: java.lang.String scheme()>-><sun.net.www.HeaderParser: java.lang.String findKey(int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<sun.net.www.MeteredStream: void close()>-><java.util.zip.ZipInputStream: void close()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void initSessionsInThread()>-><java.lang.ThreadLocal: java.lang.Object get()>
<org.crazycake.shiro.RedisSessionDAO: org.crazycake.shiro.common.SessionInMemory createSessionInMemory(org.apache.shiro.session.Session)>-><java.util.Date: void <init>()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.apache.poi.openxml4j.opc.PackagePartName: int compareTo(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.servlet.HttpServletBean: void setEnvironment(org.springframework.core.env.Environment)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.WeakHashMap$EntrySet: void clear()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<redis.clients.jedis.BinaryClient: void set(byte[],byte[])>-><redis.clients.jedis.Connection: void sendCommand(redis.clients.jedis.commands.ProtocolCommand,byte[][])>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber: int size()>
<redis.clients.jedis.BinaryClient: void scan(byte[],redis.clients.jedis.ScanParams)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.net.NetPermission: void <init>(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.DigestAuthentication: void checkResponse(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.Integer: java.lang.String toHexString(int)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNonce(java.lang.String)>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.Operators: java.lang.Throwable onNextError(java.lang.Object,java.lang.Throwable,reactor.util.context.Context,org.reactivestreams.Subscription)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.InnerOperator: reactor.util.context.Context currentContext()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.cache.FileTemplateLoader: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.util.concurrent.SpscArrayQueue: void clear()>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.nio.ByteBuffer: int compareTo(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<java.io.DataOutputStream: void writeByte(int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Vector: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>-><java.io.FilterInputStream: int read(byte[],int,int)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><ch.qos.logback.classic.Logger: void debug(java.lang.String)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getSessionId(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.ServletRequest getRequest(java.lang.Object)>
<java.io.ObjectInputStream$PeekInputStream: int read()>-><sun.net.www.http.HttpCaptureInputStream: int read()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.nodes.ScalarNode: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: boolean writtenOK()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<net.sf.ehcache.store.CacheStore$4: net.sf.ehcache.Element call()>-><java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock readLock()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.HttpRetryException: void <init>(java.lang.String,int,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<org.springframework.expression.spel.ast.FunctionReference: org.springframework.expression.TypedValue executeFunctionJLRMethod(org.springframework.expression.spel.ExpressionState,java.lang.reflect.Method)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.google.common.util.concurrent.ImmediateFuture: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.springframework.core.io.buffer.LimitedDataBufferList: void clear()>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber: void clear()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.lang.Thread: void sleep(long)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.Character: int digit(char,int)>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.util.GregorianCalendar: void add(int,int)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<java.util.HashMap$Values: void clear()>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: void clear()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.ImmutableMapValues: java.util.Iterator iterator()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.math.BigInteger: int compareTo(java.lang.Object)>
<org.apache.catalina.connector.Response: void addHeader(java.lang.String,java.lang.String,java.nio.charset.Charset)>-><java.lang.String: int length()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.core.HashLiteral$SequenceHash: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader mapToMessageHeader(java.util.Map)>-><sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<cc.mrbird.febs.others.controller.EximportController: cc.mrbird.febs.common.entity.FebsResponse importExcels(org.springframework.web.multipart.MultipartFile)>-><org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile: boolean isEmpty()>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getNewKeys()>-><java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>
<net.sf.ehcache.util.LargeCollection: boolean remove(java.lang.Object)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: void forEach(java.util.function.Consumer)>
<java.lang.Thread: void run()>-><sun.net.www.http.KeepAliveCache: void run()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<springfox.documentation.service.Representation: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>-><java.util.Base64$Encoder: byte[] encode(byte[])>
<redis.clients.jedis.JedisSentinelPool: void destroy()>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.ImmutableMapValues: int size()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><springfox.documentation.service.Representation: int hashCode()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.rmi.transport.tcp.MultiplexOutputStream: void write(byte[],int,int)>
<java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.RegularEnumSet: void clear()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serializeContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><java.util.HashSet: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: int size()>
<java.util.IdentityHashMap$Values: void clear()>-><java.util.IdentityHashMap: void clear()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>-><java.util.zip.ZipOutputStream: void close()>
<org.apache.shiro.web.servlet.SimpleCookie: void addCookieHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><org.apache.catalina.connector.ResponseFacade: void addHeader(java.lang.String,java.lang.String)>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.io.FileInputStream: int read()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getProxyAuthKey(java.lang.String,int,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>
<sun.rmi.transport.proxy.HttpSendInputStream: int read()>-><org.apache.poi.util.ReplacingInputStream: int read()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void advance()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean access$200(java.util.concurrent.ConcurrentSkipListMap$SubMap)>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.util.regex.Pattern: java.lang.String pattern()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.Operators$EmptySubscription: int size()>
<sun.net.www.http.HttpClient: void finished()>-><sun.net.www.protocol.https.HttpsClient: void putInKeepAliveCache()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.util.Iterator iterator()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.HashSet: boolean contains(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.net.URL: java.lang.String getHost()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeSet: java.util.Iterator iterator()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EntrySet: java.lang.Object[] toArray()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$Values: int size()>
<sun.rmi.transport.proxy.HttpInputStream: int available()>-><sun.net.www.MeteredStream: int available()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><java.nio.CharBuffer: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.https.HttpsClient: java.lang.String getProxyHostUsed()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxDoFinally$DoFinallyFuseableSubscriber: boolean isEmpty()>
<java.io.PrintStream: void write(java.lang.String)>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.net.InetSocketAddress: int getPort()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.io.FilterInputStream: int read(byte[],int,int)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<redis.clients.jedis.ScanParams: redis.clients.jedis.ScanParams count(java.lang.Integer)>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.catalina.connector.Response: void addHeader(java.lang.String,java.lang.String,java.nio.charset.Charset)>-><org.apache.catalina.connector.Response: boolean isCommitted()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidation()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void enableSessionValidationIfNecessary()>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler getSessionValidationScheduler()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: java.lang.Object[] toArray()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.springframework.util.MultiValueMapAdapter: boolean isEmpty()>-><java.util.Collections$UnmodifiableMap: boolean isEmpty()>
<sun.net.www.MeteredStream: int available()>-><java.io.BufferedInputStream: int available()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.temporal.WeekFields: java.lang.String toString()>
<freemarker.ext.beans.IteratorModel: freemarker.template.TemplateModel next()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.net.www.http.ChunkedInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<reactor.core.publisher.FluxFlatMap$FlatMapMain: void tryEmitScalar(java.lang.Object)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getOpaque()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.io.PushbackInputStream: void close()>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.DigestAuthentication: boolean isAuthorizationStale(java.lang.String)>
<org.apache.catalina.connector.OutputBuffer: void realWriteBytes(java.nio.ByteBuffer)>-><java.nio.Buffer: int remaining()>
<org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>-><java.net.InetSocketAddress: void <init>(int,java.lang.String)>
<net.sf.ehcache.store.CacheStore$4: net.sf.ehcache.Element call()>-><net.sf.ehcache.store.CacheStore: java.util.concurrent.locks.ReadWriteLock access$200(net.sf.ehcache.store.CacheStore)>
<sun.net.www.protocol.http.DigestAuthentication$1: java.lang.Object run()>-><sun.net.www.protocol.http.DigestAuthentication$1: java.lang.Boolean run()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><freemarker.ext.beans.CollectionAdapter: java.util.Iterator iterator()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><com.google.common.collect.ImmutableMap$1: boolean hasNext()>
<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.AssertionError: void <init>(java.lang.Object)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.concurrent.CopyOnWriteArrayList: void clear()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$Values: int size()>
<java.net.Proxy: boolean equals(java.lang.Object)>-><java.net.Proxy: java.net.SocketAddress address()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: long skip(long)>-><sun.net.www.MeteredStream: long skip(long)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: void forEach(java.util.function.Consumer)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.crazycake.shiro.common.WorkAloneRedisManager: void del(byte[])>-><org.crazycake.shiro.RedisManager: redis.clients.jedis.Jedis getJedis()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Iterator)>-><net.sf.ehcache.util.AggregateIterator: boolean hasNext()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><java.nio.CharBuffer: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: void <init>(java.net.Proxy)>-><java.util.HashMap: void <init>()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.net.URL: int getPort()>
<sun.net.www.URLConnection: void setProxiedHost(java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.core.style.DefaultToStringStyler: void styleFieldSeparator(java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><org.apache.commons.collections.FastHashMap: java.lang.Object get(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getReferencedSessionId(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String connectRequestURI(java.net.URL)>-><java.net.URL: java.lang.String getHost()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.HeaderParser headerParser()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: void <init>()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSessionFromDataSource(java.io.Serializable)>
<org.apache.catalina.connector.Response: void setDateHeader(java.lang.String,long)>-><org.apache.catalina.connector.Response: boolean isCommitted()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><springfox.documentation.service.Response: java.lang.String toString()>
<redis.clients.jedis.BinaryJedis: redis.clients.jedis.ScanResult scan(byte[],redis.clients.jedis.ScanParams)>-><redis.clients.jedis.ScanResult: void <init>(byte[],java.util.List)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: java.util.Iterator entryIterator()>-><java.util.concurrent.ConcurrentSkipListMap$EntryIterator: void <init>(java.util.concurrent.ConcurrentSkipListMap)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: java.lang.String getKey(int)>
<io.netty.util.internal.ThreadExecutorMap$1: void execute(java.lang.Runnable)>-><org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.SubList$1: void add(java.lang.Object)>-><java.util.AbstractList$ListItr: void add(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.baomidou.mybatisplus.core.config.GlobalConfig: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String getServerAuthKey(java.net.URL,java.lang.String,sun.net.www.protocol.http.AuthScheme)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.protocol.https.HttpsClient: java.net.Socket createSocket()>-><java.lang.Throwable: java.lang.Throwable getCause()>
<sun.net.www.MeteredStream: long skip(long)>-><java.util.zip.ZipFile$ZipFileInputStream: long skip(long)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: int indexOf(int)>
<sun.net.www.protocol.http.HttpURLConnection$8: java.lang.Object run()>-><sun.net.www.protocol.http.HttpURLConnection$8: java.io.OutputStream run()>
<org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<net.sf.ehcache.store.disk.DiskStore: boolean replace(net.sf.ehcache.Element,net.sf.ehcache.Element,net.sf.ehcache.store.ElementValueComparator)>-><java.lang.String: int hashCode()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void enableSessionValidation()>-><java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><java.lang.NullPointerException: void <init>(java.lang.String)>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.lang.Byte: int compareTo(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.PrimitiveIterator$OfInt: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><javax.naming.directory.BasicAttribute: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.zip.DeflaterOutputStream: void close()>-><org.apache.catalina.connector.CoyoteOutputStream: void close()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session lookupRequiredSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.http.HttpClient: boolean isCachedConnection()>
<sun.net.ProgressSource: void finishTracking()>-><sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkReuseConnection()>
<org.springframework.beans.factory.support.ManagedList: java.util.List merge(java.lang.Object)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1: java.util.Iterator iterator()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.net.www.http.HttpClient: boolean available()>-><java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<sun.misc.SharedSecrets: sun.misc.JavaNetHttpCookieAccess getJavaNetHttpCookieAccess()>-><sun.misc.Unsafe: void ensureClassInitialized(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxIterable$IterableSubscription: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.LinkedList: java.lang.Object[] toArray()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<freemarker.cache.TemplateCache: freemarker.template.Template getTemplateInternal(java.lang.String,java.util.Locale,java.lang.Object,java.lang.String,boolean)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap: java.util.Set entrySet()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<net.sf.ehcache.store.LegacyStoreWrapper: java.util.List getKeys()>-><net.sf.ehcache.store.disk.DiskStore: java.util.List getKeys()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.DigestAuthentication: boolean supportsPreemptiveAuthorization()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.ArrayList$SubList$1: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap: java.util.Set entrySet()>
<java.io.DataInputStream: int readUnsignedShort()>-><sun.net.www.MeteredStream: int read()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.jar.Manifest$FastInputStream: void fill()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.DelegatingSession: java.io.Serializable getId()>
<java.io.BufferedInputStream: void fill()>-><java.io.InputStream: int read(byte[],int,int)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.HashMap$EntrySet: int size()>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>-><java.util.ArrayList: void <init>()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.sql.SQLException$1: boolean hasNext()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<javax.swing.SwingWorker$6: java.lang.Thread newThread(java.lang.Runnable)>-><java.lang.StringBuilder: void <init>()>
<java.io.DataInputStream: char readChar()>-><sun.net.www.http.ChunkedInputStream: int read()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber: int size()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.apache.shiro.util.MapContext: int size()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session doReadSession(java.io.Serializable)>-><ch.qos.logback.classic.Logger: void error(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.Enum: int ordinal()>
<java.util.zip.CheckedOutputStream: void write(int)>-><sun.net.www.http.PosterOutputStream: void write(int)>
<net.sf.ehcache.transaction.local.LocalTransactionStore$1: java.util.Iterator sourceIterator()>-><net.sf.ehcache.store.MemoryStore: java.util.List getKeys()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<net.sf.ehcache.store.MemoryStore: java.util.List getKeys()>-><java.util.ArrayList: void <init>(java.util.Collection)>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.AbstractList$Itr: void remove()>
<java.security.DigestOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectWeb()>-><sun.net.www.http.HttpClient: boolean isKeepingAlive()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: int size()>
<sun.misc.URLClassPath: void check(java.net.URL)>-><java.net.SocketPermission: java.lang.String getActions()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.security.DigestOutputStream: void write(byte[],int,int)>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.mgt.SessionKey)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><freemarker.ext.beans.CollectionAdapter: java.util.Iterator iterator()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getValue()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.Arrays$ArrayList: java.lang.Object[] toArray()>
<springfox.documentation.service.Response: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<javax.swing.SwingWorker$6: java.lang.Thread newThread(java.lang.Runnable)>-><java.util.concurrent.Executors$DefaultThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.jsoup.nodes.DataNode: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>-><sun.net.www.protocol.https.HttpsClient: boolean needsTunneling()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
<sun.net.NetProperties: void loadDefaultProperties()>-><java.util.Properties: void load(java.io.InputStream)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,long)>-><sun.net.ProgressMonitor: sun.net.ProgressMonitor getDefault()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler$1: void <init>(org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler)>-><java.lang.Object: void <init>()>
<java.util.TreeMap$Entry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.security.Provider$Service: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.system.entity.Role: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.net.HttpURLConnection: int getResponseCode()>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<reactor.core.publisher.FluxTimeout$TimeoutTimeoutSubscriber: void cancel()>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void cancel()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.net.URLPermission: void <init>(java.lang.String,java.lang.String)>-><java.net.URLPermission: void init(java.lang.String)>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$KeySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.rmi.transport.proxy.HttpInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<sun.nio.cs.StreamEncoder: void implFlush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.net.URI: void <init>(java.lang.String)>
<java.security.DigestOutputStream: void write(int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>
<sun.rmi.transport.proxy.HttpSendSocket: void close()>-><sun.net.www.http.PosterOutputStream: void close()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getSessionIdCookieValue(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.lang.AssertionError: void <init>()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String unquote(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void checkError()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.stream.SpinedBuffer$1Splitr: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRemoteUser()>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRemoteUser()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.InputStream getInputStream()>-><java.io.FileInputStream: void <init>(java.io.File)>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>-><java.net.SocketOutputStream: void write(byte[],int,int)>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>
<org.apache.catalina.connector.CoyoteOutputStream: void flush()>-><org.apache.catalina.connector.CoyoteOutputStream: boolean checkNonBlockingWrite()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>-><sun.net.www.http.ChunkedInputStream: void close()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<org.apache.shiro.web.filter.mgt.SimpleNamedFilterList: java.lang.Object[] toArray()>-><java.util.ArrayList: java.lang.Object[] toArray()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>-><sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<sun.net.www.MeteredStream: int read()>-><java.io.ByteArrayInputStream: int read()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.HashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.LinkedList$ListItr: void remove()>
<redis.clients.jedis.JedisSentinelPool: void returnResource(redis.clients.jedis.Jedis)>-><redis.clients.jedis.util.Pool: void returnResourceObject(java.lang.Object)>
<redis.clients.jedis.Pipeline: void clear()>-><redis.clients.jedis.Pipeline: boolean isInMulti()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<java.util.Hashtable$ValueCollection: void clear()>-><java.security.Provider: void clear()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><java.io.FileOutputStream: void write(int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: void ensureOpen()>-><java.io.PrintStream: void setError()>
<sun.net.www.protocol.http.HttpURLConnection: void checkMessageHeader(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.Integer: java.lang.String toString()>
<redis.clients.jedis.BinaryClient: void del(byte[][])>-><redis.clients.jedis.Connection: void sendCommand(redis.clients.jedis.commands.ProtocolCommand,byte[][])>
<java.util.EnumMap: int entryHashCode(int)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<javax.security.auth.Subject$SecureSet: void clear()>-><javax.security.auth.Subject$SecureSet$1: void remove()>
<java.io.DataInputStream: void readFully(byte[],int,int)>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.AbstractMap$2$1: void remove()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><java.io.FileInputStream: void close()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Hashtable$EntrySet: void clear()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.lang.Character: int compareTo(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection$6: void <init>(sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.Object: void <init>()>
<sun.net.NetProperties: void access$000()>-><sun.net.NetProperties: void loadDefaultProperties()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$EmptySet: int size()>
<java.net.URLConnection: void <init>(java.net.URL)>-><java.lang.Object: void <init>()>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.net.www.ParseUtil: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>-><java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void onStop(org.apache.shiro.session.Session)>
<java.nio.CharBuffer: int hashCode()>-><java.nio.HeapCharBuffer: char get(int)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Vector$Itr: boolean hasNext()>
<org.hibernate.validator.internal.util.annotation.AnnotationProxy: boolean equals(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.nio.cs.StreamDecoder: void implClose()>-><java.io.InputStream: void close()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><org.springframework.util.MultiValueMapAdapter: java.util.Set entrySet()>
<java.net.HttpRetryException: void <init>(java.lang.String,int,java.lang.String)>-><java.io.IOException: void <init>(java.lang.String)>
<cc.mrbird.febs.system.controller.UserController: cc.mrbird.febs.common.entity.FebsResponse updateTheme(java.lang.String,java.lang.String)>-><cc.mrbird.febs.system.entity.User: java.lang.String getUsername()>
<sun.net.www.protocol.https.HttpsClient: void closeIdleConnection()>-><sun.net.www.http.HttpClient: void closeServer()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$Traverser: boolean hasNext()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.Collections$1: boolean hasNext()>
<net.sf.ehcache.store.chm.SelectableConcurrentHashMap$KeySet: java.lang.Object[] toArray()>-><java.util.ArrayList: void <init>()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.cache.ClassTemplateLoader: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.WeakHashMap: java.util.Set keySet()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.jsqlparser.expression.LongValue: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><org.springframework.util.MultiValueMapAdapter: java.lang.Object get(java.lang.Object)>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.apache.tomcat.util.collections.ConcurrentCache: void put(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: int size()>
<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.Iterator iterator()>-><java.util.concurrent.ConcurrentSkipListMap: java.util.Iterator entryIterator()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.FluxHide$SuppressFuseableSubscriber: int size()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URLConnection: boolean getUseCaches()>
<net.sf.ehcache.util.LargeSet: void <init>()>-><net.sf.ehcache.util.LargeCollection: void <init>()>
<org.springframework.util.LinkedCaseInsensitiveMap$KeySet: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap: void clear()>
<org.apache.shiro.web.util.WebUtils: boolean isWeb(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletResponse getServletResponse()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.OutputStream getOutputStream0()>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void connect()>
<java.io.PushbackInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.AuthenticationInfo: java.lang.String cacheKey(boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>-><org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$SingletonList: int size()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>-><java.lang.String: void <init>(char[],int,int)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.http.PosterOutputStream: void <init>()>-><java.io.ByteArrayOutputStream: void <init>(int)>
<cc.mrbird.febs.system.controller.MenuController: cc.mrbird.febs.common.entity.FebsResponse getUserMenus(java.lang.String)>-><cc.mrbird.febs.system.entity.User: java.lang.String getUsername()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void onStop(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: void setLastAccessTime(java.util.Date)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(byte[],int,int)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: void setContentType(java.lang.String)>-><org.apache.catalina.connector.Response: org.apache.coyote.Response getCoyoteResponse()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean remove(java.lang.Object)>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getProtocols()>-><java.util.Vector: java.lang.Object elementAt(int)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.String toString()>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void setCookieHeader()>-><sun.net.www.MessageHeader: void remove(java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.util.Date: void <init>(long)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.math.BigDecimal: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getKeysInvisibleInContext(net.sf.ehcache.transaction.local.LocalTransactionContext,net.sf.ehcache.store.Store)>-><net.sf.ehcache.transaction.local.LocalTransactionStore: net.sf.ehcache.Element getQuiet(java.lang.Object)>
<redis.clients.jedis.util.RedisOutputStream: void write(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>-><java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.io.BufferedInputStream: int read(byte[],int,int)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: int size()>
<org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.String,java.lang.Object)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.apache.logging.log4j.Level: int compareTo(java.lang.Object)>
<sun.net.NetProperties$1: java.lang.Object run()>-><sun.net.NetProperties$1: java.lang.Void run()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.crazycake.shiro.serializer.StringSerializer: byte[] serialize(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: int hashCode()>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><java.util.HashMap: void clear()>
<javax.security.auth.Subject$SecureSet: void clear()>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void trace(java.lang.String,java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.EnumMap$KeySet: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object,java.util.Comparator)>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: void privilegedOpenServer(java.net.InetSocketAddress)>-><sun.net.www.http.HttpClient$1: void <init>(sun.net.www.http.HttpClient,java.net.InetSocketAddress)>
<com.fasterxml.classmate.ResolvedType: int hashCode()>-><java.lang.Class: java.lang.String getName()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValueImpl(java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void incrementNC()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<sun.net.www.http.HttpClient$1: java.lang.Void run()>-><sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.io.DataOutputStream: void writeLong(long)>-><sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.xmlbeans.StringEnumAbstractBase: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxIterable$IterableSubscriptionConditional: boolean isEmpty()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.Throwable getCause()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><redis.clients.jedis.Response: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><java.io.BufferedInputStream: void close()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><freemarker.ext.beans.HashAdapter: java.util.Set entrySet()>
<java.util.zip.InflaterInputStream: void fill()>-><sun.net.www.MeteredStream: int read(byte[],int,int)>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.IdentityHashMap: java.util.Set entrySet()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.io.FilterOutputStream: void flush()>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.web.util.pattern.SeparatorPathElement: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.util.WeakIdentityConcurrentMap$IdentityWeakReference: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: java.io.InputStream getErrorStream(java.io.InputStream,long,sun.net.www.http.HttpClient)>-><sun.net.www.protocol.http.HttpURLConnection: int access$500()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.Inet4Address: java.lang.String getHostAddress()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: int size()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpSendInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.nio.ByteOrder: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>-><java.net.Proxy: java.net.SocketAddress address()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String value()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$2$1: boolean hasNext()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><sun.net.www.protocol.http.AuthenticationHeader$SchemeMapValue: void <init>(sun.net.www.HeaderParser,java.lang.String)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void closeServer()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.resolver.ResolverTuple: java.lang.String toString()>
<java.net.URI: java.net.URI normalize(java.net.URI)>-><java.net.URI: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<sun.net.www.protocol.https.HttpsClient: java.lang.String[] getCipherSuites()>-><java.util.Vector: java.lang.Object elementAt(int)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<freemarker.ext.beans._BeansAPI: void removeClearedReferencesFromCache(java.util.Map,java.lang.ref.ReferenceQueue)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: void remove()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<sun.net.www.MeteredStream: int available()>-><java.net.SocketInputStream: int available()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: boolean isPresent()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<sun.security.util.HostnameChecker: java.lang.String getServerName(java.security.Principal)>-><sun.security.ssl.Krb5Helper: java.lang.String getPrincipalHostName(java.security.Principal)>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Vector$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<sun.rmi.transport.tcp.ConnectionMultiplexer: void shutDown()>-><sun.net.www.http.KeepAliveStream: void close()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.net.URI: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.MessageHeader: boolean filterNTLMResponses(java.lang.String)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.util.MultiValueMapAdapter: int size()>
<sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>-><sun.net.www.ParseUtil: void appendEscape(java.lang.StringBuffer,byte)>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$Values: java.util.Iterator iterator()>
<java.util.HashSet: void <init>(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: int size()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<redis.clients.jedis.ScanParams: java.util.Collection getParams()>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.wuwenze.poi.pojo.ExcelProperty: java.lang.String toString()>
<java.nio.HeapCharBuffer: java.nio.CharBuffer duplicate()>-><java.nio.Buffer: int limit()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><java.io.IOException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1: int size()>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionContext: javax.servlet.ServletRequest getServletRequest()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<java.nio.InvalidMarkException: void <init>()>-><java.lang.IllegalStateException: void <init>()>
<freemarker.ext.beans.BeanModel: boolean isEmpty()>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: boolean isEmpty()>
<freemarker.template.DefaultIterableAdapter: freemarker.template.TemplateModelIterator iterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.Objects: int hashCode(java.lang.Object)>-><springfox.documentation.service.Response: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<org.crazycake.shiro.RedisSessionDAO: void initSessionsInThread()>-><java.lang.ThreadLocal: void set(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object,java.util.Comparator)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooHigh(java.lang.Object,java.util.Comparator)>
<org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.RegularEnumSet: int size()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.apache.catalina.connector.Response: boolean checkSpecialHeader(java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void flushCharBuffer()>-><org.apache.catalina.connector.OutputBuffer: void clear(java.nio.Buffer)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.lang.StringBuilder: void <init>()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$2: java.util.Iterator iterator()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.util.WeakHashMap$EntrySpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.HashMap$EntrySet: void forEach(java.util.function.Consumer)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><java.lang.Object: void wait(long)>
<java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: void clear()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.util.WebUtils: javax.servlet.http.HttpServletRequest getHttpRequest(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
<org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object,org.springframework.core.style.ToStringStyler)>-><java.lang.Object: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.JumboEnumSet$EnumSetIterator: void remove()>
<freemarker.ext.beans.BeanModel: java.lang.String getAsClassicCompatibleString()>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.crazycake.shiro.serializer.MultiClassLoaderObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>-><java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getAuth(java.lang.String,java.net.URL)>-><sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.lang.Thread: void run()>-><sun.net.www.http.KeepAliveStreamCleaner: void run()>
<org.apache.shiro.session.ProxiedSession: void <init>(org.apache.shiro.session.Session)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: int size()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect()>-><java.net.URL: void <init>(java.net.URL,java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.others.entity.Eximport: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void writeByte(int)>-><org.apache.catalina.connector.OutputBuffer: boolean isFull(java.nio.Buffer)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.net.www.protocol.http.EmptyInputStream: void <init>()>-><java.io.InputStream: void <init>()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String raw()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><sun.net.www.protocol.https.HttpsClient: java.security.Principal getPeerPrincipal()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><com.google.common.collect.ImmutableCollection: boolean addAll(java.util.Collection)>
<org.springframework.web.util.pattern.LiteralPathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.time.ZoneId: java.time.ZoneId normalized()>-><java.time.zone.ZoneRules: boolean isFixedOffset()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><redis.clients.jedis.Response: java.lang.String toString()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber: boolean isEmpty()>
<cc.mrbird.febs.generator.controller.GeneratorController: void <init>(cc.mrbird.febs.generator.service.IGeneratorService,cc.mrbird.febs.generator.service.IGeneratorConfigService,cc.mrbird.febs.generator.helper.GeneratorHelper,com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><synthetic.method.SingletonFactory: cc.mrbird.febs.generator.helper.GeneratorHelper getGeneratorHelper()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<redis.clients.jedis.Connection: java.util.List getMany(int)>-><redis.clients.jedis.Connection: void flush()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><java.io.ByteArrayOutputStream: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Vector: int size()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Hashtable$KeySet: int size()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<org.apache.tomcat.util.http.parser.MediaType: java.lang.String toStringNoCharset()>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: void remove()>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: void removeDescending()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators$MultiSubscriptionSubscriber: void request(long)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void request(long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.yaml.snakeyaml.nodes.NodeTuple: java.lang.String toString()>
<sun.net.www.ParseUtil: void checkPath(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<org.apache.catalina.session.StandardSession: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.crazycake.shiro.RedisManager: void init()>-><redis.clients.jedis.JedisPool: void <init>(org.apache.commons.pool2.impl.GenericObjectPoolConfig,java.lang.String,int,int,java.lang.String,int)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void advance()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Spliterators$1Adapter: boolean hasNext()>
<java.io.SequenceInputStream: int read()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.net.PasswordAuthentication)>-><java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>
<org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>-><java.io.ByteArrayOutputStream: void <init>(int)>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>
<net.sf.ehcache.store.CacheStore$4: net.sf.ehcache.Element call()>-><net.sf.ehcache.store.disk.DiskStore: net.sf.ehcache.Element fault(java.lang.Object,boolean)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.NetworkClient: int getReadTimeout()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendExpires(java.lang.StringBuilder,int)>-><java.lang.System: long currentTimeMillis()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashSet: boolean isEmpty()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.baomidou.dynamic.datasource.ds.GroupDataSource: java.lang.String toString()>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><javax.net.ssl.HttpsURLConnection$DefaultHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
<sun.net.www.MeteredStream: int available()>-><sun.net.www.protocol.http.EmptyInputStream: int available()>
<sun.net.www.http.ClientVector: sun.net.www.http.HttpClient get()>-><java.util.Stack: boolean empty()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.net.URL: java.lang.String getHost()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<org.apache.shiro.web.util.WebUtils: boolean isWeb(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.subject.support.DefaultWebSubjectContext: javax.servlet.ServletRequest getServletRequest()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<java.net.URLPermission: java.util.List normalizeMethods(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>-><sun.net.www.MessageHeader: java.lang.String getKey(int)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.Hashtable$EntrySet: int size()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>-><sun.net.www.MeteredStream: void close()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: java.lang.String raw()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.io.IOException: void <init>(java.lang.String)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<reactor.core.Exceptions: java.lang.Throwable unwrap(java.lang.Throwable)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Response: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.net.HttpURLConnection: int getResponseCode()>-><java.lang.String: int indexOf(int,int)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><java.nio.CharBuffer: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><io.netty.util.internal.RecyclableArrayList: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.net.URLConnection: boolean getUseCaches()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: int size()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>-><sun.net.www.MessageHeader: java.lang.String getKey(int)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>-><org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>
<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.InputStream getInputStream()>-><org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: boolean isInMemory()>
<org.springframework.util.MultiValueMapAdapter: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.String toString()>
<java.net.SocketOutputStream: void close()>-><java.net.AbstractPlainSocketImpl: void close()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><java.lang.System: long currentTimeMillis()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.http.KeepAliveKey: int hashCode()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.util.logging.PlatformLogger: void fine(java.lang.String)>
<reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onError(java.lang.Throwable)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onError(java.lang.Throwable)>
<org.apache.shiro.web.util.WebUtils: boolean isHttp(org.apache.shiro.web.util.RequestPairSource)>-><org.apache.shiro.web.session.mgt.WebSessionKey: javax.servlet.ServletResponse getServletResponse()>
<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getNewKeys()>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentMap: void forEach(java.util.function.BiConsumer)>-><java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.net.www.http.HttpClient: void openServer()>-><sun.net.www.URLConnection: void setProxiedHost(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.jsoup.helper.ChangeNotifyingArrayList: void clear()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.RegularImmutableMap$KeySet: int size()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
<java.security.DigestOutputStream: void write(int)>-><sun.net.www.http.PosterOutputStream: void write(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.io.FilterOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<org.apache.shiro.util.StringUtils: java.lang.String toString(java.lang.Object[])>-><org.apache.shiro.util.StringUtils: java.lang.String toDelimitedString(java.lang.Object[],java.lang.String)>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.MeteredStream: void close()>
<java.io.InputStream: long skip(long)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<sun.net.NetworkClient: java.net.Socket createSocket()>-><java.net.Socket: void <init>()>
<org.apache.shiro.session.mgt.SimpleSession: boolean onEquals(org.apache.shiro.session.mgt.SimpleSession)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String getHost()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.io.PrintStream: void print(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.rmi.transport.proxy.HttpSendInputStream: int read(byte[],int,int)>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<redis.clients.jedis.JedisPool: void <init>(org.apache.commons.pool2.impl.GenericObjectPoolConfig,java.lang.String,int,int,int,java.lang.String,int,java.lang.String)>-><redis.clients.jedis.JedisFactory: void <init>(java.lang.String,int,int,int,java.lang.String,int,java.lang.String)>
<org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>-><java.util.Date: boolean before(java.util.Date)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Vector$Itr: java.lang.Object next()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.lang.reflect.Method: java.lang.String toString()>
<java.net.URLPermission: void parseURI(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.io.FilterInputStream: long skip(long)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: long skip(long)>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.URLPermission: void <init>(java.lang.String,java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Spliterators$IteratorSpliterator: long estimateSize()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><springfox.documentation.service.Response: boolean equals(java.lang.Object)>
<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>-><sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntrySet: void forEach(java.util.function.Consumer)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<javax.management.ObjectName: void construct(java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String toString()>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>-><sun.net.www.http.PosterOutputStream: void write(int)>
<java.util.stream.ReferencePipeline$11: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>-><java.util.stream.ReferencePipeline$11$1: void <init>(java.util.stream.ReferencePipeline$11,java.util.stream.Sink)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.util.context.ContextN: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.http.HttpHeaders: java.util.Set entrySet()>-><org.springframework.http.HttpHeaders: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL)>-><sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setNewClient(java.net.URL,boolean)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.p6spy.engine.common.CustomHashedHashSet$CustomHashedHashSetIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.Vector: int size()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.net.SocketException: void <init>(java.lang.String)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<sun.net.httpserver.ServerImpl$ServerTimerTask: void run()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<sun.net.www.http.ClientVector: void put(sun.net.www.http.HttpClient)>-><sun.net.www.http.KeepAliveCache: int getMaxConnections()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.net.HttpConnectSocketImpl$1: java.lang.Void run()>-><java.net.HttpConnectSocketImpl: java.lang.reflect.Field access$000()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.Operators$ScalarSubscription: int size()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.MessageHeader: java.lang.String getValue(int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<org.crazycake.shiro.serializer.ObjectSerializer: byte[] serialize(java.lang.Object)>-><java.io.ByteArrayOutputStream: byte[] toByteArray()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$1: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<reactor.core.publisher.MonoToCompletableFuture: void onNext(java.lang.Object)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void cancel()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Vector$Itr: boolean hasNext()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.apache.commons.collections.FastHashMap: java.util.Set entrySet()>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>-><sun.net.www.http.KeepAliveStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.poi.ss.format.CellFormatPart: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.HttpURLConnection$TunnelState tunnelState()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendVersion(java.lang.StringBuilder,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Collections$SynchronizedCollection: void clear()>-><reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber: void clear()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String)>
<sun.net.www.MessageHeader: void print(java.io.PrintStream)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.IdentityHashMap$Values: java.lang.Object[] toArray()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validate(org.apache.shiro.session.Session,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.sql.SQLException$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.ResolvableType: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>-><java.net.InetSocketAddress: int checkPort(int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<reactor.core.publisher.FluxIterable$IterableSubscription: void slowPath(long)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>-><sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>
<org.owasp.encoder.Encode: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String)>-><org.owasp.encoder.Encode$Buffer: java.lang.String encode(org.owasp.encoder.Encoder,java.lang.String,int)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><cc.mrbird.febs.job.entity.JobLog: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<sun.rmi.transport.proxy.HttpSendInputStream: int read()>-><sun.net.www.MeteredStream: int read()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<io.netty.util.concurrent.FastThreadLocal: void removeFromVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: boolean remove(java.lang.Object)>
<org.jsoup.helper.ChangeNotifyingArrayList: void clear()>-><org.jsoup.nodes.Element$NodeList: void onContentsChanged()>
<sun.net.www.http.KeepAliveStream: void close()>-><sun.net.www.http.KeepAliveCleanerEntry: void <init>(sun.net.www.http.KeepAliveStream,sun.net.www.http.HttpClient)>
<sun.net.www.protocol.http.HttpURLConnection: void sendCONNECTRequest()>-><sun.net.www.MessageHeader: void setIfNotSet(java.lang.String,java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getNewKeys()>-><java.util.HashSet: void <init>()>
<java.net.Proxy: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Vector$Itr: java.lang.Object next()>
<sun.net.ProgressSource: void updateProgress(long,long)>-><sun.net.ProgressSource: boolean connected()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><sun.net.www.protocol.http.HttpURLConnection$6: java.lang.Object run()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: boolean access$300(sun.net.www.protocol.http.HttpURLConnection,java.lang.String,int,java.net.URL)>-><sun.net.www.protocol.http.HttpURLConnection: boolean followRedirect0(java.lang.String,int,java.net.URL)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.jar.Attributes: int size()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void appendCollection(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.zip.CheckedOutputStream: void write(byte[],int,int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(byte[],int,int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.security.ProtectionDomain: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.net.URL: int getDefaultPort()>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.HttpConnectSocketImpl: java.net.InetAddress getInetAddress()>
<sun.net.NetworkClient$1: java.lang.Void run()>-><java.lang.Integer: int intValue()>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: java.nio.Buffer mark()>
<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(java.lang.Object,org.springframework.expression.AccessException)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<java.util.Collections$SynchronizedCollection: java.util.Spliterator spliterator()>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Spliterator spliterator()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.net.URLConnection: java.lang.String typeToPackageName(java.lang.String)>-><java.lang.String: void <init>(char[])>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><ch.qos.logback.classic.Logger: void trace(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><java.nio.CharBuffer: int hashCode()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><springfox.documentation.service.Representation: java.lang.String toString()>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.net.Socket: java.io.InputStream getInputStream()>
<org.crazycake.shiro.RedisSessionDAO: void delSessionFromThreadLocal(java.io.Serializable)>-><java.util.Collections$UnmodifiableMap: java.lang.Object remove(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>-><java.net.SocketInputStream: int read(byte[],int,int)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void advance()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void ascend()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.apache.shiro.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<redis.clients.jedis.Response: java.lang.String toString()>-><redis.clients.jedis.BuilderFactory$5: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<java.lang.ProcessEnvironment$StringEntrySet: void clear()>-><java.util.HashMap$EntrySet: void clear()>
<freemarker.template.TemplateException: void renderMessages()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.core.io.buffer.LimitedDataBufferList: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptySet: void forEach(java.util.function.Consumer)>
<org.apache.shiro.session.mgt.DefaultSessionManager: java.util.Collection getActiveSessions()>-><org.apache.shiro.session.mgt.eis.MemorySessionDAO: java.util.Collection getActiveSessions()>
<freemarker.core.Environment: java.lang.String getCurrentRecoveredErrorMessage()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: void setProxiedClient(java.net.URL,java.lang.String,int,boolean)>-><sun.net.www.protocol.https.HttpsClient: void afterConnect()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.context.support.StaticMessageSource: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHeaderField(int)>-><sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.util.context.Context0: java.lang.String toString()>
<org.crazycake.shiro.common.WorkAloneRedisManager: void del(byte[])>-><redis.clients.jedis.BinaryJedis: java.lang.Long del(byte[])>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.NegotiateAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.io.ObjectInputStream$PeekInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><java.lang.StringBuilder: void <init>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void plainConnect0()>-><java.net.URI: java.lang.String getScheme()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: org.apache.shiro.session.mgt.SessionValidationScheduler createSessionValidationScheduler()>-><org.slf4j.helpers.SubstituteLogger: void debug(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<freemarker.core.Environment: java.lang.String getCurrentRecoveredErrorMessage()>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.Objects: int hashCode(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<org.crazycake.shiro.RedisSessionDAO: void setSessionToThreadLocal(java.io.Serializable,org.apache.shiro.session.Session)>-><java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<java.io.InputStream: int read(byte[],int,int)>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getSessionIdCookieValue(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<java.io.DataInputStream: byte readByte()>-><org.apache.poi.util.ReplacingInputStream: int read()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getAuth(java.lang.String,java.net.URL)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><sun.net.www.http.KeepAliveKey: int hashCode()>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><redis.clients.jedis.Response: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: sun.net.www.http.HttpClient New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.protocol.http.HttpURLConnection: void setTunnelState(sun.net.www.protocol.http.HttpURLConnection$TunnelState)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: void <init>()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<net.sf.ehcache.management.ResourceClassLoader: java.lang.Class findClass(java.lang.String)>-><java.io.InputStream: void close()>
<sun.net.www.http.HttpClient: java.lang.String getProxyHostUsed()>-><java.net.InetSocketAddress: java.lang.String getHostString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.slf4j.helpers.SubstituteLogger: boolean isDebugEnabled()>
<com.sun.beans.WildcardTypeImpl: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>-><sun.net.www.protocol.http.AuthenticationHeader: sun.net.www.HeaderParser headerParser()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Object,java.lang.Object)>-><com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.util.ResourceLeakDetector$TraceRecord: java.lang.String toString()>
<javax.management.MBeanServerDelegate: javax.management.MBeanNotificationInfo[] getNotificationInfo()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.net.URLConnection: java.net.ContentHandler getContentHandler()>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><java.sql.SQLException$1: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<sun.net.ProgressSource: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.io.InputStream getInputStream()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.rmi.transport.ObjectEndpoint: java.lang.String toString()>
<java.security.DigestOutputStream: void write(int)>-><sun.net.www.http.ChunkedOutputStream: void write(int)>
<sun.nio.cs.StreamDecoder: int readBytes()>-><org.apache.poi.util.ReplacingInputStream: int read(byte[],int,int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: int size()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] toArray()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.util.MultiValueMapAdapter: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$Node: void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>-><java.util.concurrent.ConcurrentSkipListMap$Node: boolean casNext(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>
<javax.servlet.ServletRequestWrapper: void removeAttribute(java.lang.String)>-><javax.servlet.ServletRequestWrapper: void removeAttribute(java.lang.String)>
<sun.net.www.http.KeepAliveCache: void removeVector(sun.net.www.http.KeepAliveKey)>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>
<java.io.PrintStream: void newLine()>-><org.apache.catalina.connector.CoyoteOutputStream: void flush()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.net.HttpConnectSocketImpl: java.net.Socket privilegedDoTunnel(java.lang.String,int)>-><java.net.HttpConnectSocketImpl$2: void <init>(java.net.HttpConnectSocketImpl,java.lang.String,int)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<freemarker.template.utility.StringUtil: java.lang.String tryToString(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.util.FileCopyUtils: void close(java.io.Closeable)>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.util.Set valuesFrom(javax.management.Descriptor,java.lang.String,javax.management.openmbean.OpenType)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler: void run()>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.font.EAttribute: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<javax.security.auth.Subject$SecureSet: void clear()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.JavaType refineSerializationType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.net.Socket: void setReuseAddress(boolean)>-><java.net.HttpConnectSocketImpl: void setOption(int,java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.Collections$EmptyMap: java.util.Set entrySet()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.https.HttpsClient: int getProxyPortUsed()>
<javax.servlet.http.HttpServletRequestWrapper: java.lang.String getContextPath()>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getContextPath()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.Collections$SynchronizedMap: java.util.Set keySet()>
<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>-><sun.net.www.http.ChunkedOutputStream: void flush(boolean)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>-><sun.net.www.http.HttpClient: int getDefaultPort(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.beans.FeatureDescriptor: java.lang.String toString()>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<sun.net.www.protocol.http.NegotiateAuthentication: boolean isSupported(sun.net.www.protocol.http.HttpCallerInfo)>-><java.lang.Thread: java.lang.Thread currentThread()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><redis.clients.jedis.Response: java.lang.String toString()>
<java.net.URLConnection: java.net.ContentHandler getContentHandler()>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.DigestAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String,java.net.PasswordAuthentication,sun.net.www.protocol.http.DigestAuthentication$Parameters)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<org.springframework.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>-><org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.springframework.data.redis.connection.stream.StreamRecords$MapBackedRecord: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.ManagedMap: java.lang.Object merge(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<freemarker.core.Environment: java.lang.String getCurrentRecoveredErrorMessage()>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getServerAuth(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>-><org.apache.poi.xssf.streaming.SXSSFSheet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getRootPath(java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String)>-><sun.net.ProgressSource: void <init>(java.net.URL,java.lang.String,long)>
<sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void checkError()>-><sun.net.www.http.ChunkedOutputStream: boolean checkError()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><springfox.documentation.service.Response: java.lang.String toString()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<net.sf.ehcache.transaction.local.LocalTransactionStore: boolean replace(net.sf.ehcache.Element,net.sf.ehcache.Element,net.sf.ehcache.store.ElementValueComparator)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: net.sf.ehcache.transaction.TransactionID getTransactionId()>
<freemarker.ext.beans.BeanModel: boolean isEmpty()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><org.slf4j.helpers.NOPLogger: boolean isDebugEnabled()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onInvalidation(org.apache.shiro.session.Session,org.apache.shiro.session.InvalidSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>
<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.lang.String: boolean equals(java.lang.Object)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><freemarker.ext.beans.PrimtiveArrayBackedReadOnlyList: int size()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.lang.Object[] toArray()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><springfox.documentation.service.Response: java.lang.String toString()>
<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>-><sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPutIfAbsent(java.lang.Object,java.lang.Object,int)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<io.micrometer.core.instrument.binder.logging.LogbackMetrics$1: void onReset(ch.qos.logback.classic.LoggerContext)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<redis.clients.jedis.BinaryJedis: redis.clients.jedis.ScanResult scan(byte[],redis.clients.jedis.ScanParams)>-><redis.clients.jedis.Connection: java.util.List getObjectMultiBulkReply()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read()>-><org.apache.poi.util.ReplacingInputStream: int read()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<freemarker.ext.beans.BeanModel: java.lang.String toString()>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.SubList: java.lang.Object get(int)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.springframework.web.context.request.ServletRequestAttributes: java.lang.String toString()>
<io.micrometer.core.instrument.binder.logging.LogbackMetrics$1: void onReset(ch.qos.logback.classic.LoggerContext)>-><java.util.HashMap: java.util.Collection values()>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>-><sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListMap: int cpr(java.util.Comparator,java.lang.Object,java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int compareTo(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>-><sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getReferencedSessionId(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.thymeleaf.standard.expression.RestrictedRequestAccessUtils$RestrictedRequestWrapper: java.lang.String getParameter(java.lang.String)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><sun.net.www.protocol.http.HttpURLConnection$12: java.lang.Object run()>
<sun.net.www.MessageHeader: void <init>()>-><java.lang.Object: void <init>()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1: java.util.Iterator iterator()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: int size()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>-><java.io.PrintStream: void write(byte[],int,int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.String: java.lang.String trim()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void validateSessions()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.io.SequenceInputStream: int available()>-><sun.net.www.MeteredStream: int available()>
<redis.clients.jedis.BinaryJedis: byte[] get(byte[])>-><redis.clients.jedis.BinaryClient: void get(byte[])>
<sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection: sun.net.www.http.HttpClient getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)>-><sun.net.www.protocol.https.DelegateHttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: long timeBeforeTimeout()>-><java.lang.Math: long max(long,long)>
<org.apache.catalina.connector.OutputBuffer: void doFlush(boolean)>-><org.apache.catalina.connector.ClientAbortException: void <init>(java.lang.Throwable)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<sun.net.NetworkClient: void openServer(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><net.sf.ehcache.transaction.TransactionIDImpl: int hashCode()>
<java.io.FilterOutputStream: void close()>-><sun.net.www.http.PosterOutputStream: void close()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.BasicAuthentication: void <init>(boolean,java.lang.String,int,java.lang.String,java.lang.String)>-><sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<org.apache.logging.log4j.message.ParameterFormatter: void appendCollection(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.SubList$1: boolean hasNext()>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><sun.net.www.http.HttpClient: void closeServer()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.data.util.Pair: java.lang.String toString()>
<org.crazycake.shiro.common.WorkAloneRedisManager: java.util.Set keys(byte[])>-><redis.clients.jedis.ScanParams: redis.clients.jedis.ScanParams count(java.lang.Integer)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$EmptyMap: boolean isEmpty()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: int size()>
<sun.rmi.transport.proxy.HttpSendOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<java.net.URLConnection: java.net.ContentHandler lookupContentHandlerClassFor(java.lang.String)>-><java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.util.stream.AbstractPipeline: java.util.stream.Sink wrapSink(java.util.stream.Sink)>-><java.util.stream.ReferencePipeline$11: java.util.stream.Sink opWrapSink(int,java.util.stream.Sink)>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><java.io.ObjectStreamField: int compareTo(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<freemarker.template.Template: java.lang.String getSource(int,int,int,int)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read(byte[],int,int)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<redis.clients.jedis.BinaryJedis: java.lang.Long del(byte[])>-><redis.clients.jedis.Connection: java.lang.Long getIntegerReply()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber: int size()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String computeDigest(boolean,java.lang.String,char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<sun.net.www.ParseUtil: void appendEncoded(java.lang.StringBuffer,char)>-><java.nio.HeapByteBuffer: byte get()>
<freemarker.ext.beans.StringModel: java.lang.String getAsString()>-><sun.net.www.http.HttpClient: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<sun.nio.cs.StreamEncoder: void implClose()>-><sun.net.www.http.ChunkedOutputStream: void close()>
<org.apache.shiro.session.mgt.DefaultSessionManager: void delete(org.apache.shiro.session.Session)>-><org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap: java.util.Set entrySet()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<java.io.PrintStream: void close()>-><sun.net.www.http.PosterOutputStream: void close()>
<org.crazycake.shiro.RedisSessionDAO: java.util.Collection getActiveSessions()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: int size()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.springframework.web.util.pattern.CaptureVariablePathElement: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.nio.CharBuffer: java.lang.String toString()>
<sun.net.www.http.HttpClient: void logFinest(java.lang.String)>-><sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<org.owasp.encoder.XMLEncoder: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.lang.Object[] toArray()>
<org.apache.tomcat.util.http.parser.MediaTypeCache: java.lang.String[] parse(java.lang.String)>-><org.apache.tomcat.util.collections.ConcurrentCache: java.lang.Object get(java.lang.Object)>
<java.io.PrintStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<java.util.TreeMap$Entry: int hashCode()>-><org.apache.shiro.subject.SimplePrincipalCollection: int hashCode()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<java.io.PrintStream: boolean checkError()>-><sun.net.www.http.ChunkedOutputStream: boolean checkError()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.io.ObjectInputStream$PeekInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Hashtable$KeySet: void clear()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getServerAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: boolean isTrustedSite(java.net.URL)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream: int read()>-><sun.net.www.http.ChunkedInputStream: int read()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>-><sun.net.www.http.HttpCaptureInputStream: void close()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.StringBuilder: void <init>()>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><java.io.InputStream: void close()>
<org.springframework.http.HttpHeaders: java.lang.String formatHeaders(org.springframework.util.MultiValueMap)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>-><sun.net.www.http.KeepAliveKey: void <init>(java.net.URL,java.lang.Object)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.session.mgt.AbstractValidatingSessionManager: void onExpiration(org.apache.shiro.session.Session,org.apache.shiro.session.ExpiredSessionException,org.apache.shiro.session.mgt.SessionKey)>-><org.apache.shiro.session.mgt.DefaultSessionManager: void afterExpired(org.apache.shiro.session.Session)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.TransactionIDImpl: java.lang.String toString()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.core.OrderComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><freemarker.ext.beans.HashAdapter$1$1: boolean hasNext()>
<sun.net.NetworkClient: void <init>()>-><java.lang.Object: void <init>()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.ImmutableMap$1: java.lang.Object next()>
<java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<redis.clients.jedis.util.RedisOutputStream: void flush()>-><sun.net.www.http.ChunkedOutputStream: void flush()>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setOpaque(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<reactor.core.publisher.Operators: void onNextDropped(java.lang.Object,reactor.util.context.Context)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.MessageHeader mapToMessageHeader(java.util.Map)>-><sun.net.www.MessageHeader: void prepend(java.lang.String,java.lang.String)>
<java.util.AbstractCollection: void clear()>-><freemarker.ext.beans.CollectionAdapter: java.util.Iterator iterator()>
<org.apache.shiro.util.MapContext: java.lang.Object getTypedValue(java.lang.String,java.lang.Class)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.net.www.protocol.http.HttpURLConnection$5: java.lang.Object run()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><com.google.common.collect.Synchronized$SynchronizedTable: int hashCode()>
<sun.net.www.protocol.http.DigestAuthentication: java.lang.String encode(java.lang.String,char[],java.security.MessageDigest)>-><java.security.MessageDigest: byte[] digest()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.quartz.utils.Key: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.apache.commons.collections.FastHashMap$CollectionView: void clear()>-><org.apache.commons.collections.FastHashMap$EntrySet: java.util.Collection get(java.util.Map)>
<org.crazycake.shiro.RedisSessionDAO: void delete(org.apache.shiro.session.Session)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.SubList: java.util.Iterator iterator()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.owasp.encoder.CDATAEncoder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><springfox.documentation.service.ResponseMessage: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Iterator entryIterator()>-><java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>
<java.net.URLConnection: java.net.ContentHandler getContentHandler()>-><java.net.URLConnection: java.lang.String stripOffParameters(java.lang.String)>
<java.util.stream.Streams$StreamBuilderImpl: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.MeteredStream: long skip(long)>-><java.io.FilterInputStream: long skip(long)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<com.google.common.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>-><com.fasterxml.jackson.databind.type.ClassKey: int compareTo(java.lang.Object)>
<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>-><java.io.InputStream: void reset()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.lang.String toString()>
<com.fasterxml.classmate.ResolvedType: java.lang.StringBuilder _appendClassDescription(java.lang.StringBuilder)>-><java.lang.Class: java.lang.String getName()>
<java.text.AttributeEntry: int hashCode()>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String calculatePath(javax.servlet.http.HttpServletRequest)>-><org.apache.shiro.util.StringUtils: boolean hasText(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: void setRequestMethod(java.lang.String)>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<net.sf.ehcache.transaction.AbstractSoftLockManager: java.util.Set getNewKeys()>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<sun.net.www.MessageHeader: void mergeHeader(java.io.InputStream)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalPut(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.TreeMap$KeySet: int size()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<java.io.DataInputStream: char readChar()>-><sun.net.www.protocol.http.EmptyInputStream: int read()>
<java.net.HttpConnectSocketImpl$2: void <init>(java.net.HttpConnectSocketImpl,java.lang.String,int)>-><java.lang.Object: void <init>()>
<redis.clients.jedis.BuilderFactory$6: java.util.List build(java.lang.Object)>-><java.util.SubList: int size()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<java.net.SocketImpl: java.lang.String toString()>-><java.net.HttpConnectSocketImpl: int getPort()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnectInternal()>-><sun.net.www.http.HttpClient: void closeServer()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo resetProxyAuthentication(sun.net.www.protocol.http.AuthenticationInfo,sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<sun.net.NetworkClient: java.net.Socket doConnect(java.lang.String,int)>-><java.net.Socket: void connect(java.net.SocketAddress)>
<com.fasterxml.classmate.types.ResolvedPrimitiveType: java.lang.StringBuilder appendBriefDescription(java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<net.sf.ehcache.util.LargeCollection: void <init>()>-><java.util.AbstractCollection: void <init>()>
<java.io.DataInputStream: short readShort()>-><sun.net.www.MeteredStream: int read()>
<java.util.zip.CheckedOutputStream: void write(byte[],int,int)>-><org.apache.catalina.connector.CoyoteOutputStream: void write(byte[],int,int)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.core.BooleanLiteral: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.util.StreamUtils: int copy(java.io.InputStream,java.io.OutputStream)>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<sun.net.www.protocol.http.HttpURLConnection: java.net.SocketPermission URLtoSocketPermission(java.net.URL)>-><java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<freemarker.template.DefaultObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><com.google.common.collect.RegularImmutableMap$Values: int size()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><sun.net.www.http.HttpCaptureOutputStream: void write(int)>
<org.apache.catalina.connector.OutputBuffer: void flushByteBuffer()>-><java.nio.HeapByteBuffer: java.nio.ByteBuffer slice()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.https.HttpsClient: void <init>(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)>-><sun.net.www.http.HttpClient: void openServer()>
<org.apache.tomcat.util.http.parser.MediaType: org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)>-><org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.owasp.encoder.Encode$Buffer: void <init>()>-><java.lang.Object: void <init>()>
<sun.net.www.http.KeepAliveStreamCleaner: void run()>-><sun.net.www.http.HttpClient: void finished()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<sun.net.www.MessageHeader: void <init>()>-><sun.net.www.MessageHeader: void grow()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void reset()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.OffsetDateTime: java.lang.String toString()>
<sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>-><java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>
<sun.net.www.protocol.https.HttpsClient: void checkURLSpoofing(javax.net.ssl.HostnameVerifier)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.MessageHeader: java.util.Iterator multiValueIterator(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><freemarker.ext.beans.NonPrimitiveArrayBackedReadOnlyList: int size()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>
<java.util.zip.InflaterInputStream: void close()>-><sun.net.www.MeteredStream: void close()>
<java.util.Spliterators$IteratorSpliterator: java.util.Spliterator trySplit()>-><net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String)>-><org.springframework.context.support.StaticApplicationContext: void assertBeanFactoryActive()>
<sun.net.www.http.KeepAliveCache: void run()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<freemarker.ext.beans.HashAdapter$1$1$1: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<java.util.SubList: boolean addAll(int,java.util.Collection)>-><java.util.SubList: int size()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.Proxy: java.net.Proxy$Type type()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<sun.net.www.protocol.https.DelegateHttpsURLConnection: void dispose()>-><java.lang.Object: void finalize()>
<org.apache.catalina.connector.OutputBuffer: void write(byte[],int,int)>-><org.apache.catalina.connector.OutputBuffer: void writeBytes(byte[],int,int)>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<java.net.URLConnection: java.net.ContentHandler getContentHandler()>-><java.net.UnknownServiceException: void <init>(java.lang.String)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><freemarker.ext.beans.HashAdapter$1$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.encoder.XMLCommentEncoder: java.lang.String toString()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.MessageHeader: void remove(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<java.util.LinkedList$ListItr: void add(java.lang.Object)>-><java.util.LinkedList: void linkBefore(java.lang.Object,java.util.LinkedList$Node)>
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getDescription(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.Arrays$ArrayList: java.lang.Object[] toArray()>
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>-><net.sf.ehcache.transaction.local.LocalTransactionContext: boolean equals(java.lang.Object)>
<org.apache.catalina.connector.Response: void setHeader(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.NegotiateAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<java.io.FilterInputStream: long skip(long)>-><sun.net.www.MeteredStream: long skip(long)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalReplace(java.lang.Object,java.lang.Object,java.lang.Object,net.sf.ehcache.util.concurrent.ConcurrentHashMap$RemovalCallback)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<redis.clients.jedis.JedisSentinelPool: void returnResource(redis.clients.jedis.Jedis)>-><redis.clients.jedis.BinaryJedis: void resetState()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<net.sf.ehcache.transaction.local.LocalTransactionContext: void registerSoftLock(java.lang.String,net.sf.ehcache.transaction.local.LocalTransactionStore,net.sf.ehcache.transaction.SoftLock)>-><com.google.common.collect.ImmutableCollection: boolean add(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: boolean equals(java.lang.Object)>
<freemarker.core._ErrorDescriptionBuilder: java.lang.String toString(java.lang.Object,boolean)>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><reactor.core.publisher.Operators$EmptySubscription: boolean isEmpty()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.shiro.subject.SimplePrincipalCollection: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>-><net.sf.ehcache.util.concurrent.ConcurrentHashMap$CHMView: java.lang.Object[] toArray()>
<sun.net.www.MeteredStream: int read()>-><java.io.PushbackInputStream: int read()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>-><sun.net.www.protocol.http.HttpURLConnection$9: java.lang.Object run()>
<cc.mrbird.febs.system.controller.LoginController: void <init>(cc.mrbird.febs.system.service.IUserService,cc.mrbird.febs.common.service.ValidateCodeService,cc.mrbird.febs.monitor.service.ILoginLogService,cc.mrbird.febs.common.properties.FebsProperties)>-><synthetic.method.SingletonFactory: cc.mrbird.febs.common.properties.FebsProperties getFebsProperties()>
<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>-><java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>
<freemarker.template.TemplateException: void printStackTrace(freemarker.template.TemplateException$StackTraceWriter,boolean,boolean,boolean)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<java.net.URLPermission: java.util.List normalizeHeaders(java.lang.String)>-><java.util.ArrayList: void <init>()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.Collections$1: boolean hasNext()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>-><java.util.EnumMap$EntrySet: java.lang.Object[] toArray()>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue mergeIfRequired(org.springframework.beans.PropertyValue,org.springframework.beans.PropertyValue)>-><org.springframework.beans.factory.support.ManagedMap: boolean isMergeEnabled()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.thymeleaf.exceptions.TemplateProcessingException: java.lang.String getMessage()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationInfo: sun.net.www.protocol.http.AuthenticationInfo getProxyAuth(java.lang.String,int)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void onNext(java.lang.Object)>-><reactor.core.publisher.FluxSkipWhile$SkipWhileSubscriber: void onError(java.lang.Throwable)>
<sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String)>-><sun.net.www.HeaderParser: java.lang.String findValue(java.lang.String,java.lang.String)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><freemarker.ext.beans.HashAdapter: int size()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.owasp.encoder.URIEncoder: java.lang.String toString()>
<redis.clients.jedis.BinaryJedis: java.lang.String set(byte[],byte[])>-><redis.clients.jedis.BinaryJedis: void checkIsInMultiOrPipeline()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.io.Serializable getReferencedSessionId(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>-><org.apache.shiro.web.session.mgt.DefaultWebSessionManager: java.lang.String getSessionIdName()>
<org.crazycake.shiro.RedisSessionDAO: org.apache.shiro.session.Session getSessionFromThreadLocal(java.io.Serializable)>-><org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getHostAndPort(java.net.URL)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.util.Properties$LineReader: int readLine()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[])>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>-><sun.net.www.MeteredStream: int available()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.apache.shiro.authc.SimpleAuthenticationInfo: java.lang.String toString()>
<sun.net.www.protocol.http.AuthenticationHeader: void parse(java.util.Set)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: void setPreemptiveProxyAuthentication(sun.net.www.MessageHeader)>-><sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.springframework.web.util.pattern.PathPattern: int hashCode()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>-><java.lang.String: boolean endsWith(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<springfox.documentation.service.Response: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.io.FilterInputStream: int read(byte[])>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.LinkedList$ListItr: void add(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><net.sf.ehcache.transaction.xa.XATransactionContext: java.lang.String toString()>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void next(java.lang.Object)>-><java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>-><java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node hiNode(java.util.Comparator)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.apache.shiro.authc.SimpleAuthenticationInfo: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication$Parameters: java.lang.String getCnonce()>-><sun.net.www.protocol.http.DigestAuthentication$Parameters: void setNewCnonce()>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><freemarker.ext.beans.HashAdapter$1$1$1: java.lang.Object getKey()>
<sun.net.www.protocol.http.AuthCacheImpl: sun.net.www.protocol.http.AuthCacheValue get(java.lang.String,java.lang.String)>-><java.util.SubList$1: java.lang.Object next()>
<org.apache.commons.collections.FastHashMap$CollectionView: void clear()>-><java.util.LinkedHashMap$LinkedValues: void clear()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.apache.commons.collections.FastHashMap$CollectionView: void clear()>
<sun.net.www.protocol.http.HttpURLConnection: void writeRequests()>-><sun.net.www.protocol.http.HttpURLConnection: boolean checkSetHost()>
<org.apache.shiro.session.mgt.DefaultSessionManager: org.apache.shiro.session.Session retrieveSession(org.apache.shiro.session.mgt.SessionKey)>-><java.lang.StringBuilder: void <init>()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><com.google.common.collect.IndexedImmutableSet: java.util.Iterator iterator()>
<sun.net.www.http.ChunkedInputStream: int read(byte[],int,int)>-><sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><org.apache.http.pool.RouteSpecificPool: java.lang.String toString()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String readValue(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object[])>
<sun.rmi.transport.proxy.HttpSendInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.net.Socket: void <init>(java.net.Proxy)>-><java.net.PlainSocketImpl: void <init>()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.net.HostPortrange: void <init>(java.lang.String,java.lang.String)>-><java.lang.String: int indexOf(int)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>-><java.nio.CharBuffer: int compareTo(java.lang.Object)>
<sun.net.www.protocol.http.DigestAuthentication: boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection,sun.net.www.HeaderParser,java.lang.String)>-><java.lang.Character: char toUpperCase(char)>
<sun.net.www.protocol.http.HttpCallerInfo: void <init>(java.net.URL)>-><java.net.URL: java.lang.String getProtocol()>
<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.TypedValue createNewInstance(org.springframework.expression.spel.ExpressionState)>-><net.sf.ehcache.writer.CacheWriterManagerException: java.lang.Throwable getCause()>
<org.apache.shiro.web.servlet.SimpleCookie: java.lang.String buildHeaderValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,boolean,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><com.google.common.collect.NaturalOrdering: java.lang.String toString()>
<sun.net.www.protocol.http.AuthCacheImpl: void remove(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>-><sun.reflect.Reflection: java.lang.Class getCallerClass()>
<ch.qos.logback.core.joran.action.IncludeAction: void close(java.io.InputStream)>-><sun.net.www.MeteredStream: void close()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>-><java.net.SocketInputStream: int read(byte[],int,int)>
<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>-><java.net.URL: java.lang.String getPath()>
<org.apache.shiro.session.mgt.AbstractNativeSessionManager: void notifyExpiration(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.AbstractNativeSessionManager: org.apache.shiro.session.Session beforeInvalidNotification(org.apache.shiro.session.Session)>
<io.netty.util.internal.RecyclableArrayList: void checkNullElements(java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><springfox.documentation.service.ResponseMessage: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySet: java.util.Iterator iterator()>
<org.apache.shiro.web.servlet.SimpleCookie: void appendSameSite(java.lang.StringBuilder,org.apache.shiro.web.servlet.Cookie$SameSiteOptions)>-><java.lang.Enum: java.lang.String toString()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><com.zaxxer.hikari.pool.PoolEntry: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>-><springfox.documentation.service.Representation: boolean equals(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.net.www.http.ChunkedInputStream: void processRaw()>-><java.lang.Math: int min(int,int)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.net.URI: java.lang.String getScheme()>
<sun.net.www.protocol.http.AuthCacheImpl: void put(java.lang.String,sun.net.www.protocol.http.AuthCacheValue)>-><java.util.ArrayList$SubList$1: void add(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><java.sql.Date: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Synchronized$SynchronizedTable: boolean equals(java.lang.Object)>
<java.net.HttpConnectSocketImpl: void connect(java.net.SocketAddress,int)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.shiro.util.ClassUtils: java.lang.Class forName(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.encoder.CSSEncoder: java.lang.String toString()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.apache.commons.collections.FastHashMap: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: void disconnect()>-><sun.net.www.http.HttpClient: void setDoNotRetry(boolean)>
<net.sf.ehcache.util.concurrent.ConcurrentHashMap: java.lang.Object internalGet(java.lang.Object)>-><org.apache.shiro.subject.SimplePrincipalCollection: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><springfox.documentation.service.Representation: int hashCode()>
<sun.net.www.MeteredStream: void close()>-><java.io.BufferedInputStream: void close()>
<sun.rmi.transport.proxy.HttpSendOutputStream: void write(int)>-><sun.net.www.protocol.http.HttpURLConnection$StreamingOutputStream: void write(int)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><freemarker.template.Template: java.lang.String toString()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<sun.net.www.MeteredStream: void close()>-><sun.net.www.MeteredStream: void close()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.apache.shiro.session.mgt.SimpleSession: java.lang.String toString()>
<java.util.jar.Manifest$FastInputStream: void fill()>-><sun.net.www.http.HttpCaptureInputStream: int read(byte[],int,int)>
<sun.net.www.MeteredStream: int available()>-><java.io.ObjectInputStream: int available()>
<org.apache.logging.log4j.message.ParameterFormatter: void appendCollection(java.lang.Object,java.lang.StringBuilder,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<reactor.core.publisher.Operators: void onDiscardQueueWithClear(java.util.Queue,reactor.util.context.Context,java.util.function.Function)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object poll()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<redis.clients.jedis.util.RedisOutputStream: void flush()>-><sun.net.www.http.HttpCaptureOutputStream: void flush()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<java.util.Collections$SetFromMap: boolean isEmpty()>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<sun.net.www.MeteredStream: int read(byte[],int,int)>-><java.util.zip.ZipFile$ZipFileInputStream: int read(byte[],int,int)>
<sun.net.www.HeaderParser: sun.net.www.HeaderParser subsequence(int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.apache.shiro.authc.UsernamePasswordToken: java.lang.String toString()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<sun.rmi.transport.proxy.HttpSendOutputStream: void write(int)>-><sun.net.www.http.PosterOutputStream: void write(int)>
<java.util.Vector$VectorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><java.lang.Object: java.lang.Class getClass()>
<org.apache.shiro.session.mgt.SimpleSession: void validate()>-><org.apache.shiro.session.mgt.SimpleSession: boolean isTimedOut()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.util.LinkedCaseInsensitiveMap$Values: java.util.Iterator iterator()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<sun.net.www.ParseUtil: void appendFragment(java.lang.StringBuffer,java.lang.String)>-><sun.net.www.ParseUtil: java.lang.String quote(java.lang.String,long,long)>
<java.text.AttributeEntry: int hashCode()>-><org.apache.shiro.session.mgt.SimpleSession: int hashCode()>
<net.sf.ehcache.util.AggregateIterator: java.lang.Object next()>-><reactor.core.Scannable$Attr$3: java.lang.Object next()>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.net.www.protocol.https.HttpsURLConnectionImpl: java.lang.String toString()>
<java.util.Vector: boolean addAll(java.util.Collection)>-><java.util.LinkedList: java.lang.Object[] toArray()>
<redis.clients.jedis.JedisSentinelPool: void destroy()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><net.sf.ehcache.transaction.xa.EhcacheXAResourceImpl: java.lang.String toString()>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)>-><java.net.NetPermission: void <init>(java.lang.String)>
<java.util.Spliterators$IteratorSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$11$1: void accept(java.lang.Object)>
<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.String toString()>-><sun.misc.Signal: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.Formatter: java.lang.String toString()>-><java.nio.CharBuffer: java.lang.String toString()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<net.sf.ehcache.util.AggregateIterator: void <init>(java.util.Collection,java.util.List)>-><java.util.AbstractMap$2$1: java.lang.Object next()>
<sun.net.www.protocol.http.HttpURLConnection: java.lang.String filterHeaderField(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<sun.net.www.protocol.https.HttpsClient: void afterConnect()>-><sun.net.www.http.HttpClient: boolean isCachedConnection()>
<org.apache.shiro.subject.SimplePrincipalCollection: java.util.Set asSet()>-><java.util.LinkedHashSet: void <init>()>
<com.google.common.collect.ImmutableMapEntrySet: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><org.owasp.encoder.XMLEncoder: java.lang.String toString()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><springfox.documentation.service.Representation: int hashCode()>
<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.protocol.http.AuthenticationInfo getHttpProxyAuthentication(sun.net.www.protocol.http.AuthenticationHeader)>-><sun.net.www.protocol.http.AuthenticationHeader: boolean isPresent()>
<reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: java.lang.Object poll()>-><reactor.core.Exceptions: java.lang.RuntimeException propagate(java.lang.Throwable)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><net.sf.ehcache.transaction.TransactionIDImpl: boolean equals(java.lang.Object)>
<reactor.core.publisher.Operators: boolean terminate(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: void cancel()>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<sun.net.www.MeteredStream: void finalize()>-><sun.net.www.http.KeepAliveStream: void close()>
<sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream0()>-><sun.net.www.protocol.http.AuthenticationHeader: void <init>(java.lang.String,sun.net.www.MessageHeader,sun.net.www.protocol.http.HttpCallerInfo,boolean,java.util.Set)>
<org.crazycake.shiro.RedisSessionDAO: void removeExpiredSessionInMemory()>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: void remove()>
<sun.net.www.http.HttpCaptureOutputStream: void write(int)>-><java.security.DigestOutputStream: void write(int)>
<java.util.ArrayList$SubList: void add(int,java.lang.Object)>-><java.util.ArrayList$SubList: void checkForComodification()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.web.filter.GenericFilterBean: void afterPropertiesSet()>
<org.springframework.core.CollectionFactory$1: java.lang.String getProperty(java.lang.String)>-><sun.net.ProgressSource: java.lang.String toString()>
<org.apache.shiro.session.SessionException: void <init>(java.lang.Throwable)>-><org.apache.shiro.ShiroException: void <init>(java.lang.Throwable)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.apache.shiro.session.mgt.SimpleSession: boolean equals(java.lang.Object)>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySet: java.util.Iterator iterator()>
<freemarker.ext.beans.ResourceBundleModel: java.lang.Object exec(java.util.List)>-><org.owasp.encoder.JavaScriptEncoder: java.lang.String toString()>
<java.util.Properties$LineReader: int readLine()>-><sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.apache.shiro.subject.SimplePrincipalCollection: java.util.Iterator iterator()>
<java.util.Spliterators$IteratorSpliterator: void forEachRemaining(java.util.function.Consumer)>-><reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber: int size()>
<org.crazycake.shiro.RedisSessionDAO: void saveSession(org.apache.shiro.session.Session)>-><org.apache.shiro.session.mgt.SimpleSession: java.io.Serializable getId()>
<org.dom4j.tree.BackedList: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>-><sun.net.www.protocol.http.Negotiator: void finest(java.lang.Exception)>
<sun.net.www.MessageHeader: java.util.Map filterAndAddHeaders(java.lang.String[],java.util.Map)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.apache.catalina.connector.OutputBuffer: void toWriteMode(java.nio.Buffer)>-><java.nio.Buffer: int capacity()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashSet: java.util.Iterator iterator()>
